{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to My Notebook","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"#mermaid-test-diagram","title":"Mermaid Test Diagram","text":"<pre><code>graph LR\n  A[Start] --&gt; B{Error?};\n  B --&gt;|Yes| C[Hmm...];\n  C --&gt; D[Debug];\n  D --&gt; B;\n  B ----&gt;|No| E[Yay!];</code></pre>"},{"location":"Databases/neo4j/","title":"Graph DB : Neo4j","text":"<ul> <li>Entity : noun : are nodes</li> <li>Relationships : verb : vertices</li> <li>Properties : to describe both noun and relationship<ul> <li>Adjectives : about noun : about nodes</li> <li>Adverbs : about verb : about relationship</li> </ul> </li> <li>Variables are temporary : just there to store value</li> </ul>"},{"location":"Databases/neo4j/#creating-nodes","title":"Creating Nodes","text":"<pre><code># to find all nodes and return them\nmatch(n) return n\n\n# create node with variable\ncreate (n:Person)\nreturn n\n\ncreate (n:Employee)\nreturn n\n\ncreate (anne :Person:Employee:Footballer)\nreturn anne\n\n# create node with variable n and property [name, age, email]\ncreate (n{name:\"Peter\", age:25, &lt;email:\"p@gmail.com&gt;\"})\nreturn n\n\n# create node with variable n and label Person and property [name, age, email]\ncreate (n:Person{name:\"Anne\", age:20})\nreturn n\n\ncreate (n:Dancer{name:\"Li\", age:22})\nreturn n\n\n# multiple labels\ncreate (n:Dancer:Supplier{name:\"Li\", age:22})\nreturn n\n\n# creating relationships\ncreate (n:Supplier{name:'A'}), (m:Client{name:'B'}),\n(n)-[:Supplied]-&gt;(m)\nreturn n, m\n\ncreate (n:Supplier{name:'A'})-[r:Supplied]-&gt; (m:Client{name:'B'})\nreturn m,n,r\n\ncreate (n:Supplier{name:'A'})-[r:Supplied]-&gt; (:Client{name:'B'})\nreturn *\n\n# string named relationship\ncreate (a{name:'Andrew'})&lt;-[:`the forgotten friend of`]-(m{name:'Mike'})\nreturn *\n\ncreate (a:Person{name:'Andrew'})&lt;-[:`the forgotten friend of`]-(m:Person{name:'Mike'})\nreturn *\n\ncreate\n(d:Person{name:\"Dan\"}), (c:Vehicle{name:\"Car\"}), (a:Person{name:\"Andrew\"}), (e:Person{name:\"Eric\"}),\n(dog:Animal{name:\"Dog\"}), (l:Location{name:\"AB Street\"}), (crime:Crime{title:\"Killing of a dog\"}),\n(d)-[:Party_to]-&gt;(crime)&lt;-[:Involved_in]-(c), (a)-[:Party_to]-&gt;(crime)&lt;-[:Investigated_by]-(e),\n(dog)-[:Victim_of]-&gt;(crime)&lt;-[:Occurred_at]-(l), (dog)-[:Killed_at]-&gt;(l)\nreturn *\n\ncreate\n(D:Person{name:'Dan'}), (K:Person{name:'Kate'}), (M:Person{name:'Mike'}), (L:Person{name:'Luke'}),\n(S:Person{name:'Steve'}), (F:Person{name:'Favour'}), (faith:Person{name:'Faith'}), (J:Person{name:'Jane'}),\n(D)-[:MARRIED_TO]-&gt;(K)-[:MARRIED]-&gt;(D), (D)-[:PARENT_OF]-&gt;(M)&lt;-[:PARENT_OF]-(K),\n(D)-[:PARENT_OF]-&gt;(L)&lt;-[:PARENT_OF]-(K), (D)-[:PARENT_OF]-&gt;(S)&lt;-[:PARENT_OF]-(K),\n(F)-[:MARRIED_TO]-&gt;(S)-[:MARRIED]-&gt;(F), (F)-[:PARENT_OF]-&gt;(faith)&lt;-[:PARENT_OF]-(S),\n(F)-[:PARENT_OF]-&gt;(J)&lt;-[:PARENT_OF]-(S)\nRETURN *\n\n# create node from another node\ncreate (a{name:'A', city:'New York'})\n\nmatch(a{name:'A'})\ncreate(n{name:'B', city:a.city})\nreturn n.city\n\n# copy relationship property\ncreate\n(a{name:'A'}), (b{name:'B'}), (c{name:'C'}), (a)-[r:KNOWS{since:'2016'}]-&gt;(b)\nreturn *\n\nmatch(a{name:'A'})-[r]-&gt;(b{name:'B'})\ncreate (b)&lt;-[r2:KNOWS{since:r.since}]-(c{name:'c'})\nreturn properties(r2)\n</code></pre>"},{"location":"Databases/neo4j/#matching-nodes","title":"Matching Nodes","text":"<pre><code># to match all nodes\nmatch(n) return n\n\n# match labels\nmatch(n:Person) return n\nmatch(n:Property) return n\n\n# to find all nodes with label\nmatch(p{name:'Steve'})--(n) return *\n\n# match with nodes of another label\nmatch(n{name:\"Robert Zemeckis\"})--(m:Movie)\nreturn *\n\n# match with nodes with incoming relation\nmatch(polar{title:\"The Polar Express\"})&lt;--(k)\nreturn *\n</code></pre>"},{"location":"Databases/neo4j/#return-clause","title":"Return Clause","text":"<pre><code># to return name property of all nodes\nmatch (n) return n.name\n\n# to return multiple properties\nmatch (n) return n.name, n.born\n\n# just like SQL \" select name, 'Actors' \", appends new column to each row\nmatch (n) return n.name, 'Actors'\n\n# simple math operations, as Calculator means the result title will be 'Calculator'\nreturn 6*6 as Calculator\n\n# to return all relationship btw nodes\nmatch(n)-[r]-(m)\nreturn r\n\n# to return type of relationship btw node\nmatch(n)-[r]-(m)\nreturn type(r)\n\n# to find relation btw 2 nodes\nmatch(n{name:\"Frank Darabont\"})-[r]-&gt;(m{title:\"The Green Mile\"})\nreturn r\n\n# to return relationship properties\nmatch(n)-[r]-(m)\nreturn r.roles\n\n# to find specific relationship\nmatch(n)-[r:DIRECTED]-(m)\nreturn r\n\n# to find type of specific relationship\nmatch(n)-[r:DIRECTED]-(m)\nreturn type(r)\n\n# to return with alias\nmatch(n) return n.name AS NAME, n.born\n\n# to find nodes\nmatch(n)\nreturn distinct n.born\norder by n.born ASC\n\n# to return properties\nmatch (n)\nreturn properties(n)\n\n# for specific proporties\nmatch (n{name:\"Tom Hanks\"})\nreturn properties(n)\n\n# return properties of relationship\nmatch (n{name:\"Tom Hanks\"})-[r]-&gt;()\nreturn properties(r)\n\nmatch()-[r]-&gt;()\nreturn properties(r)\n\nmatch()-[r]-&gt;()\nreturn *\n\n# return all labels\ncreate(n:Person:Actor:Director:Producer{name:'Victor'})\n\nmatch(n{name:\"Victor\"})\nreturn labels(n)\n\n# return distant relationship\nmatch p = ({name:\"Paul Blythe\"})--&gt;()--&gt;()--&gt;()\nreturn p\n\nmatch p = ({name:\"Paul Blythe\"})--&gt;()--&gt;()--&gt;({title:\"Cloud Atlas\"})\nreturn relationships(p)\n</code></pre>"},{"location":"Databases/redis/","title":"Redis","text":""},{"location":"Databases/redis/#setup","title":"Setup","text":""},{"location":"Databases/redis/#docker","title":"Docker","text":"<pre><code># pull the image from docker hub\n$ docker run --name redis-learn -p 6370:6370 -d redis \n\n# connect to container and redis shell\n$ docker exec -it redis-learn redis-cli\n</code></pre>"},{"location":"Databases/redis/#to-benchmark","title":"To benchmark","text":"<pre><code>docker exec -it redis-learn redis-benchmark -n 1000 -d 10000\n# -d for bytes of data\n\nredis-benchmark -n 1000 -d 10000\n</code></pre>"},{"location":"Databases/redis/#to-set-max-memory-limit","title":"To set max memory limit","text":"<pre><code>&gt; config set maxmemory 128M\n</code></pre>"},{"location":"Databases/redis/#set-get-value","title":"Set &amp; Get value","text":"<ul> <li>set key value</li> <li>get key value</li> <li>check whether key exists, returns integer</li> <li>0 - false | 1 - true</li> </ul> <pre><code>&gt; set name \"uday\"\nOK\n\n&gt; get name\n\"uday\"\n\n&gt; exists name\n(integer) 1\n</code></pre>"},{"location":"Databases/redis/#key-related-ops","title":"Key related ops","text":"<ul> <li>Get all keys</li> <li>Delete all keys ( sync | async )</li> </ul> <pre><code>&gt; keys *\n1) \"name\"\n\n&gt; flushall \n# options : async|sync\nOK\n</code></pre>"},{"location":"Databases/redis/#set-key-with-expiry-time","title":"Set key with expiry time","text":"<pre><code># After 5 seconds, this  key will be deleted\n&gt; set key \"value\" EX [expiry time in seconds]\n&gt; get key\n&gt; exists key\n\n# expire after X seconds\n&gt; set key \"value\"\n&gt; get key\n&gt; expire key X\n\n# to check time remaining \n&gt; ttl key\n\n# Another way, to expire after 10 seconds\n&gt; setex key 10 \"value\"\n</code></pre>"},{"location":"Databases/redis/#delete-key","title":"Delete Key","text":"<pre><code>&gt; del name\n(integer) 1\n</code></pre>"},{"location":"Databases/redis/#set-get-multiple-values","title":"Set &amp; Get multiple values","text":"<pre><code>&gt; mset first \"uday\" last \"yadav\"\n\n&gt; mget first last\n1) \"uday\"\n2) \"yadav\"\n</code></pre>"},{"location":"Databases/redis/#miscellaneous","title":"Miscellaneous","text":"<pre><code>&gt; set name \"uday yadav\"\n\n# Specifies the range : from 0th char to 3rd char\n&gt; getrange name 0 3\n\"uda\"\n&gt; strlen name\n10\n\n# Append to key\n&gt; set name \"uday\"\n&gt; append name \" yadav\"\n&gt; get name\n\"uday yadav\"\n</code></pre>"},{"location":"Databases/redis/#maths-operations","title":"Maths operations","text":"<pre><code>&gt; set count 1\n\n&gt; incr count\n(integer) 2\n\n&gt; incrby count 10\n(integer) 12\n\n&gt; decr count \n(integer) 11\n\n&gt; decrby count 2\n(integer) 9\n\n&gt; set pi 3.14\n&gt; incrbyfloat pi 0.1\n\"3.24\"\n</code></pre>"},{"location":"Databases/redis/#lists-in-redis","title":"Lists in Redis","text":"<pre><code># lpush adds value infront\n&gt; lpush country india\n&gt; lpush country USA\n&gt; lpush country UK\n\n# get the element at index, start from 0\n&gt; lindex country 2\n\n# to add values to the bottom\n&gt; rpush country Australia\n\n# to get all values in list\n&gt; lrange country 0 -1\n1) \"UK\"\n2) \"USA\"\n3) \"india\"\n4) \"Australia\"\n\n# to get first 2 values\n&gt; lrange country 0 1\n\n# get list length\n&gt; llen country\n\n# use lpop and rpop to remove the data from top and bottom\n# and it returns the element\n&gt; lpop country\n&gt; rpop country\n\n# to change a key's value\n&gt; lset country 0 germany\n\n# to insert values before and after \n&gt; linsert country before \"germany\" \"new zealand\"\n&gt; linsert country after \"germany\" \"UAE\"\n\n# use lpushx and rpushx to add key to list only if it exists\n# else returns 0\n</code></pre>"},{"location":"Databases/redis/#sorting-list","title":"Sorting List","text":"<pre><code># Alpha is needed only for strings, nothing for integers\n&gt; sort country ALPHA\n&gt; sort country desc ALPHA\n</code></pre>"},{"location":"Databases/redis/#sets-in-redis","title":"Sets in Redis","text":"<pre><code>&gt; sadd tech golang\n(integer) 1\n\n# when you do it again\n&gt; sadd tech golang\n(integer) 0\n\n&gt; sadd tech postgis python aws\n&gt; sadd tech1 aws python mysql nodejs\n\n# to see all members\n&gt; smembers tech\n\n# to get the length of set\n&gt; scard tech\n\n# to search the set\n&gt; sismember tech aws\n1\n\n# to get the diff between to sets\n&gt; sdiff tech tech1\n\n# to store the difference btw 2 sets to a new set \n&gt; sdiffstore tech tech1 [more set]\n\n# to check intersection\n&gt; sinter tech tech1\n</code></pre>"},{"location":"Databases/redis/#sorted-set-redis","title":"Sorted Set Redis","text":"<pre><code># add key values\n&gt; zadd users 10 uday \n&gt; zadd users 5 uday1 8 uday2\n\n# to get all users\n&gt; zrange users 0 -1\n&gt; zrange users 0 -1 withscores\n# in reverse order\n&gt; zrevrange users 0 -1\n\n# to get the length of the string\n&gt; zcard users\n3\n\n# to get key's value over a range\n&gt; zcount users 0 2\n\n# to remove member\n&gt; zrem users uday\n</code></pre>"},{"location":"Databases/redis/#hashes-in-redis","title":"Hashes in Redis","text":"<pre><code># add keys to a set\n&gt; hset myhash name uday\n&gt; hset myhash email dev117uday@gmail.com\n\n# get all keys from hashset\n&gt; hkeys myhash\n\n# to get all values\n&gt; hvals myhash\n\n# get value\n&gt; hget myhash name\n\n# to check for keys \n&gt; hexists myhash name\n\n# check the length    \n&gt; hlen myhash\n\n# to set multiple values at once\n&gt; hmset myhash country india phone_no 9810039759 age 24\n\n# to get multiple values\n&gt; hmget myhash country name email\n\n# increment some value\n&gt; hincrby myhash age 2\n\n# to delete key from set\n&gt; hdel myhash age\n\n# to avoid over writting the values\n&gt; hsetnx myhash name Uday\n</code></pre>"},{"location":"Databases/redis/#transaction","title":"Transaction","text":"<pre><code># to go in transaction mode\n&gt; multi\n(TX)&gt; set key1 uday\n(TX)&gt; set key2 yadav\n(TX)&gt; set key3 dev117uday\n(TX)&gt; exec\n1) OK\n2) OK\n3) OK\n\n# to discard transaction\ndiscard\n</code></pre> <p>Pub/Sub</p> <pre><code># To listen to a channel\n&gt; subscribe my-chat\n\n# To publish to a channel\n&gt; publish my-chat \"hello world\"\n\n# to subscribe to channel with patterns in name\n&gt; psubscribe chats*\n&gt; psubscribe h?llo\n</code></pre> <ul> <li>If no one is sub to the channel you specify in publish, it returns 0</li> </ul>"},{"location":"Databases/redis/#geospatial-data","title":"GeoSpatial Data","text":"<pre><code># add geo spatial data in long : lat\n&gt; GEOADD maps 77.216721 28.644800 delhi\n&gt; GEOADD maps 72.877426 19.076090 mumbai\n\n# data is tored in sorted set data structure\n&gt; zrange maps 0 -1\n1) \"mumbai\"\n2) \"delhi\"\n\n# to get the geohash of city\n&gt; GEOHASH maps delhi\n1) \"ttnfvnes010\"\n\n# to get long:lat\n&gt; GEOPOS maps delhi\n1) 1) \"77.21672326326370239\"\n   2) \"28.64479890853065314\"\n\n# to get distance, in meter (default)\n&gt; GEODIST maps delhi mumbai\n\"1151873.1929\"\n\n&gt; GEODIST maps delhi mumbai km\n\"1151.8732\"\n\n# within distance\n\n&gt; GEORADIUS maps 77.216721 28.644800 2000 km\n1) \"delhi\"\n2) \"mumbai\n\n&gt; GEORADIUS maps 77.216721 28.644800 2000 km withcoord\n1) 1) \"delhi\"\n   2) 1) \"77.21672326326370239\"\n      2) \"28.64479890853065314\"\n2) 1) \"mumbai\"\n   2) 1) \"72.87742406129837036\"\n      2) \"19.07608965708350723\"\n\n&gt; GEORADIUS maps 77.216721 28.644800 2000 km withcoord withdist\n1) 1) \"delhi\"\n   2) \"0.0003\"\n   3) 1) \"77.21672326326370239\"\n      2) \"28.64479890853065314\"\n2) 1) \"mumbai\"\n   2) \"1151.8732\"\n   3) 1) \"72.87742406129837036\"\n      2) \"19.07608965708350723\"\n\n&gt; GEORADIUSBYMEMBER maps delhi 1300 km\n1) \"delhi\"\n2) \"mumbai\"\n\n&gt; GEORADIUSBYMEMBER maps delhi 1300 km withcoord withdist desc|asc\n1) 1) \"mumbai\"\n   2) \"1151.8732\"\n   3) 1) \"72.87742406129837036\"\n      2) \"19.07608965708350723\"\n2) 1) \"delhi\"\n   2) \"0.0000\"\n   3) 1) \"77.21672326326370239\"\n      2) \"28.64479890853065314\"\n</code></pre>"},{"location":"Databases/cassandra/","title":"Cassandra","text":""},{"location":"Databases/cassandra/#setup-docker","title":"Setup : Docker","text":"<pre><code>docker run --name Node_X -d scylladb/scylla:4.5.0 --overprovisioned 1 --smp 1\n\ndocker run --name Node_Y -d scylladb/scylla:4.5.0  \\ \n    --seeds=\"$(docker inspect --format='{{ .NetworkSettings.IPAddress }}' Node_X)\" \\\n    --overprovisioned 1 --smp 1\n\ndocker run --name Node_Z -d scylladb/scylla:4.5.0 \\ \n    --seeds=\"$(docker inspect --format='{{ .NetworkSettings.IPAddress }}' Node_X)\" \\ \n    --overprovisioned 1 --smp 1\n</code></pre> <p>Scylla runs nodes in a hash ring. All nodes are equal:</p> <ul> <li>there are no master</li> <li>slave</li> <li>replica sets.</li> </ul>"},{"location":"Databases/cassandra/#replication-factor","title":"Replication Factor","text":"<p>The Replication Factor (RF) is equivalent to the number of nodes where data (rows and partitions) are replicated. Data is replicated to multiple (RF=N) nodes. An RF of one means there is only one copy of a row in a cluster, and there is no way to recover the data if the node is compromised or goes down. RF=2 means that there are two copies of a row in a cluster. An RF of at least three is used in most systems</p>"},{"location":"Databases/cassandra/#consistency-level","title":"Consistency Level","text":"<p>The Consistency Level (CL) determines how many replicas in a cluster must acknowledge a read or write operation before it is considered successful.</p> <p>Some of the most common Consistency Levels used are:</p> <ul> <li><code>ANY</code> \u2013 A write must be written to at least one replica in the cluster. A read waits for a response from at least one replica. It provides the highest availability with the lowest consistency.</li> <li><code>QUORUM</code> \u2013 When a majority of the replicas respond, the request is honored. If RF=3, then 2 replicas respond. QUORUM can be calculated using the formula (n/2 +1) where n is the Replication Factor.</li> <li><code>ONE</code> \u2013 If one replica responds; the request is honored.</li> <li><code>LOCAL_ONE</code> \u2013 At least one replica in the local data center responds.</li> <li><code>LOCAL_QUORUM</code> \u2013 A quorum of replicas in the local datacenter responds.</li> <li><code>EACH_QUORUM</code> \u2013 (unsupported for reads) \u2013 A quorum of replicas in ALL datacenters must be written to.</li> <li><code>ALL</code> \u2013 A write must be written to all replicas in the cluster, a read waits for a response from all replicas. Provides the lowest availability with the highest consistency.</li> </ul>"},{"location":"Databases/cassandra/#sharding-in-scylla-db","title":"Sharding in Scylla DB","text":"<p>Each Scylla node consists of several independent shards, which contain their share of the node\u2019s total data. Scylla creates a one shard per core (technically, one shard per hyperthread, meaning some physical cores may have two or more virtual cores). Each shard operates on a shared-nothing architecture basis. This means each shard is assigned its RAM and its storage, manages its schedulers for the CPU and I/O, performs its compaction (more about compaction later on), and maintains its multi-queue network connection. Each shard runs as a single thread, and communicates asynchronously with its peers, without locking.</p>"},{"location":"Databases/cassandra/#other-important-concepts","title":"Other Important Concepts","text":""},{"location":"Databases/cassandra/#partition-key","title":"Partition Key","text":"<p>A Partition Key is one or more columns that are responsible for data distribution across the nodes. It determines in which nodes to store a given row. As we will see later on, typically, data is replicated, and copies are stored on multiple nodes. This means that even if one node goes down, the data will still be available. It ensures reliability and fault tolerance</p>"},{"location":"Databases/cassandra/#node","title":"Node","text":"<p>A Node is a unit of storage in Scylla. It is comprised of the Scylla database server software running on a computer server \u2014 a physical machine \u2014 and all its subsystems (CPUs, memory, storage, network interfaces and so on), or, in a visualized environment, a subset of a server\u2019s resources assigned to a container.</p>"},{"location":"Databases/cassandra/#cluster","title":"Cluster","text":"<p>A minimum Cluster typically consists of at least 3 nodes. Data is replicated across the cluster, depending on the Replication Factor</p>"},{"location":"Databases/cassandra/#table","title":"Table","text":"<p>A Table is how Scylla stores data and can be thought of as a set of rows and columns.</p>"},{"location":"Databases/cassandra/#keyspace","title":"Keyspace","text":"<p>A Keyspace is a collection of tables with attributes that define how data is replicated on nodes. It defines several options that apply to all the tables it contains, most prominently of which is the replication strategy used by the Keyspace. </p>"},{"location":"Databases/cassandra/#cql","title":"CQL","text":"<p>A query language for interacting with the Scylla (or Cassandra) database.</p>"},{"location":"Databases/cassandra/#partition-key_1","title":"Partition Key","text":"<p>One or more columns that are responsible for data distribution across the nodes. It determines in which nodes to store a given row</p> <p></p>"},{"location":"Databases/cassandra/#cql-shell","title":"CQL Shell","text":"<p>A command-line interface for interacting with Scylla through the Cassandra Query Language (CQL)</p>"},{"location":"Databases/cassandra/#replication","title":"Replication","text":"<p>The process of replicating data across Nodes in a Cluster.</p>"},{"location":"Databases/cassandra/#consistency-level_1","title":"Consistency Level","text":"<p>A configurable setting which dictates how many replicas in a Cluster must acknowledge read or write operations.</p>"},{"location":"Databases/cassandra/#tunable-consistency","title":"Tunable Consistency","text":"<p>The possibility for unique, per-query, Consistency Level settings. These are incremental and override fixed database settings intended to enforce data consistency. </p>"},{"location":"Databases/cassandra/#replication-factor_1","title":"Replication Factor","text":"<p>The total number of replica Nodes across a given Cluster. A Replication Factor of 1 means that the data will only exist on a single Node in the Cluster and this setup will not have any fault tolerance. </p>"},{"location":"Databases/cassandra/#cap-theorem","title":"CAP Theorem","text":"<p>The CAP Theorem is a concept that states that a distributed database system can only have 2 of the 3: Consistency, Availability, and Partition Tolerance.</p>"},{"location":"Databases/cassandra/#token-ranges","title":"Token Ranges","text":"<p>Each node in a ring is assigned a range. The hash function computes a token for a given partition key. The hash function determines the placement of the data in the cluster.</p> <p>Without using Vnodes or virtual nodes, each node could only support one token range. By using vnodes, each node can support multiple, non-contiguous token ranges. By doing this, we can think of each physical node as hosting many virtual nodes. By default, each node has 256 virtual nodes.</p>"},{"location":"Databases/cassandra/#gossips","title":"Gossips","text":"<p>For nodes to exchange information with each other. Gossip is decentralized, and there is no single point of failure. It\u2019s used for peer node discovery and metadata propagation. Gossip communication occurs periodically.</p> <p>Replication Strategy</p> <p>Simple Strategy \u2013 Places the first replica on the node selected by the partitioner. Remaining replicas are placed in the clockwise direction on the node ring. This replication strategy should not be used in production environments. </p> <p>Network Topology Strategy \u2013 Places replicas in a clockwise direction in the ring until it reaches the first node of a different rack. This is used for clusters deployed across multiple data centers. Using this strategy allows you to define the number of replicas for each DC</p>"},{"location":"Databases/cassandra/#cluster-level-readwrite-interaction","title":"Cluster Level Read/Write Interaction","text":"<p>So what happens when data is read or written at the cluster level? Note that what happens at the node level will be explained in another lesson.</p> <p>Since each node is equal in Scylla, any node can receive a read/write request. These are the main steps in the process:</p> <p></p> <ol> <li>A client connects to a Scylla node using CQL shell and performs a CQL request</li> <li>The node the client connected to is now designated as the Coordinator Node. The Coordinator Node, based on hashing the data, using the partition key and on the Replication Strategy, sends the request to the applicable nodes. Inter-node messages are sent through a messaging queue in an asynchronous way.</li> <li>The Consistency Level determines the number of nodes the coordinator needs to hear back from, in order for the request to be successful.</li> <li>The client is notified if the request was successful.</li> </ol>"},{"location":"Databases/cassandra/#core-principles-of-cassandra","title":"Core Principles of Cassandra","text":"<p>The database is designed around several core principles:</p> <ul> <li>High Scalability \u2013 the system must scale both horizontally (adding more nodes) as well as vertically (make optimal use of modern multi-core, multi-CPU node architectures, and high-capacity storage devices).</li> <li>High Availability \u2013 the system should have low latency and remain highly accessible for operations even if one or more nodes are in a failure state, or if there is a network failure.</li> <li>High performance \u2013 the system should run as close to the hardware as possible to deliver low and consistent latency as well as very high throughput.</li> <li>Low Maintenance \u2013 the system should include ease-of-use features, such as autonomous capabilities and automated facilities, for example, the ability to intelligently configure itself and tune its performance.</li> </ul>"},{"location":"Databases/cassandra/#replication-strategy","title":"Replication Strategy","text":"<ul> <li>SimpleStrategy </li> </ul> <ul> <li>NetworkTopologyStrategy</li> </ul>"},{"location":"Databases/cassandra/cassandra-administration/","title":"Cassandra Administration","text":""},{"location":"Databases/cassandra/cassandra-administration/#cassandra-ports","title":"Cassandra Ports","text":"<p>Nodetool has 2 types of commands </p> <ul> <li>Informative</li> <li>Management</li> </ul> <p>Cassandra Stress:</p> <pre><code>cassandra-stress write no-warmup n=100000\n</code></pre>"},{"location":"Databases/cassandra/cassandra-features/","title":"Cassandra Features","text":"<ul> <li>User defined Data Type : https://university.scylladb.com/courses/data-modeling/lessons/advanced-data-modeling/topic/user-defined-types-udt/</li> <li>Denormalization : https://university.scylladb.com/courses/data-modeling/lessons/advanced-data-modeling/topic/denormalization/</li> </ul>"},{"location":"Databases/cassandra/cassandra-features/#time-to-live","title":"Time to Live","text":"<p>more info : https://university.scylladb.com/courses/data-modeling/lessons/advanced-data-modeling/topic/expiring-data-with-ttl-time-to-live/</p> <p>Can be set when </p> <ul> <li>When defining table</li> <li>insert or update operation</li> </ul> <p>Example : Insert and Update operations</p> <pre><code>CREATE TABLE heartrate (\n    pet_chip_id  uuid,\n    name text,\n    heart_rate int,\n    PRIMARY KEY (pet_chip_id)\n);\n\nINSERT INTO heartrate(pet_chip_id, name, heart_rate) \nVALUES (123e4567-e89b-12d3-a456-426655440b23, 'Duke', 90);\n\n-- check for ttl of heart rate\nSELECT name, TTL(heart_rate)\nFROM heartrate WHERE  pet_chip_id = 123e4567-e89b-12d3-a456-426655440b23;\n\n-- set ttl for heart rate\nUPDATE heartrate USING TTL 600 SET heart_rate =\n110 WHERE pet_chip_id = 123e4567-e89b-12d3-a456-426655440b23;\n\n-- for the entire row\nINSERT INTO heartrate(pet_chip_id, name, heart_rate) \nVALUES (c63e71f0-936e-11ea-bb37-0242ac130002, 'Rocky', 87) USING TTL 30;\n</code></pre> <p>Example : For Table</p> <pre><code>CREATE TABLE heartrate_ttl (\n    pet_chip_id  uuid,\n    name text,\n    heart_rate int,\n    PRIMARY KEY (pet_chip_id))\nWITH default_time_to_live = 500;\n</code></pre>"},{"location":"Databases/cassandra/cassandra-features/#counter","title":"Counter","text":"<p>more info : https://university.scylladb.com/courses/data-modeling/lessons/advanced-data-modeling/topic/counters/</p> <p>It\u2019s a special data type (column) that only allows its value to be incremented, decremented, read or deleted. As a type, counters are a 64-bit signed integer. Updates to counters are atomic, making them perfect for counting and avoiding the issue of possible concurrent updates on the same value.</p> <p>Counters can only be defined in a dedicated table that includes:</p> <ul> <li>The primary key (can be compound)</li> <li>The counter column</li> </ul> <pre><code>CREATE TABLE pet_type_count (\n    pet_type text PRIMARY KEY, \n    pet_counter counter\n);\n</code></pre> <p>Loading data to a counter table is different than other tables, it\u2019s done with an UPDATE operation</p> <pre><code>UPDATE pet_type_count SET pet_counter = pet_counter + 6 \nWHERE pet_type = 'dog';\n</code></pre>"},{"location":"Databases/cassandra/cql/","title":"CQL","text":""},{"location":"Databases/cassandra/cql/#create-keyspace","title":"Create KeySpace","text":"<p>( same as db in SQL )</p> <pre><code>CREATE KEYSPACE mykeyspace WITH REPLICATION = { \n        'class' : 'NetworkTopologyStrategy', \n        'replication_factor' : 3\n};\n\nuse mykeyspace;\n\nDESCRIBE mykeyspace;\n\nCREATE TABLE users ( \n    user_id int, \n    fname text, \n    lname text, \n    PRIMARY KEY((user_id))\n); \n</code></pre>"},{"location":"Databases/cassandra/cql/#create-table-insert-data","title":"Create Table &amp; Insert Data","text":"<pre><code>CREATE TABLE users ( \n    user_id int, \n    fname text, \n    lname text, \n    PRIMARY KEY((user_id))\n); \n\ninsert into users(user_id, fname, lname) values (1, 'rick', 'sanchez'); \ninsert into users(user_id, fname, lname) values (4, 'rust', 'cohle'); \n\nselect * from users;\n\nCONSISTENCY QUORUM | ALL\n</code></pre>"},{"location":"Databases/cassandra/cql/#more-queries","title":"More Queries","text":"<pre><code>SELECT * from \n    heartrate_v1 \nWHERE \n    pet_chip_id = 123e4567-e89b-12d3-a456-426655440b23;\n\nDELETE FROM \n    heartrate_v1 \nWHERE \n    pet_chip_id = 123e4567-e89b-12d3-a456-426655440b23;\n</code></pre> <p>All inserts in Scylla DB (and Cassandra) are actually upserts (insert/update). There can be only one set of values for each unique primary key. If we insert again with the same primary key, the values will be updated.</p>"},{"location":"Databases/cassandra/cql/#data-modelling","title":"Data Modelling","text":"<p>https://docs.scylladb.com/stable/cql/types.html</p>"},{"location":"Databases/cassandra/cql/#map","title":"Map","text":"<pre><code>CREATE TABLE pets_v1 (\n    pet_chip_id text PRIMARY KEY,\n    pet_name text,\n    favorite_things map&lt;text, text&gt; // A map of text keys, and text values\n);\n\nINSERT INTO pets_v1 (pet_chip_id, pet_name, favorite_things)\n           VALUES ('123e4567-e89b-12d3-a456-426655440b23', \n           'Rocky', { 'food' : 'Turkey', 'toy' : 'Tennis Ball' });\n</code></pre>"},{"location":"Databases/cassandra/cql/#set","title":"Set","text":"<pre><code>CREATE TABLE pets_v2 (\n    pet_name text PRIMARY KEY,\n    address text,\n    vaccinations set&lt;text&gt; \n);\n</code></pre> <pre><code>INSERT INTO pets_v2 (pet_name, address, vaccinations)\n            VALUES ('Rocky', '11 Columbia ave, New York NY', \n            { 'Heartworm', 'Canine Hepatitis' });\n</code></pre>"},{"location":"Databases/cassandra/cql/#list","title":"List","text":"<pre><code>CREATE TABLE pets_v3 (\n    pet_name text PRIMARY KEY,\n    address text,\n    vaccinations list&lt;text&gt;\n);\n\nINSERT INTO pets_v3 (pet_name, address, vaccinations)\n            VALUES ('Rocky', '11 Columbia ave, New York NY',  \n            ['Heartworm', 'Canine Hepatitis', 'Heartworm']);\n</code></pre>"},{"location":"Databases/cassandra/data-modelling/","title":"Data Modelling","text":"<p>In Scylla, as opposed to relational databases, the data model is based around the queries and not just around the domain entities. When creating the data model, we take into account both the conceptual data model and the application workflow: which queries will be performed by which users and how often.</p> 1 Query-based: Application -&gt; Data -&gt; Model Entity-based: Data -&gt; Model -&gt; Application 4 Denormalization Support for foreign-keys, Joins 5 CAP Theorem, Eventual Consistency ACID Guarantee 6 Distributed Architecture Mostly single point of failure"},{"location":"Databases/cassandra/data-modelling/#things-to-keep-in-mind-when-design-tables","title":"Things to keep in mind when design Tables","text":"<ul> <li>Even data distribution: data should be evenly spread across the cluster so that every node holds roughly the same amount of data. Scylla determines which node should store the data based on hashing the partition key. Therefore, choosing a suitable partition key is crucial. More on this later on.</li> <li>To minimize the number of partitions accessed in a read query: To make reads faster, we\u2019d ideally have all the data required in a read query stored in a single Table. Although it\u2019s fine to duplicate data across tables, in terms of performance, it\u2019s better if the data needed for a read query is in one table.</li> </ul>"},{"location":"Databases/cassandra/data-modelling/#things-we-should-not-focus-on","title":"Things we should NOT focus on:","text":"<ul> <li>Avoiding data duplication: To get efficient reads, we sometimes have to duplicate data. </li> <li>Minimizing the number of writes: writes in Scylla DB aren\u2019t free, but they are very efficient and \u201ccheap.\u201d Scylla DB is optimized for high write throughput. Reads, while still very fast, are usually more expensive than writes and are harder to fine-tune. </li> <li>We\u2019d usually be ready to increase the number of writes to increase read efficiency. Keep in mind that the number of tables also affects consistency. </li> </ul>"},{"location":"Databases/cassandra/data-modelling/#important","title":"Important","text":"<ul> <li>ScyllaDB data modeling is query-based. That is, we think of the application workflow and the queries early on in the data model process</li> <li>A Keyspace is a top-level container that stores tables</li> <li>A Table is how ScyllaDB stores data and can be thought of as a set of rows and columns</li> <li>The Primary Key is composed of the Partition Key and Clustering Key</li> <li>One of our goals in data modeling is even data distribution. For that, we need to select a partition key correctly</li> <li>Selecting the Primary Key is very important and has a huge impact on query performance</li> </ul>"},{"location":"Databases/cassandra/data-modelling/#partition-and-clustering-keys","title":"Partition and Clustering Keys","text":"<p><code>composite primary key = partition key + clustering key</code></p> <p>The Partition Key is responsible for data distribution across the nodes. It determines which node will store a given row. It can be one or more columns. Without this, query wont execute</p> <p>The Clustering Key is responsible for sorting the rows within the partition. It can be zero or more column</p> <p>To query without the partition key, cluster would have to perform full scan which is super expensive.</p>"},{"location":"Databases/cassandra/data-modelling/#example","title":"Example:","text":"<pre><code>CREATE TABLE heartrate_v1 (\n   pet_chip_id uuid,\n   time timestamp,\n   heart_rate int,\n   PRIMARY KEY (pet_chip_id)\n);\n\nINSERT INTO heartrate_v1(pet_chip_id, time, heart_rate) \nVALUES (123e4567-e89b-12d3-a456-426655440b23, '2019-03-04 07:02:30', 130);\n</code></pre> <p>To run this query : (wont work)</p> <pre><code>SELECT * from heartrate_v1 \nWHERE pet_chip_id = 123e4567-e89b-12d3-a456-426655440b23 \n    AND time &gt;='2019-03-04 07:01:00' \n    AND time &lt;='2019-03-04 07:02:00';\n</code></pre> <p>we partition and clustering key</p> <pre><code>CREATE TABLE heartrate_v2 (\n   pet_chip_id uuid,\n   time timestamp,\n   heart_rate int,\n   PRIMARY KEY (pet_chip_id, time)\n);\n\nINSERT INTO heartrate_v2(pet_chip_id, time, heart_rate)\n   VALUES (123e4567-e89b-12d3-a456-426655440b23, '2019-03-04 07:01:05', 100); \nINSERT INTO heartrate_v2(pet_chip_id, time, heart_rate) \n   VALUES (123e4567-e89b-12d3-a456-426655440b23, '2019-03-04 07:01:10', 90); \nINSERT INTO heartrate_v2(pet_chip_id, time, heart_rate) \n   VALUES (123e4567-e89b-12d3-a456-426655440b23, '2019-03-04 07:01:50', 96); \nINSERT INTO heartrate_v2(pet_chip_id, time, heart_rate) \n   VALUES (123e4567-e89b-12d3-a456-426655440b23, '2019-04-04 07:01:50', 99); \n\nSELECT * from heartrate_v2 \nWHERE pet_chip_id = 123e4567-e89b-12d3-a456-426655440b23 \n   AND time &gt;='2019-03-04 07:01:00' \n   AND time &lt;='2019-03-04 07:02:00';\n</code></pre> <p>This also eliminates the problem of storing just one value for a primary key. Partition Key can be more than one column.</p> <p>If we have multiple partition keys</p> <pre><code>CREATE TABLE heartrate_v3 (\n   pet_chip_id uuid,\n   time timestamp,\n   heart_rate int,\n   pet_name text,\n   PRIMARY KEY ((pet_chip_id, time), pet_name)\n);\n\nINSERT INTO heartrate_v3(pet_chip_id, time, heart_rate, pet_name) \nVALUES (123e4567-e89b-12d3-a456-426655440b23, '2019-03-04 07:01:10', 90, 'Duke'); \n</code></pre> <p>this query wont work, cuz we need both the partition keys</p> <pre><code>SELECT * from heartrate_v3 \nWHERE pet_chip_id = 123e4567-e89b-12d3-a456-426655440b23;\n</code></pre> <p>----------------------------</p> <p>it is possible to define (do this):</p> <pre><code>CREATE TABLE heartrate_v4 (\n   pet_chip_id uuid,\n   time timestamp,\n   heart_rate int,\n   pet_name text,\n   PRIMARY KEY (pet_chip_id, pet_name, heart_rate)\n);\n</code></pre> <ul> <li>If there is more than one column in the Clustering Key (pet_name and heart_rate in the example above), the order of these columns defines the clustering order. For a given partition, all the rows are physically ordered inside ScyllaDB by the clustering order. This order determines what select query you can efficiently run on this partition.</li> <li>In this example, the ordering is first by pet_name and then by heart_rate.</li> <li>In addition to the Partition Key columns, a query may include the Clustering Key. If it does include the Clustering Key columns they must be used in the same order as they were defined.</li> </ul> <p>It fails, as <code>pet_name</code> comes before <code>heart_rate</code> sin the clustering key.</p> <pre><code>SELECT * from heartrate_v4 \nWHERE pet_chip_id = 123e4567-e89b-12d3-a456-426655440b23 \nAND heart_rate = 100;\n</code></pre> <p>By default, sorting is based on the natural (ASC) order of the clustering columns.</p> <p>In order to get query in DESC order, we would need to define the table in the same way</p> <pre><code>CREATE TABLE heartrate_v5 (\n   pet_chip_id uuid,\n   time timestamp,\n   heart_rate int,\n   PRIMARY KEY (pet_chip_id, time)\n) WITH CLUSTERING ORDER BY (time DESC);\n</code></pre>"},{"location":"Databases/cassandra/data-modelling/#creating-partitions","title":"Creating Partitions","text":"<p>We don't need partitions size to grow too big, so we can break them by using composite partition key. For example </p> <pre><code>CREATE TABLE heartrate_v2 (\n    pet_chip_id  uuid,\n    date text,\n    time timestamp,\n    heart_rate int,\n    PRIMARY KEY ((pet_chip_id,date), time));\n</code></pre> <p>In this case, we would be able to query by pet_chip, for a given day, without having large partitions. The partition size will be limited by the day. Every day, a new partition will be created for each pet.</p>"},{"location":"Databases/cassandra/data-modelling/advance-data-modelling/","title":"Advance Data Modelling","text":"<p>In ScyllaDB (and Apache Cassandra), data is divided into partitions, rows, and values, which can be identified by a partition key. Sometimes the application needs to find a value by the value of another column. Doing this efficiently without scanning all of the partitions requires indexing</p> <p>There are three indexing options available in ScyllaDB: </p> <ul> <li>Materialized Views</li> <li>Global Secondary Indexes</li> <li>Local Secondary Indexes</li> </ul> <p>Materialized Views (MV) are a global index. When a new MV is declared, a new table is created and is distributed to the different nodes using the standard table distribution mechanisms. The new MV table can have a different primary key from the base table, allowing for faster searches on a different set of columns.</p> <p>Global Secondary Indexes (also called \u201cSecondary Indexes\u201d) are another mechanism in ScyllaDB which allows efficient searches on non-partition keys by creating an index. Rather than creating an index on the entire partition key, this index is created on specific columns.</p> <p>Local Secondary Indexes are an enhancement to Global Secondary Indexes, which allow ScyllaDB to optimize workloads where the partition key of the base table and the index are the same key. Like their global counterparts, Cassandra's local indexes are based on Materialized Views.</p>"},{"location":"Databases/cassandra/data-modelling/advance-data-modelling/#materialized-views","title":"Materialized Views","text":"<ul> <li>Materialized Views (MV) are a global index. When a new MV is declared, a new table is created and distributed to the different nodes using the standard table distribution mechanisms. It\u2019s scalable, just like normal tables. It is populated by a query running against the base table. It\u2019s not possible to directly update a MV; it\u2019s updated when the base table is updated.</li> <li> <p>Each Materialized View is a set of rows that correspond to rows present in the underlying, or base, table specified in the materialized view\u2019s SELECT statement.\\</p> </li> <li> <p>Reads from a Materialized View are just as fast as regular reads from a table and just as scalable. But as expected, updates to a table with Materialized Views are slower than regular updates since these updates need to update both the original table and the Materialized View and ensure the consistency of both updates. However, doing those in the application without server help would have been even slower.</p> </li> </ul> <p>Some common use cases for MV are Indexing with denormalization, different sort orders, and filtering (pre-computed queries).</p> <p>Example : </p> <pre><code>CREATE TABLE buildings (\n    name text,\n    city text,\n    built_year smallint,\n    height_meters smallint,\n    PRIMARY KEY (name)\n);\n\n-- materialized view\nCREATE MATERIALIZED VIEW building_by_city AS\n SELECT * FROM buildings\n WHERE city IS NOT NULL\n PRIMARY KEY(city, name);\n\n -- delete queries wont work\n DELETE FROM building_by_city WHERE city='Taipei';\n</code></pre> <p>Materialized Views and Indexes : https://university.scylladb.com/courses/data-modeling/lessons/materialized-views-secondary-indexes-and-filtering/topic/materialized-views-and-secondary-indexes-hands-on-updated/</p>"},{"location":"Databases/cassandra/data-modelling/advance-data-modelling/#global-secondary-indexes","title":"Global Secondary Indexes","text":"<p>Secondary indexes are created for one main purpose: to allow querying by a column that is not a key. CQL tables have strict schemas that define which columns form a primary key, and fundamentally we should use these keys to extract data from the database. But, in practice, we may want to occasionally query by a different, regular column, or several of them. How to achieve that? One of the ways is to create an index on that column. </p> <p>These indexes are implemented on top of materialized views. It implies that there\u2019s a storage overhead for creating an index \u2013 it will use another table to store the data it needs. Indexes can be global or local, and let\u2019s find out what that means.</p> <p>local secondary indexes : https://university.scylladb.com/courses/data-modeling/lessons/materialized-views-secondary-indexes-and-filtering/topic/local-secondary-indexes-and-combining-both-types-of-indexes/</p>"},{"location":"Databases/mongodb/","title":"MongoDB","text":""},{"location":"Databases/mongodb/#mongodb-native","title":"MongoDB native","text":"<p>To connect to database</p> <p>use the connect settings in mongodb atlas</p> <p>Starting local database server</p> <p>After installing, you can start the mongod by</p> <pre><code>sudo systemctl start mongod\n</code></pre> <p>if you receive an error : Failed to start mongod.service: Unit mongod.service not found.</p> <p>Run the following command first:</p> <pre><code>sudo systemctl daemon-reload\n</code></pre> <p>Verify that MongoDB has started successfully.</p> <pre><code>sudo systemctl status mongod\n</code></pre> <p>You can optionally ensure that MongoDB will start following a system reboot by issuing the following command:</p> <pre><code>sudo systemctl enable mongod\n</code></pre> <p>Stop MongoDB.</p> <p>As needed, you can stop the <code>mongod</code> process by issuing the following command:</p> <pre><code>sudo systemctl stop mongod\n</code></pre> <p>Restart MongoDB.</p> <p>You can restart the <code>mongod</code> process by issuing the following command:</p> <pre><code>sudo systemctl restart mongod\n</code></pre>"},{"location":"Databases/mongodb/#mongodb-setup-docker","title":"MongoDB setup Docker","text":"<pre><code>sudo docker run --name mongo --network mongonet -d \\\n -p 27017:27017 \\\n -e MONGO_INITDB_ROOT_USERNAME=admin \\\n -e MONGO_INITDB_ROOT_PASSWORD=pass  \\\n mongo\n\nsudo docker exec -it some-mongo sh\n</code></pre> <p>Begin using MongoDB.</p> <p>Start a <code>mongo</code> shell on the same host machine as the <code>mongod</code>. You can run the <code>mongo</code> shell without any command-line options to connect to a <code>mongod</code> that is running on your localhost with default port 27017:</p> <pre><code>mongo \"mongodb+srv://&lt;username&gt;:&lt;password&gt;@&lt;url&gt;:&lt;port&gt;/&lt;db&gt;\"\n</code></pre> <p>To show collections</p> <pre><code>show dbs\nuse &lt;name of db&gt;\n\nshow collections\n</code></pre>"},{"location":"Databases/mongodb/#basic-commands","title":"Basic Commands","text":"<ul> <li>List all databases : <code>show dbs</code></li> <li>to switch to db : <code>use &lt;name_of_db&gt;</code></li> <li>to run a query : <code>db.&lt;name_of_collection&gt;.[function name]</code></li> <li>to iterate over many results : <code>it</code></li> <li>add : <code>.pretty()</code> to see json better</li> <li>to find any one document from collection, just use <code>.findOne()</code></li> <li>to create new collection : <code>db.createCollection(\"employees\")</code></li> </ul> <p>To shutdown db server</p> <pre><code>use admin\ndb.shutdownServer()\nexit\n</code></pre>"},{"location":"Databases/mongodb/#to-delete","title":"To delete","text":"<pre><code>drop collection\ndb.inspection.drop()\n</code></pre>"},{"location":"Databases/mongodb/mongo-administration/","title":"Mongo Administration","text":""},{"location":"Databases/mongodb/mongo-administration/#dbpath","title":"<code>dbpath</code>","text":"<p>The dbpath is the directory where all the data files for your database are stored. The dbpath also contains journaling logs to provide durability in case of a crash. As we saw before, the default dbpath is /data/db; however, you can specify any directory that exists on your machine. The directory must have read/write permissions since database and journaling files will be written to the directory.</p>"},{"location":"Databases/mongodb/mongo-administration/#port","title":"<code>port</code>","text":"<p>The port option allows us to specify the port on which mongod will listen for client connections. If we don't specify a port, it will default to 27017. Database clients should specify the same port to connect to mongod.</p>"},{"location":"Databases/mongodb/mongo-administration/#auth","title":"<code>auth</code>","text":"<p>auth enables authentication to control which users can access the database. When auth is specified, all database clients who want to connect to mongod first need to authenticate.</p> <p>Before any database users have been configured, a Mongo shell running on localhost will have access to the database. We can then configure users and their permission levels using the shell. Once one or more users have been configured, the shell will no longer have default access</p>"},{"location":"Databases/mongodb/mongo-administration/#bind_ip","title":"<code>bind_ip</code>","text":"<p>The bind_ip option allows us to specify which IP addresses mongod should bind to. When mongod binds to an IP address, clients from that address are able to connect to mongod</p> <p>Sample Config File</p> <pre><code>storage:\n  dbPath: \"/data/db\"\nsystemLog:\n  path: \"/data/log/mongod.log\"\n  destination: \"file\"\nreplication:\n  replSetName: M103\nnet:\n  bindIp : \"127.0.0.1,192.168.103.100\"\ntls:\n  mode: \"requireTLS\"\n  certificateKeyFile: \"/etc/tls/tls.pem\"\n  CAFile: \"/etc/tls/TLSCA.pem\"\nsecurity:\n  keyFile: \"/data/keyfile\"\n</code></pre>"},{"location":"Databases/mongodb/mongo-administration/#user-management-commands","title":"User management commands","text":"<pre><code>db.createUser()\ndb.dropUser()\n\n# Collection management commands:\n\ndb.&lt;collection&gt;.renameCollection()\ndb.&lt;collection&gt;.createIndex()\ndb.&lt;collection&gt;.drop()\n\n# Database management commands:\n\ndb.dropDatabase()\ndb.createCollection()\n\n# Database status command:\n\ndb.serverStatus()\n\n# Creating index with Database Command:\n\ndb.runCommand(\n  { \"createIndexes\": &lt;collection&gt; },\n  { \"indexes\": [\n    {\n      \"key\": { \"product\": 1 }\n    },\n    { \"name\": \"name_index\" }\n    ]\n  }\n)\n\n# Creating index with Shell Helper:\n\ndb.&lt;collection&gt;.createIndex(\n  { \"product\": 1 },\n  { \"name\": \"name_index\" }\n)\n\n# Introspect a Shell Helper:\n\ndb.&lt;collection&gt;.createIndex\n</code></pre>"},{"location":"Databases/mongodb/mongo-administration/#file-structure","title":"File Structure","text":"<pre><code># List --dbpath directory:\nls -l /data/db\n\n# List diagnostics data directory:\nls -l /data/db/diagnostic.data\n\n# List journal directory:\nls -l /data/db/journal\n\n# List socket file:\nls /tmp/mongodb-27017.sock\n</code></pre>"},{"location":"Databases/mongodb/mongo-administration/#create-new-user","title":"Create new user","text":"<pre><code>use admin\n\ndb.createUser({\n  user: \"root\",\n  pwd: \"root123\",\n  roles : [ \"root\" ]\n})\n</code></pre>"},{"location":"Databases/mongodb/mongo-administration/#create-security-officer","title":"Create security officer","text":"<pre><code>db.createUser(\n\n  { user: \"security_officer\",\n    pwd: \"h3ll0th3r3\",\n    roles: [ { db: \"admin\", role: \"userAdmin\" } ]\n  }\n)\n\n# Create database administrator:\n\ndb.createUser(\n\n  { user: \"dba\",\n    pwd: \"c1lynd3rs\",\n    roles: [ { db: \"admin\", role: \"dbAdmin\" } ]\n  }\n)\n\n# Grant role to user:\n\ndb.grantRolesToUser( \"dba\",  [ { db: \"playground\", role: \"dbOwner\"  } ] )\n\n# Show role privileges\n\ndb.runCommand( { rolesInfo: { role: \"dbOwner\", db: \"playground\" }, showP\n</code></pre>"},{"location":"Databases/mongodb/mongo-administration/#basic-replication-functions","title":"Basic Replication functions","text":"<pre><code>rs.add\nrs.initiate\nrs.remove\nrs.config\nrs.reconfig\nrs.isMaster\nrs.printReplicationInfo\n</code></pre> <p><code>rs.status</code> :</p> <ul> <li>reports health on replica set nodes</li> <li>uses data from heartbeats</li> </ul> <p><code>rs.isMaster</code> :</p> <ul> <li>descibe's a node's role in a replica set</li> </ul> <p><code>rs.printReplicationInfo</code> :</p> <ul> <li>only returns oplogs data relative to current node</li> <li>contains timestamps for first and oplog events</li> </ul> <p><code>oplog.rs</code> :</p> <ul> <li>central point of replication</li> <li>keeps track of all statements getting replicated</li> <li>its is a capped collection : size of collection is limited</li> <li>by defualt, it takes 5% of the available disk</li> <li>it appends statements ( used in replication ), till the file cap is reached</li> <li>once full, it starts to over write operations from top</li> <li>replication windows is proportional to the  system load</li> <li>size of oplog.rs will determine how much time a secondary node has to join in before it thorws itself in recovery mode</li> </ul> <pre><code># Display collections from the local database (this displays more collections from a replica set than from a standalone node):\n\nuse local\nshow collections\n\n# Query the oplog after connected to a replica set:\n\nuse local\ndb.oplog.rs.find()\n\n# Get information about the oplog (remember the oplog is a capped collection).\n# Store oplog stats as a variable called stats:\n\nvar stats = db.oplog.rs.stats()\n\n# Verify that this collection is capped (it will grow to a pre-configured size before it starts to overwrite the oldest entries with newer ones):\n\nstats.capped\n\n# Get current size of the oplog:\n\nstats.size\n\n# Get size limit of the oplog:\n\nstats.maxSize\n\n# Get current oplog data (including first and last event times, and configured oplog size):\n\nrs.printReplicationInfo()\n</code></pre>"},{"location":"Databases/mongodb/mongo-administration/#failover","title":"Failover :","text":"<ul> <li>Primary node is the first point of contact from client</li> <li>we first upgrade the secondary nodes</li> <li>then we step down the primary node to become secondary ( using rs.stepDown() ), once the election is complete, we can then safely upgrade the primary (which is now secondary) and connect it back to the replica set</li> </ul> <p>Elections :</p> <ul> <li>Happens when the primary node becomes unavailable or primary node wants to step down</li> <li>Next primary node will be elected keeping the following things in mind :</li> <li>Which ever node has the latest copy of data, it will run for election and automatically vote for itself</li> <li>If two node ( in a cluster of 3) has same recent data, the third node will cast a vote for any one of them to become primary. This becomes a problem in even node replica set</li> <li>Priority : likelihood that a node will become primary in case of election</li> <li>default priority is 1</li> <li>priority 1 or higher will give the node a higher chance of winning the election</li> <li>set priority of node to 0 if we dont want node to become primary</li> <li>node that cannot become primary are known as passive nodes</li> </ul>"},{"location":"Databases/mongodb/mongo-administration/#write-concerns","title":"write concerns","text":"<ul> <li>Commands under write concern</li> <li>insert</li> <li>update</li> <li>delete</li> <li>find or modify</li> <li>ACK mechanism added to write ops to provide stronger durability garuntee</li> <li>MAX : majority of nodes : roundup([num of nodes]/2)</li> <li>more durability requires more time to achieve</li> <li>write concerns level</li> <li>0 : dont wait for ack</li> <li>1 : wait for primary to ack</li> <li> <p>=2 : wait for primary and one or more secondary to ack</p> </li> <li>\"majority\" : wait for majority to ack</li> <li>write concern options</li> <li>wtimeout : time to wait before marking operation as failed</li> <li>j [true|false] : requires node to commit  the write operation to the journal before returning the ack</li> <li>setting write concern higher make ops slower</li> </ul>"},{"location":"Databases/mongodb/mongo-administration/#read-concern-preference","title":"read concern / preference","text":"<ul> <li>specifies durability during a read operation</li> <li>read concern level</li> <li>local : returns from the primary node</li> <li>available;</li> <li>majority;</li> <li>read preference allows you to redirect read operation to specific members of replica set</li> <li>read preference may return stale data;</li> <li>read preference modes</li> <li>primary : default</li> <li>primaryPreferred : can route read ops to secondary in case primary in not available</li> <li>secondary : routes read ops to sec. nodes only</li> <li>secondaryPreferred : if sec. not available, routes read ops to primary</li> <li>nearest : routes to least network latency from the host, ignores primary or secondary</li> </ul>"},{"location":"Databases/mongodb/mongo-administration/#sharding","title":"Sharding","text":"<ul> <li>There is upper limit to vertical scaling</li> <li>Sharding means adding more machines and dividing the dataset into multiple pieces</li> <li>For each shard, we add more replica to make sure we dont lose data</li> <li>a sharded cluster contains a config server, that store the metadata about each shard. This config server are responsible to distributing the queries to the shard containing the data.</li> <li>to make config servers highly available, they are deployed in a replica set configuration</li> <li>We use mongos to route the queries to each shard</li> </ul>"},{"location":"Databases/mongodb/mongo-administration/#when-to-shard-a-database","title":"When to shard a database","text":"<ul> <li>if not economically viable to scale up the throughput, speed and volume</li> <li>scaling horizontally will add more cost to backup, restore and initial sync time, when not feasible, shard the database</li> <li>Max a server should contain 2tb to 5tb data (factor in CPU and RAM usage)</li> <li>when geographically distributed database is required</li> <li>when single threaded operation needs to be parallelised</li> </ul>"},{"location":"Databases/mongodb/mongo-administration/#sharding-architecture","title":"Sharding Architecture","text":"<ul> <li>client do not connect to sharded cluster directly</li> <li>they connect to a process called mongos that routes queries to shards</li> </ul>"},{"location":"Databases/mongodb/mongo-administration/#how-mongos-figures-out-where-to-route-the-queries","title":"How mongos figures out where to route the queries","text":"<p>Let's say we have 3 shard containing the data about football players</p> <ul> <li>shard 1 : A-J</li> <li>shard 2 : K-Q</li> <li>shard 3 : R-Z</li> </ul> <p>When you send a query to find details about player name Messi, it will know which shard contains the data about that player ( as all shards store data about specific player only ). The config server will contain the metadata, for example : shard 1 contains names from A-J, shard 2 contains names from K-Q, shard 3 contains name from R-Z which helps mongos the route the queries</p> <p>There can be one mongos process routing queries to 3 shards or there can be multiple mongos process routing queries to shards and takign request also from multiple clients</p> <p>If size of one shard grows more than other, the data needs to be moved from the bigger shard to the smaller ones to keep consist storage capacity. This update will also be reflected in config server.</p> <p>As not all collections in a database needs to be sharded, there is one shard in the cluster that will act as primary shard keeping all the non sharded collections</p> <p>If we query the database, lets say where age is in 28-30, then mongos will not be able to route the query to specific shard, rather it will send it to all shards to find out the data, then SHARD_MERGE stage takes place. This stage can take place on mongos or a randomly chosen shard in the cluster.</p>"},{"location":"Databases/mongodb/mongo-administration/#the-config-database","title":"The Config database","text":"<ul> <li>maintained and used internally by mongodb, dont touch it i not necessary</li> </ul> <p>Switch to config DB:</p> <pre><code>use config\n\n# Query config.databases:\ndb.databases.find().pretty()\n\n# Query config.collections:\ndb.collections.find().pretty()\n\n# Query config.shards:\ndb.shards.find().pretty()\n\n# Query config.chunks:\ndb.chunks.find().pretty()\n\n# Query config.mongos:\ndb.mongos.find().pretty()\n</code></pre>"},{"location":"Databases/mongodb/mongo-administration/#shard-key","title":"Shard Key","text":"<ul> <li>It is the indexed field that mongodb uses to partition data in a sharded collection and distribute it across the shards in your cluster</li> <li>You need to create index first before you can select your shard key.</li> <li>MongoDB uses these shard keys to distribute data across sharded clusters. This groupings are also known as chunks</li> <li>shard key should be present in every document in the collection (if not already) or in every new document that is inserted</li> <li>shard keys are immutable, cannot change shard key post-sharding</li> <li>you cannot change the values of shard key fields post-sharding</li> <li>sharded collections are irreversible, you cannot unshard a collection, once sharded.</li> </ul>"},{"location":"Databases/mongodb/mongo-administration/#how-to-shard","title":"How to shard","text":"<ul> <li>use <code>sh.enableSharding(\"database\")</code> to enable sharding for the specific database.</li> <li>use <code>db.collections.createIndex()</code> to create the index for your shard key field</li> <li>use <code>sh.shardCollections(\"&lt;database&gt;.&lt;collections&gt;\",{shard_key})</code> to shard the collection</li> </ul>"},{"location":"Databases/mongodb/mongo-administration/#picking-a-good-shard-key","title":"Picking a Good shard key","text":"<ul> <li>Cardinality</li> <li>High Cardinality = many possible unique shard key values.</li> <li>Low Frequency  = low repetition of a given unique shard key value.</li> <li>Avoid shard keys that changes monotonically (keeping incrementing), choosing <code>_id</code> or <code>timestamp</code> or not a great options.</li> </ul>"},{"location":"Databases/mongodb/mongo-administration/#hashed-shard-keys","title":"Hashed Shard Keys","text":"<ul> <li>shard key where the underlying index is hashed</li> <li>mongodb uses a hashing function to calculate the hash shard key and then you out where the data is located</li> <li>the data is not changed in the docuement, instead the underlying index backing the shard key itself is hashed</li> <li>As monotonically changind value like <code>_id</code> or <code>timestamp</code> can be hashed, because the output from the hash function can prevent hotspotting</li> <li>this can make data highly distribute, so in case where you need</li> <li>you cannot support geographically isolated read operations using zoned sharding</li> <li>use <code>sh.enableSharding(\"database\")</code> to enable sharding for the specified</li> <li>use <code>db.collection.createIndex({\"field\":\"hashed\"})</code> to create the index for your shard key field</li> <li>use <code>sh.shardCollection(\"&lt;database&gt;.&lt;collection&gt;\",{ shard_key : \"hashed\" })</code> to shard the collection</li> </ul>"},{"location":"Databases/mongodb/mongo-administration/#lab-shard-a-collection","title":"Lab shard a collection","text":"<pre><code>mongoimport --drop /dataset/products.json --port 26000 -u \"m103-admin\" -p \"m103-pass\" --authenticationDatabase \"admin\" --db m103 --collection products\n\nmongo --port 26000 --username m103-admin --password m103-pass --authenticationDatabase admin\n\nuse m103\n\nsh.enableSharding(\"m103\")\ndb.products.createIndex({\"sku\":1})\nsh.shardCollection(\"m103.products\",{ \"sku\" : 1 })\n</code></pre>"},{"location":"Databases/mongodb/mongo-administration/#chunks","title":"Chunks","text":"<ul> <li>group of documents, who information is store in mongos determining which data belongs to which chunk and which shard contains it</li> <li>re balancing of chunks is preformed by primary of config server replica set</li> <li>Default Chunk Size : 64MB</li> </ul> <pre><code>use config\ndb.settings.save({_id: \"chunksize\", value: 2})\n</code></pre>"},{"location":"Databases/mongodb/mongo-administration/#targeted-queries-vs-scatter-gather","title":"Targeted Queries vs Scatter Gather","text":"<ul> <li>Each Shard contains chunks of sharded data, where each chunk represents a inclusive lower bound and upper bound.</li> <li>The config server replica set keeps maintains the primary record of where all the chunks are present.</li> <li>Mongos keeps a cached copy of the data chunks</li> <li>If the query contains the shard key, then mongos knows where to target the query. This is known as targeted query.</li> <li>targeted query are much faster and always used in query data request preformed by the customer.</li> <li>if the shard key isn't present in the query, them mongos will send the query to all shards and merge back the results from each shard. this is known as scatter gather.</li> <li>scatter gather query sometimes could be extremely slow, hence on admins performing analytics queries should be allowed to run them.</li> </ul>"},{"location":"Databases/mongodb/mongo-administration/#in-case-of-composite-key","title":"In case of composite key","text":"<p>example shard key : <code>{\"sku\":1,\"type\":1,\"name\":1}</code></p> <p>Valid Targeted Queries</p> <pre><code>db.products.find( { \"sku\": ... } )\ndb.products.find( { \"sku\": ... , \"type\": ... } )\ndb.products.find( { \"sku\": ... , \"type\": ... , \"name\": ... } )\n</code></pre> <p>Scatter Gather</p> <pre><code>db.products.find( { \"type\": ... } )\ndb.products.find( { \"name\": ... } )\n</code></pre>"},{"location":"Databases/mongodb/mongodb-aggregation/","title":"MongoDB Aggregation","text":""},{"location":"Databases/mongodb/mongodb-aggregation/#aggregate-framework","title":"Aggregate Framework","text":"<ul> <li>Queries are written inside <code>[]</code> operator, denoting the order in which hey execute</li> <li><code>$group</code> : An operator that takes in multiple streams of data and distributes it into multiple reservoirs</li> </ul> <pre><code># MQL Query\ndb.listingsAndReviews.find({ \"amenities\": \"Wifi\" },\n                           { \"price\": 1, \"address\": 1, \"_id\": 0 }).pretty()\n\n# MQL Query ith aggregation framework\ndb.listingsAndReviews.aggregate(\n    [\n      { \"$match\": { \"amenities\": \"Wifi\" } },\n      { \"$project\": { \"price\": 1,\n                      \"address\": 1,\n                      \"_id\": 0 }}\n    ]).pretty()\n</code></pre> <pre><code># Find one document in the collection \n# and only include the address field in the resulting cursor.\ndb.listingsAndReviews.findOne({ },{ \"address\": 1, \"_id\": 0 })\n\n# Project only the address field value for each document, \n# then group all documents into one document per address.country value.\ndb.listingsAndReviews.aggregate(\n    [   { \"$project\": { \"address\": 1, \"_id\": 0 }},\n        { \"$group\": { \"_id\": \"$address.country\" }}\n    ])\n\n# Project only the address field value for each document, \n# then group all documents into one document per address.country value, \n# and count one for each document in each group.\ndb.listingsAndReviews.aggregate(\n    [\n          { \"$project\": { \"address\": 1, \"_id\": 0 }},\n          { \"$group\": { \"_id\": \"$address.country\",\n                        \"count\": { \"$sum\": 1 } } }\n    ])\n</code></pre>"},{"location":"Databases/mongodb/mql/","title":"MQL","text":""},{"location":"Databases/mongodb/mql/#mongodb","title":"MongoDB","text":"<ul> <li>Data is stored in documents</li> <li>Documents are stored in Collections</li> <li>Document here refers to JSON</li> <li>Redundant copies of data are stored in replica set</li> <li>JSON is stored as BSON internally in MongoDB</li> </ul> <pre><code># FOR BSON, use dump (backup) and restore (restore backup)\n\nmongodump --uri \"mongodb+srv://&lt;your username&gt;:&lt;your password&gt;@&lt;your cluster&gt;.mongodb.net/&lt;database name&gt;\"\n\n# drop will delete the stuff already in and create the new object from restore\n\nmongorestore --uri \"mongodb+srv://&lt;your username&gt;:&lt;your password&gt;@&lt;your cluster&gt;.mongodb.net/&lt;database name&gt;\"  --drop dump\n\n# FOR JSON, use export (backup) and import (import backup)\n\n# collection to specify which collection\n# out to specify the file name to export to\n\nmongoexport --uri=\"mongodb+srv://&lt;your username&gt;:&lt;your password&gt;@&lt;your cluster&gt;.mongodb.net/&lt;database name&gt;\" --collection=sales --out=sales.json\n\nmongoimport --uri=\"mongodb+srv://&lt;your username&gt;:&lt;your password&gt;@&lt;your cluster&gt;.mongodb.net/&lt;database name&gt;\" --drop sales.json\n</code></pre> <pre><code># to look at all databases available\nshow dbs\n\n# to connect to a database\nuse sample_training\n\n# to look at collections inside a database\nshow collections\n</code></pre>"},{"location":"Databases/mongodb/mql/#queries","title":"Queries","text":""},{"location":"Databases/mongodb/mql/#find","title":"Find","text":"<pre><code>db.zips.find({\"state\": \"NY\"})\n\n# Use 'it' : iterates through a cursor\n# cursor : A pointer to a result set of query\n# pointer : A direct address of memory location\n\ndb.zips.find({\"state\": \"NY\"}).count()\n\ndb.zips.find({\"state\": \"NY\", \"city\": \"ALBANY\"})\n\ndb.zips.find({\"state\": \"NY\", \"city\": \"ALBANY\"}).pretty()\n\n# get random one\ndb.inspections.findOne()\n</code></pre> <ul> <li>Each Document has a unique object <code>_id</code> which is set by default if not specfied</li> </ul>"},{"location":"Databases/mongodb/mql/#insert","title":"Insert","text":"<pre><code>db.inspections.insert({\n      \"_id\" : ObjectId(\"56d61033a378eccde8a8354f\"),\n      \"id\" : \"10021-2015-ENFO\",\n      \"certificate_number\" : 9278806,\n      \"business_name\" : \"ATLIXCO DELI GROCERY INC.\",\n      \"date\" : \"Feb 20 2015\",\n      \"result\" : \"No Violation Issued\",\n      \"sector\" : \"Cigarette Retail Dealer - 127\",\n      \"address\" : {\n              \"city\" : \"RIDGEWOOD\",\n              \"zip\" : 11385,\n              \"street\" : \"MENAHAN ST\",\n              \"number\" : 1712\n         }\n  })\n\ndb.inspections.insert({\n      \"id\" : \"10021-2015-ENFO\",\n      \"certificate_number\" : 9278806,\n      \"business_name\" : \"ATLIXCO DELI GROCERY INC.\",\n      \"date\" : \"Feb 20 2015\",\n      \"result\" : \"No Violation Issued\",\n      \"sector\" : \"Cigarette Retail Dealer - 127\",\n      \"address\" : {\n              \"city\" : \"RIDGEWOOD\",\n              \"zip\" : 11385,\n              \"street\" : \"MENAHAN ST\",\n              \"number\" : 1712\n         }\n  })\n\ndb.inspections.find(\n      {\"id\" : \"10021-2015-ENFO\", \"certificate_number\" : 9278806}\n).pretty()\n</code></pre>"},{"location":"Databases/mongodb/mql/#insert-conflicts","title":"Insert conflicts","text":"<pre><code># Insert three test documents\ndb.inspections.insert([ { \"test\": 1 }, { \"test\": 2 }, { \"test\": 3 } ])\n\n# Insert three test documents but specify the _id values\n# Error in 2 docs\n# Insert operation halts when an error is in-countered\ndb.inspections.insert([{ \"_id\": 1, \"test\": 1 },{ \"_id\": 1, \"test\": 2 },\n                       { \"_id\": 3, \"test\": 3 }])\n\n# Find the documents with _id: 1\ndb.inspections.find({ \"_id\": 1 })\n\n# Insert multiple documents specifying the _id values, \n# and using the \"ordered\": false option\n# Ordered False will allow to insert all docs where id doesnt match, \n# and give errors for those which failed\ndb.inspections.insert([{ \"_id\": 1, \"test\": 1 },{ \"_id\": 1, \"test\": 2 },\n                       { \"_id\": 3, \"test\": 3 }],{ \"ordered\": false })\n\n# Insert multiple documents with _id: 1 with the default \"ordered\": true setting\ndb.inspection.insert([{ \"_id\": 1, \"test\": 1 },{ \"_id\": 3, \"test\": 3 }])\n</code></pre>"},{"location":"Databases/mongodb/mql/#updates","title":"Updates","text":"<p>https://docs.mongodb.com/manual/reference/operator/update/#id1</p> <pre><code># Find all documents in the zips collection \n# where the zip field is equal to \"12434\".\n\ndb.zips.find({ \"zip\": \"12534\" }).pretty()\n\n# Find all documents in the zips collection \n# where the city field is equal to \"HUDSON\".\n\ndb.zips.find({ \"city\": \"HUDSON\" }).pretty()\n\n# Update all documents in the zips collection \n# where the city field is equal to \"HUDSON\" \n# by adding 10 to the current value of the \"pop\" field.\n# Increment Operation\n\ndb.zips.updateMany({ \"city\": \"HUDSON\" }, { \"$inc\": { \"pop\": 10 } })\n\n# Update a single document in the zips \n# collection where the zip field is \n# equal to \"12534\" by setting the value \n# of the \"pop\" field to 17630.\n# Update / Set operation\n\ndb.zips.updateOne({ \"zip\": \"12534\" }, { \"$set\": { \"pop\": 17630 } })\n\n# Update a single document in the zips \n# collection where the zip field is equal \n# to \"12534\" by setting the value of \n# the \"popupation\" field to 17630.\n# Update / Set operation\n\ndb.zips.updateOne({ \"zip\": \"12534\" }, { \"$set\": { \"population\": 17630 } })\n\n# Find all documents in the grades \n# collection where the student_id \n# field is 151 , and the class_id field is 339.\n\ndb.grades.find({ \"student_id\": 151, \"class_id\": 339 }).pretty()\n\n# Update one document in the grades \n# collection where the student_id is \n# `250` *, and the class_id field is 339, \n# by adding a document element to the \"scores\" array.\n\ndb.grades.updateOne({ \"student_id\": 250, \"class_id\": 339 },\n                    { \"$push\": { \"scores\": { \"type\": \"extra credit\",\n                                             \"score\": 100 }\n                                }\n                     })\n\ndb.grades.find({ \"student_id\": 250, \"class_id\": 339 })\n</code></pre>"},{"location":"Databases/mongodb/mql/#upsert","title":"Upsert","text":"<pre><code>db.iot.updateOne({ \"sensor\": r.sensor, \"date\": r.date,\n                   \"valcount\": { \"$lt\": 48 } },\n                         { \"$push\": { \"readings\": { \"v\": r.value, \"t\": r.time } },\n                        \"$inc\": { \"valcount\": 1, \"total\": r.value } },\n                 { \"upsert\": true })\n</code></pre>"},{"location":"Databases/mongodb/mql/#delete","title":"Delete","text":"<pre><code># Look at all the docs that have test field equal to 1.\ndb.inspections.find({ \"test\": 1 }).pretty()\n\n# Delete all the documents that have test field equal to 1.\ndb.inspections.deleteMany({ \"test\": 1 })\n\n# Delete one document that has test field equal to 3.\ndb.inspections.deleteOne({ \"test\": 3 })\n\n# Inspect what is left of the inspection collection.\ndb.inspection.find().pretty()\n# View what collections are present in the sample_training collection.\nshow collections\n\n# Drop the inspection collection.\ndb.inspection.drop()\n</code></pre>"},{"location":"Databases/mongodb/mql/#operators","title":"Operators","text":"<pre><code># Find all documents where the tripduration \n# was less than or equal to 70 seconds and \n# the usertype was not Subscriber:\n# LESS THAN EQUAL\n# NOT EQUAL\n\ndb.trips.find({ \"tripduration\": { \"$lte\" : 70 },\n                \"usertype\": { \"$ne\": \"Subscriber\" } }).pretty()\n\n# Find all documents where the tripduration\n# was less than or equal to 70 seconds and \n# the usertype was Customer using a redundant equality operator:\n# LESS THAN EQUAL\n# EQUAL\n\ndb.trips.find({ \"tripduration\": { \"$lte\" : 70 },\n                \"usertype\": { \"$eq\": \"Customer\" }}).pretty()\n\n# Find all documents where the tripduration\n# was less than or equal to 70 seconds and \n# the usertype was Customer using the implicit equality operator:\n# LESS THAN EQUAL\n\ndb.trips.find({ \"tripduration\": { \"$lte\" : 70 },\n                \"usertype\": \"Customer\" }).pretty()\n\n# Find all documents where airplanes CR2 or A81 \n# left or landed in the KZN airport:\n\n# AND, OR operator\n\ndb.routes.find({ \"$and\": [ { \"$or\" :[ { \"dst_airport\": \"KZN\" },\n                                    { \"src_airport\": \"KZN\" }\n                                  ] },\n                          { \"$or\" :[ { \"airplane\": \"CR2\" },\n                                     { \"airplane\": \"A81\" } ] }\n                         ]}).pretty()\n</code></pre> <ul> <li>AND operator is present in your qureies when not specified</li> </ul>"},{"location":"Databases/mongodb/mql/#expr","title":"EXPR","text":"<pre><code># Find all documents where the trip started\n# and ended at the same station:\n# here $ denotes the value of the field specified\n\ndb.trips.find(\n    { \"$expr\": { \"$eq\": [ \"$end station id\", \"$start station id\"] }\n}).count()\n\n# replacing id with name\n\ndb.trips.find(\n    { \"$expr\": { \"$eq\": [ \"$end station name\", \"$start station name\"]}\n}).count()\n\n\n# Find all documents where the trip lasted \n# longer than 1200 seconds, and started \n# and ended at the same station:\n\ndb.trips.find({ \"$expr\": { \"$and\": [ { \"$gt\": [ \"$tripduration\", 1200 ]},\n                         { \"$eq\": [ \"$end station id\", \"$start station id\" ]}\n                       ]}}).count()\n</code></pre>"},{"location":"Databases/mongodb/mql/#array","title":"Array","text":"<pre><code># using ALL operator\n\ndb.listingsAndReviews.find(\n    { \"amenities\": \n        {\n          \"$size\": 20,\n          \"$all\": [ \"Internet\", \"Wifi\",  \"Kitchen\",\n                   \"Heating\", \"Family/kid friendly\",\n                   \"Washer\", \"Dryer\", \"Essentials\",\n                   \"Shampoo\", \"Hangers\",\n                   \"Hair dryer\", \"Iron\",\n                   \"Laptop friendly workspace\" ]\n        }\n    }).pretty()\n</code></pre>"},{"location":"Databases/mongodb/mql/#array-operators-and-projection","title":"Array operators and Projection","text":"<pre><code># Find all documents with exactly 20 amenities which include \n# all the amenities listed in the query array, \n# and display their price and address:\n\ndb.listingsAndReviews.find({ \"amenities\":\n        { \"$size\": 20, \"$all\": [ \"Internet\", \"Wifi\",  \"Kitchen\", \"Heating\",\n                                 \"Family/kid friendly\", \"Washer\", \"Dryer\",\n                                 \"Essentials\", \"Shampoo\", \"Hangers\",\n                                 \"Hair dryer\", \"Iron\",\n                                 \"Laptop friendly workspace\" ] } },\n                            {\"price\": 1, \"address\": 1}).pretty()\n\n# Find all documents that have Wifi as one of the amenities \n# only include price and address in the resulting cursor:\n\ndb.listingsAndReviews.find({ \"amenities\": \"Wifi\" },\n                           { \"price\": 1, \"address\": 1, \"_id\": 0 }).pretty()\n\n# Find all documents that have Wifi as one of the amenities \n# only include price and address in the resulting cursor, \n# also exclude ``\"maximum_nights\"``. **This will be an error:*\n\ndb.listingsAndReviews.find({ \"amenities\": \"Wifi\" },\n                           { \"price\": 1, \"address\": 1,\n                             \"_id\": 0, \"maximum_nights\":0 }).pretty()\n\n# nested projection\n\ndb.listingsAndReviews.find({ \"amenities\": \"Wifi\" }, { \"price\": 1, \"address\": { \"country\" : 1 }, \"_id\": 0 }).pretty()\n\n\n# Switch to this database:\nuse sample_training\n\n# Get one document from the collection:\ndb.grades.findOne()\n\n# Elematch Example\n\n# Find all documents where the student in class 431 received \n# a grade higher than 85 for any type of assignment:\n\ndb.grades.find({ \"class_id\": 431 },\n               { \"scores\": { \"$elemMatch\": { \"score\": { \"$gt\": 85 } } }\n             }).pretty()\n\n# Find all documents where the student had an extra credit score:\n\ndb.grades.find({ \"scores\": { \"$elemMatch\": { \"type\": \"extra credit\" } }\n               }).pretty()\n</code></pre> <ul> <li><code>Elematch</code> : matches documents that contains an array field with at least one element that matches the specified query creteria</li> <li><code>Elematch</code> : Projects only the array elements with at least one element that matches the specified criteria</li> </ul>"},{"location":"Databases/mongodb/mql/#array-operators-and-sub-documents","title":"Array Operators and Sub-Documents","text":"<pre><code>use sample_training\n\ndb.trips.findOne({ \"start station location.type\": \"Point\" })\n\ndb.companies.find({ \"relationships.0.person.last_name\": \"Zuckerberg\" },\n                  { \"name\": 1 }).pretty()\n\ndb.companies.find({ \"relationships.0.person.first_name\": \"Mark\",\n                    \"relationships.0.title\": { \"$regex\": \"CEO\" } },\n                  { \"name\": 1 }).count()\n\n\ndb.companies.find({ \"relationships.0.person.first_name\": \"Mark\",\n                    \"relationships.0.title\": {\"$regex\": \"CEO\" } },\n                  { \"name\": 1 }).pretty()\n\ndb.companies.find({ \"relationships\":\n                      { \"$elemMatch\": { \"is_past\": true,\n                                        \"person.first_name\": \"Mark\" } } },\n                  { \"name\": 1 }).pretty()\n\ndb.companies.find({ \"relationships\":\n                      { \"$elemMatch\": { \"is_past\": true,\n                                        \"person.first_name\": \"Mark\" } } },\n                  { \"name\": 1 }).count()\n</code></pre>"},{"location":"Databases/mongodb/mql/#sort-and-limit","title":"Sort and Limit","text":"<ul> <li>Use sort before limit always</li> </ul> <pre><code>db.zips.find().sort({ \"pop\": 1 }).limit(1)\n\ndb.zips.find({ \"pop\": 0 }).count()\n\ndb.zips.find().sort({ \"pop\": -1 }).limit(1)\n\ndb.zips.find().sort({ \"pop\": -1 }).limit(10)\n\ndb.zips.find().sort({ \"pop\": 1, \"city\": -1 })\n</code></pre>"},{"location":"Databases/sql/5-Order-of-sql-execution/","title":"Order of SQL Execution","text":""},{"location":"Databases/sql/5-Order-of-sql-execution/#1-from-and-joins","title":"1. <code>FROM</code> and <code>JOIN</code>s","text":"<p>The <code>FROM</code> clause, and subsequent <code>JOIN</code>s are first executed to determine the total working set of data that is being queried. This includes sub-queries in this clause, and can cause temporary tables to be created under the hood containing all the columns and rows of the tables being joined.</p>"},{"location":"Databases/sql/5-Order-of-sql-execution/#2-where","title":"2. <code>WHERE</code>","text":"<p>Once we have the total working set of data, the first-pass <code>WHERE</code> constraints are applied to the individual rows, and rows that do not satisfy the constraint are discarded. Each of the constraints can only access columns directly from the tables requested in the <code>FROM</code> clause. Aliases in the <code>SELECT</code> part of the query are not accessible in most databases since they may include expressions dependent on parts of the query that have not yet executed.</p>"},{"location":"Databases/sql/5-Order-of-sql-execution/#3-group-by","title":"3. <code>GROUP BY</code>","text":"<p>The remaining rows after the <code>WHERE</code> constraints are applied are then grouped based on common values in the column specified in the <code>GROUP BY</code> clause. As a result of the grouping, there will only be as many rows as there are unique values in that column. Implicitly, this means that you should only need to use this when you have aggregate functions in your query.</p>"},{"location":"Databases/sql/5-Order-of-sql-execution/#4-having","title":"4. <code>HAVING</code>","text":"<p>If the query has a <code>GROUP BY</code> clause, then the constraints in the <code>HAVING</code> clause are then applied to the grouped rows, discard the grouped rows that don't satisfy the constraint. Like the <code>WHERE</code> clause, aliases are also not accessible from this step in most databases.</p>"},{"location":"Databases/sql/5-Order-of-sql-execution/#5-select","title":"5. <code>SELECT</code>","text":"<p>Any expressions in the <code>SELECT</code> part of the query are finally computed.</p>"},{"location":"Databases/sql/5-Order-of-sql-execution/#6-distinct","title":"6. <code>DISTINCT</code>","text":"<p>Of the remaining rows, rows with duplicate values in the column marked as <code>DISTINCT</code> will be discarded.</p>"},{"location":"Databases/sql/5-Order-of-sql-execution/#7-order-by","title":"7. <code>ORDER BY</code>","text":"<p>If an order is specified by the <code>ORDER BY</code> clause, the rows are then sorted by the specified data in either ascending or descending order. Since all the expressions in the <code>SELECT</code> part of the query have been computed, you can reference aliases in this clause.</p>"},{"location":"Databases/sql/5-Order-of-sql-execution/#8-limit-offset","title":"8. <code>LIMIT</code> / <code>OFFSET</code>","text":"<p>Finally, the rows that fall outside the range specified by the <code>LIMIT</code> and <code>OFFSET</code> are discarded, leaving the final set of rows to be returned from the query.</p>"},{"location":"Databases/sql/1%20Getting%20Started/","title":"Getting Started","text":""},{"location":"Databases/sql/1%20Getting%20Started/#starting-database-with-docker","title":"Starting Database with Docker","text":"<pre><code>docker run --name &lt;docker_name&gt; \n -e POSTGRES_PASSWORD=&lt;password&gt;\n -d -p 5432:5432 postgres:13.3\n\ndocker exec -it &lt;docker_name&gt; bash\n\npsql -U postgres\n</code></pre>"},{"location":"Databases/sql/1%20Getting%20Started/#installing-postgresql-on-windows","title":"Installing PostgreSQL on windows","text":"<ul> <li>https://www.postgresql.org/download/windows/</li> </ul>"},{"location":"Databases/sql/1%20Getting%20Started/#installing-postgresql-on-macos","title":"Installing PostgreSQL on MacOS","text":"<p>https://www.postgresql.org/download/macosx/</p>"},{"location":"Databases/sql/1%20Getting%20Started/#setup-and-basics-using-apt","title":"Setup and Basics : using apt","text":"<p>Installation</p> <pre><code>sudo apt-get install postgresql\n</code></pre> <p>Usage commands</p> <pre><code>service postgresql\n</code></pre> <p>Switch to default user</p> <pre><code>sudo su postgres\n</code></pre>"},{"location":"Databases/sql/1%20Getting%20Started/#getting-started_1","title":"Getting Started","text":""},{"location":"Databases/sql/1%20Getting%20Started/#connect-to-a-database","title":"Connect to a database","text":"<pre><code>Connection options:\n  -h, --host=HOSTNAME      \n# database server host or socket directory \n# (default: \"local socket\")\n  -p, --port=PORT          \n# database server port \n# (default: \"5432\")\n  -U, --username=USERNAME  \n# database user name (default: \"root\")\n  -w, --no-password        \n# never prompt for password\n  -W, --password           \n  # force password prompt (should happen automatically)\n</code></pre> <ol> <li>Here port : 5432 is default and can be get from <code>psql --help</code></li> <li><code>postgres</code> is the super user. Create another user and connect using that.</li> <li>to connect to database with user :</li> </ol> <pre><code>\\c db_name user_name\n</code></pre>"},{"location":"Databases/sql/1%20Getting%20Started/#commands","title":"Commands","text":"<pre><code>-- to list all tables\n\\dt\n\n-- to list all databases\n\\l\n\n-- to list all table spaces\n\\db\n\n-- to list all schemas\n\\dn\n\n-- to list all indices\n\\di\n\n-- to list all sequences\n\\ds\n\n-- to list all roles\n\\dg\n\n-- to list data types\n\\dT\n\n-- to list all domain datatypes\n\\dD\n\n-- to list all views\n\\dv\n\n-- to list previous commands\n\\g\n\n-- to list Command History\n\\s\n\n-- to run command from file\n\\i filename \n-- it should be inside the server\n\n-- to list help\n\\h\n\\h create table\n\n-- to display null\n\\pset null (null)\n\n-- to make terminal better\n\\pset linestyle unicode\n\\pset border 2\n\n-- to watch a command in time\n\\watch 2\n\n-- to turn on timing\n\\timing\n</code></pre>"},{"location":"Databases/sql/1%20Getting%20Started/#load-data","title":"Load Data","text":"<p>Download the sample data file from here</p> <ul> <li>https://drive.google.com/file/d/1vsFVuybjNDacNaV5LmaSI__a6dCpEdmT/view?usp=sharing</li> </ul> <p></p>"},{"location":"Databases/sql/1%20Getting%20Started/administration-task/","title":"PgAdmin Tool","text":""},{"location":"Databases/sql/1%20Getting%20Started/administration-task/#creating-new-user","title":"Creating New User","text":""},{"location":"Databases/sql/1%20Getting%20Started/administration-task/#options","title":"Options","text":"<ul> <li>General</li> <li>Name : username</li> <li>Comment : description</li> <li>Definition</li> <li>Password : user password</li> <li>Account Expires</li> <li>Connection Limit : number of connections that user can have to DB, default -1</li> </ul> <p>Refer to documentation for more details</p> <ul> <li>https://www.pgadmin.org/docs/pgadmin4/development/role_dialog.html</li> </ul>"},{"location":"Databases/sql/1%20Getting%20Started/administration-task/#query-editor","title":"Query Editor","text":""},{"location":"Databases/sql/1%20Getting%20Started/administration-task/#load-data-using-pgadmin4","title":"Load Data using pgAdmin4","text":""},{"location":"Databases/sql/10%20Summarization/","title":"Summarization","text":"<ul> <li>When we are aggregating data, we generally remove the detail data that lies below the summarize table.</li> <li>The whole point of aggregation is to replace detail data with summaries. This is where subtotals comes in!</li> <li>A grouping set is a set of columns by which you group.</li> <li>The PostgreSQL <code>ROLLUP</code> is a subclass of the GROUP BY clause that offers shorthand for defining 'multiple grouping sets'</li> </ul>"},{"location":"Databases/sql/10%20Summarization/subqueries/","title":"SubQueries","text":"<ul> <li>Allows you to construct  a complex query</li> <li>A sub-query is nested inside another query</li> <li>can be nested inside <code>SELECT</code>, <code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code></li> </ul>"},{"location":"Databases/sql/10%20Summarization/subqueries/#subqueries-with-select-clause","title":"SubQueries with SELECT clause","text":"<pre><code>SELECT movie_name,\n       movie_length\nFROM movies mv\nWHERE movie_length &gt;= (\n    SELECT avg(movie_length)\n    FROM movies\n)\n\nSELECT movie_name,\n       movie_length\nFROM movies mv\nWHERE movie_length &gt;= (\n    SELECT avg(movie_length)\n    FROM movies\n    WHERE movie_lang = 'English'\n);\n</code></pre>"},{"location":"Databases/sql/10%20Summarization/subqueries/#subqueries-with-where-clause","title":"SubQueries With WHERE Clause","text":"<pre><code>SELECT first_name, last_name, date_of_birth\nFROM actors\nWHERE date_of_birth &gt; (\n    SELECT date_of_birth\n    FROM actors\n    WHERE first_name = 'Douglas' -- 1922-06-10\n);\n\n-- using IN operator\nSELECT movie_name,\n       movie_length\nFROM movies\nWHERE movie_id in (\n    SELECT movie_id\n    FROM movies_revenues\n    WHERE revenues_domestic &gt; 200\n);\n\nSELECT movie_id, movie_name\nFROM movies\nWHERE movie_id IN (\n    SELECT movie_id\n    FROM movies_revenues\n    WHERE revenues_domestic &gt; movies_revenues.revenues_international\n);\n</code></pre>"},{"location":"Databases/sql/10%20Summarization/subqueries/#subqueries-with-joins","title":"SubQueries with JOINS","text":"<pre><code>-- with joins\nSELECT d.director_id,\n       d.first_name || ' ' || d.last_name  as \"Director Name\",\n       SUM(r.revenues_international + r.revenues_domestic) as \"total_revenues\"\nFROM directors d\n         INNER JOIN movies mv ON mv.director_id = d.director_id\n         INNER JOIN movies_revenues r on r.movie_id = mv.movie_id\nWHERE (r.revenues_domestic + r.revenues_international) &gt;\n      (\n          SELECT avg(revenues_domestic + revenues_international) as \"avg_total_revenue\"\n          FROM movies_revenues\n      )\nGROUP BY d.director_id\nORDER BY total_revenues;\n\n\nSELECT d.director_id,\n       SUM(COALESCE(r.revenues_domestic, 0) + COALESCE(r.revenues_international, 0)) AS \"totaL_reveneues\"\nFROM directors d\n         INNER JOIN movies mv ON mv.director_id = d.director_id\n         INNER JOIN movies_revenues r ON r.movie_id = mv.movie_id\nWHERE COALESCE(r.revenues_domestic, 0) + COALESCE(r.revenues_international, 0) &gt;\n      (\n          SELECT AVG(COALESCE(r.revenues_domestic, 0) + COALESCE(r.revenues_international, 0)) as \"avg_total_reveneues\"\n          FROM movies_revenues r\n                   INNER JOIN movies mv ON mv.movie_id = r.movie_id\n          WHERE mv.movie_lang = 'English'\n      )\nGROUP BY d.director_id\nORDER BY 2 DESC, 1 ASC;\n</code></pre>"},{"location":"Databases/sql/10%20Summarization/subqueries/#subqueries-with-alias","title":"SubQueries with Alias","text":"<pre><code>-- as alias\nSELECT *\nFROM (\n         SELECT *\n         FROM movies\n     ) t1;\n\n-- query without FROM\nSELECT (\n           SELECT avg(revenues_domestic) as \"Average Revenue\"\n           FROM movies_revenues\n       ),\n       (\n           SELECT min(revenues_domestic) as \"MIN Revenue\"\n           FROM movies_revenues\n       ),\n       (\n           SELECT max(revenues_domestic) as \"MAX Revenue\"\n           FROM movies_revenues\n       )\n</code></pre>"},{"location":"Databases/sql/10%20Summarization/window/","title":"Window","text":""},{"location":"Databases/sql/10%20Summarization/window/#rollup","title":"Rollup","text":"<p>The ROLLUP option allows you to include extra rows that represent the subtotals, which are commonly referred to as super-aggregate rows, along with the grand total row. </p> <p>The ROLLUP assumes a hierarchy among the input columns.  For example, if the input column is (c1,c2), the hierarchy <code>c1 &gt; c2</code>. </p> <pre><code>-- SYNTAX\nSELECT \n    c1, c2, aggregate_function(c3)\nFROM\n    table\nGROUP BY ROLLUP (c1, c2);\n\n-- EXAMPLE\n\nSELECT region, round(avg(imports), 2)\nFROM trades\nGROUP BY rollup (region);\n\n-- OUTPUT\n\n    region      |      round      \n-----------------+-----------------\n                |  73325290066.17\nNORTH AMERICA   |  70993412846.58\nSOUTH AMERICA   | 152968951703.49\nASIA            | 115476296703.29\nCENTRAL AMERICA |  38853979545.30\n\n\nSELECT region, country, round(avg(imports), 2)\nFROM trades\nWHERE country in ('USA', 'Argentina', 'Singapore', 'Brazil')\nGROUP BY rollup (region, country)\norder by 1;\n\n    region     |  country  |      round       \n---------------+-----------+------------------\n ASIA          | Singapore |  209191973057.39\n ASIA          |           |  209191973057.39\n SOUTH AMERICA | Argentina |   40764435340.44\n SOUTH AMERICA | Brazil    |  103647680768.84\n SOUTH AMERICA | USA       | 1590283700017.03\n SOUTH AMERICA |           |  579677530557.70\n               |           |  482346579011.01\n\n\nSELECT region, country, round(avg(imports / 1000000))\nFROM trades\nWHERE country in ('USA', 'France', 'Germany')\nGROUP BY cube (region, country);\n\n    region     | country |  round  \n---------------+---------+---------\n               |         |  974454\n EUROPE        | France  |  481421\n SOUTH AMERICA | USA     | 1590284\n EUROPE        | Germany |  800653\n SOUTH AMERICA |         | 1590284\n EUROPE        |         |  649743\n               | USA     | 1590284\n               | Germany |  800653\n               | France  |  481421\n\n\nSELECT region, country, round(avg(imports) / 1000000, 2)\nFROM trades\nWHERE country in ('USA', 'FRANCE', 'Germany')\nGROUP BY\n    grouping sets ( (), country, region );\n\n    region     | country |   round    \n---------------+---------+------------\n               |         | 1195468.31\n               | USA     | 1590283.70\n               | Germany |  800652.92\n SOUTH AMERICA |         | 1590283.70\n EUROPE        |         |  800652.92\n\n\n\nSELECT region, country, round(avg(imports) / 1000000, 2)\nFROM trades\nWHERE country in ('USA', 'FRANCE', 'Germany')\nGROUP BY\n    grouping sets ( (), country, region );\n\n    region     | country |   round    \n---------------+---------+------------\n               |         | 1195468.31\n               | USA     | 1590283.70\n               | Germany |  800652.92\n SOUTH AMERICA |         | 1590283.70\n EUROPE        |         |  800652.92\n\n\nSELECT region,\n       avg(exports)                                     as avg_all,\n       avg(exports) filter ( WHERE trades.year &lt; 1995 ) as avg_old,\n       avg(exports) filter ( WHERE trades.year &gt;= 1995) as avg_latest\nFROM trades\nGROUP BY\n    rollup (region);\n\n     region      |        avg_all        |        avg_old        |      avg_latest       \n-----------------+-----------------------+-----------------------+-----------------------\n                 |  72443407670.13915858 |  42905138774.45808383 |  74914795899.38702405\n NORTH AMERICA   |  74417101760.04615385 |  62932794640.69230769 |  75693135884.41880342\n SOUTH AMERICA   | 109338636484.50140845 |  49195642528.37777778 | 118069071091.03548387\n ASIA            | 122562815407.87438424 |  59879433497.46250000 | 129413458239.61338798\n CENTRAL AMERICA |  34961597492.66203704 |  12904661532.05555556 |  36966773489.08080808\n\n\nSELECT AVG(imports), avg(exports)\nFROM trades;\n\n         avg          |         avg          \n----------------------+----------------------\n 73325290066.16504854 | 72443407670.13915858\n</code></pre>"},{"location":"Databases/sql/10%20Summarization/window/#more-queries","title":"More Queries","text":"<pre><code>SELECT country, year, imports, exports, avg(exports) OVER () as avg_exports\nFROM trades;\n\nSELECT country, year, imports, exports, avg(exports) OVER (partition by country) as avg_exports\nFROM trades;\n\nSELECT country, year, imports, exports, avg(exports) OVER (partition by year &lt; 2000 ) as avg_exports\nFROM trades;\n\n\nSELECT country, year, exports, min(exports) OVER (PARTITION BY country order by year)\nFROM trades\nWHERE year &gt; 2001\n  and country in ('USA', 'France');\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/","title":"Data Types","text":""},{"location":"Databases/sql/2%20Data%20Types/#data-types_1","title":"Data Types","text":""},{"location":"Databases/sql/2%20Data%20Types/#boolean-data","title":"Boolean Data","text":"<ul> <li>TRUE</li> <li>FALSE</li> <li>NULL</li> </ul> TRUE FALSE TRUE FALSE 'true' 'false' 't' 'f' 'yes' 'no' 'y' 'n' '1' '0' <pre><code>CREATE TABLE booltable (\n    id SERIAL PRIMARY KEY ,\n    is_enable BOOLEAN NOT NULL\n);\n\nINSERT INTO booltable (is_enable) VALUES (TRUE), ('true'), \n    ('y') , ('yes'), ('t'), ('1');\nINSERT INTO booltable (is_enable) VALUES (FALSE), ('false'), \n    ('n') , ('no'), ('f'), ('0');\n\nSELECT * FROM booltable;\n\nSELECT * FROM booltable WHERE is_enable = 'y';\n\nSELECT * FROM booltable WHERE NOT is_enable;\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/#character-data","title":"Character Data","text":"Character Type Notes CHARACTER (N), CHAR (N) fixed-length, blank padded CHARACTER VARYING (N), VARCHAR(N) variable length with length limit TEXT, VARCHAR variable unlimited length, max 1GB <ul> <li>n is default to 1</li> </ul> <pre><code>-- INPUT\nSELECT CAST('Uday' as character(10)) as \"name\";\n-- OUTPUT\n\"Uday      \"\n\n-- INPUT\nSELECT 'Uday'::character(10) as \"name\";\n-- OUTPUT\n\"Uday      \"\n\n-- INPUT\nSELECT 'uday'::varchar(10);\n-- OUTPUT\n\"uday\"\n\n-- INPUT\nSELECT 'lorem ipsum'::text;\n-- OUTPUT\n\"lorem ipsum\"\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/#numeric-data","title":"Numeric Data","text":"Types Notes Integers whole number, +ve and -ve Fixed-point, floating point for fractions of whole nu type size (bytes) min max smallint 2 -32678 32767 integer 4 -2,147,483,648 2,147,483,647 bigint 8 -9223372036854775808 9223372036854775807 type size range smallserial 2 1 to 32767 serial 4 1 to 2147483647 bigserial 8 1 to 9223372036854775807"},{"location":"Databases/sql/2%20Data%20Types/#fixed-point-data","title":"Fixed Point Data","text":"<p>numeric ( precision , scale ) | decimal ( precision , scale )</p> <ul> <li>precision : max number of digits to the left and right of the decimal point</li> <li>scale : number of digits allowable on the right of the decimal point</li> </ul>"},{"location":"Databases/sql/2%20Data%20Types/#floating-point-data","title":"Floating Point Data","text":"Type Notes Real allows precision to six decimal digits Double precision allows precision to 15 digits points of precision type size storage type Range numeric, decimal variable fixed point 131072 digits before decimal point and 16383 digits after the decimal point real 4 floating point 6 decimal digits precision double precision 8 floating point 15 decimal digits precision <pre><code>CREATE TABLE table_numbers (\n    col_numeric numeric(20,5),\n    col_real real,\n    col_double double precision\n);\n\nINSERT INTO table_numbers (col_numeric,col_real,col_double)\nVALUES (.9,.9,.9),\n       (3.34675,3.34675,3.34675),\n       (4.2345678910,4.2345678910,4.2345678910);\n\nSELECT * FROM table_numbers;\n\n-- OUTPUT\nlearning=# select * from table_numbers ;\n col_numeric | col_real | col_double  \n-------------+----------+-------------\n     0.90000 |      0.9 |         0.9\n     3.34675 |  3.34675 |     3.34675\n     4.23457 | 4.234568 | 4.234567891\n(3 rows)\n</code></pre> <p>Hierarchical order to SELECT best type : numeric &gt; decimal &gt; float</p>"},{"location":"Databases/sql/2%20Data%20Types/#date-time-data","title":"Date Time Data","text":"type stores low high Date date only 4713 BC 294276 AD Time time only 4713 BC 5874897 AD Timestamp date and time 4713 BC 294276 AD <code>Timestampz</code> date, time and timezone 4713 BC 294276 AD Interval difference btw time"},{"location":"Databases/sql/2%20Data%20Types/#date-type","title":"Date type","text":"<pre><code>CREATE TABLE table_dates (\n    id serial primary key,\n    employee_name varchar(100) not null,\n    hire_date DATE NOT NULL,\n    add_date DATE DEFAULT CURRENT_DATE\n);\n\nINSERT INTO table_dates (employee_name, hire_date)\n    VALUES ('uday','2020-02-02'),('another uday','2020-02-01');\n\nSELECT *\nFROM table_dates;\n\nSELECT NOW();\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/#time-type","title":"Time type","text":"<pre><code>CREATE TABLE table_time (\n    id serial primary key ,\n    class_name varchar(10) not null ,\n    start_time time not null ,\n    end_time time not null\n);\n\nINSERT INTO table_time (class_name, start_time, end_time) \n    VALUES ('maths','08:00:00','08:55:00'),\n           ('chemistry','08:55:00','09:00:00');\n\nSELECT * FROM table_time;\n\n-- OUTPUT\n\n id | class_name | start_time | end_time \n----+------------+------------+----------\n  1 | maths      | 08:00:00   | 08:55:00\n  2 | chemistry  | 08:55:00   | 09:00:00\n(2 rows)\n\n\nSELECT CURRENT_TIME;\n\n    current_time    \n--------------------\n 07:21:00.163354+00\n(1 row)\n\n\nSELECT CURRENT_TIME(2);\n\n  current_time  \n----------------\n 07:21:14.96+00\n(1 row)\n\n\nSELECT LOCALTIME;\n\n    localtime    \n-----------------\n 07:21:36.717509\n(1 row)\n\n\nSELECT time '12:10' - time '04:30' as RESULT;\n  result  \n----------\n 07:40:00\n(1 row)\n\n\n-- format : interval 'n type'\n-- n = number\n-- type : second, minute, hours, day, month, year ....\n\nSELECT CURRENT_TIME ,\n    CURRENT_TIME + INTERVAL '2 hours' as RESULT;\n\n    current_time    |       result       \n--------------------+--------------------\n 07:22:06.241919+00 | 09:22:06.241919+00\n(1 row)\n\n\nSELECT CURRENT_TIME ,\n    CURRENT_TIME + INTERVAL '-2 hours' as RESULT;\n\n    current_time    |       result       \n--------------------+--------------------\n 07:22:16.644727+00 | 05:22:16.644727+00\n(1 row)\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/#timestamp-and-timezone","title":"Timestamp and Timezone","text":"<ul> <li><code>timestamp</code> : stores time without time zone</li> <li><code>timestamptz</code> : timestamp with time zone , stored using UTC format</li> <li>adding timestamp to timestamptz without mentioning the zone will result in server automatically assumes timezone to system's timezone</li> <li>Internally, PostgreSQL will store the timezoneaccurately but then OUTPUTting the data, will it be converted according to your timezone</li> </ul> <pre><code>SELECT name FROM pg_timezone_names \n    where name = 'posix/Asia/Calcutta';\n\nSET TIMEZONE='Asia/Calcutta';\n\nSELECT NOW()::TIMESTAMP;\n\n            now             \n----------------------------\n 2021-08-12 12:53:03.971433\n(1 row)\n\n\nCREATE TABLE table_time_tz (\n    ts timestamp,\n    tstz timestamptz\n);\n\nINSERT INTO table_time_tz (ts, tstz) \n    VALUES ('2020-12-22 10:10:10',\n            '2020-12-22 10:10:10.009+05:30');\n\nSELECT * FROM table_time_tz;\n\n         ts          |             tstz              \n---------------------+-------------------------------\n 2020-12-22 10:10:10 | 2020-12-22 10:10:10.009+05:30\n(1 row)\n\n\nSELECT CURRENT_TIMESTAMP;\n\n        current_timestamp        \n---------------------------------\n 2021-08-12 12:53:29.54762+05:30\n(1 row)\n\n\nSELECT timezone('Asia/Singapore','2020-01-01 00:00:00')\n\n      timezone       \n---------------------\n 2020-01-01 02:30:00\n(1 row)\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/#uuid","title":"UUID","text":"<ul> <li>UUID : Universal Unique Identifier</li> <li>PostgreSQL doesn't provide internal function to generate UUID's, use <code>uuid-ossp</code></li> </ul> <pre><code>CREATE EXTENSION IF NOT EXISTS \"uuid-ossp\";\n\nSELECT uuid_generate_v1();\n\n           uuid_generate_v1           \n--------------------------------------\n 4d459e0c-fb3e-11eb-a638-0242ac110002\n\n\n-- pure randomness\nSELECT uuid_generate_v4();\n\n           uuid_generate_v4           \n--------------------------------------\n 418f39e5-8a46-4da2-8cea-884904f45d6f\n\n\nCREATE TABLE products_uuid (\n    id uuid default uuid_generate_v1(),\n    product_name varchar(100) not null\n);\n\nINSERT INTO products_uuid (product_name) \n    VALUES ('ice cream'),('cake'),('candies');\n\nSELECT * FROM products_uuid;\n\n                  id                  | product_name \n--------------------------------------+--------------\n 5cf1dbe0-fb3e-11eb-a638-0242ac110002 | ice cream\n 5cf1df28-fb3e-11eb-a638-0242ac110002 | cake\n 5cf1df46-fb3e-11eb-a638-0242ac110002 | candies\n\nCREATE TABLE products_uuid_v4 (\n    id uuid default uuid_generate_v4(),\n    product_name varchar(100) not null\n);\n\nINSERT INTO products_uuid_v4 (product_name) \n    VALUES ('ice cream'),('cake'),('candies');\n\nSELECT * FROM products_uuid_v4;\n\nlearning=# SELECT * FROM products_uuid_v4;\n                  id                  | product_name \n--------------------------------------+--------------\n 83b74bed-2cf8-4e26-80b0-c7c7b2e5f3e7 | ice cream\n ac563251-7a95-408d-966b-ed5ecc1f228d | cake\n 1079f6d3-b0c3-40ef-bd2e-da4467b63432 | candies\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/#hstore","title":"HSTORE","text":"<ul> <li>stores data in key-value pairs</li> <li>key and VALUES are text string only</li> </ul> <pre><code>CREATE EXTENSION IF NOT EXISTS hstore;\n\nCREATE TABLE table_hstore (\n    id SERIAL PRIMARY KEY ,\n    title varchar(100) not null,\n    book_info hstore\n);\n\nINSERT INTO table_hstore (title, book_info) VALUES\n(\n    'Title 1', ' \"publisher\" =&gt; \"ABC publisher\" , \n    \"paper_cost\" =&gt; \"100\" , \"e_cost\" =&gt; \"5.85\" '\n);\n\nSELECT * FROM table_hstore;\n\n id |  title  |   book_info                              \n\n  1 | Title 1 | \"e_cost\"=&gt;\"5.85\", \"publisher\"=&gt;\"ABC publisher\", \"paper_cost\"=&gt;\"100\"\n\n\nSELECT book_info -&gt; 'publisher' as publisher \nFROM table_hstore;\n\n   publisher   \n---------------\n ABC publisher\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/#json","title":"Json","text":"<ul> <li>PostgreSQL supports both </li> <li>JSON</li> <li>BSON or JSONB ( Binary JSON )</li> <li>JSONB has full support for indexing</li> </ul> <pre><code>CREATE TABLE table_json (\n    id SERIAL PRIMARY KEY ,\n    docs json\n);\n\nINSERT INTO table_json (docs) \n    VALUES ('[1,2,3,4,5,6]'),('{\"key\":\"value\"}');\n\nINSERT INTO table_json (docs)\nVALUES ('[{\"key\":\"value\"},{\"key2\":\"value2\"}]');\n\nSELECT * FROM table_json;\n\n id |                docs                 \n----+-------------------------------------\n  1 | [1,2,3,4,5,6]\n  2 | {\"key\":\"value\"}\n  3 | [{\"key\":\"value\"},{\"key2\":\"value2\"}]\n\n\nALTER TABLE table_json alter column docs type jsonb;\n\nSELECT * FROM table_json where docs @&gt; '2';\n\n id |        docs        \n----+--------------------\n  1 | [1, 2, 3, 4, 5, 6]\n\n\nCREATE index on table_json USING GIN (docs jsonb_path_ops);\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/#network-address-data-types","title":"Network Address Data Types","text":"Name Storage Size Notes cidr 7 or 19 bytes IPv4 and IPv6 networks inet 7 or 19 bytes IPv4 and IPv6 hosts and networks macaddr 6 bytes MAC addresses macaddr8 8 bytes MAC addresses ( EUI 64-bit ) <ul> <li>It is better to use these types instead of plain text types of store network address, because  these types offer input error checking and specialised operators and functions</li> <li>Supports indexing and advance operations</li> </ul> <pre><code>CREATE TABLE table_netaddr (\n    id SERIAL PRIMARY KEY ,\n    ip inet\n);\n\nINSERT INTO table_netaddr (ip)\nVALUES ('148.77.50.74'),\n        ('110.158.172.66'),\n        ('176.103.251.175'),\n        ('84.84.14.58'),\n        ('141.122.225.161'),\n        ('78.44.113.33'),\n        ('81.236.254.9'),\n        ('82.116.85.21'),\n        ('54.64.79.223'),\n        ('162.240.78.253');\n\nSELECT * FROM table_netaddr LIMIT 5;\n\n id |       ip        \n----+-----------------\n  1 | 148.77.50.74\n  2 | 110.158.172.66\n  3 | 176.103.251.175\n  4 | 84.84.14.58\n  5 | 141.122.225.161\n\n\nSELECT \n       ip, \n       set_masklen(ip,24) as inet_24, \n       set_masklen(ip::cidr,24) as cidr_24 ,\n       set_masklen(ip::cidr,27) as cidr_27,\n       set_masklen(ip::cidr,28) as cidr_28 \nFROM \n     table_netaddr LIMIT 2;\n\n ip | inet_24 | cidr_24 | cidr_27 | cidr_28 \n\n 148.77.50.74   | 148.77.50.74/24   | 148.77.50.0/24   | 148.77.50.64/27   | 148.77.50.64/28\n 110.158.172.66 | 110.158.172.66/24 | 110.158.172.0/24 | 110.158.172.64/27 | 110.158.172.64/28\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/arrays/","title":"Arrays","text":""},{"location":"Databases/sql/2%20Data%20Types/arrays/#arrays_1","title":"Arrays","text":"<ul> <li>Original Documentation : here</li> </ul>"},{"location":"Databases/sql/2%20Data%20Types/arrays/#syntax","title":"Syntax","text":"<pre><code>column_name DATATYPE[] {CONSTRAINT}\n</code></pre> <pre><code>CREATE TABLE table_array\n(\n    id     SERIAL,\n    name   varchar(100),\n    grades text[]\n);\n\nINSERT INTO table_array (name, grades)\nVALUES ('person 1', array ['100','45']);\nINSERT INTO table_array (name, grades)\nVALUES ('person 2', array ['100','90']);\nINSERT INTO table_array (name, grades)\nVALUES ('person 3', array ['100','97']);\nINSERT INTO table_array (name, grades)\nVALUES ('person 4', array ['100','94']);\n\n\nSELECT name, grades[1]\nFROM table_array;\n\n   name   | grades \n----------+--------\n person 1 | 100\n person 2 | 100\n person 3 | 100\n person 4 | 100\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/arrays/#array-in-tables","title":"Array in Tables","text":""},{"location":"Databases/sql/2%20Data%20Types/arrays/#insert","title":"Insert","text":"<ul> <li>for non text data , use <code>{value1,value2}</code> or <code>array ['value1','value2']</code></li> <li>for text data , use <code>{\"value1\",\"value2\"}</code> or <code>array [value1,value2]</code></li> </ul> <pre><code>CREATE TABLE teachers\n(\n    id    serial primary key,\n    class text[]\n);\n\nCREATE TABLE IF NOT EXISTS teachers\n(\n    id    serial primary key,\n    class text array\n);\n\nINSERT INTO teachers (class)\nVALUES (array ['english','maths']);\n\n id |      class      \n----+-----------------\n  1 | {english,maths}\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/arrays/#query","title":"Query","text":"<pre><code>SELECT class[1]\nFROM teachers;\n\n  class  \n---------\n english\n\n\nSELECT *\nFROM teachers\nWHERE class[1] = 'english';\n\n id |      class      \n----+-----------------\n  1 | {english,maths}\n\n\nSELECT *\nFROM teachers\nWHERE 'english' = any (class);\n\n id |      class      \n----+-----------------\n  1 | {english,maths}\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/arrays/#update","title":"Update","text":"<pre><code>update teachers\nset class[1] = 'dutch'\nWHERE id = 1;\n\n id |     class     \n----+---------------\n  1 | {dutch,maths}\n\nUpdate teachers\nset class[3] = 'science'\nWHERE id = 1;\n\n id |         class         \n----+-----------------------\n  1 | {dutch,maths,science}\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/arrays/#dimensionless","title":"Dimensionless","text":"<pre><code>CREATE TABLE teacher2\n(\n    id    serial primary key,\n    class text array[1]\n);\n\nINSERT INTO teacher2 (class)\nVALUES (array ['english']);\n\n id |   class   \n----+-----------\n  1 | {english}\n\n-- dimensions doesnt matter\nINSERT INTO teacher2 (class)\nVALUES (array ['english','hindi']);\n\n id |      class      \n----+-----------------\n  1 | {english}\n  2 | {english,hindi}\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/arrays/#unnest","title":"Unnest","text":"<pre><code>SELECT id, class, unnest(class)\nFROM teacher2;\n\n id |      class      | unnest  \n----+-----------------+---------\n  1 | {english}       | english\n  2 | {english,hindi} | english\n  2 | {english,hindi} | hindi\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/arrays/#multi-dimensional-array","title":"Multi Dimensional Array","text":"<pre><code>CREATE TABLE students\n(\n    id    serial primary key,\n    name  varchar(50) not null,\n    grade integer[][]\n);\n\nINSERT INTO students (name, grade)\nVALUES ('s1', '{90,2020}'),\n       ('s1', '{70,2020}'),\n       ('s1', '{60,2020}');\n\nSELECT *\nFROM students;\n\n id | name |   grade   \n----+------+-----------\n  1 | s1   | {90,2020}\n  2 | s1   | {70,2020}\n  3 | s1   | {60,2020}\n\nSELECT *\nFROM students\nWHERE grade @&gt; '{90}';\n\n id | name |   grade   \n----+------+-----------\n  1 | s1   | {90,2020}\n\nSELECT *\nFROM students\nWHERE '2020' = any (grade);\n\n id | name |   grade   \n----+------+-----------\n  1 | s1   | {90,2020}\n  2 | s1   | {70,2020}\n  3 | s1   | {60,2020}\n\nSELECT *\nFROM students\nWHERE grade[1] &lt; 80;\n\n id | name |   grade   \n----+------+-----------\n  2 | s1   | {70,2020}\n  3 | s1   | {60,2020}\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/arrays/#array-vs-jsonb","title":"Array vs JSONB","text":""},{"location":"Databases/sql/2%20Data%20Types/arrays/#advantages-to-array","title":"Advantages to Array","text":"<ul> <li>It's pretty easy to setup</li> <li>Requires less storage than jsonb</li> <li>It has multi dimensional support </li> <li>Indexing through GIN, greatly speeds up query</li> <li>The PostgreSQL planner is likely to make better decisions with PostgreSQL array, as it collects statistics on its content, but not with JSONB.</li> </ul>"},{"location":"Databases/sql/2%20Data%20Types/arrays/#disadvantages-to-array","title":"Disadvantages to Array","text":"<ul> <li>Its main advantages is that you are limited to one data type</li> <li>Have to follow strict order of the array data input.</li> </ul>"},{"location":"Databases/sql/2%20Data%20Types/arrays/#advantages-to-jsonb","title":"Advantages to JSONB","text":"<ul> <li>Provides additional operators for querying</li> <li>Support for indexing</li> </ul>"},{"location":"Databases/sql/2%20Data%20Types/arrays/#disadvantages-to-jsonb","title":"Disadvantages to JSONB","text":"<ul> <li>Has to parse the json data to binary format</li> <li>slow in writing, but faster in reading</li> <li>Doesn't maintain order</li> </ul>"},{"location":"Databases/sql/2%20Data%20Types/arrays/#ranges","title":"Ranges","text":"<pre><code>SELECT INT4RANGE(1, 6)                                                   AS \"DEFAULT [(\",\n       NUMRANGE(1.432, 6.238, '[]')                                      AS \"[]\",\n       DATERANGE('20200101', '20201222', '()')                           AS \"DATES ()\",\n       TSRANGE(LOCALTIMESTAMP, LOCALTIMESTAMP + INTERVAL '8 DAYS', '(]') AS \"OPENED CLOSED\";\n\n DEFAULT [( |      []       |        DATES ()         |                       OPENED CLOSED                       \n------------+---------------+-------------------------+-----------------------------------------------------------\n [1,6)      | [1.432,6.238] | [2020-01-02,2020-12-22) | (\"2021-08-24 05:22:13.03625\",\"2021-09-01 05:22:13.03625\"]\n\n\nSELECT ARRAY [1,2,3]        AS \"INT ARRAYS\",\n       ARRAY [2.123::FLOAT] AS \"FLOATING NUMBERS\",\n       ARRAY [CURRENT_DATE, CURRENT_DATE + 5];\n\n INT ARRAYS | FLOATING NUMBERS |          array          \n------------+------------------+-------------------------\n {1,2,3}    | {2.123}          | {2021-08-24,2021-08-29}\n\n\nSELECT ARRAY [1,2,3,4] = ARRAY [1,2,3,4],\n       ARRAY [1,2,3,4] = ARRAY [1,1,3,4],\n       ARRAY [1,2,3,4] &lt;&gt; ARRAY [1,2,3,4],\n       ARRAY [1,2,3,4] &lt; ARRAY [1,5,3,4],\n       ARRAY [1,2,3,4] &lt;= ARRAY [1,3,3,4],\n       ARRAY [1,2,3,4] &gt; ARRAY [1,2,3,4];\n\n ?column? | ?column? | ?column? | ?column? | ?column? | ?column? \n----------+----------+----------+----------+----------+----------\n t        | f        | f        | t        | t        | f\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/arrays/#inclusion-operators","title":"Inclusion Operators","text":"<pre><code>SELECT ARRAY [1,2,3,4] @&gt; ARRAY [2,3,4]       AS \"CONTAINS\",\n       ARRAY ['A','B'] &lt;@ ARRAY ['A','B','C'] AS \"CONTAINED BY\",\n       ARRAY [1,2,3,4] &amp;&amp; ARRAY [2,3,4]       AS \"IS OVERLAP\";\n\n CONTAINS | CONTAINED BY | IS OVERLAP \n----------+--------------+------------\n t        | t            | t\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/arrays/#length-and-dimensions","title":"Length and Dimensions","text":"<pre><code>SELECT ARRAY [1,2,3] || ARRAY [4,5,6] AS \"COMBINED ARRAY\";\n\n COMBINED ARRAY \n----------------\n {1,2,3,4,5,6}\n\nSELECT ARRAY_CAT(ARRAY [1,2,3],\n                 ARRAY [4,5,6]) AS \"COMBINED ARRAY VIA CAT\";\n\n COMBINED ARRAY VIA CAT \n------------------------\n {1,2,3,4,5,6}\n\nSELECT 4 || ARRAY [1,2,3] AS \"ADDING TO ARRAY\";\n\n ADDING TO ARRAY \n-----------------\n {4,1,2,3}\n\nSELECT ARRAY [1,2,3] || 4 AS \"ADDING TO ARRAY\";\n\n ADDING TO ARRAY \n-----------------\n {1,2,3,4}\n\nSELECT ARRAY_APPEND(ARRAY [1,2,3], 4) AS \"USING APPEND\";\n\n USING APPEND \n--------------\n {1,2,3,4}\n\nSELECT ARRAY_PREPEND(4, ARRAY [1,2,3]) AS \"USING APPEND\";\n\n USING APPEND \n--------------\n {4,1,2,3}\n\nSELECT ARRAY_NDIMS(ARRAY [[1,2,3,4],[1,2,3,4],[1,2,3,4]]) AS \"DIMENSIONS\",\n       ARRAY_DIMS(ARRAY [1,2,3,4,2,3,4])                  AS \"DIMENSIONS\";\n\n DIMENSIONS | DIMENSIONS \n------------+------------\n          2 | [1:7]\n\nSELECT ARRAY_LENGTH(ARRAY [-111,2,3,4], 1);\n\n array_length \n--------------\n            4\n\nSELECT ARRAY_UPPER(ARRAY [1,2,3,4000], 1),\n       ARRAY_LOWER(ARRAY [-100,2,3,4], 1);\n\n array_upper | array_lower \n-------------+-------------\n           4 |           1\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/arrays/#positions","title":"Positions","text":"<pre><code>SELECT array_position(array ['jan','feb','mar'], 'feb');\n\n array_position \n----------------\n              2\n\nSELECT array_position(array [1,2,2,3,4], 2, 3);\n\n array_position \n----------------\n              3\n\nSELECT array_positions(array [1,2,2,3,4], 2);\n array_positions \n-----------------\n {2,3}\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/arrays/#search-replace-remove","title":"Search, Replace, Remove","text":"<pre><code>SELECT array_cat(array [1,2], array [3,4]);\n\n array_cat \n-----------\n {1,2,3,4}\n\nSELECT array_append(array [1,2,3], 4);\n\n array_append \n--------------\n {1,2,3,4}\n\nSELECT array_remove(array [1,2,3,4,4,4], 4);\n\n array_remove \n--------------\n {1,2,3}\n\nSELECT array_replace(array [1,2,3,4,4,4], 4, 5);\n\n array_replace \n---------------\n {1,2,3,5,5,5}\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/arrays/#in-not-in-any","title":"IN, NOT IN, ANY","text":"<pre><code>SELECT 20 in (1, 2, 3, 20) as \"result\";\n-- t\nSELECT 25 in (1, 2, 3, 20) as \"result\";\n-- f\nSELECT 25 not in (1, 2, 3, 20) as \"result\";\n-- t\nSELECT 20 = all (Array [20,22]), 20 = all (array [20,20]);\n-- f\nSELECT 20 = any (Array [1,2,25]) as \"result\";\n-- f\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/arrays/#string-to-array","title":"STRING TO Array","text":"<pre><code>SELECT string_to_array('1,2,3,4,5', ',');\n\n string_to_array \n-----------------\n {1,2,3,4,5}\n\nSELECT string_to_array('1,2,3,4,5,ABC', ',', 'ABC');\n\n string_to_array  \n------------------\n {1,2,3,4,5,NULL}\n\nSELECT string_to_array('1,2,3,4,,6', ',', '');\n\n string_to_array  \n------------------\n {1,2,3,4,NULL,6}\n\nSELECT array_to_string(ARRAY [1,2,3,4], '|');\n\n array_to_string \n-----------------\n 1|2|3|4\n\nSELECT array_to_string(ARRAY [1,2,3,4,NULL], '|', 'EMPTY');\n\n  array_to_string \n-----------------\n 1|2|3|4|EMPTY\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/date-time-stamps/","title":"Date/Time/Stamps","text":""},{"location":"Databases/sql/2%20Data%20Types/date-time-stamps/#datetimestamps_1","title":"Date/Time/Stamps","text":""},{"location":"Databases/sql/2%20Data%20Types/date-time-stamps/#set-date-time-style","title":"Set Date Time Style","text":"<pre><code>-- show system date style\nSHOW datestyle;\n\n-- set new datestyle\nSET datestyle = 'ISO, DMY';\nSET datestyle = 'ISO, MDY';\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/date-time-stamps/#make","title":"Make","text":"<pre><code>SELECT MAKE_DATE (2020,01,01);\n make_date  \n------------\n 2020-01-01\n\nSELECT MAKE_DATE (2020,01,01);\n make_date  \n------------\n 2020-01-01\n\nSELECT MAKE_TIME(2,3,14.65);\n  make_time  \n-------------\n 02:03:14.65\n\nSELECT MAKE_TIMESTAMP (2020,02,02,10,20,45.44);\n\n    make_timestamp     \n------------------------\n 2020-02-02 10:20:45.44\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/date-time-stamps/#make_interval","title":"Make_interval","text":"<pre><code>SELECT MAKE_INTERVAL (2020,01,02,10,20,33);\n\n          make_interval           \n-----------------------------------\n 2020 years 1 mon 24 days 20:33:00\n\nSELECT MAKE_INTERVAL (days =&gt; 10);\n\nmake_interval \n---------------\n 10 days\n\nSELECT MAKE_INTERVAL (months =&gt; 7, days =&gt; 10, mins=&gt;35);\n\n     make_interval      \n-------------------------\n 7 mons 10 days 00:35:00\n\nSELECT MAKE_INTERVAL (weeks =&gt; 10);\n\nmake_interval \n---------------\n 70 days\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/date-time-stamps/#make_timestamptz","title":"Make_timestamptz","text":"<pre><code>SELECT make_timestamptz(2020,02,02,10,30,45.55,'Asia/Calcutta');\n\n     make_timestamptz      \n---------------------------\n 2020-02-02 05:00:45.55+00\n\nSELECT pg_typeof(make_timestamptz(2020,02,02,10,30,45.55));\n\n        pg_typeof         \n--------------------------\n timestamp with time zone\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/date-time-stamps/#date-value-extractor","title":"Date Value Extractor","text":"<ul> <li>https://www.postgresql.org/docs/8.1/functions-datetime.html</li> <li>https://www.postgresqltutorial.com/postgresql-extract/</li> </ul>"},{"location":"Databases/sql/2%20Data%20Types/date-time-stamps/#extract","title":"Extract","text":"<pre><code>select extract ('day' FROM current_timestamp), extract ('month' FROM current_timestamp), extract ('year' FROM current_timestamp);\n\n date_part | date_part | date_part \n-----------+-----------+-----------\n        14 |         8 |      2021\n\nselect extract('epoch' FROM current_timestamp);\n\n     date_part     \n-------------------\n 1628923887.158532\n\n\nselect extract('century' FROM current_timestamp);\n\n date_part \n-----------\n        21\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/date-time-stamps/#maths-operations-on-date-time","title":"Maths Operations on Date Time","text":"<pre><code>select '2020-02-02'::date + 04;\n\n  ?column?  \n------------\n 2020-02-06\n\nselect '23:59:59' + INTERVAL '1 SECOND';\n\n ?column? \n----------\n 24:00:00\n\nselect '23:59:59' + INTERVAL '2 SECOND';\n\n ?column? \n----------\n 24:00:01\n\nSELECT CURRENT_TIMESTAMP + '01:01:01';\n\n           ?column?            \n-------------------------------\n 2021-08-14 07:53:05.444791+00\n\nSELECT DATE '20200101' + TIME '10:25:10';\n\n      ?column?       \n---------------------\n 2020-01-01 10:25:10\n\nSELECT '10:10:10' + TIME '10:25:10';\n\n ?column? \n----------\n 20:35:20\n\nSELECT DATE '20200101' - INTERVAL '1 HOUR';\n\n      ?column?       \n---------------------\n 2019-12-31 23:00:00\n\nSELECT INTERVAL '30 MINUTES' + '2 HOUR';\n\n ?column? \n----------\n 02:30:00\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/date-time-stamps/#overlap","title":"Overlap","text":"<pre><code>select\n    ( DATE '2020-01-01' , DATE '2020-12-31' )\n    OVERLAPS\n    ( DATE '2020-12-30', DATE '2020-12-01' );\n\n overlaps \n----------\n t\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/date-time-stamps/#current","title":"Current","text":"<pre><code>select\n    current_date,\n    current_time,\n    current_time(2),\n    current_timestamp;\n\n current_date |    current_time    |  current_time  |       current_timestamp       \n 2021-08-14   | 06:53:52.187847+00 | 06:53:52.19+00 | 2021-08-14 06:53:52.187847+00\n\n\nselect localtime,\n    localtimestamp,\n    localtimestamp(2);\n\n    localtime    |       localtimestamp       |     localtimestamp     \n-----------------+----------------------------+------------------------\n 06:54:07.540777 | 2021-08-14 06:54:07.540777 | 2021-08-14 06:54:07.54\n\n\nselect\n   now(),\n   transaction_timestamp(),\n   clock_timestamp();\n\nnow | transaction_timestamp | clock_timestamp        \n\n2021-08-14 06:54:31.371838+00 | 2021-08-14 06:54:31.371838+00 | 2021-08-14 06:54:31.371924+00\n\n\nselect statement_timestamp(),\n   timeofday();\n\nstatement_timestamp      |              timeofday              \n-------------------------------+-------------------------------------\n 2021-08-14 06:55:07.202782+00 | Sat Aug 14 06:55:07.202849 2021 UTC\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/date-time-stamps/#age","title":"Age","text":"<pre><code>select age('2020-01-01', '2019-10-01');\n\n  age   \n--------\n 3 mons\n\nselect age(timestamp '2020-01-01');\n\n          age          \n-----------------------\n 1 year 7 mons 13 days\n\nselect age(current_date, '2020-01-01');\n\n          age          \n-----------------------\n 1 year 7 mons 13 days\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/date-time-stamps/#epochs","title":"Epochs","text":"<pre><code>select age ( timestamp '2020-12-20', timestamp '2020-10-20' );\n\n  age   \n--------\n 2 mons\n\n\nSELECT \n    EXTRACT (EPOCH FROM TIMESTAMPTZ '2020-10-20')\n    - EXTRACT (EPOCH FROM TIMESTAMPTZ '2020-08-20') \n        AS \"DIFFERENCE IN SECONDS\";\n\n DIFFERENCE IN SECONDS \n-----------------------\n               5270400\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/date-time-stamps/#timezone","title":"Timezone","text":"<pre><code>SELECT * FROM pg_timezone_names;\n\nSELECT * FROM pg_timezone_abbrevs;\n\nSHOW TIME ZONE;\n\nSET TIME ZONE 'Asia/Calcutta';\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/date-time-stamps/#date_part-and-date_trunc","title":"date_part and date_trunc","text":"<pre><code>SELECT date_part ('day', date '2021-11-07');\n\n date_part \n-----------\n         7\n\n\nSELECT date_trunc('hour', \n    timestamptz '2021-07-16 23:38:40.775719 +05:30');\n\n       date_trunc       \n------------------------\n 2021-07-16 18:00:00+00\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/json/","title":"JSON","text":""},{"location":"Databases/sql/2%20Data%20Types/json/#json_1","title":"JSON","text":""},{"location":"Databases/sql/2%20Data%20Types/json/#json-vs-jsonb","title":"JSON vs JSONB","text":"JSON JSONB stores data in text format stores data in binary format stores data AS-is trims of white spaces slower in operations fASter in operations doesn't support full text indexing supports full text indexing <pre><code>SELECT '{\n    \"title\":\"book 1\"}\n'::json;\n\n         json          \n-----------------------\n {                    +\n     \"title\":\"book 1\"}+\n\n(1 row)\n\n\nSELECT '\n  {\"title\":\"book 1\"}\n  '::jsonb\n\n\n        jsonb        \n---------------------\n {\"title\": \"book 1\"}\n(1 row)\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/json/#operations","title":"Operations","text":"<pre><code>CREATE TABLE books_jsonb\n(\n    id        serial primary key,\n    book_info JSONB\n);\n\nINSERT INTO books_jsonb (book_info)\nVALUES ('{\n  \"title\": \"Book 1\"\n}'),\n('{\n  \"title\": \"Book 2\"\n}'),\n('{\n  \"title\": \"Book 3\"\n}');\n\n id | title  \n----+--------\n  1 | Book 1\n  2 | Book 2\n  3 | Book 3\n\n\nSELECT id, book_info -&gt;&gt; 'title' AS \"title\"\nFROM books_jsonb\nWHERE book_info -&gt;&gt; 'title' = 'Book 1';\n\n id | title  \n----+--------\n  1 | Book 1\n\n\nINSERT INTO books_jsonb (book_info)\nVALUES ('{ \"title\": \"Book 10\" }');\n\n\n id |      book_info       \n----+----------------------\n  1 | {\"title\": \"Book 1\"}\n  2 | {\"title\": \"Book 2\"}\n  3 | {\"title\": \"Book 3\"}\n  4 | {\"title\": \"Book 10\"}\n\n\nUPDATE books_jsonb\nSET book_info = book_info || '{\"title\": \"Book 4\" }'\nWHERE book_info -&gt;&gt; 'title' = 'Book 10';\n\n id |      book_info      \n----+---------------------\n  1 | {\"title\": \"Book 1\"}\n  2 | {\"title\": \"Book 2\"}\n  3 | {\"title\": \"Book 3\"}\n  4 | {\"title\": \"Book 4\"}\n\n\nUPDATE books_jsonb\nSET book_info = book_info || '{\"author\": \"author 1\" }'\nWHERE book_info -&gt;&gt; 'title' = 'Book 1';\n\n id |                 book_info                 \n----+-------------------------------------------\n  2 | {\"title\": \"Book 2\"}\n  3 | {\"title\": \"Book 3\"}\n  4 | {\"title\": \"Book 4\"}\n  1 | {\"title\": \"Book 1\", \"author\": \"author 1\"}\n\n\nUPDATE books_jsonb\nSET book_info = book_info - 'author'\nWHERE book_info -&gt;&gt; 'title' = 'Book 1';\n\n id |      book_info      \n----+---------------------\n  1 | {\"title\": \"Book 1\"}\n  2 | {\"title\": \"Book 2\"}\n  3 | {\"title\": \"Book 3\"}\n  4 | {\"title\": \"Book 4\"}\n\n\nUPDATE books_jsonb\nSET book_info = book_info || '{\"available\":[\"new delhi\",\"Tokyo\",\"sydney\"]}'\nWHERE book_info -&gt;&gt; 'title' = 'Book 1';\n\n id |  book_info                                         \n\n  2 | {\"title\": \"Book 2\"}\n  3 | {\"title\": \"Book 3\"}\n  4 | {\"title\": \"Book 4\"}\n  1 | {\"title\": \"Book 1\", \"author\": \"author 1\", \"available\": [\"new delhi\", \"Tokyo\", \"sydney\"]}\n\n\nUPDATE books_jsonb\nSET book_info = book_info #- '{available,1}'\nWHERE book_info -&gt;&gt; 'title' = 'Book 1';\n\n id |   Book_info                                    \n\n  2 | {\"title\": \"Book 2\"}\n  3 | {\"title\": \"Book 3\"}\n  4 | {\"title\": \"Book 4\"}\n  1 | {\"title\": \"Book 1\", \"author\": \"author 1\", \"available\": [\"new delhi\", \"sydney\"]}\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/json/#row_to_json","title":"ROW_TO_JSON()","text":"<pre><code>SELECT row_to_json(orders)\nFROM orders;\n\n {\"order_id\":10248,\"customer_id\":\"VINET\",\"employee_id\":5,\"order_date\":\"1996-07-04\",\"required_date\":\"1996-08-01\",\"shipped_date\":\"1996-07-16\",\"ship_via\":3,\"freight\":32.38,\"ship_name\":\"Vins et alcools Chevalier\",\"ship_address\":\"59 rue de l'Abbaye\",\"ship_city\":\"Reims\",\"ship_region\":null,\"ship_postal_code\":\"51100\",\"ship_country\":\"France\"}\n\nSELECT row_to_json(t)\nFROM \n(\n  SELECT *\n  FROM orders\n) AS t;\n\n {\"order_id\":10248,\"customer_id\":\"VINET\",\"employee_id\":5,\"order_date\":\"1996-07-04\",\"required_date\":\"1996-08-01\",\"shipped_date\":\"1996-07-16\",\"ship_via\":3,\"freight\":32.38,\"ship_name\":\"Vins et alcools Chevalier\",\"ship_address\":\"59 rue de l'Abbaye\",\"ship_city\":\"Reims\",\"ship_region\":null,\"ship_postal_code\":\"51100\",\"ship_country\":\"France\"}\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/json/#json_agg","title":"JSON_AGG()","text":"<pre><code>SELECT *\nFROM orders;\n\nSELECT director_id, first_name, lASt_name, \n(\n  SELECT json_agg(x)\n  FROM \n    (\n        SELECT movie_name\n        FROM movies mv\n        WHERE mv.director_id = directors.director_id\n    ) AS x\n) :: jsonb\nFROM directors;\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/json/#json_build","title":"JSON_BUILD","text":"<pre><code>SELECT json_build_array(1, 2, 3, 4, 5, 6);\n\n  json_build_array  \n--------------------\n [1, 2, 3, 4, 5, 6]\n\n\nSELECT json_build_array(1, 2, 3, 4, 5, 6, 'Hi');\n\n     json_build_array     \n--------------------------\n [1, 2, 3, 4, 5, 6, \"Hi\"]\n\n\n-- error : argument list must have even number of elements\nSELECT json_build_object(1, 2, 3, 4, 5);\n\nSELECT json_build_object(1, 2, 3, 4, 5, 6, 7, 'Hi');\n\n            json_build_object            \n-----------------------------------------\n {\"1\" : 2, \"3\" : 4, \"5\" : 6, \"7\" : \"Hi\"}\n\n\nSELECT json_object('{name,email}', '{\"adnan\",\"a@b.com\"}');\n\n               json_object               \n-----------------------------------------\n {\"name\" : \"adnan\", \"email\" : \"a@b.com\"}\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/json/#json-functions","title":"Json Functions","text":"<pre><code>CREATE TABLE directors_docs\n(\n    id   serial primary key,\n    body jsonb\n);\n\n\nSELECT director_id,\n       first_name,\n       last_name,\n       (\n           SELECT json_agg(x) AS all_movies\n           FROM (\n                    SELECT movie_name\n                    FROM movies mv\n                    WHERE mv.director_id = directors.director_id\n                ) x\n       ) :: jsonb\nFROM directors;\n\n\nINSERT INTO directors_docs (body)\nSELECT row_to_json(a)\nFROM (\n         SELECT director_id,\n                first_name,\n                last_name,\n                (\n                    SELECT json_agg(x) AS all_movies\n                    FROM (\n                             SELECT movie_name\n                             FROM movies mv\n                             WHERE mv.director_id = directors.director_id\n                         ) x\n                ) :: jsonb\n         FROM directors\n) AS a;\n\nSELECT *\nFROM directors_docs LIMIT 3;\n\n  1 | {\"last_name\": \"Alfredson\", \"all_movies\": [{\"movie_name\": \"Let the Right One In\"}], \"first_name\": \"Tomas\", \"director_id\": 1}\n  2 | {\"last_name\": \"Anderson\", \"all_movies\": [{\"movie_name\": \"There Will Be Blood\"}], \"first_name\": \"Paul\", \"director_id\": 2}\n  3 | {\"last_name\": \"Anderson\", \"all_movies\": [{\"movie_name\": \"Grand Budapest Hotel\"}, {\"movie_name\": \"Rushmore\"}, {\"movie_name\": \"The Darjeeling Limited\"}], \"first_name\": \"Wes\", \"director_id\": 3}\n\n\nSELECT *, jsonb_array_length(body -&gt; 'all_movies') AS total_movies\nFROM directors_docs\norder by jsonb_array_length(body-&gt;'all_movies') DESC;\n\n 13 | {\"last_name\": \"Kubrick\", \"all_movies\": [{\"movie_name\": \"A Clockwork Orange\"}, {\"movie_name\": \"Eyes Wide Shut\"}, {\"movie_name\": \"The Shining\"}], \"first_name\": \"Stanley\", \"director_id\": 13}                                   |            3\n  3 | {\"last_name\": \"Anderson\", \"all_movies\": [{\"movie_name\": \"Grand Budapest Hotel\"}, {\"movie_name\": \"Rushmore\"}, {\"movie_name\": \"The Darjeeling Limited\"}], \"first_name\": \"Wes\", \"director_id\": 3}                                |            3\n 17 | {\"last_name\": \"Lucas\", \"all_movies\": [{\"movie_name\": \"Star Wars: A New Hope\"}, {\"movie_name\": \"Star Wars: Empire Strikes Back\"}, {\"movie_name\": \"Star Wars: Return of the Jedi\"}], \"first_name\": \"George\", \"director_id\": 17} |            3\n\n\nSELECT *,jsonb_object_keys(body) FROM directors_docs;\n\n  1 | {\"last_name\": \"Alfredson\", \"all_movies\": [{\"movie_name\": \"Let the Right One In\"}], \"first_name\": \"Tomas\", \"director_id\": 1} | last_name\n  1 | {\"last_name\": \"Alfredson\", \"all_movies\": [{\"movie_name\": \"Let the Right One In\"}], \"first_name\": \"Tomas\", \"director_id\": 1} | all_movies\n  1 | {\"last_name\": \"Alfredson\", \"all_movies\": [{\"movie_name\": \"Let the Right One In\"}], \"first_name\": \"Tomas\", \"director_id\": 1} | first_name\n\n\nSELECT j.key, j.value\nFROM directors_docs,\n     jsonb_each(body) j;\n\n    key     |                  value                   \n------------+------------------------------------------\n last_name  | \"Alfredson\"\n all_movies | [{\"movie_name\": \"Let the Right One In\"}]\n first_name | \"Tomas\"\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/json/#existence-operators","title":"Existence Operators","text":"<pre><code>SELECT *\nFROM directors_docs\nWHERE body -&gt; 'first_name' ? 'John';\n\n 14 | {\"last_name\": \"Lasseter\", \"all_movies\": [{\"movie_name\": \"Toy Story\"}], \"first_name\": \"John\", \"director_id\": 14}\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/json/#searching-json","title":"Searching JSON","text":"<pre><code>SELECT *\nFROM directors_docs\nWHERE body @&gt; '{\"first_name\":\"John\"}';\n\n\nSELECT *\nFROM directors_docs\nWHERE body @&gt; '{\"director_id\":1}';\n\n-- error : No operator matches the given name and argument types. You might need to add explicit type casts.\nSELECT *\nFROM directors_docs\nWHERE body -&gt; 'first_name' LIKE 'J%';\n\n\nSELECT *\nFROM directors_docs\nWHERE body -&gt;&gt; 'first_name' LIKE 'J%';\n\nSELECT *\nFROM directors_docs\nWHERE (body -&gt;&gt; 'director_id')::integer in (1,2,3,4,5,10);\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/miscellaneous-1/","title":"Internal Functions","text":"<p>Order of execution of SQL statements</p> <ol> <li>FROM</li> <li>WHERE</li> <li>SELECT</li> <li>ORDER BY</li> </ol>"},{"location":"Databases/sql/2%20Data%20Types/miscellaneous-1/#concatenation-operator","title":"Concatenation Operator","text":"<pre><code>select concat(first_name,last_name) as full_name \n    from directors limit 10;\n\n   full_name    \n----------------\n TomasAlfredson\n PaulAnderson\n WesAnderson\n\nselect concat_ws(' ',first_name,last_name) as full_name \n    from directors limit 3;\n\n    full_name    \n-----------------\n Tomas Alfredson\n Paul Anderson\n Wes Anderson\n</code></pre> <ul> <li>if you can have a null value in column, always use <code>concat_ws</code> because it will place nothing in that and and also not place the spacer like | or a space</li> </ul>"},{"location":"Databases/sql/2%20Data%20Types/miscellaneous-1/#type-conversion","title":"Type Conversion","text":"Type of Conversion Notes Implicit data conversion is done AUTOMATICALLY Explicit data conversion is done via 'conversion functions' eg. <code>CAST</code> or <code>::</code> <pre><code>SELECT * FROM movies;\n\n-- exact datatype match : no conversion\nSELECT * FROM movies WHERE movie_id = 1;\n\n-- Implicit conversion : conversion\nSELECT * FROM movies WHERE movie_id = '1';\n\n-- Explicit conversion : conversion\nSELECT * FROM movies WHERE movie_id = integer '1';\n\n-- Output of all queries above\n movie_id |     movie_name     | movie_length | movie_lang | release_date | age_certificate | director_id \n----------+--------------------+--------------+------------+--------------+-----------------+-------------\n        1 | A Clockwork Orange |          112 | English    | 1972-02-02   | 18              |          13\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/miscellaneous-1/#casting","title":"Casting","text":"<pre><code>-- CAST function\n-- Syntax : CAST ( expression as target_data_type );\n\nSELECT CAST ( '10' AS INTEGER );\n\n int4 \n------\n   10\n\nSELECT \n    CAST ('2020-02-02' AS DATE), \n    CAST('01-FEB-2001' AS DATE);\n\n    date    |    date    \n------------+------------\n 2020-02-02 | 2001-02-01\n\nSELECT \n    CAST ( 'true' AS BOOLEAN ), \n    CAST ( '1' AS BOOLEAN ), \n    CAST ( '0' AS BOOLEAN );\n\n bool | bool | bool \n------+------+------\n t    | t    | f\n\nSELECT CAST ( '14.87789' AS DOUBLE PRECISION );\n\n  float8  \n----------\n 14.87789\n\nSELECT '2020-02-02'::DATE , '01-FEB-2001'::DATE;\n\n    date    |    date    \n------------+------------\n 2020-02-02 | 2001-02-01\n\nSELECT '2020-02-02 10:20:10.23'::TIMESTAMP;\n\n       timestamp        \n------------------------\n 2020-02-02 10:20:10.23\n\nSELECT '2020-02-02 10:20:10.23 +05:30'::TIMESTAMPTZ;\n\n        timestamptz        \n---------------------------\n 2020-02-02 04:50:10.23+00\n\nSELECT \n    '10 minute'::interval, \n    '10 hour'::interval, \n    '10 day'::interval, \n    '10 week'::interval, \n    '10 month'::interval;\n\n interval | interval | interval | interval | interval \n----------+----------+----------+----------+----------\n 00:10:00 | 10:00:00 | 10 days  | 70 days  | 10 mons\n\nSELECT \n    20! AS \"result 1\" , \n    CAST( 20 AS bigint ) ! AS \"result 2\";\n\n      result 1       |      result 2       \n---------------------+---------------------\n 2432902008176640000 | 2432902008176640000\n\nSELECT \n    ROUND(10,4) AS \"result 1\", \n    ROUND ( CAST (10 AS NUMERIC) ) AS \"result 2\", \n    ROUND ( CAST (10 AS NUMERIC) , 4 ) AS \"result 3\";\n\n result 1 | result 2 | result 3 \n----------+----------+----------\n  10.0000 |       10 |  10.0000\n\nSELECT \n    SUBSTR('12345',2) AS \"RESULT 1\", \n    SUBSTR( CAST('12345' AS TEXT) ,2) AS \"RESULT 2\";\n\n RESULT 1 | RESULT 2 \n----------+----------\n 2345     | 2345\n</code></pre> <pre><code>CREATE TABLE ratings (\n    rating_id SERIAL PRIMARY KEY,\n    rating VARCHAR(2) NOT NULL\n);\n\nINSERT INTO ratings ( rating ) \nVALUES ('A'), ('B'), ('C'), ('D'), (1), (2), (3), (4);\n\nSELECT \n    rating_id,\n    CASE \n        WHEN rating~E'^\\\\d+$' THEN\n            CAST ( rating as INTEGER )\n        ELSE\n            0\n        END AS rating\nFROM\n    ratings;\n\n rating_id | rating \n-----------+--------\n         1 |      0\n         2 |      0\n         3 |      0\n         4 |      0\n         5 |      1\n         6 |      2\n         7 |      3\n         8 |      4\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/miscellaneous-1/#formatting-functions","title":"Formatting Functions","text":"<p>https://www.postgresql.org/docs/12/functions-formatting.html</p>"},{"location":"Databases/sql/2%20Data%20Types/miscellaneous-1/#to_char","title":"to_char()","text":"<p>Refer to the documentation</p> <ul> <li>https://www.postgresqltutorial.com/postgresql-to_char/</li> </ul> <pre><code>SELECT TO_CHAR (\n    100870,\n    '9,999999'\n);    \n\n  to_char  \n-----------\n    100870\n\nSELECT \n    release_date, \n    TO_CHAR(release_date,'DD-MM-YYYY'),\n    TO_CHAR(release_date,'Dy, MM, YYYY') \nFROM \n    movies LIMIT 3;\n\n release_date |  to_char   |    to_char    \n--------------+------------+---------------\n 1972-02-02   | 02-02-1972 | Wed, 02, 1972\n 1979-08-15   | 15-08-1979 | Wed, 08, 1979\n 2001-01-04   | 04-01-2001 | Thu, 01, 2001\n\nSELECT \n    TO_CHAR ( \n        TIMESTAMP '2020-01-01 13:32:30', \n        'HH24:MI:SS' \n    );\n\n to_char  \n----------\n 13:32:30\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/miscellaneous-1/#to_number","title":"to_number()","text":"<ul> <li>https://www.postgresqltutorial.com/postgresql-to_number/</li> </ul> <pre><code>SELECT TO_NUMBER(\n    '1420.89', '9999.'\n);\n\n to_number \n-----------\n      1420\n\nSELECT TO_NUMBER(\n    '10,625.78-', '99G999D99S'\n);\n\n to_number \n-----------\n -10625.78\n\nSELECT TO_NUMBER(\n    '$1,625.78+', '99G999D99S'\n);\n\n to_number \n-----------\n   1625.78\n\nSELECT to_number(\n    '$1,420.65' , 'L9G999D99'\n);\n\n to_number \n-----------\n   1420.65\n\nSELECT to_number(\n    '21,420.65' , '99G999D99'\n);\n\n to_number \n-----------\n  21420.65\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/miscellaneous-1/#to_date","title":"to_date()","text":"<ul> <li>https://www.postgresqltutorial.com/postgresql-to_date/</li> </ul> <pre><code>SELECT TO_DATE( '2020/10/22' , 'YYYY/MM/DD' );\n\n  to_date   \n------------\n 2020-10-22\n\nSELECT to_date( '022199' , 'MMDDYY' );\n\n  to_date   \n------------\n 1999-02-21\n\nSELECT to_date( 'March 07, 2019' , 'Month DD, YYYY' );\n\n    to_date   \n------------\n 2019-03-07\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/miscellaneous-1/#to_timestamp","title":"to_timestamp()","text":"<ul> <li>https://www.postgresqltutorial.com/postgresql-to_timestamp/</li> </ul> <pre><code>SELECT TO_TIMESTAMP(\n    '2017-03-31 9:30:20',\n    'YYYY-MM-DD HH:MI:SS'\n);\n\n      to_timestamp      \n------------------------\n 2017-03-31 09:30:20+00\n\nSELECT\n    TO_TIMESTAMP('2017     Aug','YYYY MON');\n\n      to_timestamp      \n------------------------\n 2017-08-01 00:00:00+00\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/miscellaneous-1/#string-functions","title":"String Functions","text":"<ul> <li><code>Upper(string)</code> </li> <li><code>Lower(string)</code></li> <li><code>INITCAP(string)</code></li> <li><code>REVERSE(string)</code></li> <li><code>LPAD(string)</code></li> <li><code>RPAD(string)</code></li> <li><code>LENGTH(string)</code></li> <li><code>CHAR_LENGTH(string) : Same as Length</code></li> <li><code>POSITION( string in string )</code></li> <li><code>STRPOS ( , &lt; substring &gt; )</code></li> <li><code>SUBSTRING (string , length)</code></li> <li><code>REPLACE (string, from_string, to_string)</code></li> </ul> <pre><code>SELECT INITCAP(first_name) as FirstName,\n       INITCAP(last_name)  as LastName\nFROM directors\nLIMIT 3;\n\n firstname | lastname\n-----------+-----------\n Tomas     | Alfredson\n Paul      | Anderson\n Wes       | Anderson\n\nSELECT LEFT('Uday', 3), RIGHT('Uday', 3);\n\n left | right\n------+-------\n Uda  | day\n\nSELECT LEFT('Uday', -3), RIGHT('Uday', -3);\n\n left | right\n------+-------\n U    | y\n\nSELECT REVERSE('UDAY YADAV');\n\n  reverse\n------------\n VADAY YADU\n\nSELECT SPLIT_PART('1,2,3,4', ',', 1), \n       SPLIT_PART('1|2|3|4', '|', 2);\n\n split_part | split_part\n------------+------------\n 1          | 2\n\nSELECT TRIM(LEADING FROM '  Amazing PostgreSQL'),\n       TRIM(TRAILING FROM 'Amazing PostgreSQL  '),\n       TRIM('  Amazing PostgreSQL  ');\n\n       ltrim        |       rtrim        |       btrim\n--------------------+--------------------+--------------------\n Amazing PostgreSQL | Amazing PostgreSQL | Amazing PostgreSQL\n\n\nSELECT TRIM(LEADING '0' FROM CAST(0001245 AS TEXT));\n\n ltrim\n-------\n 1245\n\n\nSELECT LTRIM('yummy', 'y'),\n       RTRIM('yummy', 'y'),\n       BTRIM('yummy', 'y');\n\n ltrim | rtrim | btrim\n-------+-------+-------\n ummy  | yumm  | umm\n\n\nSELECT upper('uday yadav'),  initcap('uday yadav');\n\n   upper    |  initcap\n------------+------------\n UDAY YADAV | Uday Yadav\n\nSELECT INITCAP(first_name) as FirstName,\n       INITCAP(last_name)  as LastName\nFROM directors LIMIT 3;\n\n firstname | lastname\n-----------+-----------\n Tomas     | Alfredson\n Paul      | Anderson\n Wes       | Anderson\n\nSELECT LEFT('Uday', 3), RIGHT('Uday', 3);\n left | right\n------+-------\n Uda  | day\n\nSELECT LEFT('Uday', -3), RIGHT('Uday', -3);\n left | right\n------+-------\n U    | y\n\n\nSELECT LPAD('Database', 15, '*'),\n       RPAD('Database', 15, '*');\n\n      lpad       |      rpad\n-----------------+-----------------\n *******Database | Database*******\n\nSELECT LENGTH('Uday Yadav');\n\n length\n--------\n     10\n\nSELECT LENGTH(CAST(10013 AS TEXT));\n length\n--------\n      5\n\n\nSELECT char_length(''),\n       char_length('  '),\n       char_length(NULL);\n\n char_length | char_length | char_length\n-------------+-------------+-------------\n           0 |           2 |\n\nSELECT first_name || ' ' || last_name as FullName,\n       LENGTH(first_name || ' ' || last_name)\n                                      as FullNameLength\nFROM Directors\nORDER BY 2 DESC LIMIT 2;\n\n             fullname              | fullnamelength\n-----------------------------------+----------------\n Florian  Henckel von Donnersmarck |             33\n Francis Ford Coppola              |             20\n\nSELECT POSITION('Amazing' IN 'Amazing PostgreSQL'),\n       POSITION('is' IN 'This is a computer');\n position | position\n----------+----------\n        1 |        3\n\nSELECT STRPOS('World Bank', 'Bank');\n strpos\n--------\n      7\n\nSELECT first_name,\n       last_name\nFROM directors\nWHERE strpos(last_name, 'on') &gt; 0 LIMIT 3;\n\n first_name | last_name\n------------+-----------\n Tomas      | Alfredson\n Paul       | Anderson\n Wes        | Anderson\n\nSELECT substring('What a wonderful world' from 1 for 10);\n\n substring\n------------\n What a won\n\nSELECT repeat('A', 4), repeat(' ', 9), repeat('.', 8);\n repeat |  repeat   |  repeat\n--------+-----------+----------\n AAAA   |           | ........\n\nSELECT REPLACE('ABC XYZ', 'XY', 'Z');\n replace \n---------\n ABC ZZ\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/sequences/","title":"Sequences","text":""},{"location":"Databases/sql/2%20Data%20Types/sequences/#sequences_1","title":"Sequences","text":"<ul> <li>Specify datatype ( <code>SMALLINT | INT | BIGINT</code> )</li> <li>Default is <code>BIGINT</code></li> </ul>"},{"location":"Databases/sql/2%20Data%20Types/sequences/#list-all-sequence","title":"List all sequence","text":"<pre><code>SELECT relname AS seq_name \n    FROM pg_class WHERE relkind = 'S';\n</code></pre> <pre><code>CREATE SEQUENCE IF NOT EXISTS test_sequence AS bigint;\n\nSELECT NEXTVAL('test_sequence');\n\n nextval \n---------\n       1\n\n\nSELECT CURRVAL('test_sequence');\n\n currval \n---------\n       1\n\nSELECT SETVAL('test_sequence',3);\n\n setval \n--------\n      3\n\n\n-- set this value after the nextval is called, \n-- check using the currval cmd\nSELECT SETVAL('test_sequence',300,false);\n\n-- CHECKING CURRENT VALUE \nSELECT CURRVAL('test_sequence');\n currval \n---------\n       3\n\n\nALTER SEQUENCE test_sequence RESTART WITH 100;\n\nSELECT NEXTVAL('test_sequence');\n nextval \n---------\n     100\n\nCREATE SEQUENCE IF NOT EXISTS test_seq3\nINCREMENT 50\nMINVALUE 100\nMAXVALUE 1000\nSTART WITH 150;\n\nSELECT nextval('test_seq3');\n\n  nextval \n---------\n     150\n\nCREATE SEQUENCE IF NOT EXISTS seq_des\nINCREMENT -1\nMINVALUE 1\nMAXVALUE 999\nSTART 99\nNO CYCLE | CYCLE ;\n\nSELECT nextval('seq_des');\n\n nextval \n---------\n      99\n\n-- DROP SEQUENCE\n\nDROP SEQUENCE IF EXISTS seq_des;\n\nCREATE TABLE IF NOT EXISTS table_seq (\n    id INT primary key ,\n    name VARCHAR(10)\n);\n\nCREATE sequence IF NOT EXISTS table_seq_id_seq\nstart with 1 owned BY table_seq.id;\n\nALTER TABLE table_seq\nALTER COLUMN id SET DEFAULT nextval('table_seq_id_seq')\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/sequences/#alpha-numeric-sequence","title":"Alpha-Numeric Sequence","text":"<pre><code>CREATE sequence table_text_seq;\n\nCREATE TABLE contacts (\n    id text NOT null default ('ID' || nextval('table_text_seq')),\n    name VARCHAR(150) NOT null\n);\n\nINSERT INTO  contacts (name) VALUES ('uday 1'),('uday 2'),('uday 3');\n\nSELECT * FROM contacts;\n\n id  |  name  \n-----+--------\n ID1 | uday 1\n ID2 | uday 2\n ID3 | uday 3\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/user-defined-data-types/","title":"User Defined Data Types","text":""},{"location":"Databases/sql/2%20Data%20Types/user-defined-data-types/#create-domain","title":"CREATE DOMAIN","text":"<ul> <li>Create user defined data type with a range, optional, DEFAULT, NOT NULL and CHECK Constraint.</li> <li>They are unique within schema scope.</li> <li>Helps standardise your database types in one place.</li> <li>Composite Type : Only single value return</li> </ul> <pre><code>CREATE DOMAIN name datatype constraint\n\n-- ex 1\n-- 'addr' with domain VARCHAR(100)\nCREATE DOMAIN addr VARCHAR(100) NOT NULL;\n\nCREATE TABLE locations (\n    address addr\n);\n\n            Table \"public.locations\"\n Column  | Type | Collation | Nullable | Default \n---------+------+-----------+----------+---------\n address | addr |           |          | \n\n\n-- Dropping Constraints\n-- if domain isnt used anywhere\ndrop domain addr;    \n\n-- this will drop the column in the table it is present in\n-- use this with caution\ndrop domain addr CASCADE;\n\n-- List all domains inside a schema\nselect typname from pg_catalog.pg_type \n join pg_catalog.pg_namespace \n on pg_namespace.oid = pg_type.typnamespace\n where typtype = 'd' and nspname = 'public';\n\n      typname      \n------------------\n positive_numeric\n valid_color\n addr\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/user-defined-data-types/#number-based-components","title":"Number Based Components","text":"<pre><code>-- Example 2\n-- 'positive_numeric' : value &gt; 0\n\nCREATE DOMAIN positive_numeric \n    INT NOT NULL CHECK (VALUE &gt; 0);\n\nCREATE TABLE sample (\n    number positive_numeric\n);\n\nINSERT INTO sample (NUMBER) VALUES (10);\n\n-- error\nINSERT INTO sample (NUMBER) VALUES (-10);\n\n-- ERROR:  value for domain positive_numeric \n--    violates check constraint \"positive_numeric_check\"\n\nSELECT * FROM sample;\n\n number \n--------\n     10\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/user-defined-data-types/#text-based-domain","title":"Text Based Domain","text":"<pre><code>-- Example 3\n-- check email domain\n\nCREATE DOMAIN \n     proper_email VARCHAR(150) \nCHECK \n    ( VALUE ~* '^[A-Za-z0-9._%-]+@[A-Za-z0-9.-]+[.][A-Za-z]+$' );\n\n\nCREATE TABLE email_check (\n    client_email proper_email\n);\n\ninsert into email_check (client_email) \n    values ('a@b.com') ;\n\n-- error \ninsert into email_check (client_email) \n    values ('a@#.com') ;\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/user-defined-data-types/#enum-based-domain","title":"Enum Based Domain","text":"<pre><code>-- enum based domain\nCREATE DOMAIN valid_color VARCHAR(10)\nCHECK (VALUE IN ('red','green','blue'));\n\nCREATE TABLE color (\n    color valid_color\n);\n\nINSERT INTO color (color) \n    VALUES ('red'),('blue'),('green');\n\n-- error\nINSERT INTO color (color) \n    VALUES ('yellow');\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/user-defined-data-types/#composite-data-types","title":"Composite Data Types","text":"<p>Syntax : <code>(composite_column).city</code></p>"},{"location":"Databases/sql/2%20Data%20Types/user-defined-data-types/#example-1","title":"Example 1","text":"<pre><code>-- address type\n\nCREATE TYPE address AS (\n    city VARCHAR(50),\n    country VARCHAR(100)\n);\n\nCREATE TABLE person (\n    id SERIAL PRIMARY KEY,\n    address address\n);\n\nINSERT INTO person ( address ) \n    VALUES (ROW('London','UK')), (ROW('New York','USA'));\n\nselect * from person;\n\n id |     address      \n----+------------------\n  1 | (London,UK)\n  2 | (\"New York\",USA)\n\nselect (address).country from person;\n\n country \n---------\n UK\n USA\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/user-defined-data-types/#example-2","title":"Example 2","text":"<pre><code>CREATE TYPE currency AS ENUM(\n    'USD','EUR','GBP','CHF'\n);\n\nSELECT 'USD'::currency\n\n currency \n----------\n USD\n\nSELECT 'INR'::currency\n\n-- ERROR:  invalid input value for enum currency: \"INR\"\n-- LINE 1: SELECT 'INR'::currency\n\nALTER TYPE currency ADD VALUE 'CHF' AFTER 'EUR';\n\nCREATE TABLE stocks (\n    id SERIAL PRIMARY KEY,\n    symbol currency\n);\n\ninsert into stocks ( symbol ) VALUES ('CHF');\n\nselect * from stocks\n id | symbol \n----+--------\n  1 | CHF\n\n-- DROP TYPE currency;\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/user-defined-data-types/#alter","title":"Alter","text":""},{"location":"Databases/sql/2%20Data%20Types/user-defined-data-types/#alter-type","title":"Alter TYPE","text":"<pre><code>ALTER TYPE addr RENAME TO user_address\n\nALTER TYPE user_address OWNER TO uday\n\nALTER TYPE user_address SET SCHEMA test_scm\n\nALTER TYPE test_scm.user_address \n    ADD ATTRIBUTE street_address VARCHAR(150)    \n\nCREATE TYPE mycolors AS ENUM ('green','red','blue')\n\nALTER TYPE mycolors RENAME VALUE 'red' TO 'orange'\n\nSELECT enum_range(NULL::mycolors);\n\nALTER TYPE mycolors ADD VALUE 'red' BEFORE 'green'\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/user-defined-data-types/#alter-enum","title":"ALTER ENUM","text":"<pre><code>CREATE TYPE status_enum AS enum \n('queued','waiting','running','done');\n\nCREATE TABLE jobs (\n    id SERIAL PRIMARY KEY,\n    job_status status_enum\n);\n\nINSERT INTO jobs ( job_status ) VALUES \n    ('queued'),('waiting'),('running'),('done');\n\nSELECT * FROM jobs;\n\n id | job_status \n----+------------\n  1 | queued\n  2 | waiting\n  3 | running\n  4 | done\n\n-- UPDATING waiting to running\n\nUPDATE jobs SET job_status = 'running' \n    WHERE job_status = 'waiting';\n\n id | job_status \n----+------------\n  1 | queued\n  3 | running\n  4 | done\n  2 | running\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/user-defined-data-types/#updatingreplacing-enum-domain","title":"Updating/Replacing ENUM domain","text":"<pre><code>ALTER TYPE status_enum RENAME TO status_enum_old;\n\nCREATE TYPE status_enum as enum \n    ('queued','running','done');\n\nALTER TABLE jobs ALTER COLUMN job_status \n    TYPE status_enum USING job_status::text::status_enum;\n\nDROP TYPE status_enum_old;\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/user-defined-data-types/#default-value-enum","title":"Default value ENUM","text":"<pre><code>CREATE TYPE  status AS ENUM \n    ('PENDING','APPROVED','DECLINE')\n\nCREATE TABLE cron_jobs (\n    id SERIAL,\n    status status DEFAULT 'PENDING'\n);\n\nINSERT INTO cron_jobs ( status ) VALUES ('APPROVED');\n</code></pre>"},{"location":"Databases/sql/2%20Data%20Types/user-defined-data-types/#create-domain-if-not-exists","title":"CREATE DOMAIN IF NOT EXISTS","text":"<pre><code>DO\n$$\nBEGIN\n    IF NOT EXISTS ( \n            SELECT \n                * \n            FROM pg_type tp \n            INNER JOIN \n                pg_namespace nsp ON nsp.oid = typ.typnamespace\n                WHERE nsp.nspname = current_schema() \n                AND typ.typname = 'a' \n            ) \n        THEN\n            CREATE TYPE ai AS ( \n                a TEXT, i INT \n            );\n    END IF;\nEND;\n$$\nLANGUAGE plpgsql;\n</code></pre>"},{"location":"Databases/sql/3%20Databases/","title":"Database","text":""},{"location":"Databases/sql/3%20Databases/#creating-a-database","title":"Creating a database","text":""},{"location":"Databases/sql/3%20Databases/#dropping-database","title":"Dropping Database","text":""},{"location":"Databases/sql/3%20Databases/#commands","title":"Commands","text":"<pre><code>create database testdb;\n\ndrop database if exists testdb;\n</code></pre>"},{"location":"Databases/sql/3%20Databases/#connect-to-db","title":"Connect to DB","text":"<pre><code>-- using psql\n\\c test\n</code></pre>"},{"location":"Databases/sql/3%20Databases/#see-list-of-tables","title":"See list of tables","text":"<pre><code>-- using psql\n\\d                       #to see tables\n\\d &lt;name of table&gt;       #to see details about table\n</code></pre>"},{"location":"Databases/sql/3%20Databases/schema/","title":"Schema","text":"<ul> <li>PostgreSQL schema's should be unique and different from each other</li> <li>Allows you to organise database objects</li> <li>Schema allow multiple users to interact with one database without interfering with each other</li> <li>Allow access and limit database objects to be accessed by the user.</li> </ul> <pre><code>-- syntax to create new schema\nCREATE SCHEMA sales;\n\n-- syntax to create new schema\nCREATE SCHEMA hr;\n\n-- syntax to rename existing schema\nALTER SCHEMA sales RENAME TO marketing;\n\n-- drop schema, DO THIS CAREFULLY !!\nDROP SCHEMA hr;\n\n-- specify the schema for the table explicitly\nselect * from hr.public.jobs;\n\n-- creating a sample table\nCREATE TABLE temporders ( id SERIAL PRIMARY KEY );\n\n-- moving the table from one schema to another\nALTER TABLE public.temporders SET SCHEMA marketing;\n\n-- show current schema\nselect current_schema();\n\n-- get default search path where the query will start looking\nshow search_path;\n   search_path   \n-----------------\n \"$user\", public\n\n-- order to search path is important \nSET search_path to '$user', marketing, public;\n</code></pre>"},{"location":"Databases/sql/3%20Databases/schema/#pg_catalog","title":"PG_CATALOG","text":"<ul> <li>PostgreSQL stores the metadata information about the database and cluster in the schema <code>pg_catalog</code>. </li> <li>This information is partially used by PostgreSQL itself to keep track things itself, but it also presented so external people/processes can understand whats inside the database.</li> <li><code>pg_catalog</code> schema contains system tables and all the built-in types, functions and operators.</li> <li><code>pg_catalog</code> is effectively part of the search path. Although if it is not named explicitly in the path then it is implicitly searched before searching the path's schema.</li> </ul> <pre><code>select * from information_schema.schemata;\n\n catalog_name |    schema_name     | schema_owner \n--------------+--------------------+--------------\n learning     | information_schema | postgres\n learning     | public             | postgres\n learning     | pg_catalog         | postgres\n learning     | pg_toast           | postgres\n</code></pre>"},{"location":"Databases/sql/4%20Tables/","title":"Table","text":""},{"location":"Databases/sql/4%20Tables/#creating-table","title":"Creating Table","text":""},{"location":"Databases/sql/4%20Tables/#altering-table","title":"Altering Table","text":""},{"location":"Databases/sql/4%20Tables/#add-column","title":"Add Column","text":"<pre><code>-- adding column to table\nALTER TABLE [schema].[table name]\n    ADD COLUMN [column name] [data type];\n\n-- example\nALTER TABLE public.rainfalls\n    ADD COLUMN is_enable boolean [CONSTRAINT];\n\n-- renaming column in table\nALTER TABLE public.rainfalls\n    RENAME is_enable TO accurate;\n\n-- add mulitple columns\nALTER TABLE rainfals\nADD COLUMN city VARCHAR(20),\nADD COLUMN pincode VARCHAR(50);\n\n-- create dummy table\nCREATE TABLE IF NOT EXISTS wrong_table ( name text );\n-- rename table using ALTER\nALTER TABLE wrong_table RENAME TO name_table;\nDROP TABLE IF EXISTS name_table;\n\n-- drop column\nALTER TABLE public.rainfalls\nDROP COLUMN pincode;\n\n-- change data type of column\nALTER TABLE public.rainfalls\nALTER COLUMN accurate TYPE TEXT;\n\n     Table \"public.rainfalls\"\n  Column  |         Type          | \n----------+-----------------------+-\n location | text                  | \n year     | integer               | \n month    | integer               | \n raindays | integer               | \n accurate | TEXT                  | \n city     | character varying(20) | \n\n-- altering column datatype\nALTER TABLE rainfalls  \nALTER COLUMN accurate TYPE REAL \nUSING accurate::REAL;\n\n     Table \"public.rainfalls\"\n  Column  |         Type          | \n----------+-----------------------+-\n location | text                  | \n year     | integer               | \n month    | integer               | \n raindays | integer               | \n accurate | real                  | \n city     | character varying(20) | \n\n\n-- set default value of column\nALTER TABLE users\nALTER COLUMN is_enable SET DEFAULT 'Y';\n</code></pre>"},{"location":"Databases/sql/4%20Tables/#delete","title":"Delete","text":"<pre><code>-- delete table\nDROP TABLE IF EXISTS [table name];\n\n-- delete row\nDROP TABLE IF EXISTS [table name];\n\n-- delete column\nALTER TABLE [table name] \nDROP column [column name];\n\n-- delete constraints\nALTER TABLE [table name] \nDROP CONSTRAINT [constrain name];\n</code></pre>"},{"location":"Databases/sql/4%20Tables/#select","title":"Select","text":"<p>The <code>SELECT</code> statement has the following clauses:</p> <ul> <li>Select distinct rows using DISTINCT operator.</li> <li>Sort rows using ORDER BY clause.</li> <li>Filter rows using WHERE clause.</li> <li>Select a subset of rows from a table using LIMIT or FETCH clause.</li> <li>Group rows into groups using GROUP BY clause.</li> <li>Filter groups using HAVING clause.</li> <li>Join with other tables using joins such as INNER JOIN, LEFT JOIN, FULL OUTER JOIN, CROSS JOIN clauses.</li> <li>Perform set operations using UNION, INTERSECT, and EXCEPT.</li> </ul> <pre><code>SELECT first_name, last_name\nFROM directors\nLIMIT 5;\n</code></pre> Representation Function ASC Ascending DESC Descending <pre><code>SELECT * FROM directors LIMIT 3;\n\n director_id | first_name | last_name | date_of_birth | nationality \n-------------+------------+-----------+---------------+-------------\n           1 | Tomas      | Alfredson | 1965-04-01    | Swedish\n           2 | Paul       | Anderson  | 1970-06-26    | American\n           3 | Wes        | Anderson  | 1969-05-01    | American\n\nSELECT * FROM directors ORBER BY date_of_birth ASC|DESC;\n\nSELECT DISTINCT nationality FROM directors;\n\n-- to select one column with condtion\nSELECT * FROM directors WHERE nationality = 'Chinese'; \n\n-- Two or more conditions\nSELECT \n           * \nFROM \n           directors \nWHERE \n           nationality = 'Mexican' \n           AND \n           date_of_birth='1964-10-09';\n</code></pre>"},{"location":"Databases/sql/4%20Tables/#column-alias","title":"Column Alias","text":"<pre><code>-- normal column aliases\nSELECT \n   first_name || ' ' || last_name as full_name\nFROM \n   directors LIMIT 5;\n\n-- with spaces\nSELECT\n    first_name || ' ' || last_name \"full name\"\nFROM\n    customer;\n</code></pre>"},{"location":"Databases/sql/4%20Tables/#insert","title":"Insert","text":"<pre><code>CREATE TABLE IF NOT EXISTS temp_table (\n    col1 text,\n    col2 text,\n);\n\nINSERT INTO table (col1, col2) \n    VALUES ( 'VALUE 1' , 'VALUE 2');\n\n-- MULTIPLE\nINSERT INTO table (col1, col2) \n    VALUES ( 'VALUE 1' , 'VALUE 2','VALUE 3','VALUE 4');\n\n-- STRING WITH QUOTES , add another ' before '\nINSERT INTO table (col1) \n    VALUES ( 'VALUE''S 1' );\n\n-- RETURNING ROWS\nINSERT INTO temp_table (col1, col2) \n    VALUES ( 'VALUE 5' , 'VALUE 6')\n    RETURNING *;\n</code></pre>"},{"location":"Databases/sql/4%20Tables/#updating","title":"Updating","text":"<pre><code>UPDATE directors set last_name = 'Walker' \nwhere director_id = 2;\n\n-- returning updated row\nupdate actors set last_name = 'Anderson' \nwhere director_id = 150 returning *;\n\n-- update all records\nupdate [table name] set [column name] = [value];\n\nUPDATE [table name]\nSET email = 'not found'\nWHERE\n    email IS NULL;\n</code></pre>"},{"location":"Databases/sql/4%20Tables/#upsert","title":"Upsert","text":"<pre><code>-- syntax for upsert\nINSERT INTO tablename ( col_list ) VALUES \n    ( value_list ) ON CONFLICT (COL_NAME)\n    DO\n        NOTHING \n        -- OR\n        UPDATE SET col = val where condition;\n\n-- syntax for upsert\nINSERT INTO tablename ( COL_NAME ) VALUES \n    ( value_list ) ON CONFLICT (COL_NAME)\n    DO\n        UPDATE SET COL_NAME = EXCLUDED.COL_NAME;\n</code></pre>"},{"location":"Databases/sql/4%20Tables/aggregation/","title":"Aggregation","text":"<ul> <li><code>COUNT (column)</code></li> <li><code>SUM (column)</code></li> <li><code>MIN &amp; MAX</code></li> <li><code>LEAST &amp; GREATEST</code></li> <li><code>AVG</code></li> </ul>"},{"location":"Databases/sql/4%20Tables/aggregation/#count","title":"<code>count</code>","text":"<pre><code>SELECT COUNT(DISTINCT (movie_lang))\nfrom movies;\n\n count \n-------\n     8\n\n-- with where clause\n\nSELECT COUNT(movie_lang)\nFROM movies\nwhere movie_lang = 'English';\n\n count \n-------\n    38\n</code></pre>"},{"location":"Databases/sql/4%20Tables/aggregation/#sum","title":"Sum","text":"<pre><code>select sum(revenues_domestic)\nfrom movies_revenues;\n\n  sum   \n--------\n 5719.5\n\nselect SUM(revenues_domestic::numeric)\nfrom movies_revenues\nwhere revenues_domestic::numeric &gt; 200;\n\n  sum   \n--------\n 3425.6\n\nSELECT SUM(DISTINCT revenues_domestic)\nFROM movies_revenues;\n\n  sum   \n--------\n 5708.4\n</code></pre>"},{"location":"Databases/sql/4%20Tables/aggregation/#min-and-max","title":"Min and Max","text":"<pre><code>SELECT min(movie_length), MAX(movie_length)\nFROM movies\n\n min | max \n-----+-----\n  87 | 168\n</code></pre>"},{"location":"Databases/sql/4%20Tables/aggregation/#average-greatest-latest","title":"Average, Greatest, Latest","text":"<pre><code>SELECT GREATEST(10, 20, 30, 40), LEAST(10, 20, 30, 40);\n\n greatest | least\n----------+-------\n       40 |    10\n\nSELECT GREATEST('A', 'B', 'C', 'D'), LEAST('A', 'B', 'C', 'D');\n\n greatest | least\n----------+-------\n D        | A\n\nSELECT GREATEST('A', 'B', 'C', 1);\n\n-- ERROR:  invalid input syntax for type integer: \"A\"\n-- LINE 1: SELECT GREATEST('A', 'B', 'C', 1);\n\nSELECT AVG(movie_length)\nFROM movies;\n\n         avg          \n----------------------\n 126.1320754716981132\n</code></pre>"},{"location":"Databases/sql/4%20Tables/coalesce/","title":"Usefull Functions","text":""},{"location":"Databases/sql/4%20Tables/coalesce/#case","title":"Case","text":"<pre><code>SELECT movie_id,\n       movie_name,\n       CASE\n           WHEN movies.movie_length &lt; 100\n               AND movies.movie_length &lt;= 50 THEN 'Short'\n           WHEN movies.movie_length &gt; 100\n               AND movies.movie_length &lt;= 130 THEN 'Medium'\n           WHEN movies.movie_length &gt; 130 THEN 'Long'\n           END duration\nFROM movies\nORDER BY movie_name;\nLIMIT 10;\n\n movie_id |          movie_name           | duration \n----------+-------------------------------+----------\n        1 | A Clockwork Orange            | Medium\n        2 | Apocalypse Now                | Long\n        3 | Battle Royale                 | Medium\n        4 | Blade Runner                  | Medium\n        5 | Chungking Express             | Medium\n        6 | City of God                   | Long\n        7 | City of Men                   | Long\n        8 | Cold Fish                     | Medium\n        9 | Crouching Tiger Hidden Dragon | Long\n       10 | Eyes Wide Shut                | Medium\n(10 rows)\n\n\nSELECT\n       SUM(CASE age_certificate\n             WHEN '12' THEN 1 \n             ELSE 0 \n           END) \"Kids\",\n       SUM(CASE age_certificate\n             WHEN '15' THEN 1 \n             ELSE 0 \n           END) \"School\",\n       SUM(CASE age_certificate\n             WHEN '18' THEN 1 \n             ELSE 0 \n           END) \"Teens\",\n       SUM(CASE age_certificate\n             WHEN 'PG' THEN 1 \n             ELSE 0 \n           END) \"Restricted\",\n       SUM(CASE age_certificate\n             WHEN 'U' THEN 1 \n             ELSE 0 \n           END) \"Universal\"\nFROM movies;\n\n  Kids | School | Teens | Restricted | Universal \n------+--------+-------+------------+-----------\n   11 |     16 |     8 |         12 |         6\n</code></pre>"},{"location":"Databases/sql/4%20Tables/coalesce/#coalesce","title":"Coalesce","text":"<p><code>COALESCE</code> function that returns the first non-null argument.</p> <pre><code>SELECT\n    COALESCE (NULL, 2 , 1);\n</code></pre>"},{"location":"Databases/sql/4%20Tables/coalesce/#nullif","title":"NULLIF","text":"<p>The <code>NULLIF</code> function returns a null value if <code>argument_1</code> equals to <code>argument_2</code>, otherwise it returns <code>argument_1</code></p> <pre><code>SELECT\n    NULLIF (1, 1); -- return NULL\n\nSELECT\n    NULLIF (1, 0); -- return 1\n\nSELECT\n    NULLIF ('A', 'B'); -- return A\n</code></pre>"},{"location":"Databases/sql/4%20Tables/coalesce/#cube","title":"Cube","text":"<ul> <li>First, specify the <code>CUBE</code> subclause in the the <code>GROUP BY</code> clause of the <code>SELECT</code> statement.</li> <li>Second, in the select list, specify the columns (dimensions or dimension columns) which you want to analyze and aggregation function expressions.</li> <li>Third, in the <code>GROUP BY</code> clause, specify the dimension columns within the parentheses of the <code>CUBE</code> subclause.</li> </ul> <pre><code>select age_certificate, movie_length\nfrom movies\ngroup by age_certificate, cube (age_certificate, movie_length )\norder by age_certificate;\n</code></pre>"},{"location":"Databases/sql/4%20Tables/combining-tables/","title":"Combining Tables","text":""},{"location":"Databases/sql/4%20Tables/combining-tables/#union","title":"UNION","text":"<ul> <li>Combines result sets from two or more <code>SELECT</code> statements into a single result set.</li> <li>The order and number of the columns in the select list of all queries must be the same</li> </ul> <pre><code>-- load sample data\nDROP TABLE IF EXISTS top_rated_films;\nCREATE TABLE top_rated_films(\n    title VARCHAR NOT NULL,\n    release_year SMALLINT\n);\n\nDROP TABLE IF EXISTS most_popular_films;\nCREATE TABLE most_popular_films(\n    title VARCHAR NOT NULL,\n    release_year SMALLINT\n);\n\nINSERT INTO \n   top_rated_films(title,release_year)\nVALUES\n   ('The Shawshank Redemption',1994),\n   ('The Godfather',1972),\n   ('12 Angry Men',1957);\n\nINSERT INTO \n   most_popular_films(title,release_year)\nVALUES\n   ('An American Pickle',2020),\n   ('The Godfather',1972),\n   ('Greyhound',2020);\n</code></pre>"},{"location":"Databases/sql/4%20Tables/combining-tables/#union-query","title":"Union Query","text":"<pre><code>SELECT * FROM top_rated_films\nUNION\nSELECT * FROM most_popular_films;\n\n          title           | release_year \n--------------------------+--------------\n An American Pickle       |         2020\n Greyhound                |         2020\n The Shawshank Redemption |         1994\n The Godfather            |         1972\n 12 Angry Men             |         1957\n</code></pre>"},{"location":"Databases/sql/4%20Tables/combining-tables/#union-all-query","title":"Union All Query","text":"<p>This will not avoid duplicate values</p> <pre><code>SELECT * FROM top_rated_films\nUNION ALL\nSELECT * FROM most_popular_films;\n\n               title      | release_year \n--------------------------+--------------\n The Shawshank Redemption |         1994\n--  The Godfather         |         1972\n 12 Angry Men             |         1957\n An American Pickle       |         2020\n-- The Godfather          |         1972\n Greyhound                |         2020\n</code></pre>"},{"location":"Databases/sql/4%20Tables/combining-tables/#union-with-order-by","title":"UNION with ORDER BY","text":"<pre><code>SELECT * FROM top_rated_films\nUNION ALL\nSELECT * FROM most_popular_films\nORDER BY title;\n\n          title           | release_year \n--------------------------+--------------\n 12 Angry Men             |         1957\n An American Pickle       |         2020\n Greyhound                |         2020\n The Godfather            |         1972\n The Godfather            |         1972\n The Shawshank Redemption |         1994\n</code></pre>"},{"location":"Databases/sql/4%20Tables/combining-tables/#intersect","title":"Intersect","text":"<p>Like the UNION and EXCEPT operators, the PostgreSQL <code>INTERSECT</code> operator combines result sets of two or more SELECT statements into a single result set.</p> <p>The <code>INTERSECT</code> operator returns any rows that are available in both result sets.</p> <p></p> <pre><code>SELECT *\nFROM most_popular_films \nINTERSECT\nSELECT *\nFROM top_rated_films;\n\n     title     | release_year \n---------------+--------------\n The Godfather |         1972\n</code></pre>"},{"location":"Databases/sql/4%20Tables/combining-tables/#except","title":"Except","text":"<p>The <code>EXCEPT</code> operator returns distinct rows from the first (left) query that are not in the output of the second (right) query.\\</p> <pre><code>SELECT * FROM top_rated_films\nEXCEPT \nSELECT * FROM most_popular_films;\n\n          title           | release_year \n--------------------------+--------------\n The Shawshank Redemption |         1994\n 12 Angry Men             |         1957\n</code></pre>"},{"location":"Databases/sql/4%20Tables/constraints/","title":"Constraints","text":"<ul> <li>Constraints are like Gate Keepers. Control the type of data that goes into the table. These are used to prevent invalid data.</li> <li>Constraints can be added on</li> <li>Table </li> <li>Column</li> </ul>"},{"location":"Databases/sql/4%20Tables/constraints/#types-of-constraints","title":"Types of Constraints","text":"Type Note NOT NULL Field must have values UNIQUE Only unique value are allowed DEFAULT Ability to SET default PRIMARY KEY Uniquely identifies each row/record FOREIGN KEY Constraint based on Column in other table CHECK Check all values must meet specific criteria"},{"location":"Databases/sql/4%20Tables/constraints/#not-null","title":"NOT NULL","text":"<pre><code>CREATE TABLE table_nn (\n    id SERIAL PRIMARY KEY,\n    tag text NOT NULL\n);\n\nINSERT INTO table_nn ( tag ) \n    VALUES ('TAG 1'), ('TAG 2'), ('TAG 3'), ('');\n\n-- NULL value wont be accepted\nINSERT INTO table_nn ( tag ) VALUES (NULL);\n\n-- empty string aren't NULL values\nINSERT INTO table_nn ( tag ) VALUES ('');\n\n-- adding another column TEXT;\nALTER TABLE table_nn \nADD COLUMN is_enable TEXT;\n\n-- Updating values in new column to '' \n-- so that NULL constrain can be added\nUPDATE table_nn\nSET is_enable = '' WHERE is_enable IS NULL;\n\n-- adding null constraint on table\nALTER TABLE public.table_nn\n    ALTER COLUMN is_enable SET NOT NULL;\n</code></pre>"},{"location":"Databases/sql/4%20Tables/constraints/#unique","title":"UNIQUE","text":"<pre><code>CREATE TABLE table_unique (\n    id SERIAL PRIMARY KEY,\n    emails TEXT UNIQUE\n);\n\nINSERT INTO table_unique ( emailS ) \n    VALUES ('A@B.COM'),('C@D.COM');\n\nINSERT INTO table_unique ( emailS ) \n    VALUES ('A@B.COM');\n-- error\n</code></pre>"},{"location":"Databases/sql/4%20Tables/constraints/#adding-unique-constraint-on-column","title":"Adding Unique Constraint on column","text":"<pre><code>ALTER TABLE public.table_unique\n    ADD COLUMN is_enable text;\n\nALTER TABLE table_unique\n    ADD CONSTRAINT unique_is_enable UNIQUE (is_enable);\n\n\nALTER TABLE public.table_unique\n    ADD COLUMN code text,\n    ADD COLUMN code_key text;\n\nALTER TABLE table_unique\n    ADD CONSTRAINT unique_code_key \n        UNIQUE (code,code_key);\n</code></pre>"},{"location":"Databases/sql/4%20Tables/constraints/#default-constraint","title":"DEFAULT CONSTRAINT","text":"<pre><code>CREATE TABLE table_default (\n    id SERIAL PRIMARY KEY,\n    is_enable TEXT DEFAULT 'Y'\n);\n\nINSERT INTO table_default ( id ) VALUES (1),(2);\n\nselect * from table_default;\n\n id | is_enable \n----+-----------\n  1 | Y\n  2 | Y\n\nALTER TABLE public.table_default\n    ADD COLUMN tag text;\n\nALTER TABLE public.table_default\n    ALTER COLUMN tag SET DEFAULT 'N';\n\nINSERT INTO table_default ( id ) VALUES (5);\n\nselect * from table_default;\n\n id | is_enable | tag \n----+-----------+-----\n  1 | Y         | \n  2 | Y         | \n  5 | Y         | N\n\n\nALTER TABLE public.table_default\n    ALTER COLUMN tag DROP DEFAULT;\n\n                              Table \"public.table_default\"\n  Column   |  Type   | Collation | Nullable |                  Default                  \n-----------+---------+-----------+----------+-------------------------------------------\n id        | integer |           | not null | nextval('table_default_id_seq'::regclass)\n is_enable | text    |           |          | 'Y'::text\n tag       | text    |           |          | \nIndexes:\n    \"table_default_pkey\" PRIMARY KEY, btree (id)\n</code></pre>"},{"location":"Databases/sql/4%20Tables/constraints/#primary-key","title":"Primary Key","text":"<ol> <li>Uniquely identifies each record in a database table</li> <li>There can be more than one UNIQUE, but only one primary key</li> <li>A primary key is a field in a table, which uniquely identifies each row/column in a database table</li> <li>When multiple fields are used as a primary key, which may consist of single or multiple fields, also known</li> </ol> <p>as composite key.</p> <pre><code>CREATE TABLE table_item (\n    item_id INTEGER PRIMARY KEY,\n    item_name varchar(20) NOT NULL    \n);\n\nINSERT INTO table_item ( item_id,item_name ) \n    VALUES (1, 'pencil'), (2, 'pen' ), (3, 'box' );\n\nINSERT INTO table_item ( item_id,item_name ) \n    VALUES (1, 'mobile');\n\n-- ERROR:  duplicate key value violates unique constraint \"table_item_pkey\"\n-- DETAIL:  Key (item_id)=(1) already exists.\n-- SQL state: 23505\n\nALTER TABLE table_item\nDROP CONSTRAINT table_item_pkey;\n\nALTER TABLE public.table_item\n    ADD PRIMARY KEY (item_id);\n</code></pre>"},{"location":"Databases/sql/4%20Tables/constraints/#composite-primary-key","title":"Composite Primary Key","text":"<pre><code>CREATE TABLE table_cpk (\n    id VARCHAR(20) NOT NULL,\n    another_id VARCHAR(20) NOT NULL,\n    grade_id VARCHAR(20) NOT NULL\n);\n\nINSERT INTO table_cpk ( id, another_id, grade_id ) \n    VALUES \n        ('1','11','12'), \n        ('2','21','22'), \n        ('3','31','32');\n\nSELECT * FROM table_cpk;\n\n-- composite key = id + another_id;\n\nALTER TABLE public.table_cpk\n    ADD CONSTRAINT cpk_comp_pkey PRIMARY KEY (id, another_id)\n</code></pre>"},{"location":"Databases/sql/4%20Tables/constraints/#foreign-key","title":"Foreign Key","text":"<pre><code>CREATE TABLE t_suppliers (\n    s_id SERIAL PRIMARY KEY,\n    s_name VARCHAR(20) NOT NULL\n);\n\nCREATE TABLE t_products (\n    p_id SERIAL PRIMARY KEY,\n    p_name  VARCHAR(10) NOT NULL,\n    s_id INT NOT NULL,\n    FOREIGN KEY (s_id) REFERENCES t_suppliers (s_id)\n);\n\nINSERT INTO t_suppliers ( s_name ) \n    VALUES ('SUP 1'),('SUP 2'),('SUP 3'),('SUP 4');\n\nINSERT INTO t_products ( P_NAME, S_ID ) \n    VALUES ('PRO 1',1),('PRO 2',2);\n\nINSERT INTO t_products ( P_NAME, S_ID ) \n    VALUES ('PRO 1',9);\n\n-- ERROR:  insert or update on table \"t_products\" \n-- violates foreign key constraint \"t_products_s_id_fkey\"\n-- DETAIL:  Key (s_id)=(9) is not present in table \"t_suppliers\".\n-- SQL state: 23503\n</code></pre>"},{"location":"Databases/sql/4%20Tables/constraints/#check-constraint","title":"CHECK Constraint","text":"<pre><code>CREATE TABLE table_constr (\n    id SERIAL PRIMARY KEY,\n    birth_date DATE CHECK ( birth_date &gt; '1900-01-01' ),\n    joined_date DATE CHECK ( joined_date &gt; birth_date ),\n    salary NUMERIC CHECK ( salary &gt; 0 )\n);\n\nselect * from table_constr;\n\ninsert into table_constr (birth_date, joined_date, salary) \nvalues \n    ('2001-02-02','2019-01-10',100000);\n\ninsert into table_constr (birth_date, joined_date, salary) \nvalues \n    ('2001-02-02','2000-01-10',100000);\n\ninsert into table_constr (birth_date, joined_date, salary) \nvalues \n    ('2001-02-02','2000-01-10',-100000);\n\nALTER TABLE public.table_constr\n    ADD COLUMN prices int;\n\nALTER TABLE table_constr\nADD CONSTRAINT price_check \nCHECK (\n    prices &gt; 0\n    AND salary &gt; prices\n);\n</code></pre>"},{"location":"Databases/sql/4%20Tables/constraints/#example","title":"Example","text":"<pre><code>CREATE TABLE web_links (\n    link_id SERIAL PRIMARY KEY,\n    link_url VARCHAR(255) NOT NULL,\n    link_target VARCHAR(20)\n);\n\nSELECT * FROM web_links;\n\nALTER TABLE web_links\nADD CONSTRAINT unique_web_url UNIQUE (link_url);\n\nINSERT INTO web_links (link_url,link_target) \n    VALUES ('https://www.google.com/','_blank');\n\nALTER TABLE web_links\nADD COLUMN is_enable VARCHAR(2);\n\nINSERT INTO web_links (link_url,link_target,is_enable) \n    VALUES ('https://www.amazon.com/','_blank','Y');\n\nALTER TABLE web_links\nADD CHECK ( is_enable IN ('Y','N') );\n\nINSERT INTO web_links (link_url,link_target,is_enable) \n    VALUES ('https://www.NETFLIX.com/','_blank','N');\n\nSELECT * FROM web_links;\n\nUPDATE web_links\nSET is_enable = 'Y'\nWHERE link_id = 1\n</code></pre>"},{"location":"Databases/sql/4%20Tables/cte/","title":"Common Table Expression","text":"<ul> <li><code>CTE</code> is a temporary result take from a SQL statement</li> <li>A second approach to create temporary tables for query data instead of using sub queries in a <code>FROM</code> clause </li> <li>CTE's are a good alternative to sub queries.</li> <li><code>CTE</code> can be referenced multiple times in multiple places in query statement</li> <li>Lifetime of <code>CTE</code> is equal to the lifetime of a query.</li> <li>Types of <code>CTE</code></li> <li>Materialized</li> <li>Not materialized</li> </ul>"},{"location":"Databases/sql/4%20Tables/cte/#syntax","title":"Syntax","text":"<pre><code>with cte_table ( column_list ) as (\n    cte_query_definition\n)\n\nwith num as (\n    select *\n    from generate_series(1, 5) as id\n)\nselect *\nfrom num;\n\n id \n----\n  1\n  2\n  3\n  4\n  5\n</code></pre>"},{"location":"Databases/sql/4%20Tables/cte/#cte-with-join","title":"CTE with Join","text":"<pre><code>with cte_director as (\n    select movie_id, movie_name, d.director_id, first_name\n    from movies\n             inner join directors d on d.director_id = movies.director_id\n)\nselect *\nfrom cte_director\nlimit 5;\n\n movie_id |       movie_name       | director_id | first_name \n----------+------------------------+-------------+------------\n       20 | Let the Right One In   |           1 | Tomas\n       46 | There Will Be Blood    |           2 | Paul\n       40 | The Darjeeling Limited |           3 | Wes\n       30 | Rushmore               |           3 | Wes\n       15 | Grand Budapest Hotel   |           3 | Wes\n</code></pre>"},{"location":"Databases/sql/4%20Tables/cte/#cte-with-case","title":"CTE with CASE","text":"<pre><code>WITH cte_film AS (\n    SELECT movie_name,\n           movie_length\n                    title,\n           (CASE\n                WHEN movie_length &lt; 100 THEN 'Short'\n                WHEN movie_length &lt; 120 THEN 'Medium'\n                ELSE 'Long'\n               END) length\n    FROM movies\n)\nSELECT *\nFROM cte_film\nWHERE length = 'Long'\nORDER BY title\nlimit 5;\n\n     movie_name     | title | length \n--------------------+-------+--------\n The Wizard of Oz   |   120 | Long\n Spirited Away      |   120 | Long\n Top Gun            |   121 | Long\n Leon               |   123 | Long\n Gone with the Wind |   123 | Long\n</code></pre>"},{"location":"Databases/sql/4%20Tables/cte/#complex-query-example","title":"Complex query example","text":"<pre><code>WITH cte_movie_count AS\n (\n     SELECT d.director_id,\n            SUM(COALESCE(r.revenues_domestic, 0) \n            + COALESCE(r.revenues_international, 0)) \n                    AS total_revenues\n     FROM directors d\n              INNER JOIN movies mv \n                  ON mv.director_id = d.director_id\n              INNER JOIN movies_revenues r \n                  ON r.movie_id = mv.movie_id\n     GROUP BY d.director_id\n )\nSELECT d.director_id,\n       d.first_name,\n       d.last_name,\n       cte.total_revenues\nFROM cte_movie_count cte\n         INNER JOIN directors d \n         ON d.director_id = cte.director_id\nLIMIT 5;\n</code></pre>"},{"location":"Databases/sql/4%20Tables/cte/#cte-to-perform-dml","title":"CTE to perform DML","text":""},{"location":"Databases/sql/4%20Tables/cte/#loading-sample-data","title":"Loading Sample Data","text":"<pre><code>create table articles\n(\n    id      serial,\n    article text\n);\n\ncreate table deleted_articles\n(\n    id      serial,\n    article text\n);\n\ninsert into articles (article)\nvalues ('article 1'),\n       ('article 2'),\n       ('article 3'),\n       ('article 4'),\n       ('article 5');\n</code></pre>"},{"location":"Databases/sql/4%20Tables/cte/#query","title":"Query","text":"<pre><code>select * from articles;\n\n id |  article  \n----+-----------\n  1 | article 1\n  2 | article 2\n  3 | article 3\n  4 | article 4\n  5 | article 5\n\n\nselect *\nfrom deleted_articles;\n\n id | article \n----+---------\n(0 rows)\n\n-- deleting from one table\n-- returning from\n\nwith cte_delete_article as (\n    delete from articles\n        where id = 1\n        returning *\n)\ninsert\ninto deleted_articles\nselect *\nfrom cte_delete_article;\n\nselect *\nfrom deleted_articles;\n\n-- output \n\n  id |  article  \n----+-----------\n  1 | article 1\n(1 row)\n</code></pre>"},{"location":"Databases/sql/4%20Tables/group-by-and-having/","title":"GROUP BY and HAVING","text":""},{"location":"Databases/sql/4%20Tables/group-by-and-having/#group-by","title":"GROUP BY","text":"<ul> <li><code>GROUP BY</code> clause divide the rows returned from <code>SELECT</code> statement into groups</li> <li>For each group, you can apply aggregate functions like <code>COUNT</code>, <code>SUM</code>, <code>MIN</code>, <code>MAX</code> etc.</li> </ul>"},{"location":"Databases/sql/4%20Tables/group-by-and-having/#syntax","title":"Syntax","text":"<pre><code>SELECT column1,\n       AGGREGATE_FUNCTION(column2)\nFROM tablename\nGROUP BY column1;\n</code></pre>"},{"location":"Databases/sql/4%20Tables/group-by-and-having/#group-by_1","title":"Group BY","text":"<p>Group the data in column and pass it to aggregate function</p>"},{"location":"Databases/sql/4%20Tables/group-by-and-having/#group-by-with-count","title":"Group BY with count","text":"<pre><code>SELECT \n    movie_lang,\n    COUNT(movie_lang) as count\nFROM\n    movies\nGROUP BY\n    movie_lang\nORDER BY \n    count ASC;\n\n movie_lang | count \n------------+-------\n Swedish    |     1\n German     |     1\n Korean     |     1\n Spanish    |     1\n Portuguese |     2\n Japanese   |     4\n Chinese    |     5\n English    |    38\n</code></pre>"},{"location":"Databases/sql/4%20Tables/group-by-and-having/#group-by-with-sum","title":"Group BY with SUM","text":"<pre><code>SELECT \n    age_certificate,\n    SUM(movie_length) \nFROM \n    movies \nGROUP BY \n    age_certificate;\n\n age_certificate | sum  \n-----------------+------\n PG              | 1462\n 15              | 2184\n 12              | 1425\n 18              |  994\n U               |  620\n</code></pre>"},{"location":"Databases/sql/4%20Tables/group-by-and-having/#group-by-with-min-max","title":"Group BY with MIN, MAX","text":"<pre><code>SELECT movie_lang,\n       MIN(movie_length),\n       MAX(movie_length)\nFROM movies\nGROUP BY movie_lang\n\n movie_lang | min | max \n------------+-----+-----\n Portuguese | 140 | 145\n German     | 165 | 165\n Chinese    |  99 | 139\n English    |  87 | 168\n Swedish    | 128 | 128\n Spanish    |  98 |  98\n Korean     | 130 | 130\n Japanese   | 107 | 120\n\nSELECT \n    movie_lang,\n    MIN(movie_length),\n    MAX(movie_length)\nFROM\n    movies\nGROUP BY\n    movie_lang\nORDER BY MAX(movie_length) DESC;\n\n movie_lang | min | max \n------------+-----+-----\n English    |  87 | 168\n German     | 165 | 165\n Portuguese | 140 | 145\n Chinese    |  99 | 139\n Korean     | 130 | 130\n Swedish    | 128 | 128\n Japanese   | 107 | 120\n Spanish    |  98 |  98\n</code></pre>"},{"location":"Databases/sql/4%20Tables/group-by-and-having/#having","title":"HAVING","text":"<ul> <li>We use <code>HAVING</code> clause to specify a search condition for a group or an aggregate</li> <li>The <code>HAVING</code> clause is often used with the <code>GROUP BY</code> clause to filter rows based on filter condition</li> <li>cannot use column alias with having clause because it is evaluated before the <code>SELECT</code> statement</li> </ul> <pre><code>SELECT \n    column1,\n    AGGREGATE_FUNCTION(column2),\nFROM tablename\nGROUP BY column1\nHAVING \n    condition;\n</code></pre> <ul> <li><code>HAVING AGGREGATE_FUNCTION(column2) = value</code></li> <li><code>HAVING AGGREGATE_FUNCTION(column2) &gt;= value</code></li> </ul> <pre><code>SELECT \n    movie_lang, \n    SUM(movie_length) \nFROM \n    movies \nGROUP BY \n    movie_lang \nHAVING SUM(movie_length) &gt; 200 \nORDER BY SUM(movie_length);\n\n movie_lang | sum  \n------------+------\n Portuguese |  285\n Japanese   |  446\n Chinese    |  609\n English    | 4824\n</code></pre>"},{"location":"Databases/sql/4%20Tables/group-by-and-having/#having-vs-where","title":"HAVING vs WHERE","text":"<ul> <li><code>HAVING</code> works on result group</li> <li><code>WHERE</code> works on <code>SELECT</code> columns and not on the result group</li> </ul> <pre><code>SELECT\n    movie_lang,\n    SUM(movie_length)\nFROM \n    movies\nGROUP BY movie_lang\nORDER BY 2 DESC;\n\n movie_lang | sum  \n------------+------\n English    | 4824\n Chinese    |  609\n Japanese   |  446\n Portuguese |  285\n German     |  165\n Korean     |  130\n Swedish    |  128\n Spanish    |   98\n</code></pre>"},{"location":"Databases/sql/4%20Tables/miscellaneous/","title":"OPERATORS","text":""},{"location":"Databases/sql/4%20Tables/miscellaneous/#logical","title":"Logical","text":"<pre><code>SELECT 1=1, 1&lt;1, 1&gt;1, 1&lt;=1, 1&gt;=1;\n\n ?column? | ?column? | ?column? | ?column? | ?column? \n----------+----------+----------+----------+----------\n t        | f        | f        | t        | t\n\nSELECT 1&lt;&gt;1; \n ?column? \n----------\n f\n\nSELECT 1 = 1 or 1 = 2 ;\n ?column? \n----------\n t\n\nselect 1 / 0;\n-- ERROR:  division by zero\n</code></pre>"},{"location":"Databases/sql/4%20Tables/miscellaneous/#pattern-matching","title":"Pattern Matching","text":"<pre><code>SELECT * FROM actors WHERE last_name LIKE '%son%';\n\n  first_name |  last_name  | gender |    date_of_birth    \n------------+-------------+--------+---------------------\n Woody      | Harrelson   | M      | 1961-07-23\n Samuel     | Jackson     | M      | 1948-12-21\n Lina       | Leandersson | F      | 1995-09-27\n Jack       | Nicholson   | M      | 1937-04-22\n Mykelti    | Williamson  | M      | 1957-03-04\n Luke       | Wilson      | M      | 1971-09-21\n Owen       | Wilson      | M      | 1968-11-18\n Patrick    | Wilson      | M      | 1973-07-03\n\n-- ILIKE\n-- to ignore the case\nSELECT * FROM actors WHERE last_name ILIKE '__i%'; \n\n first_name | last_name | gender |    date_of_birth    \n------------+-----------+--------+---------------------\n Hiroki     | Doi       | M      | 1999-08-10 \n Alec       | Guiness   | M      | 1914-04-02 \n Rumi       | Hiiragi   | F      | 1987-08-01 \n Miyu       | Irino     | M      | 1988-02-19 \n Keira      | Knightley | F      | 1985-03-26 \n Vivien     | Leigh     | F      | 1913-11-05 \n Yasmin     | Paige     | F      | 1991-06-24 \n Tilda      | Swinton   | F      | 1960-11-05 \n Robin      | Wright    | F      | 1966-04-08 \n\nselect 'hello' like 'hello';\nselect 'hello' like 'h%';\nselect 'hello' like '%e%';\nselect 'hello' like '%lo';\nselect 'hello' like '_ello';\nselect 'hello' like '__llo';\nselect 'hello' like '%ll_';\n\n ?column? | ?column? | ?column? | ?column? | ?column? | ?column? | ?column? \n----------+----------+----------+----------+----------+----------+----------\n t        | t        | t        | t        | t        | t        | t\n\n\n-- like with length of characters\nselect * from table where name like '____';\n</code></pre>"},{"location":"Databases/sql/4%20Tables/miscellaneous/#tips","title":"Tips","text":"<ul> <li>When using <code>AND</code> and <code>OR</code> in sample <code>SQL</code> statement, use brackets to differentiate between statements</li> <li><code>AND</code>  operator is processed before OR operator</li> <li><code>SQL</code> treats <code>AND</code> operator like multiplication and <code>OR</code> like divide</li> </ul>"},{"location":"Databases/sql/4%20Tables/miscellaneous/#fetch","title":"Fetch","text":"<pre><code>-- OFFSET start { ROW | ROWS }\n-- FETCH { FIRST | NEXT } { ROW_COUNT } { ROWS|ROW } ONLY\n\nSELECT\n    *\nFROM movies\nfetch first row only ;\n\n movie_id |     movie_name     | movie_length | movie_lang | release_date | age_certificate | director_id \n----------+--------------------+--------------+------------+--------------+-----------------+-------------\n        1 | A Clockwork Orange |          112 | English    | 1972-02-02   | 18              |          13\n\n\nSELECT\n    *\nFROM movies\noffset 3\nfetch next 10 row only ;\n\n movie_id |          movie_name           | movie_length | movie_lang | release_date | age_certificate | director_id \n----------+-------------------------------+--------------+------------+--------------+-----------------+-------------\n        4 | Blade Runner                  |          121 | English    | 1982-06-25   | 15              |          27\n        5 | Chungking Express             |          113 | Chinese    | 1996-08-03   | 15              |          35\n        6 | City of God                   |          145 | Portuguese | 2003-01-17   | 18              |          20\n        7 | City of Men                   |          140 | Portuguese | 2008-02-29   | 15              |          22\n        8 | Cold Fish                     |          108 | Japanese   | 2010-09-12   | 18              |          30\n        9 | Crouching Tiger Hidden Dragon |          139 | Chinese    | 2000-07-06   | 12              |          15\n       10 | Eyes Wide Shut                |          130 | English    | 1999-07-16   | 18              |          13\n       11 | Forrest Gump                  |          119 | English    | 1994-07-06   | PG              |          36\n       12 | Gladiator                     |          165 | English    | 2000-05-05   | 15              |          27\n       13 | Gone with the Wind            |          123 | English    | 1939-12-15   | PG              |           8\n</code></pre>"},{"location":"Databases/sql/4%20Tables/miscellaneous/#is-null-or-is-not-null","title":"IS NULL or IS NOT NULL","text":"<pre><code>select * from actors where date_of_birth is null;\n\n first_name | last_name | gender | date_of_birth \n------------+-----------+--------+---------------\n Xian       | Gao       | M      | \n</code></pre>"},{"location":"Databases/sql/4%20Tables/order-by/","title":"ORDER BY and DISTINCT","text":""},{"location":"Databases/sql/4%20Tables/order-by/#order-by","title":"Order BY","text":"<pre><code>SELECT\n    company_name,\n    contact_name\nFROM\n    customers\nORDER BY\n    company_name DESC,\n    contact_name\nLIMIT 10;\n\n           company_name            |      contact_name       \n-----------------------------------+-------------------------\n Wolski  Zajazd                    | Zbyszek Piestrzeniewicz\n Wilman Kala                       | Matti Karttunen\n White Clover Markets              | Karl Jablonski\n Wellington Importadora            | Paula Parente\n Wartian Herkku                    | Pirkko Koskitalo\n Vins et alcools Chevalier         | Paul Henriot\n Victuailles en stock              | Mary Saveley\n Vaffeljernet                      | Palle Ibsen\n Trails Head Gourmet Provisioners  | Helvetius Nagy\n Tradi\u00e7\u00e3o Hipermercados            | Anabela Domingues\n\n\nSELECT \n    orderNumber, \n    orderlinenumber, \n    quantityOrdered * priceEach as final_price\nFROM\n    orderdetails\nORDER BY \n   final_price DESC LIMIT 10;\n\n-- orders\n    order_id | product_id |    total_price     \n----------+------------+--------------------\n    10981 |         38 |              15810\n    10865 |         38 |              15810\n    10353 |         38 |              10540\n    10417 |         38 |              10540\n    10889 |         38 |              10540\n    10424 |         38 |              10329\n    10897 |         29 |               9903\n    10372 |         38 |               8432\n    10816 |         38 |               7905\n    10540 |         38 |               7905\n(10 rows)\n\n\n-- using alias in order by\nSELECT\n    first_name,\n    last_name as surname\nFROM\n    actors\nORDER BY\n    surname DESC ;\n\n first_name | surname \n------------+---------\n Ziyi       | Zhang\n Billy      | Zane\n Sean       | Young\n Jin-seo    | Yoon\n Ji-tae     | Yoo\n\n-- NULLS FIRST AND LAST\nselect *\nfrom actors\norder by gender NULLS LAST\nLIMIT 5;\n\n first_name | last_name | gender |    date_of_birth    \n------------+-----------+--------+---------------------\n Malin      | Akerman   | F      | 1978-05-12 00:00:00\n Julie      | Andrews   | F      | 1935-10-01 00:00:00\n Ivana      | Baquero   | F      | 1994-06-11 00:00:00\n Lorraine   | Bracco    | F      | 1954-10-02 00:00:00\n Alice      | Braga     | F      | 1983-04-15 00:00:00\n</code></pre>"},{"location":"Databases/sql/4%20Tables/order-by/#order-by-on-multiple-columns","title":"ORDER BY on multiple columns","text":"<p>The following statement selects the first name and last name from the customer table and sorts the rows by the first name in ascending order and last name in descending order:</p> <pre><code>SELECT\n    first_name,\n    last_name\nFROM\n    customer\nORDER BY\n    first_name ASC,\n    last_name DESC;\n</code></pre> First Name Last Name Kelly Torres Kelly Knott <p>In this example, the ORDER BY clause sorts rows by values in the first name column first. And then it sorts the sorted rows by values in the last name column.</p> <p>As you can see clearly from the output, two customers with the same first name Kelly have the last name sorted in descending order.</p>"},{"location":"Databases/sql/4%20Tables/order-by/#distinct","title":"DISTINCT","text":"<pre><code>SELECT DISTINCT region\nFROM customers\nWHERE country = 'USA'\nLIMIT 10;\n\n region \n--------\n NM\n CA\n AK\n WY\n OR\n MT\n ID\n WA\n(8 rows)\n</code></pre>"},{"location":"Databases/sql/4%20Tables/order-by/#distinct-count","title":"Distinct COUNT","text":"<pre><code>SELECT COUNT(DISTINCT region)\nFROM customers\nWHERE country = 'USA';\n\n count \n-------\n     8\n</code></pre>"},{"location":"Databases/sql/4%20Tables/views/","title":"Views","text":""},{"location":"Databases/sql/4%20Tables/views/#plain-view","title":"Plain View","text":"<p>A view is a database object that is a stored query. A view is a virtual table you can create dynamically using a saved query acting as a <code>virtual table.</code></p> <ul> <li>You can join a view to another table or view</li> <li>You can query a view</li> <li>Regular views don't store any data, but materialised view does</li> </ul>"},{"location":"Databases/sql/4%20Tables/views/#syntax","title":"Syntax","text":"<pre><code>CREATE OR REPLACE VIEW view_name AS query\n</code></pre>"},{"location":"Databases/sql/4%20Tables/views/#example-1","title":"Example 1","text":"<pre><code>CREATE OR REPLACE VIEW v_movie_quick AS\nSELECT movie_name,\n       movie_length,\n       release_date\nfrom movies mv;\n\n-- use just like a normal table\nselect * from v_movie_quick limit 5;\n\n     movie_name     | movie_length | release_date \n--------------------+--------------+--------------\n A Clockwork Orange |          112 | 1972-02-02\n Apocalypse Now     |          168 | 1979-08-15\n Battle Royale      |          111 | 2001-01-04\n Blade Runner       |          121 | 1982-06-25\n Chungking Express  |          113 | 1996-08-03\n</code></pre>"},{"location":"Databases/sql/4%20Tables/views/#example-with-join","title":"Example with JOIN","text":"<pre><code>CREATE OR REPLACE VIEW v_movie_d_name as\nSELECT movie_name,\n       movie_length,\n       release_date,\n       d.first_name || ' ' || d.last_name as \"full name\"\nfrom movies mv\n         inner join directors d \n          on mv.director_id = d.director_id;\n\nselect * from v_movie_d_name limit 5;\n\n       movie_name       | movie_length | release_date |    full name    \n------------------------+--------------+--------------+-----------------\n Let the Right One In   |          128 | 2008-10-24   | Tomas Alfredson\n There Will Be Blood    |          168 | 2007-12-26   | Paul Anderson\n The Darjeeling Limited |          119 | 2007-09-29   | Wes Anderson\n Rushmore               |          104 | 1998-11-12   | Wes Anderson\n Grand Budapest Hotel   |          117 | 2014-07-03   | Wes Anderson\n</code></pre>"},{"location":"Databases/sql/4%20Tables/views/#managing-view","title":"Managing VIEW","text":"<pre><code>ALTER VIEW v_movie_d_name RENAME TO v_movie_with_names;\n-- ALTER VIEW\n\nselect * from v_movie_with_names limit 5;\n-- SAME OUTPUT AS ABOVE\n\n-- dropping view\nDROP VIEW if exists v_movie_quick;\n</code></pre>"},{"location":"Databases/sql/4%20Tables/views/#view-containing-condition","title":"View containing condition","text":"<pre><code>CREATE OR REPLACE VIEW v_movie_after_1997 as\nselect *\nfrom movies\nwhere release_date &gt;= '1997-12-31'\n  and movie_lang = 'English'\norder by release_date desc limit 5;\n\n movie_id |                 movie_name                 | movie_length | movie_lang | release_date | age_certificate | director_id \n----------+--------------------------------------------+--------------+------------+--------------+-----------------+-------------\n       47 | Three Billboards Outside Ebbing, Missouri  |          134 | English    | 2017-11-10   | 15              |          18\n       15 | Grand Budapest Hotel                       |          117 | English    | 2014-07-03   | PG              |           3\n       22 | Life of Pi                                 |          129 | English    | 2012-11-21   | PG              |          15\n       38 | Submarine                                  |          115 | English    | 2011-06-03   | 15              |           4\n       24 | Never Let Me Go                            |          117 | English    | 2010-09-15   | 15              |          25\n</code></pre> <p>You cannot add, update, delete columns from a view once created for that create a new view, drop the old view and rename the new view back to original</p>"},{"location":"Databases/sql/4%20Tables/views/#deleting-from-view-also-deletes-from-the-main-table","title":"Deleting from view also deletes from the main table","text":"<pre><code>CREATE OR REPLACE VIEW v_movie as\nselect *\nfrom movies;\n\nselect *\nfrom v_movie limit 5;\n\nselect *\nfrom movies limit 5;\n\n-- deleting from v_movie also deletes from main table\ndelete\nfrom v_movie\nwhere movie_id = 4;\n</code></pre>"},{"location":"Databases/sql/4%20Tables/views/#materialized-view","title":"Materialized View","text":""},{"location":"Databases/sql/4%20Tables/views/#allows-you-to","title":"Allows you to","text":"<ul> <li>store result of a query</li> <li>update data periodically :: manual</li> <li>used to cache result of heavy data</li> </ul> <p>syntax</p> <pre><code>CREATE MATERIALIZED VIEW IF NOT EXISTS view_name \nAS query WITH [ NO ] DATA;\n</code></pre> <p>If you want to load data into the materialised view at the creation time, you will use <code>WITH DATA</code></p> <pre><code>create materialized view if not exists mv_dir as\nselect first_name, last_name\nfrom directors\nwith no data;\n\n-- this will give error becuz no data\n-- is loaded at time of creation\nselect * from mv_dir limit 5;\n\n-- refreshing view to load data in view\nrefresh materialized view  mv_dir;\n\nselect * from mv_dir limit 5;\n\n-- dropping materialized view\ndrop materialized view mv_dir;\n</code></pre> <ul> <li>cannot change data in <code>materialised view</code> : insert, update and delete </li> <li>advantage of using<code>materialised view</code> : access and update <code>materialised view</code> without locking everyone else out </li> <li>disadvantage of using <code>materialised view</code> if you alter the base table , </li> </ul> <p><code>materialised view</code> must also me alter : delete the old <code>materialised view</code> and create a new one</p>"},{"location":"Databases/sql/4%20Tables/where/","title":"WHERE Clause","text":"<p>Operators Available</p> Operator Description = Equal &gt; Greater than &lt; Less than &gt;= Greater than or equal &lt;= Less than or equal &lt;&gt; or != Not equal AND Logical operator AND OR Logical operator OR IN Return true if a value matches any value in a list BETWEEN Return true if a value is between a range of values LIKE Return true if a value matches a pattern IS NULL Return true if a value is NULL NOT Negate the result of other operators"},{"location":"Databases/sql/4%20Tables/where/#where","title":"Where","text":"<ul> <li>Cannot use column alias with where clause</li> </ul> <pre><code>SELECT select_list\nFROM table_name\nWHERE condition\nORDER BY sort_expression\n</code></pre>"},{"location":"Databases/sql/4%20Tables/where/#where-with-or","title":"Where with OR","text":"<pre><code>select first_name, last_name, date_of_birth\nfrom actors\nwhere date_of_birth &lt; '1990-01-01' \n   or date_of_birth &gt; '1980-01-01'\nLIMIT 10;\n\n first_name | last_name |    date_of_birth    \n------------+-----------+---------------------\n Malin      | Akerman   | 1978-05-12\n Tim        | Allen     | 1953-06-13\n Julie      | Andrews   | 1935-10-01\n Ivana      | Baquero   | 1994-06-11\n Lorraine   | Bracco    | 1954-10-02\n Alice      | Braga     | 1983-04-15\n Marlon     | Brando    | 1924-04-03\n Adrien     | Brody     | 1973-04-14\n Peter      | Carlberg  | 1950-12-08\n Gemma      | Chan      | 1982-11-29\n\nselect first_name, last_name, date_of_birth\nfrom actors\nwhere date_of_birth &lt; '1990-01-01'\n   or date_of_birth &gt; '1980-01-01'\nORDER BY date_of_birth\nLIMIT 10;\n\n-- with order by clause\n first_name | last_name |    date_of_birth    \n------------+-----------+---------------------\n Clark      | Gable     | 1901-02-01 00:00:00\n Scatman    | Crothers  | 1910-05-23 00:00:00\n Vivien     | Leigh     | 1913-11-05 00:00:00\n Alec       | Guiness   | 1914-04-02 00:00:00\n Judy       | Garland   | 1922-06-10 00:00:00\n Marlon     | Brando    | 1924-04-03 00:00:00\n Dick       | Van Dyke  | 1925-12-13 00:00:00\n Sihung     | Lung      | 1930-01-01 00:00:00\n Ian        | Holm      | 1931-09-12 00:00:00\n Rebecca    | Pan       | 1931-12-29 00:00:00\n</code></pre>"},{"location":"Databases/sql/4%20Tables/where/#where-with-and","title":"Where with AND","text":"<pre><code>select *\nfrom directors\nwhere date_of_birth &gt; '1970-01-01'\n  AND nationality = 'British';\n\n director_id | first_name | last_name | date_of_birth | nationality \n-------------+------------+-----------+---------------+-------------\n           4 | Richard    | Ayoade    | 1977-06-12    | British\n          18 | Martin     | McDonagh  | 1970-03-26    | British\n</code></pre>"},{"location":"Databases/sql/4%20Tables/where/#where-with-between-not-between","title":"Where with BETWEEN (NOT BETWEEN)","text":"<pre><code>select *\nfrom directors\nwhere date_of_birth between '1970-01-01' and '1990-01-01';\n\n director_id | first_name |        last_name         | date_of_birth | nationality \n-------------+------------+--------------------------+---------------+-------------\n           2 | Paul       | Anderson                 | 1970-06-26    | American\n           4 | Richard    | Ayoade                   | 1977-06-12    | British\n          11 | Florian    | Henckel von Donnersmarck | 1973-05-02    | German\n          18 | Martin     | McDonagh                 | 1970-03-26    | British\n</code></pre>"},{"location":"Databases/sql/4%20Tables/where/#where-with-like","title":"Where with LIKE","text":"<pre><code>SELECT first_name,\n       last_name\nFROM actors\nWHERE actors.last_name LIKE '%son'\nORDER BY first_name;\n\n first_name |  last_name  \n------------+-------------\n Jack       | Nicholson\n Lina       | Leandersson\n Luke       | Wilson\n Mykelti    | Williamson\n Owen       | Wilson\n Patrick    | Wilson\n Samuel     | Jackson\n Woody      | Harrelson\n</code></pre>"},{"location":"Databases/sql/4%20Tables/where/#where-with-in-and-not-in","title":"Where with IN and NOT IN","text":"<pre><code>select *\nfrom directors\nwhere nationality in ('American', 'Japenese');\n\n director_id | first_name |        last_name         | date_of_birth | nationality  \n-------------+------------+--------------------------+---------------+--------------\n           1 | Tomas      | Alfredson                | 1965-04-01    | Swedish\n           2 | Paul       | Anderson                 | 1970-06-26    | American\n           3 | Wes        | Anderson                 | 1969-05-01    | American\n           4 | Richard    | Ayoade                   | 1977-06-12    | British\n           5 | Luc        | Besson                   | 1959-03-18    | French\n           6 | James      | Cameron                  | 1954-08-16    | American\n           7 | Guillermo  | del Toro                 | 1964-10-09    | Mexican\n\nselect *\nfrom directors\nwhere nationality not in ('American', 'Japenese');\n\n director_id | first_name |        last_name         | date_of_birth | nationality  \n-------------+------------+--------------------------+---------------+--------------\n           1 | Tomas      | Alfredson                | 1965-04-01    | Swedish\n           4 | Richard    | Ayoade                   | 1977-06-12    | British\n           5 | Luc        | Besson                   | 1959-03-18    | French\n           7 | Guillermo  | del Toro                 | 1964-10-09    | Mexican\n          10 | Kinji      | Fukasaku                 | 1930-07-03    | Japanese\n          11 | Florian    | Henckel von Donnersmarck | 1973-05-02    | German\n          12 | Terry      | Jones                    | 1942-02-01    | British\n</code></pre>"},{"location":"Databases/sql/6-Advance-tables/internals/","title":"Advance Tables","text":""},{"location":"Databases/sql/6-Advance-tables/internals/#generated-columns","title":"Generated Columns","text":"<ul> <li>faster than triggers</li> </ul> <pre><code>create table if not exists area (\n    w real,\n    h real,\n    area real GENERATED ALWAYS AS ( w*h ) STORED\n);\n\nINSERT INTO area (w, h) values (2,3),(4,7);\n\nselect * from area;\n\nupdate area\nset w = 10\nwhere w = 4\n\nselect * from area;\n</code></pre>"},{"location":"Databases/sql/6-Advance-tables/internals/#internals","title":"Internals","text":"<pre><code>-- size of database \nSELECT \n    datname as db_name,\n    pg_size_pretty(pg_database_size(datname)) \n        as database_size\nFROM\n    pg_database\nORDER BY\n    pg_database_size(datname) DESC;\n\n-- list all databases and schema\nSELECT \n    catalog_name as \"Database Name\"\nFROM \n    information_schema.information_schema_catalog_name;\n\n-- list all schemas\nSELECT \n    catalog_name, schema_name, schema_owner\nFROM \n    information_schema.schemata;\n\n-- list all schema starting with pg_...\nSELECT *\nFROM information_schema.schemata\nWHERE schema_name LIKE 'pg%';\n\n-- list all tables\nSELECT * \nFROM  information_schema.tables\nWHERE table_schema = 'public'\n\n-- list all views\nSELECT * \nFROM  information_schema.views\nWHERE table_schema = 'public'\n\n-- views from information_schema\nSELECT * \nFROM  information_schema.views\nWHERE table_schema = 'information_schema'\n\n-- list all columns\nSELECT *\nFROM information_schema.columns\nWHERE table_name = 'orders'\n\n-- look at system metadata\nSELECT \n    CURRENT_CATALOG,\n    CURRENT_DATABASE(),\n    CURRENT_SCHEMA,\n    CURRENT_USER,\n    SESSION_USER;\n\n-- LOOK AT DATABASE VERSION\nSELECT VERSION();\n\nSELECT\n    has_database_privilege('learning','CREATE')\n    has_schema_privilege('public','USAGE'),\n    has_table_privilege('orders','INSERT'),\n    has_any_column_privilege('orders','SELECT');\n\nSELECT  current_setting('timezone');\n\n-- show all running queries\nSELECT  \n    pid,\n    age(clock_timestamp(),query_start),\n    usename as run_by_user_name,\n    query as running\nFROM pg_stat_activity\nWHERE query != '&lt;IDLE&gt;'\n    AND query NOT ILIKE '%pg_stat_activity%'\nORDER BY query_start DESC;\n\n-- show all idle query\nSELECT  \n    pid,\n    age(clock_timestamp(),query_start),\n    usename as run_by_user_name,\n    query as running\nFROM pg_stat_activity\nWHERE query = '&lt;IDLE&gt;'\nORDER BY query_start DESC;\n\n-- KILL running query\nSELECT pg_cancel_backend(pid);\n\n-- get live and dead rows in table\nSELECT\n    relname,\n    n_live_tup,\n    n_dead_tup\nFROM pg_stat_user_tables;\n\n-- show location of postgres data directory\nshow data_directory;\n\n-- show files of a table is located\nSELECT pg_relation_filepath('orders');\n</code></pre>"},{"location":"Databases/sql/6-Advance-tables/managing-tables/","title":"Managing Tables","text":""},{"location":"Databases/sql/6-Advance-tables/managing-tables/#creating-new-tables-with-into","title":"Creating new tables with INTO","text":"<pre><code>SELECT * \nINTO emp3\nFROM orders\nWHERE employee_id = 3;\n\nSELECT * FROM emp3;\n\nselect employee_id, ship_name from emp3 limit 5;\n\n employee_id |       ship_name        \n-------------+------------------------\n           3 | Victuailles en stock\n           3 | Hanari Carnes\n           3 | Wellington Importadora\n           3 | Wartian Herkku\n           3 | QUICK-Stop\n</code></pre>"},{"location":"Databases/sql/6-Advance-tables/managing-tables/#create-table-with-not-data","title":"Create table with NOT DATA","text":"<p>Just copying the table structure</p> <pre><code>CREATE TABLE emp1 as \n    (SELECT * FROM orders where employee_id = 1) \n    WITH NO DATA;\n\nSELECT * FROM emp1;\n</code></pre>"},{"location":"Databases/sql/6-Advance-tables/managing-tables/#tables-are-fraud","title":"Tables are Fraud","text":"<ul> <li>When you UPDATE value in database, it doesnt update the original row</li> <li>When you DELETE a row in table, it doesnt show you the new row, but it still remains in db</li> </ul> <pre><code>drop table table_vacuum;\n\nCREATE TABLE table_vacuum\n(\n    id integer\n);\n\nselect pg_total_relation_size('table_vacuum'),\n       pg_size_pretty(pg_total_relation_size('table_vacuum'));\n-- output : 0 bytes\n\nINSERT INTO table_vacuum\nSELECT *\nFROM generate_series(1, 400000);\n\nselect pg_total_relation_size('table_vacuum'),\n       pg_size_pretty(pg_total_relation_size('table_vacuum'));\n-- output : 14MB\n\nSELECT *\nFROM table_vacuum\nlimit 5;\n\nupdate table_vacuum\nset id = id + 2;\n\nselect pg_total_relation_size('table_vacuum'),\n       pg_size_pretty(pg_total_relation_size('table_vacuum'));\n-- output : 28MB\n\nSELECT *\nFROM table_vacuum\nlimit 5;\n\n-- look at autovacuum process\n\n    SELECT relname,\n           last_vacuum,\n           last_autovacuum,\n           last_analyze,\n           vacuum_count,\n           autovacuum_count\n    FROM pg_stat_all_tables\n        WHERE relname = 'table_vacuum';\n\nVACUUM FULL VERBOSE table_vacuum;\n\nselect pg_total_relation_size('table_vacuum'),\n       pg_size_pretty(pg_total_relation_size('table_vacuum'));\n-- output : 14MB\n</code></pre>"},{"location":"Databases/sql/6-Advance-tables/paritioning-tables/","title":"Partitioning Tables","text":"<p>It is splitting table into</p> <ul> <li>logical division</li> <li>multiple smaller pieces</li> <li>more manageable pieces table</li> </ul> <p>Partition leads to a huge performance boost.</p> <p>Types of ranges</p> <ul> <li><code>Range</code> : The table is partitioned into \"range\" defined by a key column or set of columns, with no overlap between the ranges of values assigned to different partitions</li> <li><code>List</code> : According to a key in table, ex : country, sales</li> <li><code>Hash</code> : The partition specifying a modulus and a reminder for each partition. </li> </ul>"},{"location":"Databases/sql/6-Advance-tables/paritioning-tables/#table-inheritance","title":"Table Inheritance","text":"<pre><code>create table master (\n    pk INTEGER primary key ,\n    tag text,\n    parent integer\n);\n\ncreate table master_child() inherits (master);\n\nALTER TABLE public.master_child\n    ADD PRIMARY KEY (pk);\n\n\nselect * from master;\nselect * from master_child;\n\ninsert into master (pk, tag, parent) values (1,'pencil',0);\ninsert into master_child (pk, tag, parent) values (2,'pen',0);\n\nupdate master set tag = 'monitor' where pk = 2;\n\nselect * from only master;\nselect * from only master_child;\n\n-- error\ndrop table master;\ndrop table master cascade ;\n</code></pre>"},{"location":"Databases/sql/6-Advance-tables/paritioning-tables/#range-partitioning","title":"Range Partitioning","text":"<pre><code>create table employees_range (\n    id bigserial,\n    birth_date DATE NOT NULL ,\n    country_code VARCHAR(2) NOT NULL\n) PARTITION BY RANGE (birth_date);\n\nCREATE TABLE employee_range_y2000 PARTITION of\n    employees_range for values from ('2000-01-01') to ('2001-01-01');\n\nCREATE TABLE employee_range_y2001 PARTITION of\n    employees_range for values from ('2001-01-01') to ('2002-01-01');\n\n\ninsert into employees_range (birth_date, country_code) values\n('2000-01-01','US'),\n('2000-01-02','US'),\n('2000-12-31','US'),\n('2000-01-01','US'),\n('2001-01-01','US'),\n('2001-01-02','US'),\n('2001-12-31','US'),\n('2001-01-01','US');\n\nselect * from employees_range;\nselect * from only employees_range; -- you will get nothing\nselect * from employee_range_y2000;\nselect * from employee_range_y2001;\n\nexplain analyze select * from employees_range \nwhere birth_date = '2001-01-01';\n</code></pre>"},{"location":"Databases/sql/6-Advance-tables/paritioning-tables/#list-partitioning","title":"List Partitioning","text":"<pre><code>create table employee_list (\n    id bigserial,\n    birth_date DATE NOT NULL ,\n    country_code VARCHAR(2) not null\n) PARTITION BY LIST ( country_code );\n\ncreate table employee_list_eu PARTITION of employee_list\n    for values in ('UK','DE');\n\ncreate table employee_list_us PARTITION of employee_list\n    for values in ('US','BZ');\n</code></pre>"},{"location":"Databases/sql/6-Advance-tables/paritioning-tables/#hash-partitioning","title":"Hash Partitioning","text":"<pre><code>create table employee_hash (\n    id bigserial,\n    birth_date DATE NOT NULL,\n    country_code varchar(2) not null\n) PARTITION BY HASH (id);\n\ncreate table employee_hash_0 partition of employee_hash\nfor values with (modulus 3, remainder 0);\n\ncreate table employee_hash_1 partition of employee_hash\nfor values with (modulus 3, remainder 1);\n\ncreate table employee_hash_2 partition of employee_hash\nfor values with (modulus 3, remainder 2);\n</code></pre>"},{"location":"Databases/sql/6-Advance-tables/paritioning-tables/#default-partitioning","title":"Default Partitioning","text":"<pre><code>create table employee_default_part partition of employee_list default;\n</code></pre>"},{"location":"Databases/sql/6-Advance-tables/paritioning-tables/#multilevel-partitioning","title":"Multilevel Partitioning","text":"<pre><code>create table employee_list_master (\n    id bigserial,\n    birth_date DATE NOT NULL ,\n    country_code VARCHAR(2) not null\n) PARTITION BY LIST ( country_code );\n\ncreate table employee_list_eu_m PARTITION of employee_list_master\n    for values in ('UK','DE')\n    partition by hash (id);\n\ncreate table employee_list_us_m PARTITION of employee_list_master\n    for values in ('US','BZ');\n\ncreate table employee_hash_0_m partition of employee_list_eu_m\nfor values with (modulus 3, remainder 0);\n\ncreate table employee_hash_1_m partition of employee_list_eu_m\nfor values with (modulus 3, remainder 1);\n\ncreate table employee_hash_2_m partition of employee_list_eu_m\nfor values with (modulus 3, remainder 2);\n</code></pre>"},{"location":"Databases/sql/6-Advance-tables/paritioning-tables/#attach-and-deattach-partitions","title":"Attach and DeAttach Partitions","text":"<pre><code>create table employees_list_sp partition of employee_list\n for values in ('SP');\n\ninsert into employee_list (birth_date, country_code) values ('2001-01-01','SP');\n\ncreate table employees_list_in partition of employee_list\n for values in ('IN');\n\ncreate table employees_list_default partition of employee_list default\n\nALTER TABLE employee_list detach partition employees_list_in;\n</code></pre>"},{"location":"Databases/sql/6-Advance-tables/paritioning-tables/#altering-partitions","title":"Altering Partitions","text":"<pre><code>create table t1\n(\n    a int,\n    b int\n) partition by range (a);\n\ncreate table t1p1 partition of t1 for values from (0) to (1000);\ncreate table t1p2 partition of t1 for values from (2000) to (3000);\n\ninsert into t1 (a, b)\nvalues (1, 1);\n\n-- detach\n-- alter\n-- attach\n\n\nBEGIN TRANSACTION ;\nALTER TABLE T1 DETACH PARTITION t1p1;\nALTER TABLE t1 attach partition t1p1 for values FROM (0) to (200);\ncommit TRANSACTION;\n</code></pre>"},{"location":"Databases/sql/6-Advance-tables/paritioning-tables/#partition-indexes","title":"Partition Indexes","text":"<ul> <li>Creating an index on the master/parent table will automatically create same indexes to every attached table partition</li> <li>PostgreSQL doesnt allow a way to create a single index covering every partition of the parent table. You have to create indexes for each table</li> </ul> <pre><code>create unique index idx_u_employee_list_id_country_code on employee_list\n    (id); -- error\n\ncreate unique index idx_u_employee_list_id_country_code on employee_list\n    (id,country_code); -- with paritition key\n</code></pre>"},{"location":"Databases/sql/6-Advance-tables/pivotal-or-crosstab-tables/","title":"Pivotal or Crosstab Tables","text":"<p>something about cross tab</p> <pre><code>CREATE EXTENSION IF NOT EXISTS tablefunc;\n\nCREATE TABLE ct(id SERIAL, rowid TEXT, attribute TEXT, value TEXT);\nINSERT INTO ct(rowid, attribute, value) VALUES('test1','att1','val1');\nINSERT INTO ct(rowid, attribute, value) VALUES('test1','att2','val2');\nINSERT INTO ct(rowid, attribute, value) VALUES('test1','att3','val3');\nINSERT INTO ct(rowid, attribute, value) VALUES('test1','att4','val4');\nINSERT INTO ct(rowid, attribute, value) VALUES('test2','att1','val5');\nINSERT INTO ct(rowid, attribute, value) VALUES('test2','att2','val6');\nINSERT INTO ct(rowid, attribute, value) VALUES('test2','att3','val7');\nINSERT INTO ct(rowid, attribute, value) VALUES('test2','att4','val8');\n\nSELECT * FROM ct;\n\n\nSELECT *\nFROM crosstab(\n  'select rowid, attribute, value\n   from ct\n   where attribute = ''att2'' or attribute = ''att3''\n   order by 1,2')\nAS ct(row_name text, category_1 text, category_2 text);\n\n\nSELECT * FROM crosstab (\n    '\n        SELECT location, year, SUM(raindays)::int\n        FROM rainfalls\n        GROUP BY \n            location,\n            year\n        ORDER BY\n            location,\n            year\n    '\n) AS ct \n(\n    \"LOCATION\" TEXT,\n    \"2012\" INT,\n    \"2013\" INT,\n    \"2014\" INT,\n    \"2015\" INT,\n    \"2016\" INT,\n    \"2017\" INT\n)\n</code></pre>"},{"location":"Databases/sql/7%20Joins/","title":"Joins","text":"<ul> <li>Cross &amp; Natural Joins</li> <li>Full, Multiple &amp; Self Join</li> <li>Inner Join</li> <li>Left &amp; Right Join</li> </ul>"},{"location":"Databases/sql/7%20Joins/cross-join/","title":"Cross &amp; Natural Joins","text":""},{"location":"Databases/sql/7%20Joins/cross-join/#cross-join","title":"Cross Join","text":"<pre><code>-- every row in the left table will match with every row \n-- in the right table in cross join\n\nselect *\nfrom left_product\n         cross join right_product;\n\n product_id | product_name | product_id | product_name \n------------+--------------+------------+--------------\n          1 | a            |          1 | a\n          1 | a            |          2 | B\n          1 | a            |          3 | C\n          1 | a            |          4 | d\n          1 | a            |          7 | E1\n          2 | B            |          1 | a\n          2 | B            |          2 | B\n          2 | B            |          3 | C\n          2 | B            |          4 | d\n          2 | B            |          7 | E1\n          3 | C            |          1 | a\n          3 | C            |          2 | B\n          3 | C            |          3 | C\n          3 | C            |          4 | d\n          3 | C            |          7 | E1\n          5 | E            |          1 | a\n          5 | E            |          2 | B\n          5 | E            |          3 | C\n          5 | E            |          4 | d\n          5 | E            |          7 | E1\n\n\n-- short hand notation for cross join\nselect * from left_product , right_product;\n-- same output as above\n\n-- using inner join to preform query like cross join\n-- using ON TRUE at the end\nselect *\nfrom left_product\n         inner join right_product on true;\n-- same output as above\n</code></pre>"},{"location":"Databases/sql/7%20Joins/cross-join/#natural-join","title":"Natural Join","text":""},{"location":"Databases/sql/7%20Joins/cross-join/#loading-sample-data","title":"Loading sample data","text":"<pre><code>DROP TABLE IF EXISTS c1;\nCREATE TABLE c1\n(\n    category_id   serial PRIMARY KEY,\n    category_name VARCHAR(255) NOT NULL\n);\n\nDROP TABLE IF EXISTS p1;\nCREATE TABLE p1\n(\n    product_id   serial PRIMARY KEY,\n    product_name VARCHAR(255) NOT NULL,\n    category_id  INT          NOT NULL,\n    FOREIGN KEY (category_id) REFERENCES c1 (category_id)\n);\n\nINSERT INTO c1 (category_name)\nVALUES ('Smart Phone'),\n       ('Laptop'),\n       ('Tablet');\n\nINSERT INTO p1 (product_name, category_id)\nVALUES ('iPhone', 1),\n       ('Samsung Galaxy', 1),\n       ('HP Elite', 2),\n       ('Lenovo Think pad', 2),\n       ('iPad', 3),\n       ('Kindle Fire', 3);\n</code></pre>"},{"location":"Databases/sql/7%20Joins/cross-join/#queries","title":"Queries","text":"<pre><code>SELECT *\nFROM p1\n         NATURAL JOIN c1;\n\n category_id | product_id |   product_name   | category_name \n-------------+------------+------------------+---------------\n           1 |          1 | iPhone           | Smart Phone\n           1 |          2 | Samsung Galaxy   | Smart Phone\n           2 |          3 | HP Elite         | Laptop\n           2 |          4 | Lenovo Think pad | Laptop\n           3 |          5 | iPad             | Tablet\n           3 |          6 | Kindle Fire      | Tablet\n\n--same query using inner join\nSELECT *\nFROM p1\n         INNER JOIN c1 USING (category_id);\n-- same output as above\n</code></pre>"},{"location":"Databases/sql/7%20Joins/full-multiple-and-self-joins/","title":"Full, Multiple &amp; Self Joins","text":""},{"location":"Databases/sql/7%20Joins/full-multiple-and-self-joins/#full-join","title":"Full Join","text":"<pre><code>select *\nfrom right_product\n  full join \n    left_product\n  on \n    right_product.product_id = left_poduct.product_id;\n\n-- gets result from tables o both side\n-- those entries that match the each other are in one row\n-- else they are present in seperate row in table\n\n product_id | product_name | product_id | product_name \n------------+--------------+------------+--------------\n          1 | a            |          1 | a\n          2 | B            |          2 | B\n          3 | C            |          3 | C\n          4 | d            |            | \n          7 | E1           |            | \n            |              |          5 | E\n\n\nselect dir.first_name || ' ' || dir.last_name\n           as \"name\",\n       mv.movie_name\nfrom directors dir\n         full join movies mv \n         on mv.director_id = dir.director_id\n\n      name       |       movie_name       \n-----------------+------------------------\n Tomas Alfredson | Let the Right One In\n Paul Anderson   | There Will Be Blood\n Wes Anderson    | The Darjeeling Limited\n Wes Anderson    | Rushmore\n Wes Anderson    | Grand Budapest Hotel\n</code></pre>"},{"location":"Databases/sql/7%20Joins/full-multiple-and-self-joins/#multiple-join","title":"Multiple Join","text":"<pre><code>select r.movie_id, movie_name,\n       dir.first_name || ' ' || dir.last_name \n         as \"dir name\"\nfrom movies mv\n         JOIN movies_revenues r\n             on r.movie_id = mv.movie_id\n         JOIN directors dir\n             on dir.director_id = mv.director_id\nlimit 5;\n\n movie_id |     movie_name     |     dir name     \n----------+--------------------+------------------\n       45 | The Wizard of Oz   | Victor Fleming\n       13 | Gone with the Wind | Victor Fleming\n       23 | Mary Poppins       | Robert Stevenson\n       44 | The Sound of Music | Robert Wise\n\n-- same result even after re-arranging\nselect r.movie_id,\n       movie_name,\n       dir.first_name || ' ' || dir.last_name \n         as \"dir name\"\nfrom movies mv\n         JOIN directors dir\n              on dir.director_id = mv.director_id\n         JOIN movies_revenues r\n              on r.movie_id = mv.movie_id\nlimit 5;\n</code></pre>"},{"location":"Databases/sql/7%20Joins/full-multiple-and-self-joins/#self-join","title":"Self Join","text":"<pre><code>select * \nfrom left_product t1 \nINNER JOIN left_product t2 \nON t1.product_id = t2.product_id;\n\n product_id | product_name | product_id | product_name \n------------+--------------+------------+--------------\n          1 | a            |          1 | a\n          2 | B            |          2 | B\n          3 | C            |          3 | C\n          5 | E            |          5 | E\n</code></pre>"},{"location":"Databases/sql/7%20Joins/inner-join/","title":"Inner Join","text":""},{"location":"Databases/sql/7%20Joins/inner-join/#basic","title":"Basic","text":"<p>Remember : All common column defined at ON must match values on both tables</p> <pre><code>-- syntax\n\nSELECT\n table_a.column1\n table_b.column2\nFROM\n table_a\nINNER JOIN table_b ON table1.column1 = table2.column2\n\n\nSELECT mv.*,\n       dir.*\nFROM movies as mv\n         INNER JOIN directors as dir\n                    ON mv.director_id = dir.director_id\nLIMIT 5;\n\n-- director_id column will be repeated\n\n movie_id |       movie_name       | movie_length | movie_lang | release_date | age_certificate | director_id | director_id | first_name | last_name | date_of_birth | nationality \n----------+------------------------+--------------+------------+--------------+-----------------+-------------+-------------+------------+-----------+---------------+-------------\n       20 | Let the Right One In   |          128 | Swedish    | 2008-10-24   | 15              |           1 |           1 | Tomas      | Alfredson | 1965-04-01    | Swedish\n       46 | There Will Be Blood    |          168 | English    | 2007-12-26   | 15              |           2 |           2 | Paul       | Anderson  | 1970-06-26    | American\n       40 | The Darjeeling Limited |          119 | English    | 2007-09-29   | PG              |           3 |           3 | Wes        | Anderson  | 1969-05-01    | American\n       30 | Rushmore               |          104 | English    | 1998-11-12   | 12              |           3 |           3 | Wes        | Anderson  | 1969-05-01    | American\n       15 | Grand Budapest Hotel   |          117 | English    | 2014-07-03   | PG              |           3 |           3 | Wes        | Anderson  | 1969-05-01    | American\n</code></pre>"},{"location":"Databases/sql/7%20Joins/inner-join/#selecting-only-required-columns","title":"Selecting only required columns","text":"<pre><code>SELECT movie_name,\n       dir.first_name || ' ' || dir.last_name \n           as \"Director Name\",\n       mv.movie_id,\n       dir.director_id\nFROM movies as mv\n         INNER JOIN directors as dir \n             ON mv.director_id = dir.director_id\nLIMIT 5;\n\n       movie_name       |  Director Name  | movie_id | director_id \n------------------------+-----------------+----------+-------------\n Let the Right One In   | Tomas Alfredson |       20 |           1\n There Will Be Blood    | Paul Anderson   |       46 |           2\n The Darjeeling Limited | Wes Anderson    |       40 |           3\n Rushmore               | Wes Anderson    |       30 |           3\n Grand Budapest Hotel   | Wes Anderson    |       15 |           3\n</code></pre>"},{"location":"Databases/sql/7%20Joins/inner-join/#with-where-clause","title":"with WHERE clause","text":"<pre><code>SELECT movie_name,\n       mv.movie_lang,\n       dir.first_name || ' ' || dir.last_name \n          as \"Director Name\",\n       mv.movie_id,\n       dir.director_id\nFROM movies as mv\n         INNER JOIN directors as dir\n            ON mv.director_id = dir.director_id\nWHERE mv.movie_lang = 'English' limit 5;\n\n       movie_name       | movie_lang | Director Name  | movie_id | director_id \n------------------------+------------+----------------+----------+-------------\n There Will Be Blood    | English    | Paul Anderson  |       46 |           2\n The Darjeeling Limited | English    | Wes Anderson   |       40 |           3\n Rushmore               | English    | Wes Anderson   |       30 |           3\n Grand Budapest Hotel   | English    | Wes Anderson   |       15 |           3\n Submarine              | English    | Richard Ayoade |       38 |           4\n</code></pre>"},{"location":"Databases/sql/7%20Joins/inner-join/#inner-join-with-using","title":"Inner Join with USING","text":"<ul> <li>we use USING  only when joining tables have the SAME column name, rather then ON !</li> </ul> <pre><code>select\n    table1.column1,\n    table2.column1\nfrom\n    table1\nINNER JOIN \n    table2 USING (column1);\n\n\nselect *\nfrom movies\n         INNER JOIN directors USING (director_id)\nLIMIT 10;\n\n director_id | movie_id |     movie_name     | movie_length | movie_lang | release_date | age_certificate | first_name |  last_name   | date_of_birth | nationality \n-------------+----------+--------------------+--------------+------------+--------------+-----------------+------------+--------------+---------------+-------------\n          13 |        1 | A Clockwork Orange |          112 | English    | 1972-02-02   | 18              | Stanley    | Kubrick      | 1928-07-26    | American\n           9 |        2 | Apocalypse Now     |          168 | English    | 1979-08-15   | 15              | Francis    | Ford Coppola | 1939-04-07    | American\n</code></pre>"},{"location":"Databases/sql/7%20Joins/left-and-right-join/","title":"Left and Right JOIN","text":""},{"location":"Databases/sql/7%20Joins/left-and-right-join/#left-join","title":"Left Join","text":""},{"location":"Databases/sql/7%20Joins/left-and-right-join/#basic","title":"Basic","text":"<ul> <li>Returns every row from LEFT table plus rows that match values in the joined column from the RIGHT table</li> </ul>"},{"location":"Databases/sql/7%20Joins/left-and-right-join/#syntax","title":"Syntax","text":"<pre><code>SELECT table1.column1,\n       table2.column1\nFROM table1\n         LEFT JOIN\n     table2\n     ON\n         table1.column1 = table2.column2\n</code></pre>"},{"location":"Databases/sql/7%20Joins/left-and-right-join/#loading-sample-data","title":"Loading Sample Data","text":"<pre><code>create table left_product\n(\n    product_id   INT PRIMARY KEY,\n    product_name VARCHAR(100)\n);\n\nCREATE TABLE right_product\n(\n    product_id   INT PRIMARY KEY,\n    product_name VARCHAR(100)\n);\n\nINSERT INTO left_product ( PRODUCT_ID, PRODUCT_NAME )\n    VALUES (1,'a'),('2','B'),('3','C'),('5','E');\n\nINSERT INTO right_product ( PRODUCT_ID, PRODUCT_NAME )\n    VALUES (1,'a'),('2','B'),('3','C'),('4','d'),(7,'E1');\n</code></pre> <pre><code>-- left join selects all data in the left data and\n-- picks all data in the right table matching the condition\n\nSELECT\n    *\nfrom left_product\nleft join\n    right_product \n    on left_product.product_id = right_product.product_id;\n\n product_id | product_name | product_id | product_name \n------------+--------------+------------+--------------\n          1 | a            |          1 | a\n          2 | B            |          2 | B\n          3 | C            |          3 | C\n          5 | E            |-- no match | -- no match\n\n-- select name from director table\n-- and select movie from another table\n-- where director.id matches director id in movies table\n\nselect\n    dir.first_name,\n    dir.last_name,\n    mv.movie_name\nfrom\n     directors dir\nleft join movies mv\n    ON mv.director_id = dir.director_id\nlimit 5;\n\n first_name | last_name |       movie_name       \n------------+-----------+------------------------\n Tomas      | Alfredson | Let the Right One In\n Paul       | Anderson  | There Will Be Blood\n Wes        | Anderson  | The Darjeeling Limited\n Wes        | Anderson  | Rushmore\n Wes        | Anderson  | Grand Budapest Hotel\n\n-- same above query with where clause\n\nselect dir.first_name || ' ' || dir.last_name\n           as \"Directors Name\",\n       mv.movie_name,\n       mv.movie_lang\nfrom directors dir\n         left join movies mv\n                   ON mv.director_id = dir.director_id\nwhere mv.movie_lang in ('English', 'Chinese');\n</code></pre>"},{"location":"Databases/sql/7%20Joins/left-and-right-join/#right-join","title":"Right Join","text":""},{"location":"Databases/sql/7%20Joins/left-and-right-join/#syntax_1","title":"Syntax","text":"<pre><code>SELECT \n    table1.column1,\n    table2.column2\nFROM\n    table1\nRIGHT JOIN\n    table2 \n    ON table1.column1 = table2.column2;\n</code></pre>"},{"location":"Databases/sql/7%20Joins/left-and-right-join/#load-sample-data","title":"Load Sample Data","text":"<pre><code>CREATE TABLE films\n(\n    film_id SERIAL PRIMARY KEY,\n    title   varchar(255) NOT NULL\n);\n\nINSERT INTO films(title)\nVALUES ('Joker'),\n       ('Avengers: Endgame'),\n       ('Parasite');\n\nCREATE TABLE film_reviews\n(\n    review_id SERIAL PRIMARY KEY,\n    film_id   INT,\n    review    VARCHAR(255) NOT NULL\n);\n\nINSERT INTO film_reviews(film_id, review)\nVALUES (1, 'Excellent'),\n       (1, 'Awesome'),\n       (2, 'Cool'),\n       (NULL, 'Beautiful');\n</code></pre> <pre><code>-- contains products from left table \n-- that are in right table\n-- and all rows from right table that do not\n-- match anything from left\n\nSELECT\n    *\nfrom left_product\nright join\n    right_product\n    on left_product.product_id = right_product.product_id;\n\n product_id | product_name | product_id | product_name \n------------+--------------+------------+--------------\n          1 | a            |          1 | a\n          2 | B            |          2 | B\n          3 | C            |          3 | C\n            |              |          4 | d\n            |              |          7 | E1\n\n\nSELECT review, title\nFROM films\nRIGHT JOIN film_reviews using (film_id)\nWHERE title IS NULL;\n\n  review   | title \n-----------+-------\n Beautiful | \n</code></pre>"},{"location":"Databases/sql/8%20Functions/","title":"Functions","text":""},{"location":"Databases/sql/8%20Functions/#basic-functions","title":"Basic Functions","text":""},{"location":"Databases/sql/8%20Functions/#syntax","title":"Syntax","text":"<pre><code>CREATE OR REPLACE FUNCTION function_name() RETURNS return_type as \n'\n    -- SQL COMMAND \n' LANGUAGE SQL;\n</code></pre>"},{"location":"Databases/sql/8%20Functions/#some-examples","title":"Some Examples","text":"<pre><code>-- Function to Add\n\nCREATE OR REPLACE FUNCTION fn_my_sum( int, int ) RETURNS int as \n'\n    SELECT $1 + $2;\n' LANGUAGE SQL;\n\n-- function call\n\nSELECT fn_my_sum(1,2);\n\n-- output\n\n fn_my_sum \n-----------\n         3\n(1 row)\n\n--------------------------------\n\n-- Function to printer\n\nCREATE OR REPLACE FUNCTION fn_printer( text ) RETURNS text as \n$$\n    SELECT 'Hello ' || $1 ;\n$$ LANGUAGE SQL;\n\n--function call\n\nSELECT fn_printer( 'Uday' );\n\n-- output\n\n fn_printer \n------------\n Hello Uday\n(1 row)\n\n-- Another syntax\n\nCREATE OR REPLACE FUNCTION fn_printer( text ) RETURNS text as \n$body$\n    SELECT 'Hello ' || $1 ;\n$body$ \nLANGUAGE SQL;\n\n-- function call\n\nSELECT fn_printer( 'Uday' );\n\n-- output\n fn_printer \n------------\n Hello Uday\n(1 row)\n</code></pre>"},{"location":"Databases/sql/8%20Functions/#functions-with-dml","title":"Functions with DML","text":"<pre><code>-- function\n\nCREATE OR REPLACE FUNCTION fn_employee_update_country () returns void AS\n$$\n\n    update employees \n    set country = 'n/a'\n    where country is NULL\n$$ \nLANGUAGE SQL\n\nSELECT fn_employee_update_country();\n</code></pre>"},{"location":"Databases/sql/8%20Functions/#function-with-dql","title":"Function with DQL","text":"<pre><code>CREATE OR REPLACE FUNCTION fn_api_order_latest() RETURNS orders AS\n$$\n\n    select *\n    from orders\n    order by order_date DESC\n    limit 1\n\n$$\nLANGUAGE SQL;\n\nselect (fn_api_order_latest()).*;\n\nselect (fn_api_order_latest()).order_date;\n\nselect order_date(fn_api_order_latest())\n\n-----------------------------\n\nCREATE OR REPLACE FUNCTION fn_employee_hire_bydate( p_year integer ) returns setof employees as \n$$\n\n    select * from employees\n    where extract('YEAR' from hire_date) = p_year\n\n$$\nLANGUAGE SQL\n\nSELECT (fn_employee_hire_bydate('1992')).*;\n</code></pre>"},{"location":"Databases/sql/8%20Functions/#returning-table-from-function","title":"Returning table from function","text":"<pre><code>CREATE OR REPLACE FUNCTION fn_orders()\n    returns table\n            (\n                order_id SMALLINT,\n                employee_id SMALLINT\n            )\n    as\n    $$\n\n    select order_id, employee_id\n    from orders;\n\n    $$\nLANGUAGE SQL;\n\nSELECT (fn_orders()).*;\n</code></pre>"},{"location":"Databases/sql/8%20Functions/#function-with-defualt-parameters","title":"Function with Defualt parameters","text":"<pre><code>CREATE OR REPLACE FUNCTION function_name \n    ( x int default 0, y int DEFAULT 10 ) returns int as\n    $$ \n\n    select x+y;\n\n    $$\nLANGUAGE SQL;\n\nSELECT function_name();\n</code></pre>"},{"location":"Databases/sql/8%20Functions/#dropping-function","title":"Dropping Function","text":"<pre><code>DROP FUNCTION [ IF EXISTS ] function_name \n    ( argument_list ) ( cascade | restrict );\n</code></pre>"},{"location":"Databases/sql/8%20Functions/cursors/","title":"Cursors","text":"<ul> <li>Rows returned by the SQL query are those which match the condition. It can either be zero or more at a time.</li> <li>Sometimes you need to traverse through the rows one by one, forward or backwards</li> <li>Life Cycle of Cursor</li> <li>DECLARE </li> <li>OPEN</li> <li>FETCH</li> <li>CLOSE</li> <li>Cursor enable SQL to retrieve ( or update, or delete ) a single row at a time.</li> <li>Cursor needs to be created in </li> </ul> <pre><code>DECLARE cur_al_movie refcursor;\n\n-- or\n\ncursor-name [cursor-scrollability] cursor [(name datatype ...)]\nFOR\n    query-expression\n</code></pre> <ul> <li><code>cursor-scrollability</code> :  <code>SCROLL</code> OR <code>NO SCROLL</code>, <code>NO SCROLL</code> mean the cursor cannot scrol backward.</li> <li><code>query-expression</code> : You can use any legal SELECT statement as a query expression. The result set rows are considered as scope of the cursor.</li> </ul>"},{"location":"Databases/sql/8%20Functions/cursors/#example","title":"Example","text":"<pre><code>DECLARE cur_all_movies CURSOR\n    FOR\n        SELECT movie_name, movie_length FROM movies;\n</code></pre>"},{"location":"Databases/sql/8%20Functions/cursors/#cursor-with-parameters","title":"Cursor with Parameters","text":"<pre><code>DECLARE cur_all_movies_by_year CURSOR ( custom_year integer )\nFOR\n    SELECT  \n        *\n    FROM movies\n    WHERE EXTRACT ('YEAR' FROM release_date ) = custom_year\n</code></pre>"},{"location":"Databases/sql/8%20Functions/cursors/#opening-a-cursor","title":"Opening a cursor","text":"<ul> <li>Opening an unbound cursor</li> </ul> <pre><code>OPEN unbound_cursor_variable [[NO] SCROLL] FOR query;\n</code></pre>"},{"location":"Databases/sql/8%20Functions/cursors/#opening-un-bound-cursor","title":"Opening un bound cursor","text":"<pre><code>OPEN cur_directors_us\nFOR\n    SELECT\n        first_name,\n        last_name,\n        date_of_birth\n    FROM\n        directors\n    WHERE\n        nationality = 'American'\n</code></pre>"},{"location":"Databases/sql/8%20Functions/cursors/#opening-an-un-bound-cursor-with-dynamic-query","title":"Opening an un bound cursor with dynamic query","text":"<pre><code>OPEN unbound_cursor_variable [[NO] SCROLL]\nFOR EXECUTE\n    query-expression [using expression [,...]];\n</code></pre> <pre><code>select * from movies order by movie_name;\n\nDO\n$$\n\n    DECLARE\n        output_text text default '';\n        rec_movie record;\n\n        cur_all_movies CURSOR\n        FOR\n            SELECT * FROM movies;\n\n    BEGIN\n\n        OPEN cur_all_movies;\n\n        LOOP\n\n            FETCH cur_all_movies into rec_movie;\n                EXIT WHEN NOT FOUND;\n\n            output_text := output_text || ',' || rec_movie.movie_name;\n\n        END LOOP;\n\n        RAISE NOTICE 'ALL MOVIES NAME %' , output_text;\n\n    END;\n\n$$\n</code></pre>"},{"location":"Databases/sql/8%20Functions/pl-pgsql/","title":"PL/pgSQL","text":""},{"location":"Databases/sql/8%20Functions/pl-pgsql/#declaring-variables","title":"Declaring Variables","text":"<pre><code>DO\n$$\n    DECLARE\n        mynum      integer     := 89;\n        first_name varchar(20) := 'Uday';\n        hire_date  date        := '2020-01-01';\n        start_time timestamp   := NOW();\n        emptyvar   integer;\n\n    BEGIN\n        RAISE NOTICE 'My variable % % % % %',\n        mynum, first_name, hire_date,\n        start_time, emptyvar ;\n    END;\n$$\n</code></pre>"},{"location":"Databases/sql/8%20Functions/pl-pgsql/#parameters-to-function","title":"Parameters to Function","text":"<pre><code>CREATE OR REPLACE FUNCTION function_name \n    (INT, INT) RETURNS INT as\n$$\n    DECLARE\n        x alias for $1;\n        y alias for $2;\n\n    BEGIN\n        --\n    END;\n$$\n</code></pre>"},{"location":"Databases/sql/8%20Functions/pl-pgsql/#assigning-value-from-result-into-variable","title":"Assigning value from result into variable","text":"<pre><code>DO\n$$\n    DECLARE \n        product_title products.product_name%TYPE;\n    BEGIN\n        SELECT product_name FROM products \n        INTO product_title\n        where product_id = 1 limit 1;\n\n        RAISE NOTICE 'Your product name is %', product_title;\n    END;\n$$        \n</code></pre>"},{"location":"Databases/sql/8%20Functions/pl-pgsql/#function-parameter-wt-in-and-out","title":"Function Parameter w/t IN and OUT","text":"<pre><code>CREATE OR REPLACE FUNCTION fn_sum_using_inout \n    ( IN x integer, IN y integer, OUT Z integer ) as \n$$\n\n    BEGIN\n        z := x+y;\n    END;\n\n$$\nLANGUAGE PLPGSQL;\n\nselect fn_sum_using_inout(2,3);\n\n-- another example\n\nCREATE OR REPLACE FUNCTION fn_sum_using_inouts \n    ( IN x integer, IN y integer, OUT Z integer, OUT w integer ) as \n$$\n\n    BEGIN\n        z := x+y;\n        w := x*y;\n    END;\n\n$$\nLANGUAGE PLPGSQL;\n\nselect * from fn_sum_using_inouts(2,3);\n</code></pre>"},{"location":"Databases/sql/8%20Functions/pl-pgsql/#nested-functions","title":"Nested functions","text":"<pre><code>DO\n$$\n    &lt;&lt; Parent &gt;&gt;\n\n    DECLARE\n        counter integer := 0;\n    BEGIN\n        counter := counter+1;\n        RAISE NOTICE 'the current value of counter (IN PARENT) is %', counter;\n\n            DECLARE \n                counter integer := 0;\n            BEGIN\n                counter := counter + 5;\n                RAISE NOTICE 'The current value of counter at subblocks is %', counter;\n                RAISE NOTICE 'The parent value of counter at subblocks is %', PARENT.counter;\n            END;\n\n        counter := counter + 5;\n        RAISE NOTICE 'the current value of counter (IN PARENT) is %', counter;\n\n    END;\n$$\nLANGUAGE PLPGSQL;\n</code></pre>"},{"location":"Databases/sql/8%20Functions/pl-pgsql/#returning-resultset-from-function","title":"Returning ResultSet from function","text":"<pre><code>CREATE OR REPLACE FUNCTION fn_order_by_date_pro() RETURNS SETOF orders AS\n$$\n    BEGIN\n        RETURN QUERY SELECT * FROM orders limit 10;\n    END;\n$$\nLANGUAGE PLPGSQL;\n\nSELECT * FROM fn_order_by_date_pro();\n</code></pre>"},{"location":"Databases/sql/8%20Functions/pl-pgsql/#conditional-statement-inside-functions","title":"Conditional Statement inside functions","text":""},{"location":"Databases/sql/8%20Functions/pl-pgsql/#default-parameters","title":"Default Parameters","text":"<pre><code>CREATE OR REPLACE FUNCTION fn_which_is_greater\n    ( x integer default 0, y integer default 0 ) RETURNS text AS\n$$\n    BEGIN\n        IF x &gt; y then \n            return ' x &gt; y ';\n        else \n            return ' x &lt; y ';\n        end if ;\n    END;\n$$ LANGUAGE PLPGSQL;\n\nSELECT  fn_which_is_greater(4,3);\n</code></pre>"},{"location":"Databases/sql/8%20Functions/pl-pgsql/#switch-case-example","title":"Switch Case Example","text":"<pre><code>CREATE OR REPLACE FUNCTION fn_checker \n    ( x integer default 0 ) RETURNS text AS\n$$\n    BEGIN\n        CASE x\n            when 10 then\n                return 'value = 10';\n            when 20 then\n                return 'value = 20';\n            else\n                RETURN 'MORE';\n        END CASE;\n    END;\n$$ LANGUAGE PLPGSQL;\n\nSELECT fn_checker(30);\n</code></pre>"},{"location":"Databases/sql/8%20Functions/pl-pgsql/#loops-in-plpgsql","title":"Loops in PLPGSQL","text":"<pre><code>DO\n$$\n    DECLARE \n        i_counter integer = 0;\n    BEGIN\n        LOOP\n            RAISE NOTICE '%', i_counter;\n            i_counter := i_counter+1;\n            EXIT WHEN\n                i_counter = 5;\n        END LOOP;\n    END;\n$$ LANGUAGE PLPGSQL;\n</code></pre>"},{"location":"Databases/sql/8%20Functions/pl-pgsql/#loops-in-range-exaple","title":"Loops in range exaple","text":"<pre><code>DO\n$$\n    BEGIN\n        FOR counter IN 1..5 BY 1\n        LOOP\n\n            RAISE NOTICE 'COUNTER : %', counter;\n        END LOOP;        \n    END;\n$$\nLANGUAGE PLPGSQL;\n</code></pre>"},{"location":"Databases/sql/8%20Functions/pl-pgsql/#reverse-loops","title":"Reverse Loops","text":"<pre><code>DO\n$$\n    BEGIN\n        FOR counter IN REVERSE 5..1 BY 1\n        LOOP\n            RAISE NOTICE 'COUNTER : %', counter;\n        END LOOP;        \n    END;\n$$\nLANGUAGE PLPGSQL;\n</code></pre>"},{"location":"Databases/sql/8%20Functions/pl-pgsql/#iterating-over-result-set","title":"Iterating over result set","text":"<pre><code>DO\n$$\n    DECLARE \n        rec record ;\n    BEGIN\n        FOR rec in \n            select order_id, customer_id from orders LIMIT 10\n        LOOP\n            RAISE NOTICE '% %', rec.order_id, rec.customer_id;\n        END LOOP; \n    END;\n$$ LANGUAGE PLPGSQL\n</code></pre>"},{"location":"Databases/sql/8%20Functions/pl-pgsql/#loop-with-exit-condition","title":"Loop with Exit condition","text":"<pre><code>DO\n$$\n    DECLARE \n        i_counter int = 0;\n    BEGIN\n        LOOP\n            i_counter = i_counter + 1;\n        EXIT WHEN\n            i_counter &gt; 20;\n        CONTINUE\n            WHEN MOD (i_counter,2) = 0;\n\n        RAISE NOTICE 'COUNTER : %', i_counter;\n        END LOOP;\n    END;\n$$ LANGUAGE PLPGSQL;\n</code></pre>"},{"location":"Databases/sql/8%20Functions/pl-pgsql/#declaring-arrays-in-plpgsql","title":"Declaring arrays in PLPGSQL","text":"<pre><code>DO\n$$\n    DECLARE \n        arr1 int[] := array[1,2,3];\n        arr2 int[] := array[4,5,6,7,8];\n        var int;\n    BEGIN\n        FOREACH var IN ARRAY arr1||ARR2\n        LOOP\n            RAISE NOTICE '%', var;\n        END LOOP;\n    END;\n$$ LANGUAGE PLPGSQL;\n</code></pre>"},{"location":"Databases/sql/8%20Functions/pl-pgsql/#while-loop-in-plpgsql","title":"While Loop in PLPGSQL","text":"<pre><code>CREATE OR REPLACE FUNCTION fn_while_loop_sum_all(x integer) \n    returns numeric as\n$$\n    DECLARE \n        counter integer := 1;\n        sum_all integer := 0;\n    BEGIN\n        WHILE counter &lt;= x\n        LOOP\n            sum_all := sum_all + counter;\n            counter := counter + 1;\n        END LOOP;\n        return sum_all;\n    END;\n$$ language plpgsql\n\nselect fn_while_loop_sum_all(4);\n</code></pre>"},{"location":"Databases/sql/8%20Functions/pl-pgsql/#returning-specific-query-from-column","title":"Returning specific Query from column","text":"<pre><code>CREATE OR REPLACE FUNCTION fn_api_products_by_names(p_pattern varchar)\nRETURNS TABLE ( productname varchar, unitprice real )\nAS\n$$\n    BEGIN\n        RETURN QUERY\n            SELECT product_name,unit_price from products \n            where product_name like p_pattern;\n\n    END;\n$$ LANGUAGE PLPGSQL;\n\nSELECT * FROM fn_api_products_by_names('A%');\n</code></pre> <pre><code>CREATE OR REPLACE FUNCTION fn_all_orders_greater() RETURNS SETOF order_details as \n$$\n    DECLARE\n        r record;\n    BEGIN\n        for r in\n            select * from order_details where unit_price &gt; 100\n        loop\n            return next r;\n        end loop;\n        return;\n    end;\n$$ language plpgsql;\n\nselect * from fn_all_orders_greater();\n</code></pre>"},{"location":"Databases/sql/8%20Functions/pl-pgsql/#if-data-not-found-condition","title":"If data not found condition","text":"<pre><code>DO\n$$\n    DECLARE \n        rec record;\n        orderid smallint = 1;\n    BEGIN\n        SELECT customer_id, order_date\n        FROM orders \n        INTO STRICT rec\n        WHERE order_id = orderid;\n\n        EXCEPTION\n            WHEN NO_DATA_FOUND THEN\n                RAISE EXCEPTION 'No order id was found';\n\n    END;\n$$ LANGUAGE PLPGSQL;    \n</code></pre>"},{"location":"Databases/sql/8%20Functions/pl-pgsql/#throwing-execption-on-condition","title":"Throwing execption on condition","text":"<pre><code>DO\n$$\n\n    DECLARE \n        rec record;\n        orderid smallint = 1;\n    BEGIN\n        SELECT customer_id, order_date\n        FROM orders \n        INTO STRICT rec\n        WHERE order_id &gt; 1000;\n\n        EXCEPTION\n            WHEN TOO_MANY_ROWS THEN\n                RAISE EXCEPTION 'Too many rows were found';\n\n    END;\n$$ LANGUAGE PLPGSQL;  \n</code></pre>"},{"location":"Databases/sql/8%20Functions/pl-pgsql/#throwing-execption-example","title":"Throwing execption example","text":"<pre><code>CREATE OR REPLACE FUNCTION fn_div_exception (x real, y real) RETURNS real as \n$$\n\n    DECLARE \n        ret real;\n    BEGIN\n        ret := x / y;\n        return ret;\n    EXCEPTION\n        WHEN division_by_zero then\n            RAISE INFO 'division by zero error';\n            RAISE INFO 'ERROR % %', SQLSTATE, SQLERRM;\n    END;\n$$ LANGUAGE PLPGSQL;\n\nSELECT fn_div_exception(5,0);\n</code></pre>"},{"location":"Databases/sql/8%20Functions/stored-procedures/","title":"Stored Procedures","text":"<ul> <li> <p>They are compiled objects</p> </li> <li> <p>The procedure allows SELECT as well as DML(INSERT/UPDATE/DELETE) statement in it whereas Function allows only SELECT statement in it.</p> </li> <li> <p>Procedures cannot be utilized in a SELECT statement whereas Function can be embedded in a SELECT statement.</p> </li> <li> <p>Stored Procedures cannot be used in the SQL statements anywhere in the WHERE/HAVING/SELECT section whereas Function can be.</p> </li> <li> <p>Functions that return tables can be treated as another rowset. This can be used in JOINs with other tables.</p> </li> <li> <p>Inline Function can be though of as views that take parameters and can be used in JOINs and other Rowset operations.</p> </li> <li> <p>An exception can be handled by try-catch block in a Procedure whereas try-catch block cannot be used in a Function.</p> </li> <li> <p>We can use Transactions in Procedure whereas we can't use Transactions in Function.</p> </li> </ul>"},{"location":"Databases/sql/8%20Functions/stored-procedures/#sample-data","title":"Sample Data","text":"<pre><code>CREATE TABLE t_accounts (\n    recid SERIAL PRIMARY KEY,\n    name VARCHAR NOT NULL,\n    balance dec(15,2) NOT NULL\n);\n\ndrop table t_accounts;\n\nINSERT INTO t_accounts (name,balance) values ('Adam',100),('Linda',100);\n\nselect * from t_accounts;\n</code></pre>"},{"location":"Databases/sql/8%20Functions/stored-procedures/#creating-procedure","title":"Creating Procedure","text":"<pre><code>CREATE OR REPLACE PROCEDURE pr_money_transfer \n    (sender int, receiver int, amount dec) \nAS\n    $$\n\n        BEGIN\n\n            UPDATE t_accounts\n            SET balance = balance - amount\n            WHERE recid = sender;\n\n            UPDATE t_accounts\n            SET balance = balance + amount\n            WHERE recid = receiver;\n\n            COMMIT;\n\n        END;\n    $$\nLANGUAGE PLPGSQL;\n\nCALL pr_money_transfer(1,2,30);\n\nselect * from t_accounts;\n</code></pre>"},{"location":"Databases/sql/8%20Functions/stored-procedures/#another-example","title":"Another Example","text":"<pre><code>CREATE OR REPLACE PROCEDURE pr_orders_count(INOUT total_count INTEGER DEFAULT 0 ) AS\n$$\n    BEGIN\n\n        SELECT COUNT(*) INTO total_count FROM orders;\n\n    END;\n$$ LANGUAGE PLPGSQL;\n\nCALL pr_orders_count();\n</code></pre>"},{"location":"Databases/sql/8%20Functions/triggers/","title":"Triggers","text":"<ul> <li> <p>A postgresql trigger is a functoin invoked automatically whenever 'an event' associated with a table occurs.</p> </li> <li> <p>An event could be any of the following;</p> <ul> <li>INSERT</li> <li>UDPATE</li> <li>DELETE</li> <li>TRUNCATE</li> </ul> </li> <li> <p>You can associate a trigger with a</p> <ul> <li>Table</li> <li>View</li> <li>Foreign Table</li> </ul> </li> <li> <p>A trigger is a special 'user-defined function'</p> </li> <li>A trigger is automatically invoked</li> <li> <p>We can create a triger</p> <ul> <li>BEFORE<ul> <li>Trigger is fired before an event is about to happen</li> </ul> </li> <li>AFTER<ul> <li>Trigger is fired after the event is completed</li> </ul> </li> <li>INSTEAD<ul> <li>In case the event fails, trigger is fired</li> </ul> </li> </ul> </li> <li> <p>Cannot be fired manually</p> </li> <li>Fired in alphbetically order</li> <li>DO Not change in primary key, foriegn key or unique key column</li> <li>DO Not update records in the table that you normally read during the transaction</li> <li>DO Not read data from a table that is updating during the same transaction</li> <li>DO Not aggregate/summarized over the table that you are updating</li> </ul>"},{"location":"Databases/sql/8%20Functions/triggers/#types-of-triggers","title":"Types of Triggers","text":"<ul> <li> <p>Row level</p> <ul> <li>If row is marked for <code>FOR EACH ROW</code>, then trigger will be called for each row that is getting modfied by the event</li> </ul> </li> <li> <p>Statement level</p> <ul> <li>The <code>FOR EACH STATEMENT</code> will call the trigger function only ONCE for each statement, regardless of the number of rows getting modified.</li> </ul> </li> </ul> When Event Row-level Statement-level INSERT/UDPATE/DELETE Tables Tables and view before Truncate ---------- -------------------- --------- --------------- INSERT/UDPATE/DELETE Tables Tables and view AFTER Truncate ---------- -------------------- --------- --------------- INSERT/UDPATE/DELETE Views INSTEAD OF Truncate"},{"location":"Databases/sql/8%20Functions/triggers/#create-your-own-trigger-in-postgresql","title":"Create your own Trigger in PostgreSQL","text":"<pre><code>CREATE FUNCTION trigger_function( ) \n    RETURNS TRIGGER LANGUAGE PLPGSQL\nAS $$\nBEGIN\n    -- TRIGGER LOGIC\nEND;\n$$\n</code></pre>"},{"location":"Databases/sql/8%20Functions/triggers/#syntax","title":"Syntax","text":"<pre><code>CREATE TRIGGER trigger_name {BEFORE|AFTER} {EVENT} \nON table_name \n    [FOR [EACH] {ROW | STATEMENT}]\n    EXECUTE PROCEDURE trigger_function\n\n-- FOR EACH [ROW|STATEMENT]\n</code></pre>"},{"location":"Databases/sql/8%20Functions/triggers/#data-auditing-with-triggers","title":"Data Auditing with Triggers","text":""},{"location":"Databases/sql/8%20Functions/triggers/#setup-example-tables","title":"Setup Example tables","text":"<pre><code>CREATE TABLE players (\n    player_id SERIAL PRIMARY KEY,\n    name VARCHAR(100)\n);\n\nCREATE TABLE player_audits (\n    player_audit_id SERIAL PRIMARY KEY,\n    player_id INT NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    new_name VARCHAR(100) NOT NULL,\n    edit_date TIMESTAMP NOT NULL\n);\n</code></pre>"},{"location":"Databases/sql/8%20Functions/triggers/#setup-function-to-trigger","title":"Setup Function to TRIGGER","text":"<pre><code>-- Function executed by TRIGGER\n\nCREATE OR REPLACE FUNCTION fn_players_name_changes_log()\n    RETURNS TRIGGER\n    LANGUAGE PLPGSQL\n    AS\n$$\nBEGIN\n\n    IF NEW.name &lt;&gt; OLD.name THEN\n        INSERT INTO player_audits\n        ( player_id, name, new_name, edit_date ) \n        values ( OLD.player_id, OLD.name, NEW.name ,NOW() );\n    END IF;\n\n    RETURN NEW;\nEND;\n$$\n\n-- TRIGGER Definition\n\nCREATE TRIGGER trg_players_name_changes\n    BEFORE UPDATE \n    ON players\n    FOR EACH ROW\n    EXECUTE PROCEDURE fn_players_name_changes_log();\n</code></pre>"},{"location":"Databases/sql/8%20Functions/triggers/#dml-to-fire-above-trigger","title":"DML to fire above trigger","text":"<pre><code>INSERT INTO players (name) VALUES ('UDAY'),('YADAV');\n\nSELECT * FROM players;\nselect * from player_audits;\n\nUPDATE players\nSET name = 'UDAY 2'\nWHERE player_id = 2;\n</code></pre>"},{"location":"Databases/sql/8%20Functions/triggers/#another-trigger-example","title":"Another Trigger Example","text":"<pre><code>-- create table for example\n\nCREATE TABLE t_temperature_log (\n    id_temperature SERIAL PRIMARY KEY,\n    add_date TIMESTAMP,\n    temperature NUMERIC\n);\n\n-- create function for trigger to execute\n\nCREATE OR REPLACE FUNCTION fn_temperature_value_check_at_insert()\nRETURNS TRIGGER\nLANGUAGE PLPGSQL\nAS\n$$\nBEGIN\n\n    IF NEW.temperature &lt; -30 then\n        NEW.temperature = 0;\n    END IF;\n\n    RETURN NEW;\n\nEND;\n$$\n\n-- creating trigger\n\nCREATE TRIGGER trg_temperature_value_check_at_insert\nBEFORE INSERT \nON t_temperature_log\nFOR EACH ROW\nEXECUTE PROCEDURE fn_temperature_value_check_at_insert();\n\n-- Queries\n\nINSERT INTO t_temperature_log ( add_date, temperature )\nvalues ( '2020-10-01' , 10 );\n\nselect * from t_temperature_log;\n\nINSERT INTO t_temperature_log ( add_date, temperature )\nvalues ( '2020-10-01' , -33 );\n\nselect * from t_temperature_log;\n</code></pre>"},{"location":"Databases/sql/8%20Functions/triggers/more-on-triggers/","title":"More on Triggers","text":""},{"location":"Databases/sql/8%20Functions/triggers/more-on-triggers/#getting-internal-information","title":"Getting Internal Information","text":"<pre><code>CREATE OR REPLACE FUNCTION fn_trigger_variables_display()\nRETURNS TRIGGER\nLANGUAGE PLPGSQL\nAS\n$$\n\n    BEGIN\n\n        RAISE NOTICE 'TG_NAME: %', TG_NAME;\n        RAISE NOTICE 'TG_RELNAME: %', TG_RELNAME;\n        RAISE NOTICE 'TG_TABLE_SCHEMA: %', TG_TABLE_SCHEMA;\n        RAISE NOTICE 'TG_WHEN: %', TG_WHEN;\n        RAISE NOTICE 'TG_LEVEL: %', TG_LEVEL;\n        RAISE NOTICE 'TG_OP: %', TG_OP;\n        RAISE NOTICE 'TG_NARGS: %', TG_NARGS;\n        RAISE NOTICE 'TG_ARGV: %', TG_NAME;\n\n        RETURN NEW;\n    END;\n$$\n\nCREATE TRIGGER trg_trigger_variables_display\n    AFTER INSERT\n    ON t_temperature_log\n    FOR EACH ROW\n    EXECUTE PROCEDURE fn_trigger_variables_display();\n\nINSERT INTO t_temperature_log  ( add_date, temperature ) values ('2020-02-02', -40);\n</code></pre>"},{"location":"Databases/sql/8%20Functions/triggers/more-on-triggers/#disallow-delete-on-table","title":"Disallow DELETE on table","text":"<pre><code>-- create sample table\n\ncreate table test_delete (\n    id int\n);\n\ninsert into test_delete (id ) values (1),(2),(3);\n\nselect * from test_delete;\n\n-- creating function\n\ncreate or replace function fn_generic_cancel_op()\nreturns trigger\nlanguage plpgsql\nas\n$$\n    begin\n\n    if TG_WHEN = 'AFTER' THEN\n        raise exception 'you are not allowed to % rows in %.%', tg_op,tg_table_schema,tg_table_name;\n    end if;\n\n    raise notice '% on rows in %.% wont happen', tg_op, tg_table_schema, tg_table_name;\n    return null; \n\n    end;\n$$\n\n-- creating trigger : AFTER\n\nCREATE TRIGGER trg_disallow_delete\nAFTER DELETE\nON test_delete\nFOR EACH ROW\nEXECUTE PROCEDURE fn_generic_cancel_op();\n\ndelete from test_delete where id = 1;\n\n-- creating trigger : BEFORE\n\nCREATE TRIGGER trg_disallow_delete_before\nBEFORE DELETE\nON test_delete\nFOR EACH ROW\nEXECUTE PROCEDURE fn_generic_cancel_op();\n\ndelete from test_delete where id = 1;\n\n-- checking\n\nselect * from test_delete;\n</code></pre>"},{"location":"Databases/sql/8%20Functions/triggers/more-on-triggers/#disallow-truncating","title":"Disallow truncating","text":"<pre><code>CREATE TRIGGER trg_disallow_truncate_after\nAFTER TRUNCATE\nON test_delete\nFOR EACH STATEMENT\nEXECUTE PROCEDURE fn_generic_cancel_op();\n\n\nCREATE TRIGGER trg_disallow_truncate_beforE\nBEFORE TRUNCATE\nON test_delete\nFOR EACH STATEMENT\nEXECUTE PROCEDURE fn_generic_cancel_op();\n</code></pre>"},{"location":"Databases/sql/8%20Functions/triggers/more-on-triggers/#creating-audit-trigger","title":"Creating Audit Trigger","text":"<ul> <li>To log data changes to tables in a consistent and transparent manner.</li> </ul> <pre><code>CREATE TABLE  audit (\n    id INT\n);\n\nCREATE TABLE audit_log (\n    username TEXT,\n    add_time TIMESTAMP,\n    table_name TEXT,\n    operation TEXT,\n    row_before JSON,\n    row_after JSON\n);\n</code></pre> <ul> <li>Please not that new OLD are not null for DELETE and INSERT triggers.</li> </ul> <pre><code>CREATE OR REPLACE FUNCTION fn_audit_trigger()\nRETURNS TRIGGER \nLANGUAGE PLPGSQL\nAS\n$$\nBEGIN\n\n    DECLARE\n        old_row json = NULL;\n        new_row json = NULL;\n\n    BEGIN\n\n        IF TG_OP IN ('UPDATE','DELETE') THEN\n\n            old_row = row_to_json(OLD);\n\n\n        END IF;\n\n        IF TG_OP IN ('INSERT','UPDATE') THEN\n\n            new_row = row_to_json(NEW);\n\n        END IF;\n\n        INSERT INTO audit_log \n            ( username, add_time, table_name, operation, row_before, row_after )\n        values\n            (\n                session_user,\n                NOW(),\n                TG_TABLE_SCHEMA || '.' || TG_TABLE_NAME,\n                TG_OP,\n                old_row,\n                new_row\n            );\n\n        RETURN NEW;\n    END;    \n\nEND;\n$$\n\n-- bind trigger\n\nCREATE TRIGGER trg_audit_trigger\nAFTER INSERT OR UPDATE OR DELETE\nON audit\nFOR EACH ROW\nEXECUTE PROCEDURE fn_audit_trigger();\n\n-- Queries\n\ninsert into audit(id) values (1),(2),(3);\n\nupdate audit\nset id = '100'\nwhere id = 1;\n\ndelete from audit\nwhere id = 2;\n\nselect * from audit;\nselect * from audit_log;\n</code></pre>"},{"location":"Databases/sql/8%20Functions/triggers/more-on-triggers/#creating-conditional-triggers","title":"Creating Conditional Triggers","text":"<ul> <li>Created by using generic WHEN clause.</li> <li>With a WHEN clause, you can write some conditions except a subquery</li> </ul> <pre><code>-- sample table\n\nCREATE TABLE mytask (\n    task_id SERIAL PRIMARY KEY,\n    task text\n);\n\n-- trigger function\n\nCREATE OR REPLACE FUNCTION fn_cancel_with_message()\nRETURNS TRIGGER \nLANGUAGE PLPGSQL\nAS\n$$\nBEGIN\n\n    RAISE EXCEPTION '%', TG_ARGV[0];\n\n    RETURN NULL;\n\nEND;\n$$\n\n-- function binding to trigger\n\nCREATE TRIGGER trg_no_update \nBEFORE INSERT OR UPDATE OR DELETE OR TRUNCATE\nON mytask\nFOR EACH STATEMENT\nWHEN \n(\n    EXTRACT ('DOW' FROM CURRENT_TIMESTAMP) = 5\n    -- 5 means friday\n    AND CURRENT_TIME &gt; '12:00'\n)\nEXECUTE PROCEDURE fn_cancel_with_message('NO UPDATE ARE ALLOWED');\n\n-- Queries\n\nINSERT INTO mytask (task) values ('task 1'), ('task 2'), ('task 3');\n</code></pre>"},{"location":"Databases/sql/8%20Functions/triggers/more-on-triggers/#disallow-updating-primary-key-of-table","title":"Disallow updating Primary Key of table","text":"<pre><code>create table pg_table(\n    id serial primary key,\n    t text\n);\n\ninsert into pg_table(t) values ('t1'),('t2');\n\ncreate trigger disallow_pk_change\nafter update of id\non pg_table\nfor each row\nexecute procedure fn_generic_cancel_op();\n\nupdate pg_table \nset id = 10\nwhere id = 1;\n</code></pre>"},{"location":"Databases/sql/8%20Functions/triggers/more-on-triggers/#event-triggers","title":"Event Triggers","text":"<ul> <li>Event triggers are data-specific and not bind or attached to a table</li> <li>Unlike regular triggers they capture system level DLL events</li> <li>Event triggers can be BEFORE or AFTER triggers</li> <li>Trigger function can be written in any language except SQL</li> <li>Event triggers are disabled in the single user mode and can only be created by a superuser</li> <li> <p>Syntax : <code>CREATE EVENT TRIGGER trg_name</code></p> </li> <li> <p>Before creating an event trigger, we must have a function that the trigger will execute</p> </li> <li>The function must return a specifi type called <code>EVENT_TRIGGER</code></li> <li> <p>This function need not (and may not) return a valuel the return type serivces merely as s signal that the function is to be invoked as an event trigger.</p> </li> <li> <p>Can we create conditional event trigger ? Yes, using the when clause</p> </li> <li>Event trigger cannot be executed in an aborted transaction</li> </ul>"},{"location":"Databases/sql/8%20Functions/triggers/more-on-triggers/#event-trigger-events","title":"Event trigger events","text":"when explaination ddl_command_start This event occurs jsut BEFORE a CREATE, ALTER, or DROP DLL command is executed ddl_command_end This event occurs just AFTER a create, alter, or drop command has finished executing table_rewrite This event occurs just before a table is re written by some action of the commands <code>ALTER TABLE</code> and <code>ALTER TYPE</code>. sql_drop This evetn occurs just before the ddl_command_end eevent for the commands that frop database objects"},{"location":"Databases/sql/8%20Functions/triggers/more-on-triggers/#event-trigger-variables","title":"Event trigger variables","text":"<ul> <li><code>TG_TAG</code> :  this variable contains the 'TAG' or the command for which the trigger is executed.</li> <li><code>TG_EVENT</code> : This variable contains the event name, which can be ddl_command_start, ddl_comman_end, and sql_drop.</li> </ul>"},{"location":"Databases/sql/8%20Functions/triggers/more-on-triggers/#creating-an-auditing-event-trigger","title":"Creating an auditing event trigger","text":"<pre><code>CREATE TABLE audit_dll (\n    audit_ddl_id SERIAL PRIMARY KEY,\n    username TEXT,\n    ddl_event TEXT,\n    ddl_command TEXT,\n    ddl_add_time TIMESTAMPTZ\n);\n\nCREATE OR REPLACE FUNCTION fn_event_audit_ddl()\nRETURNS EVENT_TRIGGER\nLANGUAGE PLPGSQL\nSECURITY DEFINER \nAS\n$$\n    BEGIN\n\n        INSERT INTO public.audit_dll\n        (username, ddl_event, ddl_command, ddl_add_time)\n        VALUES \n        (session_user, TG_EVENT, TG_TAG, NOW());        \n\n        RAISE NOTICE 'DDL activity is created';\n\n    END;\n$$\n\n-- without condition\ncreate event trigger trg_event_audit_ddl_no_cond\non ddl_command_start\nexecute procedure fn_event_audit_ddl();\n\n-- with condition\n\ncreate event trigger trg_event_audit_ddl\non ddl_command_start\nwhen\n TAG IN ('CREATE TABLE')\nexecute procedure fn_event_audit_ddl();\n</code></pre>"},{"location":"Databases/sql/8%20Functions/triggers/more-on-triggers/#dont-allow-anyone-to-create-table-between-time","title":"Dont allow anyone to create table between time","text":"<pre><code>CREATE OR REPLACE FUNCTION fn_event_abort_create_table_func()\nRETURNS EVENT_TRIGGER\nLANGUAGE PLPGSQL\nSECURITY DEFINER\nAS\n$$\n    DECLARE\n        current_hour int = EXTRACT ('HOUR' FROM NOW());\n    BEGIN\n        IF current_hour between 4 and 16 then\n            RAISE EXCEPTION 'tables are not allowed to be created during 9-4';\n        END IF;\n    END;\n$$\n\nCREATE EVENT TRIGGER trg_event_create_table_function\nON ddl_command_start \nWHEN\n    TAG IN ('CREATE TABLE')\nEXECUTE PROCEDURE fn_event_abort_create_table_func();\n</code></pre>"},{"location":"Databases/sql/8%20Functions/triggers/more-on-triggers/#dropping-event-trigger","title":"Dropping event trigger","text":"<pre><code>drop event trigger trg_name;\n</code></pre>"},{"location":"Databases/sql/9%20Indexing/","title":"Indexing","text":""},{"location":"Databases/sql/9%20Indexing/#what-is-a-index-in-database","title":"What is a Index in Database","text":"<ul> <li>An index help improve the access of data in our database </li> <li>Indexed tuple point to the table page where the tuple is stored on disk.</li> <li>An Index is a data structure that allows faster access to the underlying table so that specific tuples can be found quickly . Here \"quickly\" means much faster than scanning the entire table and analysing every single tuple.</li> <li>They add a cost to running a query, consume more memory to maintain the data structure.</li> </ul> <pre><code>INDEX        : idx_table_name_column_name \nUNIQUE INDEX : idx_u_table_name_column_name\n</code></pre>"},{"location":"Databases/sql/9%20Indexing/#syntax","title":"Syntax","text":"<pre><code>create index index_name on table_name (col1,col2,.....)\n\n-- create index for only unique values in column\ncreate unique index index_name on table_name (col1,col2,.....)\n\n-- more descriptive method\ncreate index index_name on table_name [USING method]\n(\n    column_name [ASC|DESC] [NULLS {FIRST | LAST}],\n    ...\n);\n</code></pre> <pre><code>create index idx_orders_order_date \n on orders (order_date);\n\ncreate index idx_orders_ship_city \n on orders (ship_city);\n\ncreate index idx_orders_customer_id_order_id \n on orders (customer_id,order_id);\n\nCREATE INDEX idx_shippers_company_name\n    ON public.shippers USING btree\n    (company_name ASC NULLS LAST);\n\n                          Table \"public.orders\"\n      Column      |         Type          | Collation | Nullable | Default \n------------------+-----------------------+-----------+----------+---------\n order_id         | smallint              |           | not null | \n customer_id      | bpchar                |           |          | \n employee_id      | smallint              |           |          | \n order_date       | date                  |           |          | \n required_date    | date                  |           |          | \n shipped_date     | date                  |           |          | \n ship_via         | smallint              |           |          | \n freight          | real                  |           |          | \n ship_name        | character varying(40) |           |          | \n ship_address     | character varying(60) |           |          | \n ship_city        | character varying(15) |           |          | \n ship_region      | character varying(15) |           |          | \n ship_postal_code | character varying(10) |           |          | \n ship_country     | character varying(15) |           |          | \n\n-- indexes present on table\n\nIndexes:\n    \"pk_orders\" PRIMARY KEY, btree (order_id)\n    \"idx_orders_customer_id_order_id\" btree (customer_id, order_id)\n    \"idx_orders_order_date\" btree (order_date)\n    \"idx_orders_ship_city\" btree (ship_city)\nForeign-key constraints:\n    \"fk_orders_customers\" FOREIGN KEY (customer_id) \n       REFERENCES customers(customer_id)\n    \"fk_orders_employees\" FOREIGN KEY (employee_id) \n       REFERENCES employees(employee_id)\n    \"fk_orders_shippers\" FOREIGN KEY (ship_via) \n       REFERENCES shippers(shipper_id)\nReferenced by:\n    TABLE \"order_details\" CONSTRAINT \"fk_order_details_orders\" \n    FOREIGN KEY (order_id) REFERENCES orders(order_id)\n</code></pre>"},{"location":"Databases/sql/9%20Indexing/#get-all-indexes","title":"Get All Indexes","text":"<pre><code>select * from pg_indexes limit 3;\n\n schemaname |  tablename   |            indexname             | tablespace |                                                           indexdef                                                            \n------------+--------------+----------------------------------+------------+-------------------------------------------------------------------------------------------------------------------------------\n pg_catalog | pg_statistic | pg_statistic_relid_att_inh_index |            | CREATE UNIQUE INDEX pg_statistic_relid_att_inh_index ON pg_catalog.pg_statistic USING btree (starelid, staattnum, stainherit)\n pg_catalog | pg_type      | pg_type_oid_index                |            | CREATE UNIQUE INDEX pg_type_oid_index ON pg_catalog.pg_type USING btree (oid)\n pg_catalog | pg_type      | pg_type_typname_nsp_index        |            | CREATE UNIQUE INDEX pg_type_typname_nsp_index ON pg_catalog.pg_type USING btree (typname, typnamespace)\n\n\nselect * from pg_indexes where schemaname = 'public' limti 3;\n\n  schemaname | tablename |  indexname   | tablespace |                                    indexdef                                    \n------------+-----------+--------------+------------+--------------------------------------------------------------------------------\n public     | us_states | pk_usstates  |            | CREATE UNIQUE INDEX pk_usstates ON public.us_states USING btree (state_id)\n public     | customers | pk_customers |            | CREATE UNIQUE INDEX pk_customers ON public.customers USING btree (customer_id)\n public     | orders    | pk_orders    |            | CREATE UNIQUE INDEX pk_orders ON public.orders USING btree (order_id)\n</code></pre>"},{"location":"Databases/sql/9%20Indexing/#size-of-indexes","title":"Size of Indexes","text":"<pre><code>select pg_size_pretty(pg_indexes_size('tablename'));\n\n pg_size_pretty \n----------------\n 128 kB\n</code></pre>"},{"location":"Databases/sql/9%20Indexing/#stats-about-indexes","title":"Stats about indexes","text":"<pre><code>select * from postgres.pg_catalog.pg_stat_all_indexes;\n\n relid | indexrelid | schemaname |   relname    |           indexrelname           | idx_scan | idx_tup_read | idx_tup_fetch \n-------+------------+------------+--------------+----------------------------------+----------+--------------+---------------\n  2619 |       2696 | pg_catalog | pg_statistic | pg_statistic_relid_att_inh_index |     1592 |         1155 |          1155\n  1247 |       2703 | pg_catalog | pg_type      | pg_type_oid_index                |      924 |          924 |           911\n  1247 |       2704 | pg_catalog | pg_type      | pg_type_typname_nsp_index        |      162 |          120 |           120\n(3 rows)\n</code></pre>"},{"location":"Databases/sql/9%20Indexing/#drop-index","title":"Drop Index","text":"<pre><code>DROP INDEX [ concurrently ] \n[ IF EXISTS  ] INDEX_NAME  [ CASCADE | RESTRICT ];\n</code></pre> <ul> <li><code>CASCADE</code>: If object has dependent objects, you will also drop the dependent ones after dropping it.</li> <li><code>RESTRICT</code> : It denies the user to drop the index if a dependency exists</li> <li><code>CONCURRENTLY</code> : PostgreSQL will require exclusive lock over the whole table and block access until index is removed</li> </ul>"},{"location":"Databases/sql/9%20Indexing/#vacuum-analyze","title":"Vacuum analyze","text":"<p>\\ When a vacuum process runs, the space occupied by these dead tuples is marked reusable by other tuples. </p> <p>An \u201canalyze\u201d operation does what its name says \u2013 it analyzes the contents of a database's tables and collects statistics about the distribution of values in each column of every table.</p> <pre><code>vacuum analyze table_name;\n</code></pre>"},{"location":"Databases/sql/9%20Indexing/#rebuilding-indexes","title":"Rebuilding Indexes","text":"<pre><code>REINDEX ( VERBOSE ) INDEX concurrently idx_orders_ship_city;\n</code></pre>"},{"location":"Databases/sql/9%20Indexing/custom-indexes/","title":"Custom Indexes","text":"<p>Example : </p> <p>CREATE a index for social security number , which is the the format of 1111-222-nnnn, you have to index the last 4 characters</p> <pre><code>CREATE TABLE if not exists ssn\n(\n    ssn text\n);\n\nINSERT INTO ssn (ssn)\nvalues ('111-11-0100'),\n       ('222-22-0120'),\n       ('333-33-0140'),\n       ('444-44-0160');\n\nselect *\nfrom ssn;\n\nexplain\nselect *\nfrom ssn;\n\nCREATE OR REPLACE FUNCTION FN_FIX_SSN(TEXT) RETURNS text AS\n$$\nBEGIN\n    return substring($1, 8) || replace(substring($1, 1, 7), '-', '');\n\nend ;\n$$ LANGUAGE plpgsql IMMUTABLE;\n\nSELECT ssn, FN_FIX_SSN(ssn)\nfrom ssn;\n\ndrop function fn_ssn_compare cascade;\n\nCREATE OR REPLACE FUNCTION fn_ssn_compare(text,text) returns int as\n$$\n    BEGIN\n        if FN_FIX_SSN($1) &lt; FN_FIX_SSN($2) then return -1;\n        elseif FN_FIX_SSN($1) &gt; FN_FIX_SSN($2) then return 1;\n        else\n            return 0;\n        end if;\n\n    end;\n$$ language plpgsql immutable;\n\nCREATE OPERATOR CLASS op_class_ssn_ops1\nFOR TYPE text USING btree\nas\n        OPERATOR 1 &lt;,\n        OPERATOR 2 &lt;=,\n        OPERATOR 3 =,\n        OPERATOR 4 &gt;=,\n        operator 5 &gt;,\n        function 1 fn_ssn_compare(text,text);\n\nCREATE INDEX idx_ssn on ssn(ssn op_class_ssn_ops1);\n\nexplain\nselect *\nfrom ssn where ssn.ssn = '222-22-0120';\n\nset enable_seqscan = 'off';\nshow enable_seqscan;\n</code></pre>"},{"location":"Databases/sql/9%20Indexing/gin-index/","title":"GIN Index","text":"<ul> <li>GIN index stands for Generalised Invert Index.</li> <li>Speeds up full text searches</li> <li>A GIN index stores a set of (key, posting list) pairs, where a posting list is a set of row IDs in which the key occurs. The same row ID can appear in multiple posting lists, since an item can contain more than one key. </li> <li>Each key value is stored only once, so a GIN index is very compact for cases where the same key appears many times.</li> </ul>"},{"location":"Databases/sql/9%20Indexing/gin-index/#query","title":"Query","text":"<p><pre><code>select * from contacts_docs\nwhere body @&gt; '{\"first_name\":\"John\"}';\n\n\nexplain select * from contacts_docs\nwhere body @&gt; '{\"first_name\":\"John\"}';\n</code></pre> </p>"},{"location":"Databases/sql/9%20Indexing/gin-index/#creating-a-gin-index","title":"Creating a GIN Index","text":"<pre><code>create index idx_gin_contacts_docs_body on contacts_docs USING GIN(body);\n</code></pre>"},{"location":"Databases/sql/9%20Indexing/gin-index/#get-size-of-index","title":"Get Size of Index","text":"<pre><code>select pg_size_pretty((pg_relation_size('idx_gin_contacts_docs_body'::regclass))) \n    as index_name;\n</code></pre>"},{"location":"Databases/sql/9%20Indexing/gin-index/#using-jsonb_path_ops-better","title":"Using JSONB_PATH_OPS ( better )","text":"<pre><code>create index idx_gin_contacts_docs_body_cool\n    on contacts_docs USING GIN(body jsonb_path_ops);\n</code></pre>"},{"location":"Databases/sql/9%20Indexing/gin-index/#size-with-jsonb_path_ops","title":"Size with jsonb_path_ops","text":"<pre><code>select pg_size_pretty((pg_relation_size('idx_gin_contacts_docs_body_cool'::regclass))) \n    as index_name;\n</code></pre>"},{"location":"Databases/sql/9%20Indexing/gin-index/#on-specific-column-for-smaller-size-not-working","title":"On Specific column for smaller size ( not working )","text":"<pre><code>select pg_size_pretty((pg_relation_size('idx_gin_contacts_docs_body_fname'::regclass))) \n    as index_name;\n</code></pre>"},{"location":"Databases/sql/9%20Indexing/indexes/","title":"Indexes","text":""},{"location":"Databases/sql/9%20Indexing/indexes/#data-structure","title":"Data structure","text":"<ul> <li>Data structure used : B-Tree</li> <li>Self Balancing Index</li> <li>SELECT, INSERT, DELETE and sequential access  in logarithmic time</li> <li>Can be used for most of operations and column type</li> <li>supports unique condition</li> <li>Used in Primary Key</li> <li>Used with operators </li> <li>Used when pattern matching</li> </ul>"},{"location":"Databases/sql/9%20Indexing/indexes/#hash-index","title":"Hash Index","text":"<p>https://codingsight.com/hash-index-understanding-hash-indexes/</p> <ul> <li>for equality operators</li> <li>not for range </li> <li>Larger than btree in size</li> </ul>"},{"location":"Databases/sql/9%20Indexing/indexes/#brin-index","title":"Brin Index","text":"<ul> <li>block range index</li> <li>block data -&gt; min to max value</li> <li>smaller index</li> <li>less costly to maintain than btree index</li> <li>Can be used on very large table</li> </ul> <pre><code>create table t_big\n(\n    id   serial,\n    name text\n);\n\ndrop table t_big;\n\ninsert into t_big (name)\nselect 'adam'\nfrom generate_series(1, 2000000);\n\n\nCREATE INDEX CONCURRENTLY brin_index\n    ON public.t_big USING brin\n    (id);\n\ncreate index btree_index on t_big(id);\n\nselect pg_size_pretty(pg_total_relation_size('t_big'));\n\nselect pg_size_pretty(pg_indexes_size('t_big'));\n\ndrop index brin_index;\n\ndrop index btree_index;\n\nexplain analyse\nselect *\nfrom t_big\nwhere id = 9999;\n\nexplain analyse\nselect id\nfrom t_big\norder by id desc limit 100;\n</code></pre>"},{"location":"Databases/sql/9%20Indexing/indexes/#partial-index","title":"Partial Index","text":"<ul> <li>To performance of the query while reducing the index size.</li> </ul> <pre><code>create index if not exists partial_inx on t_big(id) where id &gt; 1000000;\n\n\nexplain analyse\nselect *\nfrom t_big\nwhere id = 10000033;\n\n\nexplain analyse\nselect *\nfrom t_big\nwhere id = 99999;\n</code></pre>"},{"location":"Databases/sql/9%20Indexing/indexes/#expression-index","title":"Expression Index","text":"<ul> <li>PostgreSQL will use this index when WHERE clause or ORDER BY clause in statement</li> <li>Very Expensive to use</li> </ul> <pre><code>CREATE TABLE IF NOT EXISTS t_dates AS\nSELECT d, repeat(md5(d::text),10) as padding\n    FROM generate_series\n        (timestamp '1800-01-01', timestamp '2100-01-01', interval '1 day') s(d);\n\nselect * from t_dates limit 10;\n\nvacuum analyse t_dates;\n\nEXPLAIN ANALYSE\nSELECT *\nFROM t_dates\nWHERE d BETWEEN '2001-01-01' AND '2001-01-31';\n\n\nCREATE INDEX IF NOT EXISTS idx_t_dates_d on t_dates (d);\n\nANALYSE t_dates;\n\nEXPLAIN ANALYSE\nSELECT *\nFROM t_dates\nWHERE d BETWEEN '2001-01-01' AND '2001-01-31';\n\nEXPLAIN ANALYSE\nSELECT *\nFROM t_dates\nWHERE EXTRACT(DAY FROM d) = 1;\n\nCREATE INDEX idx_expr_t_dates on t_dates (extract(day from d));\n\nANALYSE t_dates;\n\nEXPLAIN ANALYSE\nSELECT *\nFROM t_dates\nWHERE EXTRACT(DAY FROM d) = 1;\n</code></pre>"},{"location":"Databases/sql/9%20Indexing/indexes/#heap-index","title":"Heap Index","text":""},{"location":"Databases/sql/9%20Indexing/sql/","title":"SQL","text":""},{"location":"Databases/sql/9%20Indexing/sql/#lifetime-of-query","title":"Lifetime of Query","text":"<ul> <li>Parser : handles the textual form of the statement and verifies whether it is correct or not</li> <li>Re-writer : applying the syntactic rules to rewrite the original SQL statement.</li> <li>Optimiser : finding the fastest path to the data</li> <li>Executor : responsible for effectively going to the storage  and retrieving the data from the physical storage.</li> </ul>"},{"location":"Databases/sql/9%20Indexing/sql/#optimiser","title":"Optimiser","text":"<ul> <li>Finds all the paths and gets the path with cheapest COST</li> <li>LOWEST COST WINS !!</li> </ul>"},{"location":"Databases/sql/9%20Indexing/sql/#scan-nodes","title":"Scan Nodes","text":"<ul> <li>Nodes are available for :</li> <li>every operation</li> <li>every access methods</li> <li>Nodes are stack-able</li> <li>Parent Node ( cost = 0.00 ... )<ul> <li>Child Node</li> <li>Child Node</li> </ul> </li> <li> <p>Types of Nodes</p> </li> <li> <p>Sequential Scan</p> </li> <li>Index Scan, Index Only Scan, Bitmap Index Scan</li> <li>Nested Loop, Hash Join and Merge Join </li> <li>Gather and Merge parallel nodes</li> </ul> <p>Get All Node Types : <code>SELECT * FROM pg_am;</code></p>"},{"location":"Databases/sql/9%20Indexing/sql/#sequential-scan","title":"Sequential Scan","text":"<p>Performs a sequential scan on the whole table.</p> <p></p>"},{"location":"Databases/sql/9%20Indexing/sql/#index-scan","title":"Index Scan","text":"<ul> <li>Index is used to access Data</li> <li>Types</li> <li>Index scan</li> <li>Index only scan</li> <li>Bitmap Index</li> </ul>"},{"location":"Databases/sql/9%20Indexing/sql/#index-only-scan","title":"Index only scan","text":""},{"location":"Databases/sql/9%20Indexing/sql/#hash-join","title":"Hash Join","text":"<ul> <li>Used when joining tables </li> <li>Joins preformed on 2 table at a time, if more tables are joined together, the output at one join in treated as input to a subsequent join</li> <li>When joining large number of tables, the genetic query optimiser settings may effect what combinations of joins are considered.</li> </ul> <p>Types</p> <ul> <li>Inner Table : Build a hash table from the inner table, keyed by the join key.</li> <li>Outer Table : then scan the outer table checking if a corresponding value is present </li> </ul> <p>Memory Size ( used by sort operation and hash table ) : <code>4 MB</code></p> <p></p>"},{"location":"Databases/sql/9%20Indexing/unique-index/","title":"Unique Index","text":"<pre><code>CREATE UNIQUE INDEX idx_products_product_id\n    ON public.products USING btree\n    (product_id ASC NULLS LAST)\n    TABLESPACE pg_default;\n\n\nCREATE UNIQUE INDEX idx_u_emp_emp_id\n    ON public.employees USING btree\n    (employee_id ASC NULLS LAST)\n    TABLESPACE pg_default;\n\nCREATE UNIQUE INDEX idx_orders_customer_id_order_id\n    ON public.orders USING btree\n    (order_id ASC NULLS LAST, customer_id ASC NULLS LAST)\n    TABLESPACE pg_default;\n\n\nCREATE UNIQUE INDEX idx_u_emp_emp_id_hire_date\n    ON public.employees USING btree\n    (employee_id ASC NULLS LAST, hire_date ASC NULLS LAST)\n</code></pre>"},{"location":"codeblog/","title":"Index","text":"<p> Linkedin ||  GitHub || Resume</p> <ul> <li>Indexing in Databases</li> <li>Proxy vs Reverse Proxy</li> <li>Programming Terms</li> <li>Redis 101</li> <li>Java Threads basics</li> <li>React from scratch</li> <li>React Hooks for beginners</li> <li>My experience of learning 3 programming languages in 3 weeks.</li> <li>Julia: A fresh approach to technical computing</li> <li>Go Golang Go!</li> <li>Rust: New Systems Programming Language</li> <li>Go 101 : Testing simple Go server</li> <li>Golang 101 : Looking at when Garbage Collector runs</li> <li>Things Golang do differently</li> <li>Getting Started With TypeScript based Express Server</li> <li>Understanding URI</li> <li>How to Deploy Vue/React on a VM</li> </ul> <p>Thanks for visiting </p>"},{"location":"codeblog/db/redis101/","title":"Redis 101","text":"<p>'#' are not comments in redis, they are here just to explain the command</p>"},{"location":"codeblog/db/redis101/#setup","title":"Setup","text":"<pre><code>sudo docker run --name redis-learn -p 6370:6370 -d redis \nsudo docker exec -it redis-learn redis-cli\n\n# to benchmark\nsudo docker exec -it redis-learn redis-benchmark -n 1000 -d 10000\n# -d for bytes of data\n\n$ to set max memory limit (as LRU cache)\n&gt; config set maxmemory 128M\n</code></pre>"},{"location":"codeblog/db/redis101/#commands","title":"Commands","text":"<p>Set &amp; Get value</p> <pre><code>set name \"uday\"\nget name\nexists name\n</code></pre> <p>All commands</p> <pre><code># Get all keys\nkeys *\n\n# Delete all keys\nflushall \n## options : async|sync\n</code></pre> <p>Set key with expiry time</p> <pre><code># After 5 seconds, this  key will be deleted\nset nametemp \"uday\" EX 5\nget nametemp\nexists nametemp\n\nset a 2\nget a\n# expire after 3 seconds\nexpire a 3\n\n# to check time remaining \nttl a\n\n# Another way, to expire after 10 seconds\nsetex b 10 \"uday\"\n</code></pre> <p>Delete Key</p> <pre><code>del name\n</code></pre> <p>Set &amp; Get multiple values</p> <pre><code>mset first \"uday\" last \"yadav\"\nmget first last\n</code></pre> <p>Miscellaneous</p> <pre><code># Specifies the range : from 0th char to 3rd char\ngetrange name 0 3\nstrlen first\n\n# Append to key\nappend name \"uday\"\nappend name \" yadav\"\n</code></pre> <p>Math operations</p> <pre><code>set count 1\nincr count\nincrby count 10\ndecr count \ndecrby count 2\nset pi 3.14\nincrbyfloat pi 0.1\n</code></pre> <p>Lists in redis</p> <pre><code>lpush country india\nlpush country USA\nlpush country UK\nlindex country 2\n# lpush adds value infront\n# to add values to the bottom\nrpush country Australia\n\n# to get all values in list\nlrange country 0 -1\n# to get first 2 values\nlrange country 0 1\n\n# get list length\nllen country\n\n# use lpop and rpop to remove the data from top and bottom, and it returns the element\nlpop country\nrpop country\n\n# to change a key's value\nlset country 0 germany\n\n# to insert values before and after \nlinsert country before \"germany\" \"new zealand\"\nlinsert country after \"germany\" \"UAE\"\n\n# use lpushx and rpushx to add key to list only if it exists, else returns 0\n</code></pre> <p>Sorting List</p> <pre><code># Alpha is needed only for strings, nothing for integers\nsort country ALPHA\nsort country desc ALPHA\n</code></pre> <p>Sets in Redis</p> <pre><code>sadd tech golang\nsadd tech postgis python aws\nsadd tech1 aws python mysql nodejs\n\n# to see all members\nsmembers tech\n# to get the length of set\nscard tech\n# to search the set\nsismember tech aws\n\n# to get the diff between to sets\nsdiff tech tech1\n# to store the difference btw 2 sets to a new set \nsdiffstore  tech3 tech tech1\n# to check intersection\nsinter tech tech1\n</code></pre> <p>Sorted Set Redis</p> <pre><code># add key values\nzadd users 10 uday\nzadd users 5 saatvik 8 kunal\n\n# to get all users\nzrange users 0 -1\nzrange users 0 -1 withscores\nzrevrange users 0 -1\n\n# to get the length of the string\nzcard users\n# to get key's value over a range\nzcount users 0 2\n# to remove member\nzrem users uday\n</code></pre> <p>Hashes in Redis</p> <pre><code># add keys to a set\nhset myhash name uday\nhset myhash email dev117uday@gmail.com\n\n# get all keys from hashset\nhkeys myhash\n# to get all values\nhvals myhash\n# to check for keys \nhexists myhash name\n# check the length  \nhlen myhash\n# to set multiple values at once\nhmset myhash country india phone_no 9810039759 age 24\n# to get multiple values\nhmget myhash country name email\n# increment some value\nhincrby myhash age 2\n# to delete key from set\nhdel myhash age\n# to avoid over writting the values\nhsetnx myhash name Uday\n</code></pre> <p>Transaction</p> <pre><code># to go in transaction mode\nmulti\nset name1 uday\nset name2 yadav\nset a 1\nexec\n\n# to discard transaction\ndiscard\n</code></pre> <p>Pub/Sub</p> <pre><code>subscribe my-chat\npublish my-chat \"hello world\"\n\n# to subscribe to channel with patterns in name\npsubscribe chats*\npsubscribe h?llo\n</code></pre> <ul> <li>If no one is sub to the channel you specify in publish, it returns 0</li> </ul> <p>Benchmarking Redis</p> <pre><code>redis-benchmark -n 1000 -d 10000\n</code></pre> <p>GeoSpatial Data</p> <pre><code># add geo spatial data ing long : lat\nGEOADD maps 77.216721 28.644800 delhi\nGEOADD maps 72.877426 19.076090 mumbai\n\n# data is tored in sorted set data structure\nzrange maps 0 -1\n# use withscores to get the values\n\n# to get the geohash of city\nGEOHASH maps delhi\n\n# to get long:lat\nGEOPOS maps delhi\n# to get distance, in meter (default)\nGEODIST maps delhi mumbai\nGEODIST maps delhi mumbai km\n# within distance\nGEORADIUS maps 77.216721 28.644800 2000 km\nGEORADIUS maps 77.216721 28.644800 2000 km withcoord\nGEORADIUS maps 77.216721 28.644800 2000 km withcoord withdist\nGEORADIUSBYMEMBER maps delhi 1300 km\nGEORADIUSBYMEMBER maps delhi 1300 km withcoord withdist desc|asc\n</code></pre>"},{"location":"codeblog/docs/go-golang/","title":"Go Golang Go!","text":"<p>If you want to know more about Golang, pelase to go the Golang section on my notes page here</p> <p> </p> <p>The hot new server-side high-performance language.</p> <p>For those of you who don\u2019t know what Golang is, here is a quick and short intro :</p> <ul> <li>Go is a statically typed, compiled programming language designed at Google by Robert Griesemer, Rob Pike, and Ken Thompson.</li> <li>Go is syntactically similar to C.</li> <li>It has memory safety ( uses a garbage collector ), structural typing, and CSP [communicating sequential processes]-style concurrency.</li> </ul> <p>In simple words, Golang is like Java in terms of processing but written like C</p>"},{"location":"codeblog/docs/go-golang/#why-golang","title":"Why Golang?","text":"<p>We live in a world where Java handles the majority of critical processes, but the thing is, java is old getting old, in the sense that writing concurrent programs is difficult, as more and more servers are UNIX based, shell scripts to manage servers is limit (that\u2019s where python came in ), poorly implemented generics and no support for unsigned data-types, has hidden relationship between code and hardware. This is where Golang comes in.</p>"},{"location":"codeblog/docs/go-golang/#why-i-love-golang","title":"Why I love Golang","text":"<ul> <li>Performance: Golang is compiled to machine code by its compiler, it\u2019s fast, hence faster than java.</li> <li>Modern: Just like any other modern programming language, Golang\u2019s syntax is relatively easy to understand and write code. It keeps one\u2019s understanding of how memory is used will abstracting out a lot of complex features.</li> <li>It\u2019s static and dynamic: the concept is simple, if the type isn\u2019t defined it will dynamically adjust, else follow the rules.</li> <li>Safe: Golang comes with garbage collector which is open-source (Golang itself is open-source), turns out to be more reliable, hence no need to worry but memory leaks as the garbage collector is smart enough to free unused memory, though you can do it explicitly but come on.</li> <li>Concurrency: Golang is known for its great concurrency, but why believe me, here is the explanation simple explanation :</li> </ul> <p>Golang uses something called Go-routines, simply they are Go function. Golang implements its own scheduler that allows many Go-routines to run on the same OS thread. JVM on the other hand uses operating system threads, it relies on the operating system kernel to schedule them, which is a much slower and memory consuming process.</p> <p>You can read more about this topic in detail here :</p> <ul> <li>Why you can have millions of Goroutines but only thousands of Java Threads</li> <li>Achieving concurrency in Go</li> </ul>"},{"location":"codeblog/docs/go-golang/#major-other-advantages","title":"Major Other Advantages :","text":"<ul> <li>Cross-compiling: The Go compiler allows you to generate executable binaries for different operating systems with simple commands, and because it is a simple executable file, this makes deploying Go applications to production servers or local machines a breeze \u2014 all it requires is moving the final executable file. No hassle that comes with JVM.</li> </ul>"},{"location":"codeblog/docs/go-golang/#some-concerns-regarding-go","title":"Some concerns regarding Go","text":"<p>Well it\u2019s not all perfect in Go\u2019s world</p> <p>Now, to be completely honest, I looked into a ton of resources to find drawbacks in go but could find any reasonable ones (except for package manager). Consider reading these comments:</p> <pre><code>While having interfaces is great, structs implement interfaces implicitly, not explicitly. This is stated as a strength of Go, but we found that it\u2019s difficult to tell from looking at a struct whether or not it implements an interface. You can only really know by attempting to compile the program. This is fine if the program is small, but not if it\u2019s a medium to large size.\n</code></pre> <p>One of Go\u2019s main advantages is also one of its weaknesses. Go may be an easy language to pick up, but that brings with it a lack of versatility. Some of the hottest languages on the market pride themselves on their complexity.</p> <p>Languages like Swift and Haskell may be more difficult to learn, but they manage to find their fans by packing in a wealth of smart abstractions that allow coders to achieve complex and clever results with less.</p> <p>Well, the stated disadvantages of Golang are more opinion-based rather than actual setbacks that cause problems.</p> <p>The Disadvantages are more like design drawbacks which people complain about but Golang says its the part of the new programming language design paradigm.</p>"},{"location":"codeblog/docs/go-golang/#lack-of-package-manager","title":"Lack of Package Manager","text":"<ul> <li>Golang doesn\u2019t have a package manager (as of June 2020). Every single modern programming language has a package manager, not even modern languages, older than Golang like Python and JavaScript have a package manager, even Rust, a systems programming language has one. </li> </ul> <p>It\u2019s not that you completely cannot use external packages, yes you can, but you have to configure them the old fashion, adding them to the path and explicitly defining, like C++ which is not cool.</p> <p>Nonetheless, Golang is an amazing programming language. Golang developers are among the highest-paid developer in the industry, it\u2019s also becoming an industry favorite language when it comes to doing real-time data analytics and data science work, deploying production-ready ML models, Yes, you heard (or read it) write. It\u2019s best-suited use it to write scalable, high-performance back-end that can you heavy data lifting.</p> <p>I hope you like this article !</p>"},{"location":"codeblog/docs/intro-julia/","title":"Julia: A fresh approach to technical computing","text":"<p>For those of you who don\u2019t know what Julia is, here is a quick and short intro :</p> <ul> <li>Julia is a high-level, high-performance, dynamic programming language, designed and developed by Jeff Bezanson, Alan Edelman, Stefan Karpinski, Viral B. Shah</li> <li>While it is a general-purpose language and can be used to write any application, many of its features are well-suited for numerical analysis and computational science.</li> <li>Julia proves to be faster than Python as it keeps reaching the speed of C, puts up a pretty impressive performance against python.</li> <li>Julia is simpler than python, yet as fast even faster than C.</li> </ul>"},{"location":"codeblog/docs/intro-julia/#why-julia","title":"Why Julia","text":"<p>In the world where Python has become the to-go language to Data Science and ML, what brings us to Julia? Well consider this :</p> <p> </p> <p>https://julialang.org/benchmarks/</p> <p>A language as simple as python running as fast C, can you believe it.</p> <p>Julia is a <code>JIT(Just In Time)</code> compiled language, it is fundamentally different from other compiled language ex: Rust and C++.</p> <p>But JIT-compiled language must be slower, right? Well technically it should be, but the way Julia\u2019s core is implemented makes it faster than what is expected. You can read more about it here :</p> <p>Why Julia is so fast</p>"},{"location":"codeblog/docs/intro-julia/#why-i-love-julia","title":"Why I love Julia","text":"<ul> <li>Performance: If you have any doubts related to Julia\u2019s performance compared to Python, please throw them aside immediately. Julia is fast, if you want to compare it to c++ or rust, then it is on-par with them, in some cases even faster. It\u2019s blazing fast out of the box, no package/optimization needed.</li> <li>Syntax: Julia\u2019s syntax is quite similar to python, but it\u2019s simply simple JavaScript. It follows the same indentation rules as that of python. Here is a code snippet :</li> </ul> <pre><code>function g(x,y)     \n    return x * y\nend\n</code></pre> <ul> <li>Functionality: It is designed to keep technical computing in focus, it excels at numerical computing with a syntax that is great for math, with support for many numeric data types, and providing parallelism out of the box.</li> <li>Parallel computing and GPU programming: Julia was designed to take advantage of parallel computing and leveraging the power of GPU\u2019s in mind.</li> </ul> <p>Julia was designed for parallelism from the ground-up, and provides built-in primitives for parallel computing at every level: instruction level parallelism, multi-threading, and distributed computing. The Celeste.jl project achieved 1.5 PetaFLOP/s on the Cori supercomputer at NERSC using 650,000 cores.</p> <p>https://juliacomputing.com/case-studies/celeste.html</p> <p>Well, the conclusion to draw here is Julia is freaking fast in all ways, but the more important one is Julia is much easier to code in. Earlier these research\u2019s used tools and frameworks that had limitations even it comes to usability.</p> <p>Julia is helping researches around the world to do things they are good at, crunching new ideas and methods, and not hindering their ability to experiment.</p> <p>If you want to get started with Julia on Colab, please refer to one of my previous articles :</p> <p>How to run Julia on Colab</p> <ul> <li>Amazing Package manager: Just like any other modern programming language, Julia also has a package manager.</li> </ul> <p>Things to know about julia :</p> <ul> <li>In Julia, Arrays start with index 1 not 0, like Fortran.</li> <li>It also has an excellent programming interface with other programming languages like c/c++.</li> </ul>"},{"location":"codeblog/docs/intro-julia/#julia-vs-python-from-data-science-and-machine-learning-perspective","title":"Julia Vs Python: From Data science and machine learning perspective.","text":"<p>Julia was designed from the start for scientific and numerical computation, hence it has a lot of advantages over Python.</p> <ul> <li>Julia is faster than python (we discussed it) Designed with maths first approach in computing, it has more in-built mathematical functions and support for more operations.</li> <li>Example: Let\u2019s say you have a Julia function to square the element passed as arguments and then returns it, now if you pass in a number, you get back it\u2019s square, if you pass in a matrix, you get back the matrix squared (m*m), and if you pass in the matrix with . (dot) operator, then it will return every element of that matrix squared!</li> <li>Julia is developing its own native machine learning libraries. Flux is a machine learning library for Julia that has many existing model patterns for common use cases. Since it\u2019s written entirely in Julia, it can be modified as needed by the user, and it uses Julia\u2019s native just-in-time compilation to optimize projects from inside out.</li> <li>Python may have more packages: Yes, the package ecosystem of python is bigger, but Julia lacks no support when it comes to toolkit you need to perform any data science or ml task. Plus as stated above, all packages in Julia are written natively.</li> <li>Julia also provides an excellent language for those who want to write their own machine learning algorithms, from scratch, or want to experiment with them or make their own. Plus I strongly believe that 98% of people doing data science and machine learning out in the world hardly know anything that\u2019s happening in underneath those algorithms and mathematical function that they call from Keras and NumPy</li> </ul> <p>As of June 2020, Julia is a relatively new programming language. More and more researchers around the world are considering Julia. In my opinion, anyone aspiring in the field of data science and machine learning should definitely learn about Julia, because it\u2019s an amazing programming language they capabilities like no others.</p> <p>I hope you like this article !</p>"},{"location":"codeblog/docs/intro-rust/","title":"Rust: New Systems Programming Language","text":"<p>For those of you who don\u2019t know what Rust is, here is a quick and short intro</p> <ul> <li>Rust was originally designed by Graydon Hoare at Mozilla Research, yes, the company that makes Mozilla web browser.</li> <li>Rust is a programming language focused on performance and safety, especially safe concurrency. - Rust provides memory safety without using garbage collection  (like Golang ).</li> <li>It\u2019s a systems programming language, hence it can run as fast as C and sometimes even faster.</li> </ul>"},{"location":"codeblog/docs/intro-rust/#why-rust","title":"Why Rust","text":"<p>In the world where C/C++ powers everything we know, what brings us to Rust? Well here is an example to consider:</p> <p>Take a look at this graph:</p> <p></p> <p>70% of security issues that Microsoft encounter are due to memory unsafety. Why this happens? Because writing memory-safe code is hard. It\u2019s not that these issues are left neglected at the time of production and testing, but due to the reason, it\u2019s so difficult to write and catch errors. That\u2019s why languages like Python and JavaScript were created, to abstract out these complexities and to empower more developers to create stuff. But they come with performance penalties and run-time overheads. This is a place where Rust comes in.</p>"},{"location":"codeblog/docs/intro-rust/#why-i-love-rust","title":"Why I love Rust","text":"<p>Here is a list of things that I love about Rust</p> <ol> <li>Syntax: Rust has a very sensible syntax, making it easy and fast to understand and while abstracting on a lot of things. Though, it\u2019s not as easy as python but compared to C, it's much cleaner. It shares a lot of similarities with modern programming languages. </li> </ol> <p>Example:</p> <ul> <li>Declaring Variable:</li> </ul> <pre><code>let variable: i64 = 2147483748;\n// defining datatype is optional\nDeclaring functions:\nfn logger (x: String) -&gt; String {    \n// some functionality    some_string \n// don't have to explicitly write return}\n</code></pre> <ul> <li>Performance: When it comes to performance, there should be no doubt. Rust is a compiled language; thus, it spits out executable binary. From accessing registers in CPU to multi-threading, Rust can squeeze outperformance from every part of the computer.</li> <li>Memory: A main selling point of Rust is that it guarantees, at compile-time, that your application will be safe from de-referencing null or dangling pointers (a.k.a segmentation fault). Rust also makes it difficult to leak memory, but it is not a guarantee. It works on the principle of ownership, defining who is the owner of the memory and its value, and based on this fundamental principle, Rust can guarantee memory safety. Any errors/warnings will be reported at the time of compilation.</li> <li>Package manager: Yes, like all modern programming languages like Python and JavaScript, Rust also has a package manager called Cargo. It downloads all the packages you mention in cargo.toml file and compiles them with the program at the time of the final compilation. Bindings: Rust shares an excellent interface with almost all programming languages, notably WASM for Js, pyO3 for python. Hence, this makes it much easier to integrate Rust in an existing project to significantly boost your performance.</li> <li>Compiler: Just mind-blowingly amazing, trust me, or you can search about it yourself on the internet. Its compiler is just like a computer teacher that will point out every single error mistake you make with a concise description, suggestion on how to fix the problem, and error code to read more about it. And that\u2019s not all, it tells you detailed warnings, how to fix them, potential runtime errors and style guides, now tell me which language provides such amazing feedback on your code.</li> </ul> <p>Here are a few examples of compiler complaining: (source Google images)</p> <p> </p> <p>source : google </p> <p> </p> <p>source : google </p> <p> </p> <p>source : google </p>"},{"location":"codeblog/docs/intro-rust/#things-i-dont-like-about-rust","title":"Things I don\u2019t like about Rust","text":"<ol> <li>It\u2019s hard to learn: As compared to other languages, it\u2019s much difficult to get started with Rust. I\u2019ve found that Rust has forced me to learn many of the things that Iwas slowly learning as \u2018good practice\u2019 in C/C++ before I could evencompile my code. I want to stress that Rust isn\u2019t the kind of languageyou can learn in a couple days and just deal with thehard/technical/good-practice stuff later. You will be forced to learn strictsafety immediately and it will probably feel uncomfortable at first.The whole concept memory ownership and borrowing Rust focuses on, with features like Option and Result (kind of like promises in JavaScript) increases the learning curve for beginners.</li> <li>Compiler: Rust, being a language that provides a level of abstraction much more common to higher-level languages with little to no runtime performance cost, have to pay for that to some extent at compile time. It\u2019s slow to compile.</li> <li>Framework and ecosystem : What comes to your mind when you think about system-level programming language like PASCAL, FORTRAN, C/C+, fast programming languages with old toolchain and software development workflows. Now think of Python, JavaScript, modern languages with great toolchain support. Rust combines the power of both worlds. it\u2019s a fast system-level programming language with a modern toolchain. Cargo, Rust\u2019s package manager is boon for developers to get started working on projects in Rust because now they don\u2019t have to waste time linking libraries and adding environment variables which I believe is a hot mess.</li> </ol> <p>Rust has a lot of amazing frameworks in all fields, from Web to ML to game engines, libraries and framework are bubbling up. Rocket, a web framework similar to flask and ruby, was put in production after 3 days of first public release, it was possible only because if your program compiles without any error or warning and pass all limit test case, then it\u2019s pretty much battle proof and production-ready. The frameworks are evolving fast at a point extreme performance can be achieved with ease.</p> <p>Industry adoption</p> <ul> <li>Here is a list of everything happening in Rust world</li> <li>Mozilla uses Rust in its Quantum engine.</li> <li>Microsoft says Rust is the industry\u2019s best chance at \u201csafe system programming\u201d.</li> <li>Microsoft: Why we used programming language Rust over Go for Web Assembly on Kubernetes app</li> <li>Google will be considering Rust to replace parts of android. </li> <li>Apple will migrate to Rust from C in the most networking parts.</li> <li>AWS sponsors Rust community and you can write AWS Lambda functions using Rust </li> <li>Amazon\u2019s Firecracker is the virtualization technology that powers AWS Lambda and FarGate, and it is written completely in Rust.</li> <li>Facebook made the libra in Rust </li> <li>Deno, the replacement of node, uses Rust to power it. </li> <li>Discord switched from Go to Rust </li> <li>Drop Box uses rust for sync.</li> <li>Cloudflare using Rust to create a safe and secure ecosystem.</li> </ul> <p>It\u2019s the systems programming language in the future where it will replace C/C++ first in the world of networking and embedded systems, providing high-performance applications.</p> <p>I hope you like this article !</p>"},{"location":"codeblog/docs/three-lang/","title":"My experience of learning 3 programming languages in 3 weeks.","text":"<p>Disclaimer: I don\u2019t claim to be an expert in any of them. This was just a thought experiment.</p> <p>Here\u2019s how it all began :</p> <p>In the last week of May, I was working on the front-end part of my personal project, which got me frustrated and bored to some extend. So I decided to take 1\u20132 days off to refresh myself. I decided to take a deeper look at the world of competitive coding (i do solve some questions, but not very seriously). So wandering on the internet I came to this website called code wars.</p> <p>While signing up, they asked to pick a language, but they had more than 50 languages, which got me thinking, why people make so many languages when we already have so many computer languages. Why do they exist?</p> <p>So I start to search about each one of them but had no success in understanding the difference between them because google cards show the same result for every language, Either it is a multi-paradigm programming language or general-purpose programming language. Thanks, Google.</p> <p>Searching more on the internet, first came across Rust programming language, saw a few talks/conferences and it fascinated me. Rust is the new C++. Next, I came across Golang, a replacement for Java, and then Julia, one programming language that takes on Python, R, Octave, and Matlab (I will refer to them as PROM )in one shot. So I decided to do a thought experiment, learn 3 programming languages in 3 weeks.</p> <p>I set my main aims to be :</p> <ul> <li>Understanding why these languages were create</li> <li>What new features and advantages they bring that do not exist elsewhere.</li> <li>To understand their basic syntax, design paradigms.</li> <li>Performance comparison with existing ones.</li> <li>Basic inner workings of there compiler/interpreter.</li> <li>Current industry usage.</li> <li>Future of these programming languages.</li> </ul> <p>One thing I want to make clear: I don\u2019t claim to be a professional/expert with these languages, and 6 months in the future, I am pretty sure I will forget their syntax. Nonetheless, this article is about my experience learning going through this thought experiment and learning about different programming languages.</p> <p>I also wrote 3 articles on medium about each one that you can check out :</p> <ul> <li>Rust is amazing</li> <li>Julia: A fresh approach to technical computing</li> <li>Go Golang Go!</li> </ul>"},{"location":"codeblog/docs/three-lang/#understanding-why-these-languages-were-create","title":"Understanding why these languages were create","text":"<p>These programming languages were created to overcome the long list of features and functionality that can now have become an essential part of software development(more on that later) and other engineering tasks</p> <ul> <li>The industry has been using PROM, but there was nothing that exists when it comes to combining simplicity and performance of all. Julia is fast as C and simple as R. Julia can do everything python, R, octave, Matlab can do. Matlab was designed was for technical computing, but is not open-source, that\u2019s were octave tries to cover the gap, R was designed for statistical computing, python jumps in because its a really good general-purpose programming language and has really good interface, hence using DS and ML libraries are easy. If you take a close look, all of them are trying to achieve the same thing. But now the industry is stuck using all these different things that Julia alone can do.</li> <li>Everyone\u2019s favorite C/C++ is cool and amazing but it is a huge headache for companies when it comes to writing it safely. C/C++ is hard, which makes writing memory-safe code in C/C++ even harder.</li> <li>Read more about memory issue here : Memory Issues in C++</li> <li>Because we need the high-performance at all cost, the industry is stuck with them, and though they have served pretty well up till now, problems they create is costing us billions of dollars. Money wasted in the world because of these issues is constantly growing.</li> <li>Read this : Microsoft: Rust Is the Industry\u2019s \u2018Best Chance\u2019 at Safe Systems Programming</li> <li>This is where Rust comes in. It promises safety and great concurrency support with \u201czero cost to performance\u201d</li> <li>Java, the language that dominates in the software industry, has now aged and isn\u2019t able to keep in any field. Android has Kotlin, Flutter, React Native to replace it, and more and more apps/services move to electrons and PWA\u2019s, Java is on the decline. But one field where it still holds its crown is the server-side.</li> <li>Though Node.js opposed a great threat, Golang promises to replace java completely. With a better garbage collector, high performance, and great concurrency, it can solve almost all Java problems.</li> </ul>"},{"location":"codeblog/docs/three-lang/#what-new-features-and-advantages-they-bring-that-do-not-exist-elsewhere","title":"What new features and advantages they bring that do not exist elsewhere?","text":"<p>For an in-depth overview of each of these programming languages, please refer to the articles linked above. Here I will just be comparing them with existing ones</p> <ul> <li>Programming languages like C/C++ were created with high performance and low memory consumption in mind, which also means adding extras features and functionality to the language means burdening the compiler with more processing and requiring more memory. This not the case anymore. Rust uses LLVM which gives up little speed and performance (in terms of compiling), but because the language has to implement such restrict measures in terms of memory safety, it would have been a far more difficult job to implement it any other way. But because we have far more powerful computers, that minor delay in the compilation is neglected over the features and functionality we get. Julia also uses LLVM.</li> <li>There is one thing to note : compiling code in Rust, Golang and Julia for the first time, or with a new library is quite slow because all the libraries have to re-compiled, but that\u2019s just one time problem.</li> <li>Talking more about the compiler, Both Rust (via Cargo, it\u2019s package manager ) and Golang provides hot reload functionality while writing programming. This is an amazing feature that is super famous among app and web developers, the ability to see your work without manual hitting compile button is superb. This is something that is missing from a lot of programming languages and even frameworks.</li> <li>In PROM, you are mostly stuck with libraries that are provided to you, because they are usually written in C/C++. Yes, there is a huge collection out there but they don\u2019t provide you with the flexibility to make changes, or even the option to make your own. You can write to them manually but the performance hit it will be big. Everything from tuning parameters, to calculating complex equations, you have to depend on features and functionality that they provide. In Julia, from writing your own function to add 2 numbers to writing custom neural nets for research, you can do anything you want.</li> <li>Software engineering isn\u2019t just about writing code to solve problems, finding problems in code is equally important. Over the years, external testing tools had been developed but these problems never get addressed from the language side. Rust catches errors in code before developers even begin testing their software. For instance, Rust can help you produce programs that would check the correctness and validity of code at runtime. It even has in-built testing tools. The same goes for Golang. Having an in-built testing library is a huge plus.</li> </ul> <p>Time to solve = design time + programming time + testing time + debugging time + run time + time for visualization of results</p>"},{"location":"codeblog/docs/three-lang/#understand-their-basic-syntax-design-paradigms","title":"Understand their basic syntax, design paradigms","text":"<p>Well, looking at the few lines of code, it\u2019s easy to tell that these modern programming languages have a more sensible syntax.</p> <p>Neither writing verbose code (java) nor purely in symbols (C++) is fun, from anyone learning to code to professional developer. Rust, apart from amazing features it provides, balances between both the properties and that\u2019s why its the most loved programming language according to stack overflow 2020 survey. Even Go is not far behind.</p> <p></p>"},{"location":"codeblog/docs/three-lang/#performance-comparison-with-existing-ones","title":"Performance comparison with existing ones","text":"<p>I have an in-depth performance comparison in articles about each.</p> <p>Here is a quick overview :</p> <p></p>"},{"location":"codeblog/docs/three-lang/#current-industry-usage","title":"Current Industry usage","text":"<p>To be honest with you, I am just a student who has partial knowledge about industry usage. During this period, I tried to research current industry adoption, nonetheless, the knowledge I have doesn\u2019t represent the industry and it\u2019s better to hear it from actual professionals.</p>"},{"location":"codeblog/docs/three-lang/#golang","title":"Golang","text":"<ul> <li>Is Go Ready for Enterprise?</li> <li>State of Enterprise GoLang in India</li> </ul>"},{"location":"codeblog/docs/three-lang/#rust","title":"Rust","text":"<ul> <li>Even Apple Is Interested In Migrating Their C Code To Rust</li> <li>Microsoft: Rust Is the Industry\u2019s \u2018Best Chance\u2019 at Safe Systems Programming </li> <li>Programming language Rust's adoption problem: Developers reveal why more aren't using it</li> </ul>"},{"location":"codeblog/docs/three-lang/#julia","title":"Julia","text":"<ul> <li>Why Amazon, Disney and Uber are courting this two-year-old startup</li> <li>The Infancy of Julia: An Inside Look at How Traders and Economists Are Using the Julia Programming Language</li> </ul> <p>Future of these programming languages </p> <p>Well, if you are wondering why anything of these programming languages hasn\u2019t been in headlines all over the internet is because :</p> <ul> <li>They are programming languages, not frameworks.</li> <li>They are relatively new</li> </ul> <p>I think that\u2019s the major reason why they aren\u2019t famous, but that doesn\u2019t mean industries aren\u2019t betting on them. All these languages have gotten more and more attention from companies as compared to other modern programming languages. But I think it\u2019s safe to say, you so start learning them now, 4\u20135 years in future, you will definitely have an earlier adoption advantage.</p> <p>I hope you like this article !</p>"},{"location":"codeblog/go/go_gc_when_it_runs/","title":"Golang 101 : Looking at when Garbage Collector runs","text":"<p>Take a look at GC running visually</p> <p>\u200cA write simple program that creates a byte array of 100000000 elements and lets print the memory allocations.</p>"},{"location":"codeblog/go/go_gc_when_it_runs/#package-main-import-fmt-runtime-time-func-printstatsmem-runtimememstats-runtimereadmemstatsmem-fmtprintlnmemalloc-memalloc-fmtprintlnmemtotalalloc-memtotalalloc-fmtprintlnmemheapalloc-memheapalloc-fmtprintlnmemnumgc-memnumgc-fmtprintln-func-main-var-mem-runtimememstats-for-i-0-i-2-i-s-makebyte-100000000-if-s-nil-fmtprintlnoperation-failed-printstatsmem-timesleeptimesecond","title":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"runtime\"\n    \"time\"\n)\n\nfunc printStats(mem runtime.MemStats) {\n    runtime.ReadMemStats(&amp;mem)\n    fmt.Println(\"mem.Alloc:\", mem.Alloc)\n    fmt.Println(\"mem.TotalAlloc:\", mem.TotalAlloc)\n    fmt.Println(\"mem.HeapAlloc:\", mem.HeapAlloc)\n    fmt.Println(\"mem.NumGC:\", mem.NumGC)\n    fmt.Println(\"-----\")\n}\n\nfunc main() {\n    var mem runtime.MemStats\n    for i := 0; i &lt; 2; i++ {\n        s := make([]byte, 100000000)\n        if s == nil {\n            fmt.Println(\"Operation failed!\")\n        }\n        printStats(mem)\n    }\n    time.Sleep(time.Second)\n}\n</code></pre>","text":""},{"location":"codeblog/go/go_gc_when_it_runs/#understanding-the-code","title":"\u200cUnderstanding the code","text":"<p>There is a package in Golang standard library called runtimewhich contains alot of useful function like :</p> <ul> <li><code>runtime.ReadMemStats(&amp;mem)</code></li> <li><code>runtime.GC()</code></li> </ul> <p>Take a loot at : https://golang.org/pkg/runtime/</p>"},{"location":"codeblog/go/go_gc_when_it_runs/#func-readmemstats","title":"func ReadMemStats","text":"<pre><code>func ReadMemStats(m *MemStats)\n</code></pre> <p>\u200cReadMemStats populates m with memory allocator statistics.</p> <p>\u200cThe returned memory allocator statistics are up to date as of the call to ReadMemStats. This is in contrast with a heap profile, which is a snapshot as of the most recently completed garbage collection cycle.</p>"},{"location":"codeblog/go/go_gc_when_it_runs/#func-gc","title":"\u200cfunc GC","text":"<pre><code>func GC()\n</code></pre> <p>\u200cGC runs a garbage collection and blocks the caller until the garbage collection is complete. It may also block the entire program.</p> <p>\u200cRun this program using the following flag : <pre><code>$ GODEBUG=gctrace=1 go run gc.go\n</code></pre></p> <p>\u200cOutput i receive [ don\u2019t get scared, will clean up ] :</p> <pre><code>// some other output //gc 3 @0.029s 5%: 0.020+2.8+0.009 ms clock, 0.081+0.12/2.7/0.19+0.036 ms cpu, 13-&gt;15-&gt;10 MB, 15 MB goal, 4 P\nmem.Alloc: 100092312\nmem.TotalAlloc: 100092312\nmem.HeapAlloc: 100092312\nmem.NumGC: 0\n-----\ngc 1 @0.001s 3%: 0.035+0.20+0.002 ms clock, 0.14+0.041/0.037/0.10+0.010 ms cpu, 95-&gt;95-&gt;0 MB, 96 MB goal, 4 Pmem.Alloc: 100081456mem.TotalAlloc: 100101064mem.HeapAlloc: 100081456mem.NumGC: 1\n-----\ngc 2 @0.021s 0%: 0.014+0.11+0.003 ms clock, 0.058+0.068/0.050/0.049+0.012 ms cpu, 95-&gt;95-&gt;0 MB, 96 MB goal, 4 P\n</code></pre> <p>\u200cLet look at the second run : <pre><code>-----gc 1 @0.001s 3%: 0.035+0.20+0.002 ms clock, 0.14+0.041/0.037/0.10+0.010 ms cpu, 95-&gt;95-&gt;0 MB, 96 MB goal, 4 P\nmem.Alloc: 100081456\nmem.TotalAlloc: 100101064\nmem.HeapAlloc: 100081456\nmem.NumGC: 1\n-----\ngc 2 @0.021s 0%: 0.014+0.11+0.003 ms clock, 0.058+0.068/0.050/0.049+0.012 ms cpu, 95-&gt;95-&gt;0 MB, 96 MB goal, 4 P\n</code></pre></p> <p>\u200cIn first line : ignoring the value from CPU profiler, take a look at <code>95-&gt;95&gt;0 MB</code>. The first number is the heap size when the garbage collector is about to run. The second value is the heap size when the garbage collector ends its operation. The last value is the size of the live heap that is 0</p> <p>It allocated <code>100081456</code> bytes of memory, more than the <code>100000000</code> becuase that is the length of slices we specified, and <code>100081456</code> bytes is the capacity of the slices or simply everytime you make a slices, some extra memory is allocated with it in case the size needs to expand in future.</p> <p>Thus before running through the second iteration of the loop, it clears out the memory allocated during the first</p> <p>Well thats it\u2019s, take a look around the the runtime package or run your own programs with this compiler flag and see visually where is slows down</p> <p>I hope you like this article !</p>"},{"location":"codeblog/go/go_testing_simple_webserver/","title":"Go 101 : Testing simple Go server","text":"<p>Code we will be testing : <code>main.go</code></p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n)\n\nfunc main() {\n    http.HandleFunc(\"/\", helloWorldEndPoint)\n    fmt.Println(\"Server :  http://localhost:8080\")\n    log.Fatal(http.ListenAndServe(\":8080\", nil))\n}\n\nfunc helloWorldEndPoint(writer http.ResponseWriter, request *http.Request) {\n    fmt.Fprintf(writer, \"hello world\")\n}\n</code></pre> <ul> <li>Create a file with name _test.go, these files are ignore by compiler <li>Write a func matching <code>func TestXxx(*testing.T)</code> where Xxx does not start with a lowercase letter. </li> <li>The function name serves to identify the test routine.</li> <p>To run the test :  <pre><code>go test\n</code></pre></p>"},{"location":"codeblog/go/go_testing_simple_webserver/#writing-test","title":"Writing Test\u200c","text":"<p>Inorder to test the handler, we call it by passing <code>http.ResponseWriter</code> and <code>*http.Request</code> to create a new Request</p> <pre><code>req, err := http.NewRequest(http.MethodGet,\"http://localhost:8080/\",nil)     \n\nif err != nil {  \n    t.Fatalf(\"Could not create a request %v\", err)\n}\n</code></pre> <ul> <li>To record the response from the writer</li> </ul> <pre><code>rec := httptest.NewRecorder()\n</code></pre> <ul> <li>To verify</li> </ul> <pre><code>helloWorldEndPoint(rec, req)\n\nif rec.Code != http.StatusOK {  \n    t.Errorf(\"accepted status 200, got %v\", rec.Code)\n}\n\n// checking the msg returned\nif !strings.Contains(rec.Body.String(), \"hello world\") {  \n    t.Errorf(\"unexpected body in response %q\", rec.Body.String())\n}\n</code></pre> <p>Full code  <code>main_test.go</code></p> <pre><code>package main\nimport (  \n    \"net/http\"\n    \"net/http/httptest\"   \n    \"strings\"  \n    \"testing\"\n)\n\nfunc TestHandler(t *testing.T) {  \n\n    req, err := http.NewRequest(http.MethodGet,\"http://localhost:8080/\",nil) \n    if err != nil {   \n        t.Fatalf(\"Could not create a request %v\", err) \n    } \n\n    rec := httptest.NewRecorder() \n\n    helloWorldEndPoint(rec, req) \n    if rec.Code != http.StatusOK {   \n        t.Errorf(\"accepted status 200, got %v\", rec.Code) \n    } \n\n    if !strings.Contains(rec.Body.String(), \"hello world\") {   \n        t.Errorf(\"unexpected body in response %q\", rec.Body.String()) \n    }\n}\n</code></pre> <p>I hope you like this article !</p>"},{"location":"codeblog/go/go_things_go_do_differently/","title":"Things Golang do differently","text":""},{"location":"codeblog/go/go_things_go_do_differently/#formatting","title":"Formatting","text":"<ul> <li>use <code>gofmt</code> to format packages</li> </ul>"},{"location":"codeblog/go/go_things_go_do_differently/#commentary","title":"Commentary","text":"<ul> <li>Go uses c like comments <code>//</code> or <code>/* */</code></li> <li>Every Function/Struct/Variable that you have to export, name it so that first letter is capital</li> <li>Package name</li> <li>short, concise, evocative</li> <li>the package in src/encoding/base64 is imported as \"encoding/base64\" but has name base64, not encoding_base64 and not encodingBase64.</li> </ul>"},{"location":"codeblog/go/go_things_go_do_differently/#getters-setters","title":"Getters &amp; Setters","text":"<ul> <li>Go doesn't provide automatic support for getters and setters. There's nothing wrong with providing getters and setters yourself, and it's often appropriate to do so. <pre><code>owner := obj.Owner()\nif owner != user {\n    obj.SetOwner(user)\n}\n</code></pre></li> </ul>"},{"location":"codeblog/go/go_things_go_do_differently/#naming","title":"Naming","text":"<p>Interface Naming By convention, one-method interfaces are named by the method name plus an -er suffix or similar modification to construct an agent noun: Reader, Writer, Formatter, CloseNotifier etc.</p>"},{"location":"codeblog/go/go_things_go_do_differently/#variable-naming","title":"Variable Naming","text":"<ul> <li>Finally, the convention in Go is to use MixedCaps or mixedCaps rather than underscores to write multi word names</li> <li>In <code>a :=</code> declaration a variable v may appear even if it has already been declared, provided: this declaration is in the same scope as the existing declaration of v (if v is already declared in an outer scope, the declaration will create a new variable \u00a7),</li> <li>The corresponding value in the initialisation is assignable to v, and there is at least one other variable that is created by the declaration</li> </ul>"},{"location":"codeblog/go/go_things_go_do_differently/#indentation","title":"Indentation","text":"<pre><code>if i &lt; f() {\n    g()\n}\n\nif i &lt; f()  // wrong!\n{           // wrong!\n    g()\n}\n</code></pre>"},{"location":"codeblog/go/go_things_go_do_differently/#control-structure","title":"Control Structure","text":"<ul> <li>There is no do or while loop, only a slightly generalised for; switch is much better If. In Go a simple if looks like this: <pre><code>if x &gt; 0 {\n    return y\n}\n</code></pre></li> <li>Mandatory braces encourage writing simple if statements on multiple lines. It's good style to do so anyway, especially when the body contains a control statement such as a return or break. Since if and switch accept an initialisation statement, it's common to see one used to set up a local variable. <pre><code>if err := file.Chmod(0664); err != nil {\n    log.Print(err)\n    return err\n}\n</code></pre></li> </ul>"},{"location":"codeblog/go/go_things_go_do_differently/#re-declaration-and-re-assignment","title":"Re-declaration and Re-assignment","text":"<p>The last example in the previous section demonstrates a detail of how the := short declaration form works. The declaration that calls os.Open reads, <pre><code>f, err := os.Open(name)\n</code></pre> - This statement declares two variables, f and err. A few lines later, the call to f.Stat reads, <pre><code>d, err := f.Stat()\n</code></pre></p> <p>-\u200b which looks as if it declares d and err. Notice, though, that err appears in both statements. This duplication is legal: err is declared by the first statement, but only re-assigned in the second. This means that the call to f.Stat uses the existing err variable declared above, and just gives it a new value.</p>"},{"location":"codeblog/go/go_things_go_do_differently/#range","title":"Range","text":"<ul> <li>If you're looping over an array, slice, string, or map, or reading from a channel, a range clause can manage the loop. <pre><code>for key, value := range oldMap {\n    newMap[key] = value\n}\n</code></pre></li> <li>If you only need the first item in the range (the key or index), drop the second: <pre><code>for key := range m {\n    if key.expired() {\n        delete(m, key)\n    }\n}\n</code></pre></li> <li>If you only need the second item in the range (the value), use the blank identifier, an underscore, to discard the first: <pre><code>sum := 0\nfor _, value := range array {\n    sum += value\n}\n</code></pre></li> </ul>"},{"location":"codeblog/go/go_things_go_do_differently/#switch-in-golang","title":"Switch in Golang","text":"<ul> <li>Go's switch is more general than C's.</li> <li>It's therefore possible\u2014and idiomatic\u2014to write an if-else-if-else chain as a switch. <pre><code>func unhex(c byte) byte {\n    switch {\n    case '0' &lt;= c &amp;&amp; c &lt;= '9':\n        return c - '0'\n    case 'a' &lt;= c &amp;&amp; c &lt;= 'f':\n        return c - 'a' + 10\n    case 'A' &lt;= c &amp;&amp; c &lt;= 'F':\n        return c - 'A' + 10\n    }\n    return 0\n}\n</code></pre></li> <li>There is no automatic fall through, but cases can be presented in comma-separated lists. <pre><code>func shouldEscape(c byte) bool {\n    switch c {\n    case ' ', '?', '&amp;', '=', '#', '+', '%':\n        return true\n    }\n    return false\n}\n</code></pre></li> </ul>"},{"location":"codeblog/go/go_things_go_do_differently/#type-switch","title":"Type Switch","text":"<ul> <li>A switch can also be used to discover the dynamic type of an interface variable <pre><code>var t interface{}\nt = functionOfSomeType()\nswitch t := t.(type) {\ndefault:\n    fmt.Printf(\"unexpected type %T\\n\", t)     // %T prints whatever type t has\ncase bool:\n    fmt.Printf(\"boolean %t\\n\", t)             // t has type bool\ncase int:\n    fmt.Printf(\"integer %d\\n\", t)             // t has type int\ncase *bool:\n    fmt.Printf(\"pointer to boolean %t\\n\", *t) // t has type *bool\ncase *int:\n    fmt.Printf(\"pointer to integer %d\\n\", *t) // t has type *int\n}\n</code></pre></li> </ul>"},{"location":"codeblog/go/go_things_go_do_differently/#functions","title":"Functions","text":"<ul> <li>Multiple return values <pre><code>func squareRoot (num int) (n float, err error)\n// or\nfunc squareRoot (num int) (float, error)\n// to return error if num &lt; 0\n// named return\n</code></pre></li> </ul>"},{"location":"codeblog/go/go_things_go_do_differently/#defer","title":"Defer","text":"<ul> <li>Go's defer statement schedules a function call (the deferred function) to be run immediately before the function exits. <pre><code>func fileContent (filename string) (string, error) {\n    f, err := os.Open(filename)\n    if err != nil {\n        return \"\", err\n    }\n    // defer will run the function just before exiting the function fileContents\n    defer f.Close()\n    // something with return   \n}\n</code></pre></li> <li>Deferring a call to a function such as Close has two advantages. </li> <li>First, it guarantees that you will never forget to close the file, a mistake that's easy to make if you later edit the function to add a new return path. </li> <li>Second, it means that the close sits near the open, which is much clearer than placing it at the end of the function.</li> </ul> <p>For Example : <pre><code>for i := 0; i &lt; 5; i++ {\n    defer fmt.Printf(\"%d \", i)\n}\n</code></pre></p> <p>Deferred functions are executed in LIFO order, so this code will cause <code>4 3 2 1 0</code> to be printed when the function returns A more plausible example is a simple way to trace function execution through the program. We could write a couple of simple tracing routines like this: <pre><code>func trace(s string)   { fmt.Println(\"entering:\", s) }\nfunc untrace(s string) { fmt.Println(\"leaving:\", s) }\n\n// Use them like this:\nfunc a() {\n    trace(\"a\")\n    defer untrace(\"a\")\n    // do something....\n}\n</code></pre></p>"},{"location":"codeblog/info_bank/indexdb/","title":"Indexdb","text":""},{"location":"codeblog/info_bank/indexdb/#indexes-in-databases-rdbms-edition","title":"Indexes in Databases: RDBMS Edition","text":"<p>Let's say you want to store the data of 100 students in a diary. You can do it in 2 ways :</p> <ul> <li>write down all the data in a diary in random order</li> <li>write down all the data in a diary in sorted order according to roll number</li> <li>write down all the data in a diary in sorted order and place bookmarks at a different place to search too quickly look up any roll number</li> </ul> <p></p> <p>Now everyone will use the third method. But placing bookmarks will speed up the process of searching will scale out well even if we have a million records. So lets talk about Indexes in Database\u2026.</p>"},{"location":"codeblog/info_bank/indexdb/#what-is-a-database-index","title":"What is a Database index","text":"<p>A database index is a data structure that improves the speed of data retrieval operations on a database table at the cost of additional writes and storage space to maintain the index data structure.</p> <p>An index is a copy of selected columns of data, from a table, that is designed to enable very efficient search. An index normally includes a \"key\" or direct link to the original row of data from which it was copied, to allow the complete row to be retrieved efficiently.</p>"},{"location":"codeblog/info_bank/indexdb/#example-one","title":"Example One :","text":"<p>We have a simple table having id as integer, no fancy primary key or index. Then when we perform a query  <pre><code>    select * from mock data where id = 99\n</code></pre></p> <p>It will performs a sequential scan, scanning meaning it will literally go through each and every row in the table to find out who has id 99 . We can take a look at the query plan using the <code>explain analyze</code> command. It's an extremely inefficient query as it going through all the rows in the table just to filter out the valid one</p> <p></p> <p>Next we have another table, same schema and data, but we create the id the primary key of our table. If we look at the description of the table, we see the primary key is an index. Also we see it is constructed using b tree data structure. Running the same query <pre><code>    select * from mockdata where id = 998;\n</code></pre></p> <p>Instead of performing a sequential scanning and going through all the rows in database, we perform index to find out the exact row/rows we need matching the condition. Also notice the performing an index scan is much faster.</p> <p></p> <p>Going back to the definition A database index is a data structure (in our case a b tree) that improves the speed of data retrieval operations (from 0.089ms to 0.049ms) on a database table at the cost of additional writes and storage space to maintain the index data structure.</p>"},{"location":"codeblog/info_bank/indexdb/#types-of-indexes","title":"Types of indexes :","text":"<ul> <li>B Trees</li> <li>B+ Trees</li> <li> <p>Bit Map Index : take a look at the following  im to understand </p> <ul> <li>When we know that the cardinality of rows in finite (example gender column)</li> </ul> </li> <li> <p>Dense Index :  </p> </li> <li> <p>Sparse Index : </p> <ul> <li>Instead of storing every row in index, we sort the table and store marker at different position. Then in order to find a row, we can decide within which two markers our data will exist.</li> </ul> </li> </ul> <p>Going back to the definition of database index An index is a copy of selected columns of data, from a table, that is designed to enable very efficient search. An index normally includes a \"key\" or direct link to the original row of data from which it was copied, to allow the complete row to be retrieved efficiently.</p>"},{"location":"codeblog/info_bank/indexdb/#how-to-create-an-index","title":"How to create an index","text":"<pre><code>    create index if not exists [Index Name] on [Table Name]([Column Name]);\n</code></pre> <p>Example Queries</p> <p></p> <p></p> <p>Interestingly, we you have a find on a column and you run a query performing pattern match, it wont use the index to search for it</p> <p></p> <p>but</p> <p></p> <p>using the <code>=</code> operator to perform a pattern match, the database will use the index ,, WOW !</p> <p></p> <p>Indexes are cool, they make everything fast ?</p> <p>Only when you are talking about performing read operations, but what about write, update or delete ?</p> <p></p> <p>Because the database knows the end of the table, insert a row at the end it a super simple task But with one index, after insert the data, the database will have to update the index data structure. If we add more indexes and update the more data, the execution time will be higher</p> <p>Also some operations could be faster than others. in case the a tree based or sorted indexes, some additional operations needs to take place in order to balance/sort them in correct order. It could be easy if the balance is slightly disturbed or difficult if a lot of restructuring needs to take place</p>"},{"location":"codeblog/info_bank/indexdb/#how-does-database-engine-decides-with-index-type-to-use","title":"How does database engine decides with index type to use ?","text":"<p>By default, PostgreSQL uses b trees to create index, but you can explicitly mention in the SQL query which type of index you want. For example, in case of storing gender data, because the carnality is finite you can specify to use bitmap index to optimise.</p> <p>But sometimes, database engines are smart and the optimise type of index created on the table according to the data stored <pre><code>    CREATE BITMAP INDEX ON MOCK_DATA2 (gender);\n</code></pre></p> <p></p> <p>As discussed above, we can see below that instead of creating a b tree index, it created a BitMap index, proving the point that database can optimise the index based on data.</p> <p></p> <p>Composite Indexes <pre><code>create index on mock_data4(first,second);\n</code></pre></p> <p>Instead of creating two different index, we can create a composite index. Similar to the concept of composite key, a composite index is created using two or more columns and it is much faster to use.</p> <p></p> <p>Also we can noticed that if we have create a composite index, and if we run a query using only column, it wont use the index.</p> <p></p> <p>Composite Index can be faster to use compared to two different indexes.</p> <p></p>"},{"location":"codeblog/info_bank/indexdb/#problems-with-indexes","title":"Problems With Indexes","text":"<ul> <li>Creating too many indexes can cause unnecessary lookup</li> </ul> <ul> <li>Columns with indexes that are updated frequently also needs to update the index data structure and thus can consume more resources in background</li> <li>In-frequently used indexes consumes disk spaces</li> <li>Restoring Database from backup may take some time to re-create indexes, and you start running queries immediately, you may slow down your system which slows down the process and creating indexes and  \u2026.</li> </ul>"},{"location":"codeblog/info_bank/indexdb/#with-great-power-comes-great-responsibilities","title":"With Great Power Comes Great Responsibilities","text":""},{"location":"codeblog/info_bank/pro_terms/","title":"SWE 101 : Programming Terms Explained in simplest form","text":"<p>What is idempotent again ?</p> <p>Closure, Memoization, Idempotence : Decoding and understanding programming terms one by one in simplest definition</p> <p>All code written in this javascript, but dont worry about the language, syntax is kept super simple. For practise, you can implement them in your favourite programming language.</p> <p>Lets start with first class functions</p>"},{"location":"codeblog/info_bank/pro_terms/#first-class-function","title":"First Class Function","text":"<p>A programming language is said to have first class functions if it treat its functions as first class citizens</p> <p>What are first class citizens : something that can be</p> <ul> <li>passed as an argument</li> <li>returned from a function</li> <li>assigned to a variable</li> </ul> <p>Whatever satisfies the above 3 properties in you programming language can be called as first class citizen. Lets take a look at with examples</p>"},{"location":"codeblog/info_bank/pro_terms/#assigning-function-to-a-variable","title":"Assigning Function to a variable","text":"<pre><code>function square(x) {\n    return x * x\n}\n\n// Assigned to another variable\nlet f = square\n\nconsole.log(square(5))\nconsole.log(f(5))\n</code></pre>"},{"location":"codeblog/info_bank/pro_terms/#passed-as-an-argument-aka-high-order-functions","title":"Passed as an Argument aka High order functions","text":"<pre><code>// sqr the the passed square function\nfunction my_map(sqr, args) { \n   let result = [] \n\n   for (let i = 0; i &lt; args.length; i++) { \n       // the passed function is used here\n       result.push(sqr(args[i])) \n   } \n   return result; \n}\n\n// square function is passed as argument\nlet squares = my_map(square, [1, 2, 3, 4, 5, 6, 7]) \nconsole.log(squares)\n</code></pre>"},{"location":"codeblog/info_bank/pro_terms/#function-as-return-type","title":"Function as Return\u00a0Type","text":"<pre><code>function logger(msg) { \n   function log_message() { \n    console.log(\"Log : \" + msg) \n   } \n   //  this is a function, returning from parent functions\n   return log_message \n} \n\nlogHello = logger(\"hello\") \nlogHello()\n</code></pre> <p>Before moving on, please read the above and try to understand the concept, it would be helpfull</p>"},{"location":"codeblog/info_bank/pro_terms/#closure","title":"Closure","text":"<p>They are similar to functions returned from another function but captures the internal state of parent function at the time of invoked.</p> <ul> <li>A closure is a record storing a function together with an environment, a mapping associating each free variable of the function with the value of storage location to which the name was bound when then the closure was created. ( Kinda formal\u00a0, read below and look at code snippet )</li> <li>A closure, unlike a plain function, allows the function to access those captured and closed variables when the function is invoked outside the scope.</li> </ul> <pre><code>function outer_function() {\n   message = \"hello world\"\n   function inner_function() {\n       console.log (message) // Look at point 2 from definition\n   }\n   return inner_function()\n}\n\n// invoked from outside\nouter_function()\n</code></pre>"},{"location":"codeblog/info_bank/pro_terms/#another-example-of-closure","title":"Another Example of Closure","text":"<pre><code>function outer_function(msg) {\n   message = msg\n   function inner_function() {\n       console.log (message)\n   }\n   return inner_function\n}\n\nlet func = outer_function(\"Hello World\")\nfunc()\n</code></pre>"},{"location":"codeblog/info_bank/pro_terms/#immutable-and-mutable","title":"Immutable and\u00a0Mutable","text":"<pre><code>// strings in js are immutable \n// they cannot be changed once initialised\nlet name = \"uday Yadav\"\nname[0] = \"U\";\n// this makes not difference\nconsole.log(name);\n// still small case 'u'\nconsole.log(name[0]); \n\n// array in js is mutable \n// they can be changed once created\nlet data = [0,2,3,4];\ndata[0] = 1;\nconsole.log(data);\n</code></pre>"},{"location":"codeblog/info_bank/pro_terms/#memoization","title":"Memoization","text":"<p>Some operations are expensive to preform, so we store the results of them in some form of temporary storage and when required to recalculate, first find them in the temporary storage.</p> <pre><code>let cache = {}\n\nfunction expensive_compute(data) {\n\n   if (cache.hasOwnProperty(data)) {\n       console.log(\"answer cache : \"+cache[data])\n       cache[data] = data*data\n       return;\n   }\n   cache[data] = data*data\n   console.log(\"answer : \"+cache[data])\n}\n\nexpensive_compute(4)\nexpensive_compute(10)\nexpensive_compute(4)\nexpensive_compute(16)\nexpensive_compute(10)\n</code></pre>"},{"location":"codeblog/info_bank/pro_terms/#idempotence","title":"Idempotence","text":"<p>The property of certain operations in mathematics and computer science, that can be applied multiple times without changing the result without initial application</p> <p>A good example of understanding an idempotent operation might be locking a car with remote key.</p> <pre><code>log(Car.state) // unlocked\n\nRemote.lock();\nlog(Car.state) // locked\n\nRemote.lock();\nRemote.lock();\nRemote.lock();\nlog(Car.state) // locked)\n</code></pre> <ul> <li> <p><code>lock</code> is an idempotent operation. Even if there are some side effect each time you run lock, like blinking, the car is still in the same locked state, no matter how many times you run lock operation.</p> </li> <li> <p>NON-IDEMPOTENT: If an operation always causes a change in state, like POSTing the same message to a user over and over, resulting in a new message sent and stored in the database every time, we say that the operation is NON-IDEMPOTENT.</p> </li> <li> <p>NULLIPOTENT: If an operation has no side effects, like purely displaying information on a web page without any change in a database (in other words you are only reading the database), we say the operation is NULLIPOTENT. All GETs should be nullipotent.</p> </li> </ul> <p>To understand idempotence more, refer this stackoverflow thread : what is idempotent operation</p>"},{"location":"codeblog/info_bank/pro_terms/#ephemeral","title":"Ephemeral","text":"<p>synonyms to temporary</p>"},{"location":"codeblog/info_bank/pro_terms/#anonymous-functions","title":"Anonymous Functions","text":"<p>Function without a name, also known as lambda function in  Python</p> <pre><code>let arr = [1, 2, 3];\nlet mapped = arr.map(x =&gt; Math.pow(x, 2));\n// x =&gt;  is a function without a name\nconsole.log(mapped);\n</code></pre>"},{"location":"codeblog/info_bank/pro_terms/#predicate","title":"Predicate","text":"<p>Functions that return true or false depending on the input. They usually start with is <pre><code>class Animal {\n   constructor(_type) {\n       this.type = _type;\n   }\n}\n\nfunction makeSound(animal) {\n   if (isCat(animal)) {\n       console.log(\" MEOW ! \");\n       return;\n   }\n   console.log(\" NOT CAT ! \");\n}\n\nfunction isCat(animal) {\n   return animal.type === 'Cat';\n}\n\nlet newCat = new Animal('Cat');\nmakeSound(newCat);\n</code></pre></p>"},{"location":"codeblog/info_bank/pro_terms/#parsing-and-stringify","title":"Parsing and Stringify","text":"<ul> <li>Parsing\u00a0: converting string to some object</li> <li>Stringify\u00a0: converting some object to string</li> </ul> <pre><code>let data = {\n   \"name\": \"Uday Yadav\",\n   \"Gender\": \"Male\"\n}\n\nlet str = JSON.stringify(data)\nconsole.log(str + \"|\" + typeof str)\n\nlet dataReturns = JSON.parse(str)\nconsole.log(dataReturns + \"|\" + typeof dataReturns)\n</code></pre> <p>More about me\u00a0: https://uday-yadav.web.app/</p>"},{"location":"codeblog/info_bank/prxyvsrprxy/","title":"Proxy vs Reverse Proxy","text":"<p>Understanding it easily, once and for all.</p> <p>So you might have come across these 2 terms, proxy and reverse proxy while browsing the internet or going through system settings. But do you really understand the differences \u2026 ? This article will settle the difference between proxy and reverse proxy.</p>"},{"location":"codeblog/info_bank/prxyvsrprxy/#proxy","title":"Proxy","text":"<p>Let's say you want to visit a website ( something.com ) on the internet which is blocked by your ISP or your company or the country you live in.So instead of going through to the site directly, you go to a proxy computer which then goes to <code>www.something.com</code> for you and returns the content from there.</p> <p>According to the wikipedia definition In computer networking, a proxy server is a server application or appliance that acts as an intermediary for requests from clients seeking resources from servers that provide those resources. A proxy server thus functions on behalf of the client when requesting service, potentially masking the true origin of the request to the resource server.</p> <p></p> <p>Now you may ask : - Aren\u2019t the proxy servers also banned from visiting <code>www.somthing.com</code> ? - Or you might be blocked from visiting the proxy server ?</p> <p>Well to answer the latter, proxy servers are usually hosted in the cloud and have dynamic IP or they are just normal computers that aren't blocked. Coming to the first question, proxy servers are usually hosted somewhere where there is no access restriction and can access any site of the internet. Again if you host the proxy server on the same network as you are in or in the same country, then yes, the proxy server will also be blocked from accessing <code>www.something.com</code>.</p> <p>Proxy Servers can be used for  - Monitoring and Filtering  - Content Control Software - Filtering encrypted Data - Bypassing filters and censorship - Improving Performance ( as a cache server )  - Logging events and much more \u2026.</p>"},{"location":"codeblog/info_bank/prxyvsrprxy/#reverse-proxy","title":"Reverse Proxy","text":"<p>Reverse Proxy is something that doesn't show in your system settings or browsing the web but it's something that every developer should know. Let's take an example where you host a website on <code>www.something.com</code> and it became popular. The number of people reaching your website increases dramatically and as new users start coming, your web server starts to slow down and starts dropping connection. Now what do you do ? </p> <p>You decided to upgrade the computer on which it is hosted, well that does solve the problem, but to what extent. Eventually if the traffic increases your server won't be able to handle the users.</p> <p>Then let's say you decided that you will add another server to handle the traffic. But how will you go out and tell everyone and deviate  traffic. How will the user know which server to hit to get access to the website? This is where a reverse proxy comes in.</p> <p>Instead of choosing between which server to go to, the user will hit your reverse proxy and the reverse proxy will deviate some users to <code>webserver1</code> and some users to <code>webserver2</code>. And if you add more servers, you can just tell the address of the newly added servers to reverse proxy. This concept is known as load balancing.</p> <p></p> <p>You may ask, what if the reverse proxy gets overwhelmed, well yes that can happen and does happen, but then we have other methods to handle such massive traffic using DNS based load balancing or breaking your service into smaller parts and hosting them differently. </p> <p>Uses of reverse proxy - Load balancing \u2013 A reverse proxy server can act as a \u201ctraffic cop,\u201d sitting in front of your backend servers and distributing client requests across a group of servers in a manner that maximizes speed and capacity utilization while ensuring no one server is overloaded, which can degrade performance. If a server goes down, the load balancer redirects traffic to the remaining online servers. - Web acceleration \u2013 Reverse proxies can compress inbound and outbound data, as well as cache commonly requested content, both of which speed up the flow of traffic between clients and servers. They can also perform additional tasks such as SSL encryption to take load off of your web servers, thereby boosting their performance. - Security and anonymity \u2013 By intercepting requests headed for your backend servers, a reverse proxy server protects their identities and acts as an additional defense against security attacks. It also ensures that multiple servers can be accessed from a single record locator or URL regardless of the structure of your local area network.</p>"},{"location":"codeblog/info_bank/prxyvsrprxy/#difference-between-proxy-and-reverse-proxy","title":"Difference between proxy and reverse proxy","text":"<p>Though reverse proxy and proxy do the exact same thing, masking the true origin of the user, there is a slight difference in the way the operate</p> <p>Unlike a traditional proxy server, which is used to protect clients, a reverse proxy is used to protect servers. A traditional forward proxy server allows multiple clients to route traffic to an external network. For instance, a business may have a proxy that routes and filters employee traffic to the public Internet. A reverse proxy, on the other hand, routes traffic on behalf of multiple servers.  A reverse proxy effectively serves as a gateway between clients, users, and application servers. It handles all the access policy management and traffic routing, and it protects the identity of the server that actually processes the request.</p>"},{"location":"codeblog/info_bank/uri/","title":"URI | URL | URN","text":""},{"location":"codeblog/info_bank/uri/#the-world-of-uniform-resource-___","title":"The world of Uniform Resource ___","text":"<p>Here the word <code>resource</code> could be anything, take it as a img on your computer for easier understanding</p>"},{"location":"codeblog/info_bank/uri/#uri","title":"URI","text":"<ul> <li><code>URI</code> stands for Uniform Resource Identifier</li> <li>A <code>URI</code> contains two things</li> <li>Name</li> <li>Location</li> <li>We need URI so identify the resource from its name and also be able to locate it using location</li> </ul>"},{"location":"codeblog/info_bank/uri/#url","title":"URL","text":"<ul> <li><code>URL</code> stands for Uniform Resource Locator</li> <li>This is basically the address of the resource.</li> </ul>"},{"location":"codeblog/info_bank/uri/#urn","title":"URN","text":"<ul> <li><code>URL</code> stands for Uniform Resource Name</li> <li>This is basically the name of the resource.</li> </ul> <p>Therefore : <code>URI = URL + URN</code></p> <p>The URI generic syntax consists of a hierarchical sequence of five components</p> <pre><code>URI = scheme:[//authority]path[?query][#fragment]\n</code></pre> <p>where the authority component divides into three subcomponents:</p> <pre><code>authority = [userinfo@]host[:port]\n</code></pre> <p></p> <pre><code>          userinfo       host      port\n          \u250c\u2500\u2500\u2534\u2500\u2500\u2500\u2510 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2510 \u250c\u2534\u2510\n  https://john.doe@www.example.com:123/forum/q/?tag=networking#top\n  \u2514\u2500\u252c\u2500\u2518   \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518 \u2514\u252c\u2518\n  scheme          authority                  path                 query           fragment\n</code></pre> <p>I hope you like this article !</p>"},{"location":"codeblog/info_bank/vue_on_vm/","title":"How to Deploy React/Vue/Angular on a VM","text":"<p>kubernetes would be too overkill</p> <p>In March, i tried learning nginx, a load balancer, reverse proxy and much more. At the same time, i was looking into buying a domain for my portfolio site. Now trying to apply this new super power that i got, i tried to deploy it my static resume site on a virtual machine. How i did it, continue reading the article ...</p>"},{"location":"codeblog/info_bank/vue_on_vm/#step-1-dockerize-your-site","title":"Step 1 : Dockerize your site","text":"<p>I use vite-vue to make my portfolio site. Why you may ask, because i can break down different sections into components and also easier for me to update information. the final build is compact and no one can copy it easily (i am not a celebrity nor a distinguished software engineer).</p> <p>This is my config file : <code>Dockerfile</code>. This would work with react, vue, angular or any framework (hope it works for others)</p> <pre><code>FROM node:15.12.0-alpine3.10 as build-stage\nWORKDIR /app\nCOPY . ./\nRUN yarn install &amp;&amp; yarn run build\n\nFROM nginx as production-stage\nRUN mkdir /app\nCOPY --from=build-stage /app/dist /app\nCOPY nginx.conf /etc/nginx/nginx.conf\n</code></pre> <ul> <li>If you are solving this article, please the check the version of docker base image here. </li> <li>Also look at the final build folder your framework generates, for vue its <code>/dist</code>, else nothing will work</li> </ul> <p>Create another file named <code>.dockerignore</code></p> <pre><code>**/node_modules\n**/dist\n</code></pre> <p>again look at <code>/dist</code></p> <p>Create a file named : <code>nginx.conf</code> file in your project directory, not is your VM's <code>/etc/nginx</code> <pre><code>user  nginx;\nworker_processes  1;\nerror_log  /var/log/nginx/error.log warn;\npid        /var/run/nginx.pid;\nevents {\n  worker_connections  1024;\n}\nhttp {\n  include       /etc/nginx/mime.types;\n  default_type  application/octet-stream;\n  log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                    '$status $body_bytes_sent \"$http_referer\" '\n                    '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n  access_log  /var/log/nginx/access.log  main;\n  sendfile        on;\n  keepalive_timeout  65;\n  server {\n    listen       80;\n    server_name  localhost;\n    location / {\n      root   /app;\n      index  index.html;\n      try_files $uri $uri/ /index.html;\n    }\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n      root   /usr/share/nginx/html;\n    }\n  }\n}\n</code></pre></p>"},{"location":"codeblog/info_bank/vue_on_vm/#create-a-virtual-machine","title":"Create a virtual Machine","text":"<p>Now this is the part where i suppose you have a VM and have a bit of knowledge about it - If you are using AWS EC2, then create a new security group giving access to everyone on port 80 - If you are using Digital Ocean or similar service, then i hope it is done for you </p> <p>After creating a VM, install the following </p> <p><pre><code>sudo apt-get install nginx nano letsencrypt\n</code></pre> - <code>nano</code> for editor, you may also need git.</p> <p>Then run : <code>nginx -s reload</code> and goto the external IP of your VM using browser, you will see nginx's welcome page, if you dont, try restarting the VM or wait for 5 mins else there is some networking problem.</p> <p>All done till here, great</p> <p>Then install docker</p> <pre><code>curl -fsSL https://get.docker.com -o get-docker.sh\nsudo sh get-docker.sh\n</code></pre>"},{"location":"codeblog/info_bank/vue_on_vm/#building-docker-container","title":"Building docker container","text":"<ul> <li>Clone the repo in your VM</li> <li><code>cd</code> into it</li> <li>Run</li> </ul> <pre><code>sudo docker build . -t resume\nsudo docker run -d -p 8080:80 resume\n</code></pre>"},{"location":"codeblog/info_bank/vue_on_vm/#making-it-online","title":"Making it online","text":"<p>If you dont have your own domain name yet, keep reading else skip to next part</p> <ul> <li>As admin, delete the default <code>nginx.conf</code> file in the <code>/etc/nginx</code> folder  <pre><code>sudo rm -f /etc/nginx/nginx.conf\n</code></pre></li> <li>Create a new <code>nginx.conf</code> in the <code>/etc/nginx</code> directory by running</li> </ul> <pre><code>sudo nano /etc/nginx/nginx.conf\n</code></pre> <ul> <li>You have to a super user in order to use this file</li> <li>Paste the following content</li> </ul> <pre><code>http {\n  server {\n    listen 80;\n    location / {\n      proxy_pass http://127.0.0.1:8080/;\n    }\n  }\n}\n\nevents { }\n</code></pre> <p>Save your file, by pressing <code>ctrl+o</code>, confirming it and exit by pressing <code>ctrl+x</code></p> <p>Then run  <pre><code>sudo nginx -s reload\n</code></pre></p> <p>You goto the external IP of your VM, you will see your site </p>"},{"location":"codeblog/info_bank/vue_on_vm/#if-you-have-your-own-domain","title":"If you have your own domain","text":"<p>Run the following to generate temp certificate</p> <pre><code>sudo certbot certonly --standalone\n</code></pre> <p>Go through all the steps</p> <p>Keys are located at : </p> <pre><code>/etc/letsencrypt/live/[ dns ]/fullchain.pem\n/etc/letsencrypt/live/[ dns ]/privkey.pem\n</code></pre> <p>open the <code>nginx.conf</code> in <code>/etc/nginx</code> folder and replace the content with <code>{dns without http and www}</code></p> <pre><code>http {\n    server {\n        listen 80;\n        listen 443 ssl http2;\n        ssl_certificate /etc/letsencrypt/live/{dns without http and www}/fullchain.pem;\n        ssl_certificate_key /etc/letsencrypt/live/{dns without http and www}/privkey.pem;\n        ssl_protocols TLSv1.3;\n        location / {\n          proxy_pass http://127.0.0.1:8080/;\n        }\n    }\n\n}\n\nevents { }\n</code></pre> <p>Run <code>sudo nginx -s reload</code> and wait and check the domain</p> <p>Hope you like, if you find any problem, error, please comment below</p>"},{"location":"codeblog/java/threadsintro/","title":"Java Threads","text":"<p>A Thread is a small set of instructions designed to be scheduled and executed by the CPU independently of the parent process. To run the process in another thread, you the support of both the operating system and the process. When you create another thread, JVM communicates OS to create a new thread which can then run on the \"multi-threaded CPU\". Well this article isn't about explain threads, it's about how you can play with them in Java</p>"},{"location":"codeblog/java/threadsintro/#threads-are-everywhere-by-default","title":"Threads are everywhere by default","text":"<ul> <li>When write and run a simple java program, JVM is creating the main thread for you to print hello world</li> </ul> <pre><code>public class Solution {\n\n    public static void main(String[] args) throws Exception {\n        System.out.println(\"hello world\");\n        throw new Exception();\n    }\n}\n\n// output : \nhello world\nException in thread \"main\" java.lang.Exception\n        at Solution.main(Solution.java:5)\n</code></pre> <p>If you read the error message carefully, it says <code>Exception in thread \"main\"</code> , hence proved ...</p>"},{"location":"codeblog/java/threadsintro/#how-to-create-a-thread","title":"How to create a thread ?","text":"<p>Well, cuz Java is an Object-Oriented Language, everything is wrapped in OOP concepts. To run a method of some class in-parallel</p> <ul> <li>Extend the class from the Thread class </li> <li>Create a method overriding the run() method</li> </ul> <p>This run method is what is executed separately in a thread.</p> <p>Here is an example :</p> <pre><code>class Hi extends Thread {\n    @Override\n    public void run() {\n        for (int i = 1; i &lt; 5; i++) {\n            System.out.println(\"hi\");\n\n            // just sleeping for some time\n            try {Thread.sleep(400);} catch (Exception e) {}\n        }\n    }\n}\n\npublic class App {\n    public static void main(String[] args) {\n        Hi obj1 = new Hi();\n        obj1.start();\n    }\n}\n</code></pre> <p>To run two thread of seperate class</p> <pre><code>class Hi extends Thread {\n    @Override\n    public void run() {\n        for (int i = 1; i &lt; 5; i++) {\n            System.out.println(\"hi\");\n\n            try { Thread.sleep(400); } catch (Exception e) {}\n        }\n\n    }\n}\n\nclass Hello extends Thread {\n    public void run() {\n        for (int i = 1; i &lt; 5; i++) {\n            System.out.println(\"hello\");\n\n            try { Thread.sleep(400); } catch (Exception e) {}\n        }\n    }\n}\n\npublic class App {\n    public static void main(String[] args) {\n        Hi obj1 = new Hi();\n        Thread obj2 = new Hello();\n\n        obj1.start();\n        obj2.start();\n    }\n}\n</code></pre> <p>When you call the <code>.start()</code> method, it will execute the <code>run()</code> method in a seperate thread.</p> <p>Well becuase java doesnt support mulitple inheritanc, if you ever have to inherit from another class, you wont be able to do it. To overcome this limitation/feature  we can implement the <code>Runnable</code> interface</p> <pre><code>class Hi implements Runnable {\n    public void run() {\n        for (int i = 1; i &lt; 5; i++) {\n            System.out.println(\"hi\");\n\n            try { Thread.sleep(400); } catch (Exception e) {}\n        }\n    }\n}\n\nclass Hello implements Runnable {\n    public void run() {\n        for (int i = 1; i &lt; 5; i++) {\n            System.out.println(\"hello\");\n\n            try { Thread.sleep(400); } catch (Exception e) {}\n        }\n    }\n}\n\npublic class App {\n    public static void main(String[] args) {\n        Runnable obj1 = new Hi();\n        Runnable obj2 = new Hello();\n\n        Thread t1 = new Thread(obj1);\n        Thread t2 = new Thread(obj2);\n\n        t1.start();\n        t2.start();\n    }\n}\n</code></pre> <p>The only difference here is you implement the Runnable interface, create objects of the Thread class passing the objects implementing Runnable, and call the start method on the thread object, which in--return executes the <code>.run()</code> methods.</p>"},{"location":"codeblog/java/threadsintro/#properties-of-a-thread-class","title":"Properties of a Thread Class","text":"<ul> <li><code>getName() : String</code>  gets you the name of the thread</li> <li><code>setName(String name)</code> : set name of a thread</li> <li><code>isAlive() : Boolean</code> whether the thread is active or not</li> <li><code>getId() : Long</code> get the execution id of the thread</li> <li><code>getPriority()</code> : get the priority of thread </li> <li><code>setPriority(int num)</code> : on a scale of 1-10</li> <li>Predefined ENUMS<ul> <li><code>Thread.MAX_PRIORITY</code> = 10</li> <li><code>Thread.MIN_PRIORITY</code> = 1</li> <li><code>Thread.NORM_PRIORITY</code> = 5</li> </ul> </li> </ul> <p>For more, refer to documentation : https://download.java.net/java/early_access/loom/docs/api/java.base/java/lang/Thread.html</p> <pre><code>class Hi extends Thread {\n    public void run() {\n        for (int i = 1; i &lt; 5; i++) {\n            try { Thread.sleep(400); } catch (Exception e) { }\n        }\n    }\n}\n\npublic class App {\n    public static void main(String[] args) throws InterruptedException {\n        Hi obj1 = new Hi();\n        obj1.start();\n\n        System.out.println(\"Name : \" + obj1.getName());\n        var threadName = obj1.getName();\n        System.out.println(threadName + \" isAlive  : \" + obj1.isAlive());\n        System.out.println(threadName + \" threadId : \" + obj1.getId());\n        System.out.println(threadName + \" priority : \" + obj1.getPriority());\n\n\n        System.out.println(Thread.MAX_PRIORITY);\n        System.out.println(Thread.MIN_PRIORITY);\n        System.out.println(Thread.NORM_PRIORITY);\n\n        obj1.join();\n    }\n}\n</code></pre>"},{"location":"codeblog/java/threadsintro/#joining-threads","title":"Joining Threads","text":"<p>When you spin off a thread, you also have to wait for it to finish its task before moving on to avoid errors/exception</p> <pre><code>class App {\n    public static void main(String[] args) {\n\n        Thread obj1 = new Thread(() -&gt; {\n            for (int i = 1; i &lt; 5; i++) {\n                System.out.println(Thread.currentThread().getName());\n                try { Thread.sleep(400); } catch (Exception e) {}\n            }\n        }, \"Thread 1\");\n\n        Thread obj2 = new Thread(() -&gt; {\n            for (int i = 1; i &lt; 5; i++) {\n                System.out.println(Thread.currentThread().getName());\n                try { Thread.sleep(400); } catch (Exception e) {}\n            }\n        }, \"Thread 2\");\n\n        obj1.start();\n        obj2.start();\n\n        try {\n            obj1.join();\n            obj2.join();\n        } catch (Exception e) {\n            System.out.println(\"execption\");\n        }\n\n        System.out.println(\"bye\");\n    }\n}\n</code></pre>"},{"location":"codeblog/java/threadsintro/#synchronizing-threads","title":"Synchronizing Threads","text":"<pre><code>class DataClass {\n    int num;\n    boolean valueSet = false;\n\n    public synchronized void getNum() {\n        while (!valueSet) {\n            try {\n                wait();\n            } catch (Exception e) {\n            }\n        }\n        System.out.println(\"get : \" + num);\n        valueSet = false;\n        notify();\n    }\n\n    public synchronized void setNum(int num) {\n        while (valueSet) {\n            try {\n                wait();\n            } catch (Exception e) {\n            }\n        }\n\n        this.num = num;\n        System.out.println(\"set : \" + num);\n        valueSet = true;\n        notify();\n    }\n}\n\nclass Producer implements Runnable {\n\n    DataClass dataClass;\n\n    public Producer(DataClass data) {\n        this.dataClass = data;\n    }\n\n    @Override\n    public void run() {\n        int i = 0;\n        while (true) {\n            dataClass.setNum(i++);\n            try {\n                Thread.sleep(800);\n            } catch (Exception e) {\n                System.out.println(\"exception\");\n            }\n        }\n    }\n}\n\nclass Consumer implements Runnable {\n\n    DataClass dataClass;\n\n    public Consumer(DataClass data) {\n        this.dataClass = data;\n    }\n\n    @Override\n    public void run() {\n        while (true) {\n            dataClass.getNum();\n            try {\n                Thread.sleep(1000);\n            } catch (Exception e) {\n                System.out.println(\"exception\");\n            }\n        }\n    }\n}\n\npublic class App {\n    public static void main(String[] args) {\n        DataClass dataClass = new DataClass();\n        var producer = new Producer(dataClass);\n        var consumer = new Consumer(dataClass);\n\n        Thread t1 = new Thread(producer);\n        Thread t2 = new Thread(consumer);\n\n        t1.start();\n        t2.start();\n    }\n}\n</code></pre>"},{"location":"codeblog/js/reacthooks/","title":"React Hooks for beginners","text":""},{"location":"codeblog/js/reacthooks/#what-are-hooks","title":"What are Hooks","text":"<p>React hooks are like Anchor ( same as what ships drop in the ocean to attach the ship and ocean floor) between React state (ocean floor) and life-cycle features ( ship ) of functional components.</p> <ul> <li>Only work with function based components, not with class based components.</li> <li>Both arrow and regular function component works</li> <li>Cannot nest hooks inside loops, conditions or nested functions</li> </ul>"},{"location":"codeblog/js/reacthooks/#usestate","title":"<code>useState()</code>","text":"<p><code>useState</code> hook provides you with functionality to set state for a variable and automatically update the DOM with the new state</p> <p></p>"},{"location":"codeblog/js/reacthooks/#how-to-import","title":"how to import :","text":"<pre><code>import React, {useState} from \"react\";\n// or \nReact.useState;\n</code></pre>"},{"location":"codeblog/js/reacthooks/#example-usestate","title":"example <code>useState</code>","text":"<pre><code>import React, { useState } from 'react'\n\nlet count1 = 0;\n\nfunction App() {\n\n  const [count, setCount] = useState(0);\n\n  let count2 = 0;\n\n  return (\n    &lt;div className='container mt-3'&gt;\n      &lt;h3&gt;Hello World to React Hooks&lt;/h3&gt;\n\n      &lt;h4&gt;Count : {count}&lt;/h4&gt;\n      &lt;h4&gt;Count1 : {count1}&lt;/h4&gt;\n      &lt;h4&gt;Count2 : {count2}&lt;/h4&gt;\n\n      &lt;button className='btn btn-info' onClick={() =&gt; {\n        setCount(count + 1);\n\n        console.log(`count : ${count} | count1 : ${count1}  count2 :${count2}`);\n\n        count1 = count1 + 1;\n        count2 = count2 + 1;\n      }} &gt;Add here&lt;/button&gt;\n    &lt;/div&gt;\n  )\n}\n\nexport default App\n</code></pre> <p>In this code snippet, <code>count</code> and <code>count1</code> will be updated both as variable as well in <code>DOM</code>. But <code>count2</code> will always be 1 (because of +1 operation in  <code>button.onClick</code> ) as whenever any data is changed in a react component, the whole component is re rendered. This is the reason why components exists.</p> <p>Now you may ask, we can declare variables in global state and not use <code>useState</code>. Well declaring global variables in all programming languages are considered as bad practice except for some cases. Refer :</p> <ul> <li>https://www.tutorialspoint.com/why-are-global-variables-bad-in-c-cplusplus</li> <li>https://dev.to/mervinsv/why-global-variables-are-bad-4pj</li> </ul> <p><code>useState</code> provides a consistent state without even if the component re renders.</p>"},{"location":"codeblog/js/reacthooks/#usestate-for-objects","title":"<code>useState</code> for objects","text":"<pre><code>import React, { useState } from 'react'\n\nfunction App() {\n\n  const [{ counter1, counter2 }, setCounter] = useState({ counter1: 0, counter2: 20 })\n\n  return (\n    &lt;div className='container mt-3'&gt;\n      &lt;div className='container'&gt;\n\n        &lt;h3&gt;Counter1 : {counter1}&lt;/h3&gt;\n        &lt;h3&gt;Counter2 : {counter2}&lt;/h3&gt;\n\n{/* this doesnt not work becuz whenever you update state, you need to update the whole object */}\n{/* Over here, we havent included the counter2 in the setCounter function. */}\n\n        &lt;button className=\"btn btn-primary\" onClick={() =&gt;\n          setCounter(currentState =&gt; ({ counter1: currentState.counter1 + 1 }))}&gt;Add&lt;/button&gt; &amp;nbsp;\n\n{/* this will also not work because spread operator in objects comes first \n    unlike in functions, where spread operator comes last. */}\n\n{/* Correct Code */}\n                &lt;button className=\"btn btn-danger\" onClick={() =&gt; setCounter(currentState =&gt; ({\n          ...currentState,          \n          counter1: currentState.counter1 - 1,\n        }))}&gt;Subtract&lt;/button\n\n      &lt;/div&gt;\n    &lt;/div&gt;\n  )\n}\n\nexport default App;\n</code></pre>"},{"location":"codeblog/js/reacthooks/#another-example-usestate","title":"Another Example <code>useState()</code>","text":"<pre><code>import React, { useState } from \"react\";\n\nfunction App() {\n\n  const [name, setName] = useState(localStorage.getItem(\"name\") || \"\");\n\n  return (\n    &lt;div className=\"App\"&gt;\n\n      &lt;div className=\"container mt-3\"&gt;\n        &lt;input name=\"name\" value={name} onChange={e =&gt; {\n          setName(e.target.value)\n          localStorage.setItem(\"name\", e.target.value)\n        }} className='form-control' /&gt;\n\n        &lt;h3&gt;Name : {name}&lt;/h3&gt;\n      &lt;/div&gt;\n\n    &lt;/div &gt;\n  );\n}\n\nexport default App;\n</code></pre>"},{"location":"codeblog/js/reacthooks/#useeffect","title":"<code>useEffect()</code>","text":"<ul> <li>executes every time a component is rendered</li> <li><code>useEffect</code> when passed no dependency works as <code>componentDidMount</code></li> <li>return arrow function from <code>useEffect</code> is a clean up function</li> <li>many <code>useEffect</code> hook can co exists in one component</li> </ul> <pre><code>import React, { useState, useEffect } from \"react\";\nimport HelloWorld from \"./component/HelloWorld\";\n\nfunction App() {\n\n  const [count, setCount] = useState(0);\n  const [showComp, setComp] = useState(false);\n\n  useEffect(() =&gt; {\n    console.log(\"Rendering ...\")\n  })\n\n  return (\n    &lt;div className=\"App\"&gt;\n\n      &lt;br /&gt;\n\n      &lt;div className='container mt-3'&gt;\n        &lt;h3&gt;Count : {count}&lt;/h3&gt;\n        &lt;button className=\"btn btn-primary\" onClick={() =&gt; setCount(count + 1)}&gt;Add&lt;/button&gt; &amp;nbsp;\n      &lt;/div&gt;\n\n      &lt;br /&gt;\n\n      &lt;div className='container'&gt;\n        &lt;button onClick={() =&gt; setComp(!showComp)} className=\"btn btn-info\"&gt; toggle &lt;/button&gt;\n        {showComp &amp;&amp; &lt;HelloWorld /&gt;}\n      &lt;/div&gt;\n\n    &lt;/div &gt;\n  );\n}\n\nexport default App;\n\n// in src/component/HelloWorld.jsx\n\nimport React from 'react'\n\nfunction HelloWorld() {\n    return (\n        &lt;div className='container mt-3'&gt;\n            &lt;h2&gt;HelloWorld component&lt;/h2&gt;\n        &lt;/div&gt;\n    )\n}\n\nexport default HelloWorld\n</code></pre> <p>Run the code and look at the console ... Doesn't matter whether you increment the counter or toggle the component, the whole component get re-render.</p> <p>To Stop this, modify <code>useEffect</code> as following</p> <pre><code>useEffect(() =&gt; {\n    console.log(\"Rendering ...\")\n}, [])\n</code></pre> <p>Now the rendering will print on the console only when you refresh the page. Try modifying code as following</p> <pre><code>useEffect(() =&gt; {\n    console.log(\"Rendering ...\")\n}, [count])\n</code></pre> <p>Now the component will re render only when count is updated</p> <p>This is what <code>useEffect</code> do, to only update / rendering the component when required. There is also a way to clean up the component. Try by modifying <code>HelloWorld.jsx</code></p> <pre><code>import React from 'react'\n\nfunction HelloWorld() {\n\n    React.useEffect(() =&gt; {\n        console.log('HelloWorld')\n        return () =&gt; {\n            console.log('GoodByeWorld')\n        }\n    }, [])\n\n    return (\n        &lt;div className='container mt-3'&gt;\n            &lt;h2&gt;HelloWorld component&lt;/h2&gt;\n        &lt;/div&gt;\n    )\n}\n\nexport default HelloWorld\n\n// and App.jsx\n\nuseEffect(() =&gt; {\n    console.log(\"Rendering ...\")\n},[])\n</code></pre> <p>Now try to toggle switch, you the message with the component is loaded on <code>DOM</code> and when its <code>unmounting</code>. This works similiar to <code>componentWillMount</code> and <code>componentWillUnmount</code></p>"},{"location":"codeblog/js/reacthooks/#useref","title":"<code>useRef</code>","text":"<p>When you simply wants to put some html element or react component to focus</p> <p>Best try running this code</p> <pre><code>import React, { useRef } from \"react\";\n\nfunction App() {\n\n  const inputRef = useRef();\n\n  return (\n    &lt;div className=\"App\"&gt;\n\n      &lt;div className=\"container mt-3\"&gt;\n\n        &lt;input ref={inputRef} name=\"name\" value={name} onChange={e =&gt; {\n          setName(e.target.value)\n          localStorage.setItem(\"name\", e.target.value)\n        }}\n          className='form-control'\n        /&gt;\n\n        &lt;br /&gt;\n\n        &lt;button onClick={() =&gt; {\n          inputRef.current.focus();\n        }} className=\"btn btn-success\" &gt;Get focus&lt;/button&gt;\n\n      &lt;/div&gt;\n\n    &lt;/div&gt;\n  );\n}\n\nexport default App;\n</code></pre> <p></p>"},{"location":"codeblog/js/reacthooks/#usereducer","title":"<code>useReducer</code>","text":"<p>Diagram explains this hook the best</p> <p></p> <pre><code>import React, { useReducer } from \"react\";\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'increment': return state + 1;\n    case 'decrement': return state - 1;\n    default: return state;\n  }\n}\n\nfunction App() {\n\n  const [count, dispatch] = useReducer(reducer, 0);\n\n  return (\n    &lt;div className=\"App\"&gt;\n\n      &lt;div className='container' &gt;\n        &lt;h2&gt; count : {count} &lt;/h2&gt;\n        &lt;button onClick={() =&gt; dispatch({ type: 'increment' })} className='btn btn-primary' &gt; increment &lt;/button&gt;\n        &lt;button onClick={() =&gt; dispatch({ type: 'decrement' })} className='btn btn-danger' &gt; increment &lt;/button&gt;\n\n      &lt;/div&gt;\n\n    &lt;/div &gt;\n  );\n}\n\nexport default App;\n</code></pre>"},{"location":"codeblog/js/reacthooks/#usecontext","title":"<code>useContext</code>","text":"<p>Diagram explains this hook the best</p> <p></p> <pre><code>// App.js\nimport React from 'react'\nimport HelloWorld from \"./components/HelloWorld\"\nimport About from './component/About'\nimport { UserContext } from './UserContext'\n\nfunction App() {\n  return (\n    &lt;div&gt;\n      &lt;UserContext.Provider value='super man'&gt;\n        &lt;HelloWorld /&gt;\n      &lt;/UserContext.Provider&gt;\n    &lt;/div&gt;\n  )\n}\n\nexport default App\n\n// Hello World component\n\nimport React, { useContext } from 'react'\nimport { UserContext } from '../UserContext'\n\nfunction HelloWorld() {\n\n    const msg = useContext(UserContext);\n\n    return (\n        &lt;div className='container mt-3'&gt;\n            &lt;h3&gt;HelloWorld component : {msg}&lt;/h3&gt;\n        &lt;/div&gt;\n    )\n}\n\nexport default HelloWorld\n\n// About component\n\nimport React, { useContext } from 'react'\nimport { UserContext } from '../UserContext'\n\nfunction About() {\n\n    const msg = useContext(UserContext);\n\n    return (\n        &lt;div className='container mt-3'&gt;\n            &lt;h3&gt;About component : {msg}&lt;/h3&gt;\n        &lt;/div&gt;\n    )\n}\n\nexport default About\n\n// Usercontext.js \n\nimport { createContext } from \"react\";\n\nexport const UserContext = createContext(null);\n</code></pre>"},{"location":"codeblog/js/reacthooks/#usememo","title":"<code>useMemo</code>","text":"<p>Memo or Memoization is when you remember the result on something instead of computing it again and again when needed (until not changed)</p> <p><code>useMemo</code> in react is used for functions that are expensive and we dont want them to run again and again. It is similar to <code>useEffect</code> hook but used more for functions, whereas useEffect is used as managing state in component lifecycle, even tho they are very similiar.</p> <pre><code>import React from 'react'\n\nfunction expensivePhoneFunc (product) {\n  console.log(\"expensivePhoneFunc\")\n  return product[0];\n}\n\nfunction App() {\n\n  let product = [{\n    name: 'Phone XL',\n    price: 100\n  },\n  {\n    name: 'Phone Mini',\n    price: 80\n  },\n  {\n    name: 'Phone Standard',\n    price: 60\n  }]\n\n  const [count , setCount] = React.useState(0);\n\n  const expensivePhone = React.useMemo( () =&gt; {\n    return expensivePhoneFunc(product);\n  },[])\n\n  return (\n    &lt;div className='container mt-3'&gt;\n      &lt;h3&gt;Product : {expensivePhone.name}&lt;/h3&gt;\n      &lt;h4&gt;Price : {expensivePhone.price}&lt;/h4&gt;\n      &lt;br /&gt;\n      &lt;h3&gt;Count : {count}&lt;/h3&gt;\n      &lt;button className='btn btn-primary' onClick={() =&gt; setCount(count + 1)}&gt;+&lt;/button&gt;\n    &lt;/div&gt;\n  )\n}\n\nexport default App\n</code></pre>"},{"location":"codeblog/js/reacthooks/#usecallback","title":"<code>useCallback</code>","text":"<p>It is the <code>useMemo</code> alternative but for functions, rather than the result returned from them. Instead of running the function again and again. Its is mostly used along with useMemo.</p> <pre><code>import React, {useCallback} from 'react'\nimport HelloWorld from './component/HelloWorld'\n\nfunction App() {\n\n  const [count, setCount] = React.useState(0);\n\n  const increment = useCallback(() =&gt; {\n    setCount(c =&gt; c + 1);\n  }, [setCount]);\n\n\n  return (\n    &lt;div&gt;\n      &lt;HelloWorld increment={increment} /&gt;\n      &lt;h3&gt;Count : {count}&lt;/h3&gt;\n    &lt;/div&gt;\n  )\n}\n\nexport default App\n\n// HelloWorld.jsx\n\nimport React from 'react'\n\nconst HelloWorld = React.memo(({ increment }) =&gt; {\n\n    console.log(\"hello\")\n\n    return (\n        &lt;div className='container mt-3'&gt;\n            &lt;h3&gt;HelloWorld component&lt;/h3&gt;\n            &lt;button onClick={increment}&gt;Hello World&lt;/button&gt;\n        &lt;/div&gt;\n    )\n})\n\nexport default HelloWorld\n</code></pre>"},{"location":"codeblog/js/reactscratch/","title":"React.js From Scratch","text":"<p>Intro: React is an Open Source view library created and maintained by Facebook. It's a great tool to render the User Interface (UI) of modern web applications.</p> <p>React uses a syntax extension of JavaScript called JSX that allows you to write HTML directly within JavaScript. This has several benefits. It lets you use the full programmatic power of JavaScript within HTML, and helps to keep your code readable. For the most part, JSX is similar to the HTML that you have already learned, however there are a few key differences that will be covered throughout these challenges.</p> <p>For instance, because JSX is a syntactic extension of JavaScript, you can actually write JavaScript directly within JSX. To do this, you simply include the code you want to be treated as JavaScript within curly braces: <code>{ 'this is treated as JavaScript code' }</code>. Keep this in mind, since it's used in several future challenges.</p>"},{"location":"codeblog/js/reactscratch/#jsx","title":"JSX","text":"<pre><code>const JSX = &lt;h1&gt;Hello JSX&lt;/h1&gt;;\nconst JS = &lt;div&gt;\n          &lt;h1&gt;Hello&lt;/h1&gt;\n          &lt;p&gt;Hello from p tag&lt;/p&gt;\n      &lt;/div&gt;\n</code></pre>"},{"location":"codeblog/js/reactscratch/#comment","title":"Comment","text":"<pre><code>const JSX = (\n  &lt;div&gt;\n    &lt;h1&gt;This is a block of JSX&lt;/h1&gt;\n    &lt;p&gt;Here's a subtitle&lt;/p&gt;\n    {/* this is a comment */}\n  &lt;/div&gt;\n);\n</code></pre>"},{"location":"codeblog/js/reactscratch/#render-html-elements-to-the-dom","title":"Render HTML Elements to the DOM","text":"<p>So far, you've learned that JSX is a convenient tool to write readable HTML within JavaScript. With React, we can render this JSX directly to the HTML DOM using React's rendering API known as ReactDOM.</p> <p>ReactDOM offers a simple method to render React elements to the DOM which looks like this: <code>ReactDOM.render(componentToRender, targetNode)</code>, where the first argument is the React element or component that you want to render, and the second argument is the DOM node that you want to render the component to.</p> <p>As you would expect, <code>ReactDOM.render()</code> must be called after the JSX element declarations, just like how you must declare variables before using them.</p> <pre><code>const JSX = (\n  &lt;div id=\"challenge-node\"&gt;\n    &lt;h1&gt;Hello World&lt;/h1&gt;\n    &lt;p&gt;Lets render this to the DOM&lt;/p&gt;\n  &lt;/div&gt;\n);\n// change code below this line\nReactDOM.render(JSX,document.getElementById(\"challenge-node\"))\n</code></pre>"},{"location":"codeblog/js/reactscratch/#define-an-html-class-in-jsx","title":"Define an HTML Class in JSX","text":"<p>Now that you're getting comfortable writing JSX, you may be wondering how it differs from HTML.</p> <p>So far, it may seem that HTML and JSX are exactly the same.</p> <p>One key difference in JSX is that you can no longer use the word <code>class</code> to define HTML classes. This is because <code>class</code> is a reserved word in JavaScript. Instead, JSX uses <code>className</code>.</p> <p>In fact, the naming convention for all HTML attributes and event references in JSX become camelCase. For example, a click event in JSX is <code>onClick</code>, instead of <code>onclick</code>. Likewise, <code>onchange</code> becomes <code>onChange</code>. While this is a subtle difference, it is an important one to keep in mind moving forward.</p> <pre><code>const JSX = (\n  &lt;div className=\"myDiv\"&gt;\n    &lt;h1&gt;Add a class to this div&lt;/h1&gt;\n  &lt;/div&gt;\n);\n</code></pre>"},{"location":"codeblog/js/reactscratch/#self-closing-jsx-tags","title":"Self-Closing JSX Tags","text":"<pre><code>const JSX = (\n  &lt;div&gt;\n    &lt;h2&gt;Welcome to React!&lt;/h2&gt; &lt;br /&gt;\n    &lt;p&gt;Be sure to close all tags!&lt;/p&gt;\n    &lt;hr /&gt;\n  &lt;/div&gt;\n);\n</code></pre>"},{"location":"codeblog/js/reactscratch/#create-a-stateless-functional-component","title":"Create a Stateless Functional Component","text":"<p>Components are the core of React. Everything in React is a component and here you will learn how to create one.</p> <p>There are two ways to create a React component. The first way is to use a JavaScript function. Defining a component in this way creates a stateless functional component. The concept of state in an application will be covered in later challenges. For now, think of a stateless component as one that can receive data and render it, but does not manage or track changes to that data.</p> <p>To create a component with a function, you simply write a JavaScript function that returns either JSX or <code>null</code>. One important thing to note is that React requires your function name to begin with a capital letter.</p> <pre><code>const MyComponent = function() {\n  return (\n    &lt;div&gt;\n      Hello\n    &lt;/div&gt;\n  )\n}\n</code></pre>"},{"location":"codeblog/js/reactscratch/#create-a-react-component","title":"Create a React Component","text":"<p>The other way to define a React component is with the ES6 <code>class</code> syntax. In the following example, <code>Kitten</code> extends <code>React.Component</code>:</p> <pre><code>  const ChildComponent = () =&gt; {\n    return (\n      &lt;div&gt;\n        &lt;p&gt;I am the child&lt;/p&gt;\n      &lt;/div&gt;\n    );\n  };\n\n  class ParentComponent extends React.Component {\n    constructor(props) {\n      super(props);\n    }\n    render() {\n      return (\n        &lt;div&gt;\n          &lt;h1&gt;I am the parent&lt;/h1&gt;\n          &lt;ChildComponent /&gt;\n        &lt;/div&gt;\n      );\n    }\n  };\n</code></pre>"},{"location":"codeblog/js/reactscratch/#react-to-render-nested-components","title":"React to Render Nested Components","text":"<pre><code>const TypesOfFruit = () =&gt; {\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Fruits:&lt;/h2&gt;\n      &lt;ul&gt;\n        &lt;li&gt;Apples&lt;/li&gt;\n        &lt;li&gt;Blueberries&lt;/li&gt;\n        &lt;li&gt;Strawberries&lt;/li&gt;\n        &lt;li&gt;Bananas&lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  );\n};\n\nconst Fruits = () =&gt; {\n  return (\n    &lt;div&gt;\n        &lt;TypesOfFruit /&gt;\n    &lt;/div&gt;\n  );\n};\n\nclass TypesOfFood extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;h1&gt;Types of Food:&lt;/h1&gt;\n        &lt;Fruits /&gt;\n      &lt;/div&gt;\n    );\n  }\n};\n</code></pre> <p>Another Example</p> <pre><code>class Fruits extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      &lt;div&gt;\n          &lt;h2&gt;Fruits:&lt;/h2&gt;\n          &lt;NonCitrus /&gt;\n          &lt;Citrus /&gt;\n      &lt;/div&gt;\n    );\n  }\n};\n\nclass TypesOfFood extends React.Component {\n  constructor(props) {\n     super(props);\n  }\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;h1&gt;Types of Food:&lt;/h1&gt;\n          &lt;Fruits /&gt;\n        &lt;Vegetables /&gt;\n      &lt;/div&gt;\n    );\n  }\n};\n</code></pre>"},{"location":"codeblog/js/reactscratch/#pass-props-to-a-stateless-functional-component","title":"Pass Props to a Stateless Functional Component","text":"<p>In React, you can pass props, or properties, to child components. Say you have an <code>App</code> component which renders a child component called <code>Welcome</code> which is a stateless functional component</p> <pre><code>const CurrentDate = (props) =&gt; {\n  return (\n    &lt;div&gt;\n     &lt;p&gt;The current date is: { props.date }&lt;/p&gt;\n    &lt;/div&gt;\n  );\n};\n\nclass Calendar extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;h3&gt;What date is it?&lt;/h3&gt;\n        &lt;CurrentDate date={Date()}/&gt;\n      &lt;/div&gt;\n    );\n  }\n};\n</code></pre>"},{"location":"codeblog/js/reactscratch/#pass-an-array-as-props","title":"Pass an Array as Props","text":"<pre><code>const List = (props) =&gt; {\n  { /* change code below this line */ }\n  return &lt;p&gt;{props.tasks.join(\", \")}&lt;/p&gt;\n  { /* change code above this line */ }\n};\n\nclass ToDo extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;h1&gt;To Do Lists&lt;/h1&gt;\n        &lt;h2&gt;Today&lt;/h2&gt;\n        { /* change code below this line */ }\n        &lt;List tasks={[\"1\",\"1\",\"1\"]} /&gt;\n        &lt;h2&gt;Tomorrow&lt;/h2&gt;\n        &lt;List tasks={[\"1\",\"1\",\"1\"]}/&gt;\n        { /* change code above this line */ }\n      &lt;/div&gt;\n    );\n  }\n};\n</code></pre>"},{"location":"codeblog/js/reactscratch/#default-props","title":"Default props","text":"<pre><code>const ShoppingCart = (props) =&gt; {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Shopping Cart Component&lt;/h1&gt;\n      &lt;p&gt;{props.items}&lt;/p&gt;\n    &lt;/div&gt;\n  )\n};\n// change code below this line\nShoppingCart.defaultProps = {\n  items : 0\n}\n</code></pre>"},{"location":"codeblog/js/reactscratch/#overiding-default-props","title":"Overiding Default props","text":"<pre><code>const Items = (props) =&gt; {\n  return &lt;h1&gt;Current Quantity of Items in Cart: {props.quantity}&lt;/h1&gt;\n}\nItems.defaultProps = {\n  quantity: 0\n}\n\nclass ShoppingCart extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return &lt;Items quantity={10}/&gt;\n  }\n};\n</code></pre>"},{"location":"codeblog/js/reactscratch/#use-proptypes-to-define-the-props-you-expect","title":"Use PropTypes to Define the Props You Expect","text":"<p>Importing</p> <pre><code>import PropTypes from 'prop-types';\n</code></pre> <p>Code :</p> <pre><code>const Items = (props) =&gt; {\n  return &lt;h1&gt;Current Quantity of Items in Cart: {props.quantity}&lt;/h1&gt;\n};\n\nItems.propTypes = {\n  quantity : PropTypes.number.isRequired\n}\n\nItems.defaultProps = {\n  quantity: 0\n};\n\nclass ShoppingCart extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return &lt;Items /&gt;\n  }\n};\n</code></pre>"},{"location":"codeblog/js/reactscratch/#access-props-using-thisprops","title":"Access Props Using this.props","text":"<p>The ES6 class component uses a slightly different convention to access props.</p> <p>Anytime you refer to a class component within itself, you use the <code>this</code> keyword. To access props within a class component, you preface the code that you use to access it with <code>this</code>. For example, if an ES6 class component has a prop called <code>data</code>, you write <code>{this.props.data}</code> in JSX.</p> <pre><code>class ReturnTempPassword extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n        &lt;div&gt;\n           &lt;p&gt;Your temporary password is: &lt;strong&gt;{this.props.tempPassword}&lt;/strong&gt;&lt;/p&gt;\n        &lt;/div&gt;\n    );\n  }\n};\n\nclass ResetPassword extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n        &lt;div&gt;\n          &lt;h2&gt;Reset Password&lt;/h2&gt;\n          &lt;h3&gt;We've generated a new temporary password for you.&lt;/h3&gt;\n          &lt;h3&gt;Please reset this password from your account settings ASAP.&lt;/h3&gt;\n            &lt;ReturnTempPassword tempPassword=\"xxxxxxxx\" /&gt;\n        &lt;/div&gt;\n    );\n  }\n};\n</code></pre>"},{"location":"codeblog/js/reactscratch/#review-using-props-with-stateless-functional-components","title":"Review Using Props with Stateless Functional Components","text":"<p>A stateless functional component is any function you write which accepts props and returns JSX. A stateless component, on the other hand, is a class that extends <code>React.Component</code>, but does not use internal state (covered in the next challenge). Finally, a stateful component is a class component that does maintain its own internal state. You may see stateful components referred to simply as components or React components.</p> <p>A common pattern is to try to minimize statefulness and to create stateless functional components wherever possible. This helps contain your state management to a specific area of your application. In turn, this improves development and maintenance of your app by making it easier to follow how changes to state affect its behavior.</p> <pre><code>class CampSite extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;Camper/&gt;\n      &lt;/div&gt;\n    );\n  }\n};\nclass Camper extends React.Component {\n  constructor(props){\n    super(props)\n  }\n  render(){\n    return (\n      &lt;div&gt;\n        &lt;p&gt;{this.props.name}&lt;/p&gt;\n      &lt;/div&gt;\n    )\n  }\n}\nCamper.defaultProps = {\n  name : \"CamperBot\"\n}\nCamper.propTypes = {\n  name : PropTypes.string.isRequired\n}\n</code></pre>"},{"location":"codeblog/js/reactscratch/#create-a-stateful-component","title":"Create a Stateful Component","text":"<p>One of the most important topics in React is <code>state</code>. State consists of any data your application needs to know about, that can change over time. You want your apps to respond to state changes and present an updated UI when necessary. React offers a nice solution for the state management of modern web applications.</p> <p>You create state in a React component by declaring a <code>state</code> property on the component class in its <code>constructor</code>. This initializes the component with <code>state</code> when it is created. The <code>state</code> property must be set to a JavaScript <code>object</code>. Declaring it looks like this:</p> <pre><code>this.state = {\n  // describe your state here\n}\n</code></pre>"},{"location":"codeblog/js/reactscratch/#render-state-in-the-user-interface","title":"Render State in the User Interface","text":"<p>Once you define a component's initial state, you can display any part of it in the UI that is rendered. If a component is stateful, it will always have access to the data in <code>state</code> in its <code>render()</code> method. You can access the data with <code>this.state</code>.</p> <p>If you want to access a state value within the <code>return</code> of the render method, you have to enclose the value in curly braces.</p> <p><code>State</code> is one of the most powerful features of components in React. It allows you to track important data in your app and render a UI in response to changes in this data. If your data changes, your UI will change. React uses what is called a virtual DOM, to keep track of changes behind the scenes. When state data updates, it triggers a re-render of the components using that data - including child components that received the data as a prop. React updates the actual DOM, but only where necessary. This means you don't have to worry about changing the DOM. You simply declare what the UI should look like.</p> <p>Note that if you make a component stateful, no other components are aware of its <code>state</code>. Its <code>state</code> is completely encapsulated, or local to that component, unless you pass state data to a child component as <code>props</code>. This notion of encapsulated <code>state</code> is very important because it allows you to write certain logic, then have that logic contained and isolated in one place in your code.</p> <pre><code>class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: 'freeCodeCamp'\n    }\n  }\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;h1&gt;{this.state.name}&lt;/h1&gt;\n      &lt;/div&gt;\n    );\n  }\n};\n</code></pre>"},{"location":"codeblog/js/reactscratch/#render-state-in-the-user-interface-another-way","title":"Render State in the User Interface Another Way","text":"<p>There is another way to access <code>state</code> in a component. In the <code>render()</code> method, before the <code>return</code> statement, you can write JavaScript directly. For example, you could declare functions, access data from <code>state</code> or <code>props</code>, perform computations on this data, and so on. Then, you can assign any data to variables, which you have access to in the <code>return</code> statement.</p> <pre><code>class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: 'freeCodeCamp'\n    }\n  }\n  render() {\n  const name = this.state.name\n    return (\n      &lt;div&gt;\n      &lt;h1&gt;{this.state.name}&lt;/h1&gt;\n      &lt;/div&gt;\n    );\n  }\n};\n</code></pre>"},{"location":"codeblog/js/reactscratch/#thisstate-section-important","title":"this.state Section { important }","text":""},{"location":"codeblog/js/reactscratch/#set-state-with-thissetstate","title":"Set State with this.setState","text":"<p>There is also a way to change the component's <code>state</code>. React provides a method for updating component <code>state</code> called <code>setState</code>. You call the <code>setState</code> method within your component class like so: <code>this.setState()</code>, passing in an object with key-value pairs. The keys are your state properties and the values are the updated state data. For instance, if we were storing a <code>username</code> in state and wanted to update it, it would look like this:</p> <pre><code>this.setState({\n  username: 'Lewis'\n});\n</code></pre> <pre><code>class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: 'Initial State'\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick() {\n    this.setState({\n      name : \"React Rocks!\"\n    })\n  }\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;button onClick={this.handleClick}&gt;Click Me&lt;/button&gt;\n        &lt;h1&gt;{this.state.name}&lt;/h1&gt;\n      &lt;/div&gt;\n    );\n  }\n};\n</code></pre>"},{"location":"codeblog/js/reactscratch/#bind-this-to-a-class-method","title":"Bind 'this' to a Class Method","text":"<p>In addition to setting and updating <code>state</code>, you can also define methods for your component class. A class method typically needs to use the <code>this</code> keyword so it can access properties on the class (such as <code>state</code> and <code>props</code>) inside the scope of the method. There are a few ways to allow your class methods to access <code>this</code>.</p> <p>One common way is to explicitly bind <code>this</code> in the constructor so <code>this</code> becomes bound to the class methods when the component is initialised. You may have noticed the last challenge used <code>this.handleClick = this.handleClick.bind(this)</code> for its <code>handleClick</code> method in the constructor. Then, when you call a function like <code>this.setState()</code> within your class method, <code>this</code> refers to the class and will not be <code>undefined</code></p> <pre><code>class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: \"Hello\"\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick() {\n    this.setState({\n      text: \"You clicked!\"\n    });\n  }\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;button onClick = {this.handleClick}&gt;Click Me&lt;/button&gt;\n        &lt;h1&gt;{this.state.text}&lt;/h1&gt;\n      &lt;/div&gt;\n    );\n  }\n};\n</code></pre>"},{"location":"codeblog/js/reactscratch/#use-state-to-toggle-an-element","title":"Use State to Toggle an Element","text":"<p>Sometimes you might need to know the previous state when updating the state. However, state updates may be asynchronous - this means React may batch multiple <code>setState()</code> calls into a single update. This means you can't rely on the previous value of <code>this.state</code> or <code>this.props</code> when calculating the next value. So, you should not use code like this:</p> <pre><code>this.setState({\n  counter: this.state.counter + this.props.increment\n});\n</code></pre> <p>Instead, you should pass <code>setState</code> a function that allows you to access state and props. Using a function with <code>setState</code> guarantees you are working with the most current values of state and props. This means that the above should be rewritten as:</p> <pre><code>this.setState((state, props) =&gt; ({\n  counter: state.counter + props.increment\n}));\n</code></pre> <p>You can also use a form without <code>props</code> if you need only the <code>state</code>:</p> <pre><code>this.setState(state =&gt; ({\n  counter: state.counter + 1\n}));\n</code></pre>"},{"location":"codeblog/js/reactscratch/#counter","title":"Counter","text":"<pre><code>class Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0\n    };\n  this.increment = this.increment.bind(this);\n  this.decrement = this.decrement.bind(this);\n  this.reset = this.reset.bind(this);\n }\n  reset() {\n    this.setState({\n      count: 0\n    });\n  }\n  increment() {\n    this.setState(state =&gt; ({\n      count: state.count + 1\n    }));\n  }\n  decrement() {\n    this.setState(state =&gt; ({\n      count: state.count - 1\n    }));\n  }\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;button className='inc' onClick={this.increment}&gt;Increment!&lt;/button&gt;\n        &lt;button className='dec' onClick={this.decrement}&gt;Decrement!&lt;/button&gt;\n        &lt;button className='reset' onClick={this.reset}&gt;Reset&lt;/button&gt;\n        &lt;h1&gt;Current Count: {this.state.count}&lt;/h1&gt;\n      &lt;/div&gt;\n    );\n  }\n};\n</code></pre>"},{"location":"codeblog/js/reactscratch/#react-create-a-controlled-input","title":"React: Create a Controlled Input","text":"<pre><code>class ControlledInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: ''\n    };\n    this.handleChange = this.handleChange.bind(this)\n  }\n\nhandleChange(event) {\n   this.setState({\n      input: event.target.value\n    });\n}\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;input value = {this.state.input} onChange = {this.handleChange.bind(this)}/&gt;\n        &lt;h4&gt;Controlled Input:&lt;/h4&gt;\n        &lt;p&gt;{this.state.input}&lt;/p&gt;\n      &lt;/div&gt;\n    );\n  }\n};\n</code></pre>"},{"location":"codeblog/js/reactscratch/#react-create-a-controlled-form-part-ii","title":"React: Create a controlled form part - ii","text":"<pre><code>class MyForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: '',\n      submit: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  handleChange(event) {\n    this.setState({\n      input: event.target.value\n    });\n  }\n  handleSubmit(event) {\n    event.preventDefault()\n    this.setState({\n      submit: this.state.input\n    });\n  }\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;form onSubmit={this.handleSubmit}&gt;\n          &lt;input\n            value={this.state.input}\n            onChange={this.handleChange} /&gt;\n          &lt;button type='submit'&gt;Submit!&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;h1&gt;{this.state.submit}&lt;/h1&gt;\n      &lt;/div&gt;\n    );\n  }\n};\n</code></pre>"},{"location":"codeblog/js/reactscratch/#pass-state-as-props-to-child-components","title":"Pass State as Props to Child Components","text":"<pre><code>class MyApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: 'CamperBot'\n    }\n  }\n  render() {\n    return (\n       &lt;div&gt;\n         &lt;Navbar name={this.state.name} /&gt;\n       &lt;/div&gt;\n    );\n  }\n};\n\nclass Navbar extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n    &lt;div&gt;\n      &lt;h1&gt;Hello, my name is: {this.props.name} &lt;/h1&gt;\n    &lt;/div&gt;\n    );\n  }\n};\n</code></pre>"},{"location":"codeblog/js/reactscratch/#pass-a-callback-as-props","title":"Pass a Callback as Props","text":"<pre><code>class MyApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputValue: ''\n    }\n  this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(event) {\n    this.setState({\n      inputValue: event.target.value\n    });\n  }\n  render() {\n    return (\n       &lt;div&gt;\n         &lt;GetInput\n           input={this.state.inputValue}\n           handleChange={this.handleChange}/&gt;\n         &lt;RenderInput\n           input={this.state.inputValue}/&gt;\n       &lt;/div&gt;\n    );\n  }\n};\n\nclass GetInput extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;h3&gt;Get Input:&lt;/h3&gt;\n        &lt;input\n          value={this.props.input}\n          onChange={this.props.handleChange}/&gt;\n      &lt;/div&gt;\n    );\n  }\n};\n\nclass RenderInput extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;h3&gt;Input Render:&lt;/h3&gt;\n        &lt;p&gt;{this.props.input}&lt;/p&gt;\n      &lt;/div&gt;\n    );\n  }\n};\n</code></pre>"},{"location":"codeblog/js/reactscratch/#component-lifecycle","title":"Component LifeCycle","text":"<p>Example :</p> <pre><code>class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: \"\"\n    };\n    this.handleEnter = this.handleEnter.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n  }\n  // change code below this line\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.handleKeyPress);\n  }\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.handleKeyPress);\n  }\n  // change code above this line\n  handleEnter() {\n    this.setState({\n      message: this.state.message + \"You pressed the enter key! \"\n    });\n  }\n  handleKeyPress(event) {\n    if (event.keyCode === 13) {\n      this.handleEnter();\n    }\n  }\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;h1&gt;{this.state.message}&lt;/h1&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n</code></pre>"},{"location":"codeblog/js/reactscratch/#optimize-re-renders-with-shouldcomponentupdate","title":"Optimize Re-Renders with shouldComponentUpdate","text":"<pre><code>class OnlyEvens extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  shouldComponentUpdate(nextProps) {\n      if (nextProps.value % 2 == 0) {\n        return true;\n      }\n      return false;\n  }\n  componentDidUpdate() {\n    console.log('Component re-rendered.');\n  }\n  render() {\n    return &lt;h1&gt;{this.props.value}&lt;/h1&gt;\n  }\n};\n\nclass Controller extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: 0\n    };\n    this.addValue = this.addValue.bind(this);\n  }\n  addValue() {\n    this.setState({\n      value: this.state.value + 1\n    });\n  }\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;button onClick={this.addValue}&gt;Add&lt;/button&gt;\n        &lt;OnlyEvens value={this.state.value}/&gt;\n      &lt;/div&gt;\n    );\n  }\n};\n</code></pre>"},{"location":"codeblog/js/reactscratch/#inline-styling","title":"Inline Styling","text":"<pre><code>const styles = {\n  color: 'purple',\n  fontSize: 40,\n  border: \"2px solid purple\",\n};\n\nclass Colorful extends React.Component {\n  render() {\n    // change code below this line\n    return (\n      &lt;div style={styles}&gt;Style Me!&lt;/div&gt;\n    );\n    // change code above this line\n  }\n};\n</code></pre>"},{"location":"codeblog/js/reactscratch/#use-advanced-javascript-in-react-render-method","title":"Use Advanced JavaScript in React Render Method","text":"<pre><code>const inputStyle = {\n  width: 235,\n  margin: 5\n}\n\nclass MagicEightBall extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userInput: '',\n      randomIndex: ''\n    }\n    this.ask = this.ask.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  ask() {\n    if (this.state.userInput) {\n      this.setState({\n        randomIndex: Math.floor(Math.random() * 20),\n        userInput: ''\n      });\n    }\n  }\n  handleChange(event) {\n    this.setState({\n      userInput: event.target.value\n    });\n  }\n  render() {\n    const possibleAnswers = [\n      'It is certain',\n    ];\n const answer = possibleAnswers[this.state.randomIndex];\n    return (\n      &lt;div&gt;\n        &lt;input\n          type=\"text\"\n          value={this.state.userInput}\n          onChange={this.handleChange}\n          style={inputStyle} /&gt;&lt;br /&gt;\n        &lt;button onClick={this.ask}&gt;\n          Ask the Magic Eight Ball!\n        &lt;/button&gt;&lt;br /&gt;\n        &lt;h3&gt;Answer:&lt;/h3&gt;\n        &lt;p&gt;\n              {answer}          \n        &lt;/p&gt;\n      &lt;/div&gt;\n    );\n  }\n};\n</code></pre>"},{"location":"codeblog/js/reactscratch/#coditional-render","title":"Coditional render","text":"<pre><code>class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      display: true\n    }\n this.toggleDisplay = this.toggleDisplay.bind(this);\n }\n  toggleDisplay() {\n    this.setState({\n      display: !this.state.display\n    });\n  }\n  render() {\n    // change code below this line\n    if (this.state.display) {\n      return (\n         &lt;div&gt;\n           &lt;button onClick={this.toggleDisplay}&gt;Toggle Display&lt;/button&gt;\n           &lt;h1&gt;Displayed!&lt;/h1&gt;\n         &lt;/div&gt;\n      );\n    } else {\n      return (\n        &lt;div&gt;\n           &lt;button onClick={this.toggleDisplay}&gt;Toggle Display&lt;/button&gt;\n         &lt;/div&gt;\n      );\n    }\n  }\n};\n</code></pre>"},{"location":"codeblog/js/reactscratch/#use-for-a-more-concise-conditional","title":"Use &amp;&amp; for a More Concise Conditional","text":"<pre><code>class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      display: true\n    }\n this.toggleDisplay = this.toggleDisplay.bind(this);\n  }\n  toggleDisplay() {\n    this.setState(state =&gt; ({\n      display: !state.display\n    }));\n  }\n  render() {\n    // change code below this line\n    return (\n       &lt;div&gt;\n         &lt;button onClick={this.toggleDisplay}&gt;Toggle Display&lt;/button&gt;\n         {this.state.display &amp;&amp; &lt;h1&gt;Displayed!&lt;/h1&gt;}\n       &lt;/div&gt;\n    );\n  }\n};\n</code></pre>"},{"location":"codeblog/js/reactscratch/#use-a-ternary-expression-for-conditional-rendering","title":"Use a Ternary Expression for Conditional Rendering","text":"<pre><code>const inputStyle = {\n  width: 235,\n  margin: 5\n}\n\nclass CheckUserAge extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userAge: '',\n      input: ''\n    }\n    this.submit = this.submit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(e) {\n    this.setState({\n      input: e.target.value,\n      userAge: ''\n    });\n  }\n  submit() {\n    this.setState(state =&gt; ({\n      userAge: state.input\n    }));\n  }\n  render() {\n    const buttonOne = &lt;button onClick={this.submit}&gt;Submit&lt;/button&gt;;\n    const buttonTwo = &lt;button&gt;You May Enter&lt;/button&gt;;\n    const buttonThree = &lt;button&gt;You Shall Not Pass&lt;/button&gt;;\n    return (\n      &lt;div&gt;\n        &lt;h3&gt;Enter Your Age to Continue&lt;/h3&gt;\n        &lt;input\n          style={inputStyle}\n          type=\"number\"\n          value={this.state.input}\n          onChange={this.handleChange} /&gt;&lt;br /&gt;\n          {\n          this.state.userAge === ''\n            ? buttonOne\n            : this.state.userAge &gt;= 18\n              ? buttonTwo\n              : buttonThree\n          }\n      &lt;/div&gt;\n    );\n  }\n};\n</code></pre>"},{"location":"codeblog/js/reactscratch/#render-connditionally-from-props","title":"Render connditionally from props","text":"<pre><code>class Results extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      &lt;h1&gt;\n      {\n        this.props.fiftyFifty ?\n        'You Win!' :\n        'You Lose!'\n      }\n      &lt;/h1&gt;\n    )\n  };\n};\n\nclass GameOfChance extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      counter: 1\n    }\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick() {\n    this.setState({\n      counter: this.state.counter + 1\n    });\n  }\n  render() {\n    const expression = Math.random() &gt;= .5;\n    return (\n      &lt;div&gt;\n        &lt;button onClick={this.handleClick}&gt;Play Again&lt;/button&gt;\n        &lt;Results fiftyFifty={expression} /&gt;\n        &lt;p&gt;{'Turn: ' + this.state.counter}&lt;/p&gt;\n      &lt;/div&gt;\n    );\n  }\n};\n</code></pre>"},{"location":"codeblog/js/reactscratch/#change-inline-css-conditionally-based-on-component-state","title":"Change Inline CSS Conditionally Based on Component State","text":"<pre><code>class GateKeeper extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(event) {\n    this.setState({ input: event.target.value })\n  }\n  render() {\n    let inputStyle = {\n      border: '1px solid black'\n    };\n    // change code below this line\n    if (this.state.input.length &gt; 15) {\n      inputStyle = {\n        border: '3px solid red'\n      };\n    }\n    // change code above this line\n    return (\n      &lt;div&gt;\n        &lt;h3&gt;Don't Type Too Much:&lt;/h3&gt;\n        &lt;input\n          type=\"text\"\n          style={inputStyle}\n          value={this.state.input}\n          onChange={this.handleChange} /&gt;\n      &lt;/div&gt;\n    );\n  }\n};\n</code></pre>"},{"location":"codeblog/js/reactscratch/#use-arraymap-to-dynamically-render-elements","title":"Use Array.map() to Dynamically Render Elements","text":"<pre><code>const textAreaStyles = {\n  width: 235,\n  margin: 5\n};\n\nclass MyToDoList extends React.Component {\n  constructor(props) {\n    super(props);\n    // change code below this line\n    this.state = {\n      userInput: '',\n      toDoList: []\n    }\n    // change code above this line\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleSubmit() {\n    const itemsArray = this.state.userInput.split(',');\n    this.setState({\n      toDoList: itemsArray\n    });\n  }\n  handleChange(e) {\n    this.setState({\n      userInput: e.target.value\n    });\n  }\n  render() {\n    const items = this.state.toDoList.map(i =&gt; &lt;li&gt;{i}&lt;/li&gt;); // change code here\n    return (\n      &lt;div&gt;\n        &lt;textarea\n          onChange={this.handleChange}\n          value={this.state.userInput}\n          style={textAreaStyles}\n          placeholder=\"Separate Items With Commas\" /&gt;&lt;br /&gt;\n        &lt;button onClick={this.handleSubmit}&gt;Create List&lt;/button&gt;\n        &lt;h1&gt;My \"To Do\" List:&lt;/h1&gt;\n        &lt;ul&gt;\n          {items}\n        &lt;/ul&gt;\n      &lt;/div&gt;\n    );\n  }\n};\n</code></pre>"},{"location":"codeblog/js/reactscratch/#give-sibling-elements-a-unique-key-attribute","title":"Give Sibling Elements a Unique Key Attribute","text":"<pre><code>const renderFrameworks = frontEndFrameworks.map((item) =&gt;\n  &lt;li key={item+1}&gt;{item}&lt;/li&gt;\n);\n</code></pre>"},{"location":"codeblog/js/reactscratch/#use-arrayfilter-to-dynamically-filter-an-array","title":"Use Array.filter() to Dynamically Filter an Array","text":"<pre><code>class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      users: [\n        {\n          username: 'Jeff',\n          online: true\n        },\n        {\n          username: 'Alan',\n          online: false\n        },\n        {\n          username: 'Mary',\n          online: true\n        },\n        {\n          username: 'Jim',\n          online: false\n        },\n        {\n          username: 'Sara',\n          online: true\n        },\n        {\n          username: 'Laura',\n          online: true\n        }\n      ]\n    }\n  }\n  render() {\n    const usersOnline = this.state.users.filter(i =&gt; i.online == true); // change code here\n    const renderOnline = usersOnline.map((i) =&gt; &lt;li key={i.username + 1}&gt;{i.username}&lt;/li&gt;); // change code here\n    return (\n       &lt;div&gt;\n         &lt;h1&gt;Current Online Users:&lt;/h1&gt;\n         &lt;ul&gt;\n           {renderOnline}\n         &lt;/ul&gt;\n       &lt;/div&gt;\n    );\n  }\n};\n</code></pre>"},{"location":"codeblog/js/reactscratch/#render-react-on-the-server-with-rendertostring","title":"Render React on the Server with renderToString","text":"<pre><code>class App extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return &lt;div/&gt;\n  }\n};\n\n// change code below this line\nReactDOMServer.renderToString(&lt;App /&gt;);\n</code></pre>"},{"location":"codeblog/tutorials/type-server/","title":"Getting Started With TypeScript based Express Server","text":"<p>You can simply get started with my boilerplate on GitHub</p> <p>The Big Question: Why this article when there are hundreds of similar articles on this topic.</p> <p>Answer: When I tried to create a typescript server with node, I faced issues that weren't addressed in procedures I followed.</p> <p>So let's get started 1. Create a new project folder</p> <ul> <li>Create a new project folder on your computer and open it in your terminal</li> <li>Run the following command to initialize an npm project :  <pre><code>$ npm init\n</code></pre></li> <li>Installing Dependencies :</li> <li>Install the following dependencies that will get you started</li> </ul> <pre><code>$ npm install typescript express @types/express @types/node ts-node ts-node-dev\n</code></pre> <ul> <li>Add tsc in scripts in package.json</li> </ul> <pre><code>\"scripts\": {\n...\n    \"tsc\":\"tsc\",\n...\n}\n</code></pre> <p>Then run :  <pre><code>$ npx tsc --init\n</code></pre></p> <p>The above npm install command contains packages <code>ts-node</code> and <code>ts-node-dev</code>. When you write code inside a <code>.ts</code> file, in order to run it, you first need to run tsc and then run the .js file it produces. While working with a typescript node server, you have to first convert all <code>.ts</code> files to <code>.js</code> files and then run the server file. And that's the problem if you using nodemon, it by default does not compile .ts files to .js file, hence every time to make a change, you first have to stop the server, run <code>tsc</code> and then run the server file again. Not cool right?</p> <p><code>ts-node</code> and <code>ts-node-dev</code> help solve this problem, with a few others as well.</p> <p>You don't have to manually compile ts files, nor make some fancy change to any config files These packages don't generate <code>.js</code> file in your file system, hence no clutter in your repository</p> <p>This was the big problem I faced while getting started with typescript express server. Moving on</p> <ol> <li>Finalizing scripts in package.json</li> <li>Your scripts package.json must contain these commands</li> </ol> <pre><code>\"scripts\": {\n...\n  \"tsc\": \"tsc\",\n  \"postinstall\": \"tsc\",\n  \"start\": \"node server.js\",\n  \"dev\": \"ts-node-dev server.ts\"\n...\n}\n</code></pre> <ol> <li>Create server.ts file</li> </ol> <pre><code>import express = require('express');\n\n// Create a new express app instance\nconst app: express.Application = express();\n\n//routes\napp.get('/', function (req, res) {\n    res.send('Hello World');\n});\n\napp.listen(3000, function () {\n    console.log('App is listening on port 3000');\n});\n</code></pre> <p>That's It You can now run your server using  <pre><code>$ npm run dev\n</code></pre></p> <p>I hope you like this article !</p>"},{"location":"data-structure-and-algorithms/","title":"Data Structures and Algo","text":""},{"location":"data-structure-and-algorithms/#notations","title":"Notations","text":"<ul> <li>Big O : upper bound of algorithm, worst case</li> <li>Omega : lower bound of algorithm, best case</li> <li>Theta : Average bound of algorithm</li> </ul>"},{"location":"data-structure-and-algorithms/#topics","title":"Topics","text":"<ul> <li>Introduction</li> <li>Mathematics</li> <li>Recursion</li> <li>Bit Manipulation</li> <li>Arrays</li> <li>Sorting</li> <li>Matrix</li> <li>Strings</li> <li>LinkedList</li> <li>Stack</li> <li>Queue</li> <li>Binary Search Tree</li> <li>Tree</li> <li>Heap</li> <li>Graph</li> <li>Greedy &amp; Backtracking</li> <li>Dynamic Programming</li> <li>Miscellaneous</li> </ul>"},{"location":"data-structure-and-algorithms/arrays/","title":"Arrays","text":""},{"location":"data-structure-and-algorithms/arrays/#left-most-index-of-an-element","title":"Left most index of an element","text":"<ul> <li>Count of occurrences of x in sorted element</li> <li> <p>Count of 1s in binary sorted array</p> </li> <li> <p>Perform binary search to the left most element</p> </li> <li>Perform the required operation from that side</li> </ul>"},{"location":"data-structure-and-algorithms/arrays/#find-an-element-in-infinite-sized-sorted-array","title":"Find an element in infinite sized sorted array","text":"<pre><code>class Solution {\n\n    // Simple binary search algorithm\n    static int binarySearch(int arr[], int l, int r, int x) {\n        if (r &gt;= l) {\n            int mid = l + (r - l) / 2;\n            if (arr[mid] == x)\n                return mid;\n            if (arr[mid] &gt; x)\n                return binarySearch(arr, l, mid - 1, x);\n            return binarySearch(arr, mid + 1, r, x);\n        }\n        return -1;\n    }\n\n    // Method takes an infinite size array and a key to be\n    // searched and returns its position if found else -1.\n    // We don't know size of arr[] and we can assume size to be\n    // infinite in this function.\n    // NOTE THAT THIS FUNCTION ASSUMES arr[] TO BE OF INFINITE SIZE\n    // THEREFORE, THERE IS NO INDEX OUT OF BOUND CHECKING\n    static int findPos(int arr[], int key) {\n        int l = 0, h = 1;\n        int val = arr[0];\n        // Find h to do binary search\n        while (val &lt; key) {\n            l = h; // store previous high\n            // check that 2*h doesn't exceeds array\n            // length to prevent ArrayOutOfBoundException\n            if (2 * h &lt; arr.length - 1)\n                h = 2 * h;\n            else\n                h = arr.length - 1;\n            val = arr[h]; // update new val\n        }\n        // at this point we have updated low\n        // and high indices, thus use binary\n        // search between them\n        return binarySearch(arr, l, h, key);\n    }\n\n    // Driver method to test the above function\n    public static void main(String[] args) {\n        int arr[] = new int[] { 3, 5, 7, 9, 10, 90,\n                100, 130, 140, 160, 170 };\n        int ans = findPos(arr, 10);\n        if (ans == -1)\n            System.out.println(\"Element not found\");\n        else\n            System.out.println(\"Element found at index \" + ans);\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/arrays/#find-pair-in-unsorted-array-which-gives-sum-x","title":"Find pair in unsorted array which gives sum X","text":"<pre><code>import java.util.HashSet;\n\nclass Solution {\n    static void printpairs(int arr[], int sum) {\n        HashSet&lt;Integer&gt; s = new HashSet&lt;Integer&gt;();\n        for (int i = 0; i &lt; arr.length; ++i) {\n            int temp = sum - arr[i];\n            // checking for condition\n            if (s.contains(temp)) {\n                System.out.println(\"Pair with given sum \" + sum + \" is (\" + arr[i] + \", \" + temp + \")\");\n            }\n            s.add(arr[i]);\n        }\n    }\n\n    // Main to test the above function\n    public static void main(String[] args) {\n        int A[] = { 1, 4, 45, 6, 10, 8 };\n        int n = 16;\n        printpairs(A, n);\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/arrays/#find-pair-in-sorted-array-which-gives-sum-x","title":"Find pair in sorted array which gives sum X","text":"<pre><code>class Solution {\n    static int isPresent(int arr[], int n, int sum) {\n        int l = 0, h = n - 1;\n        while (l &lt;= h) {\n            if (arr[l] + arr[h] == sum)\n                return 1;\n            else if (arr[l] + arr[h] &gt; sum)\n                h--;\n            else\n                l++;\n        }\n        return 0;\n    }\n\n    public static void main(String[] args) {\n        int arr[] = new int[] { 2, 3, 7, 8, 11 };\n        int n = arr.length;\n        int sum = 14;\n        System.out.println(isPresent(arr, n, sum));\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/arrays/#find-triplet-in-an-array-which-gives-sum-x","title":"Find triplet in an array which gives sum X","text":"<pre><code>class Solution {\n    // returns true if there is triplet with sum equal\n    // to 'sum' present in A[]. Also, prints the triplet\n    boolean find3Numbers(int A[], int arr_size, int sum) {\n        int l, r;\n        /* Sort the elements */\n        quickSort(A, 0, arr_size - 1);\n        /*\n         * Now fix the first element one by one and find the\n         * other two elements\n         */\n        for (int i = 0; i &lt; arr_size - 2; i++) {\n            // To find the other two elements, start two index variables\n            // from two corners of the array and move them toward each\n            // other\n            l = i + 1; // index of the first element in the remaining elements\n            r = arr_size - 1; // index of the last element\n            while (l &lt; r) {\n                if (A[i] + A[l] + A[r] == sum) {\n                    System.out.print(\"Triplet is \" + A[i] + \", \" + A[l] + \", \" + A[r]);\n                    return true;\n                } else if (A[i] + A[l] + A[r] &lt; sum)\n                    l++;\n                else // A[i] + A[l] + A[r] &gt; sum\n                    r--;\n            }\n        }\n        // If we reach here, then no triplet was found\n        return false;\n    }\n\n    int partition(int A[], int si, int ei) {\n        int x = A[ei];\n        int i = (si - 1);\n        int j;\n        for (j = si; j &lt;= ei - 1; j++) {\n            if (A[j] &lt;= x) {\n                i++;\n                int temp = A[i];\n                A[i] = A[j];\n                A[j] = temp;\n            }\n        }\n        int temp = A[i + 1];\n        A[i + 1] = A[ei];\n        A[ei] = temp;\n        return (i + 1);\n    }\n\n    /*\n     * Implementation of Quick Sort\n     * A[] --&gt; Array to be sorted\n     * si --&gt; Starting index\n     * ei --&gt; Ending index\n     */\n    void quickSort(int A[], int si, int ei) {\n        int pi;\n        /* Partitioning index */\n        if (si &lt; ei) {\n            pi = partition(A, si, ei);\n            quickSort(A, si, pi - 1);\n            quickSort(A, pi + 1, ei);\n        }\n    }\n\n    // Driver program to test above functions\n    public static void main(String[] args) {\n        FindTriplet triplet = new FindTriplet();\n        int A[] = { 1, 4, 45, 6, 10, 8 };\n        int sum = 22;\n        int arr_size = A.length;\n        triplet.find3Numbers(A, arr_size, sum);\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/arrays/#contains-duplicate","title":"Contains Duplicate","text":"<p>https://leetcode.com/problems/contains-duplicate/</p> <pre><code>Given an integer array nums, return true if any value appears \nat least twice in the array, and return false if every element is distinct. \n\nExample 1:\n\nInput: nums = [1,2,3,1]\nOutput: true\nExample 2:\n\nInput: nums = [1,2,3,4]\nOutput: false\nExample 3:\n\nInput: nums = [1,1,1,3,3,4,3,2,4,2]\nOutput: true\n</code></pre> <pre><code>class Solution {\npublic:\n    bool containsDuplicate(vector&lt;int&gt;&amp; nums) {\n        unordered_set&lt;int&gt; st;\n        bool flag = false;\n        for(int i: nums) {\n            if(st.find(i)==st.end()) {\n                st.insert(i);\n            } else {\n                return true;\n            }\n        }\n        return false;\n    }\n};\n</code></pre>"},{"location":"data-structure-and-algorithms/arrays/#maximum-subarray","title":"Maximum Subarray","text":"<p>https://leetcode.com/problems/maximum-subarray/</p> <pre><code>Given an integer array nums, \nfind the contiguous subarray (containing at least one number) \nwhich has the largest sum and return its sum.\n\nA subarray is a contiguous part of an array.\n\nExample 1:\n\nInput: nums = [-2,1,-3,4,-1,2,1,-5,4]\nOutput: 6\nExplanation: [4,-1,2,1] has the largest sum = 6.\nExample 2:\n\nInput: nums = [1]\nOutput: 1\n</code></pre> <pre><code>class Solution {\n    public int maxSubArray(int[] nums) {\n\n        int maxsum = Integer.MIN_VALUE;\n        int maxcalc = 0;\n\n        for (int ele : nums) {\n            maxcalc = maxcalc + ele;\n\n            if (maxsum &lt; maxcalc) {\n                maxsum = maxcalc;\n            }\n\n            if (maxcalc &lt; 0) {\n                maxcalc = 0;\n            }\n        }\n\n        return maxsum;\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/arrays/#two-sum","title":"Two Sum","text":"<p>https://leetcode.com/problems/two-sum/</p> <pre><code>Given an array of integers nums and an integer target, \nreturn indices of the two numbers such that they add up to target.\n\nYou may assume that each input would have exactly one solution, \nand you may not use the same element twice.\n\nYou can return the answer in any order.\n\nExample 1:\n\nInput: nums = [2,7,11,15], target = 9\nOutput: [0,1]\nExplanation: Because nums[0] + nums[1] == 9, we return [0, 1].\n</code></pre> <pre><code>class Solution\n{\npublic:\n    vector&lt;int&gt; twoSum(vector&lt;int&gt; &amp;nums, int target)\n    {\n\n        vector&lt;int&gt; ans;\n        if (nums.size() == 2)\n        {\n            ans.push_back(0); ans.push_back(1);\n            return ans;\n        }\n\n        map&lt;int, int&gt; hmap;\n\n        for (int i = 0; i &lt; nums.size(); i++)\n        {\n            int temp = target - nums[i];\n            if (hmap.find(temp) != hmap.end())\n            {\n                ans.push_back(i);\n                ans.push_back(hmap[temp]);\n                return ans;\n            }\n            hmap[nums[i]] = i;\n        }\n\n        return ans;\n    }\n};\n</code></pre>"},{"location":"data-structure-and-algorithms/arrays/#merge-sorted-array","title":"Merge Sorted Array","text":"<p>https://leetcode.com/problems/merge-sorted-array/</p> <pre><code>You are given two integer arrays nums1 and nums2, \nsorted in non-decreasing order, and two integers m and n, \nrepresenting the number of elements in nums1 and nums2 respectively.\n\nMerge nums1 and nums2 into a single array sorted in non-decreasing order.\n\nInput: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\nOutput: [1,2,2,3,5,6]\nExplanation: The arrays we are merging are [1,2,3] and [2,5,6].\nThe result of the merge is [1,2,2,3,5,6] \n    with the underlined elements coming from nums1.\n</code></pre> <pre><code>class Solution {\npublic:\n    void merge(vector&lt;int&gt;&amp; nums1, int m, vector&lt;int&gt;&amp; nums2, int n) {\n        int mainid = nums1.size() - 1;\n        int fend = m - 1;\n        int send = n - 1;\n        while (fend &gt;= 0 &amp;&amp; send &gt;= 0) {\n            if (nums1[fend] &gt; nums2[send]) {\n                nums1[mainid--] = nums1[fend--];\n            } else {\n                nums1[mainid--] = nums2[send--];\n            }\n        }\n\n        while (fend &gt;= 0) {\n            nums1[mainid--] = nums1[fend--];\n        }\n\n        while (send &gt;= 0) {\n            nums1[mainid--] = nums2[send--];\n        }\n    }\n};\n</code></pre>"},{"location":"data-structure-and-algorithms/arrays/#intersection-of-two-arrays-ii","title":"Intersection of Two Arrays II","text":"<p>https://leetcode.com/problems/intersection-of-two-arrays-ii/</p> <pre><code>Given two integer arrays nums1 and nums2, \nreturn an array of their intersection. \n\nEach element in the result must appear as many times \nas it shows in both arrays and you may return the \nresult in any order.\n\nExample 1:\n\nInput: nums1 = [1,2,2,1], nums2 = [2,2]\nOutput: [2,2]\nExample 2:\n\nInput: nums1 = [4,9,5], nums2 = [9,4,9,8,4]\nOutput: [4,9]\nExplanation: [9,4] is also accepted.\n</code></pre> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; intersect(vector&lt;int&gt;&amp; nums1, vector&lt;int&gt;&amp; nums2) {\n        int n=nums1.size();\n        int m=nums2.size();\n        vector&lt;int&gt; res;\n        unordered_map&lt;int,int&gt; map1;\n        unordered_map&lt;int,int&gt; map2;\n        for(int i=0;i&lt;n;i++){\n            map1[nums1[i]]++;\n        }\n        for(int j=0;j&lt;m;j++){\n            map2[nums2[j]]++;\n        }\n        for(auto&amp; num : nums1){\n            if(map2[num]--&gt;0){\n                res.push_back(num);\n            } \n        } return res;\n    }\n};\n</code></pre>"},{"location":"data-structure-and-algorithms/arrays/#best-time-to-buy-and-sell-stock","title":"Best Time to Buy and Sell Stock","text":"<p>https://leetcode.com/problems/best-time-to-buy-and-sell-stock/</p> <pre><code>You are given an array prices where prices[i] \nis the price of a given stock on the ith day.\n\nYou want to maximize your profit by choosing a single day to \nbuy one stock and choosing a different day in the future to sell that stock.\n\nInput: prices = [7,1,5,3,6,4]\nOutput: 5\nExplanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), \nprofit = 6-1 = 5.\n\nNote that buying on day 2 and selling on day 1 is not \n    allowed because you must buy before you sell.\n</code></pre> <pre><code>class Solution {\n    public int maxProfit(int[] prices) {\n        int maxProfit = 0;\n        int minBuy = prices[0], maxSell = prices[0];\n\n        for (int n : prices) {\n            if (n &lt; minBuy) {\n                minBuy = n;\n                maxSell = n;\n            } else if (n &gt; maxSell) {\n                maxSell = n;\n            }\n            maxProfit = Math.max(maxProfit, maxSell - minBuy);\n        }\n        return maxProfit;\n\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/arrays/#binary-search","title":"Binary Search","text":"<p>https://leetcode.com/problems/binary-search/</p> <p>Given an array of integers <code>nums</code> which is sorted in ascending order, and an integer <code>target</code>, write a function to search <code>target</code> in <code>nums</code>. If <code>target</code> exists, then return its index. Otherwise, return <code>-1</code>.</p> <pre><code>Input: nums = [-1,0,3,5,9,12], target = 9\nOutput: 4\nExplanation: 9 exists in nums and its index is 4\n</code></pre> <pre><code>class Solution {\n    public int search(int[] nums, int target) {\n\n        int left = 0;\n        int right = nums.length - 1;\n\n        while (left &lt;= right) {\n            int mid = left + (right - left) / 2;\n\n            if (nums[mid] == target) {\n                return mid;\n            }\n\n            if (nums[mid] &gt; target) {\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n\n        return -1;\n\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/arrays/#search-insert-position","title":"Search Insert Position","text":"<p>https://leetcode.com/problems/search-insert-position/</p> <p>Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p> <p>You must write an algorithm with <code>O(log n)</code> runtime complexity.</p> <pre><code>class Solution {\n    public int searchInsert(int[] nums, int target) {\n\n        int left = 0;\n        int right = nums.length - 1;\n\n        while (left &lt;= right) {\n\n            int mid = left + (right - left) / 2;\n\n            if (nums[mid] &gt; target) {\n                right = mid - 1;\n            } else if (nums[mid] &lt; target) {\n                left = mid + 1;\n            } else {\n                return mid;\n            }\n        }\n\n        return left;\n\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/arrays/#squares-of-a-sorted-array","title":"Squares of a Sorted Array","text":"<p>https://leetcode.com/problems/squares-of-a-sorted-array/</p> <pre><code>Given an integer array nums sorted in non-decreasing order, \nreturn an array of the squares of each number sorted in non-decreasing order.\n\nExample 1:\n\nInput: nums = [-4,-1,0,3,10]\nOutput: [0,1,9,16,100]\nExplanation: After squaring, the array becomes [16,1,0,9,100].\nAfter sorting, it becomes [0,1,9,16,100].\n</code></pre> <pre><code>class Solution {\n    public int[] sortedSquares(int[] nums) {\n        int start = 0;\n        int end = nums.length - 1;\n        int pointer = nums.length - 1;\n        int[] result = new int[nums.length];\n\n        while (start &lt;= end) {\n            if (Math.abs(nums[start]) &gt; Math.abs(nums[end])) {\n                result[pointer] = nums[start] * nums[start];\n                start++;\n            } else {\n                result[pointer] = nums[end] * nums[end];\n                end--;\n            }\n            pointer--;\n        }\n\n        return result;\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/arrays/#rotate-array","title":"Rotate Array","text":"<p>https://leetcode.com/problems/rotate-array/</p> <pre><code>Given an array, rotate the array to the right by k steps, \nwhere k is non-negative.\n\nExample 1:\n\nInput: nums = [1,2,3,4,5,6,7], k = 3\nOutput: [5,6,7,1,2,3,4]\nExplanation:\nrotate 1 steps to the right: [7,1,2,3,4,5,6]\nrotate 2 steps to the right: [6,7,1,2,3,4,5]\nrotate 3 steps to the right: [5,6,7,1,2,3,4]\n</code></pre> <pre><code>class Solution {\n    public void swap(int low, int high, int[] arr) {\n        while (low &lt; high) {\n            int temp = arr[low];\n            arr[low] = arr[high];\n            arr[high] = temp;\n            low++;\n            high--;\n        }\n    }\n\n    public void rotate(int[] nums, int k) {\n        if (k == 0) {\n            return;\n        }\n        if (k &gt; nums.length) {\n            k = k % nums.length;\n        }\n        swap(0, nums.length - k - 1, nums);\n        swap(nums.length - k, nums.length - 1, nums);\n        swap(0, nums.length - 1, nums);\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/arrays/#move-zeroes","title":"Move Zeroes","text":"<p>https://leetcode.com/problems/move-zeroes/</p> <pre><code>Given an integer array nums, move all 0's to the end of it \nwhile maintaining the relative order of the non-zero elements.\n\nNote that you must do this in-place without making a copy of the array.\n</code></pre> <pre><code>class Solution {\n    public void moveZeroes(int[] nums) {\n\n        int i = 0;\n        for (int j = 0; j &lt;= nums.length - 1; j++) {\n            if (nums[j] == 0) {\n                continue;\n            } else {\n                nums[i] = nums[j];\n                i++;\n            }\n        }\n\n        for (int x = i; x &lt;= nums.length - 1; x++) {\n            nums[x] = 0;\n        }\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/arrays/#two-sum-ii-input-array-is-sorted","title":"Two Sum II - Input Array Is Sorted","text":"<p>https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/</p> <pre><code>Given a 1-indexed array of integers numbers that is \nalready sorted in non-decreasing order, \nfind two numbers such that they add up to a specific target number. \n\nLet these two numbers be numbers[index1] and numbers[index2] \nwhere 1 &lt;= index1 &lt; index2 &lt;= numbers.length.\n\nReturn the indices of the two numbers, index1 and index2, \nadded by one as an integer array [index1, index2] of length 2.\n\nExample 1:\n\nInput: numbers = [2,7,11,15], target = 9\nOutput: [1,2]\nExplanation: The sum of 2 and 7 is 9. \nTherefore, index1 = 1, index2 = 2. We return [1, 2].\n</code></pre> <pre><code>class Solution {\n    public int[] twoSum(int[] numbers, int target) {\n        int leftPtr = 0;\n        int rightPtr = numbers.length - 1;\n        int currentSum = 0;\n        while (leftPtr &lt;= rightPtr) {\n            int leftEle = numbers[leftPtr];\n            int rightEle = numbers[rightPtr];\n            currentSum = leftEle + rightEle;\n            if (currentSum == target) {\n                return new int[] { leftPtr + 1, rightPtr + 1 };\n            } else if (currentSum &lt; target) {\n                leftPtr++;\n            } else {\n                rightPtr--;\n            }\n        }\n        return new int[] {};\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/arrays/#largest-subarray-with-sum-zero","title":"Largest Subarray with Sum Zero","text":"<pre><code>import java.util.*;\n\nclass Solution {\n    public static void main(String[] args) {\n        int arr[] = new int[] { 5, 3, 9, -4, -6, 7, -1 };\n        int n = arr.length;\n        System.out.println(ZeroSumSubarray(arr, n));\n    }\n\n    static int ZeroSumSubarray(int arr[], int n) {\n        Set&lt;Integer&gt; us = new HashSet&lt;Integer&gt;();\n        int prefix_sum = 0;\n        us.add(0);\n        for (int i = 0; i &lt; n; i++) {\n            prefix_sum += arr[i];\n            if (us.contains(prefix_sum) == true)\n                return 1;\n            us.add(prefix_sum);\n        }\n        return 0;\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/arrays/#largest-subarray-with-sum-x","title":"Largest Subarray with Sum X","text":"<pre><code>import java.util.HashSet;\n\nclass Solution {\n    public static void main(String[] args) {\n        int arr[] = new int[]{8, 3, -7, -4, 1};\n        int n = arr.length;\n        int sum = -8;\n        System.out.println(largestSubarrayWithSumX(arr, n, sum));\n    }\n\n    static int largestSubarrayWithSumX(int arr[], int n, int sum) {\n        int prefix_sum = 0;\n        HashSet&lt;Integer&gt; us = new HashSet&lt;&gt;();\n        us.add(0);\n        for (int i = 0; i &lt; n; i++) {\n            prefix_sum += arr[i];\n            if (us.contains(prefix_sum - sum))\n                return 1;\n            us.add(prefix_sum);\n        }\n        return 0;\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/arrays/#longest-subarray-with-equal-0s-and-1s","title":"Longest Subarray with equal 0s and 1s","text":"<pre><code>import java.util.*;\n\nclass Solution {\n    public static void main(String[] args) {\n        int arr[] = new int[] { 1, 1, 1, 0, 1, 0, 1, 1, 1 };\n        int len = arr.length;\n        System.out.println(largestZeroSubarray(arr, len));\n    }\n\n    static int largestZeroSubarray(int arr[], int n) {\n        Map&lt;Integer, Integer&gt; hm = new HashMap&lt;Integer, Integer&gt;();\n        int sum = 0, maxLen = 0;\n        for (int i = 0; i &lt; n; i++)\n            arr[i] = (arr[i] == 0) ? -1 : 1;\n        for (int i = 0; i &lt; n; i++) {\n            sum += arr[i];\n            if (sum == 0)\n                maxLen = i + 1;\n            if (hm.containsKey(sum + n) == true) {\n                if (maxLen &lt; i - hm.get(sum + n))\n                    maxLen = i - hm.get(sum + n);\n            } else\n                hm.put(sum + n, i);\n        }\n        return maxLen;\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/arrays/#find-pair-with-having-sum-x-in-unsorted-array","title":"Find pair with having sum X in unsorted array","text":"<pre><code>import java.util.*;\n\nclass Solution {\n    public static void main(String[] args) {\n        int arr[] = new int[] { 3, 8, 4, 7, 6, 1 };\n        int len = arr.length;\n        int x = 14;\n        System.out.println(pairWithSumX(arr, len, x));\n    }\n\n    static int pairWithSumX(int arr[], int n, int X) {\n        HashSet&lt;Integer&gt; us = new HashSet&lt;&gt;();\n        for (int i = 0; i &lt; n; i++) {\n            if (us.contains(X - arr[i]))\n                return 1;\n            us.add(arr[i]);\n        }\n        return 0;\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/arrays/#reverse-an-array","title":"Reverse an array","text":"<pre><code>class Solution {\n\n    static void reverse(int arr[], int n) {\n        for (int i = 0; i &lt; n / 2; i++) {\n            int temp = arr[i];\n            arr[i] = arr[n - i - 1];\n            arr[n - i - 1] = temp;\n        }\n\n        int start = 0;\n        int end = arr.length - 1;\n\n        while (start &lt; end) {\n            int temp = arr[start];\n            arr[start] = arr[end];\n            arr[end] = temp;\n            start++;\n            end--;\n        }\n    }\n\n    public static void main(String[] args) {\n        int arr[] = new int[] { 2, 8, 7, 10, 5 };\n        int n = arr.length;\n\n        reverse(arr, n);\n        for (int i = 0; i &lt; n; i++)\n            System.out.print(arr[i] + \" \");\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/arrays/#rotate-an-array-by-number-by-d","title":"Rotate an array by number by D","text":"<p>link : https://leetcode.com/problems/rotate-array/</p> <pre><code>class Solution {\n    public void rotate(int[] nums, int k) {\n        int n = nums.length;\n        k %= nums.length;\n        reverse(nums, 0, n - 1);\n        reverse(nums, 0, k - 1);\n        reverse(nums, k, n - 1);\n    }\n\n    static void reverse(int arr[], int start, int end) {\n        int temp = 0;\n        while (start &lt; end) {\n            temp = arr[start];\n            arr[start] = arr[end];\n            arr[end] = temp;\n            start++;\n            end--;\n        }\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/arrays/#replace-elements-with-greatest-element-on-right-side","title":"Replace Elements with Greatest Element on Right Side","text":"<p>link : https://leetcode.com/problems/replace-elements-with-greatest-element-on-right-side/</p> <pre><code>import java.util.Arrays;\n\nclass Solution {\n    public int[] replaceElements(int[] arr) {\n        int max = -1;\n        for (int i = arr.length - 1; i &gt;= 0; i--) {\n            var temp = arr[i];\n            arr[i] = max;\n            max = Math.max(max, temp);\n        }\n        return arr;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        var arr = sol.replaceElements(new int[]{17,18,5,4,6,1});\n        System.out.println(Arrays.toString(arr));\n        // [18, 6, 6, 6, 1, -1]\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/arrays/#prefix-sum-array","title":"Prefix Sum array","text":"<ul> <li>input : 10, 4, 16, 20</li> <li>output : 10 14 30 50</li> </ul> <pre><code>class Solution {\n    // Fills prefix sum array\n    static void fillPrefixSum(int[] arr, int n, int[] prefixSum) {\n        prefixSum[0] = arr[0];\n\n        // Adding present element\n        // with previous element\n        for (int i = 1; i &lt; n; ++i)\n            prefixSum[i] = prefixSum[i - 1] + arr[i];\n    }\n\n    // Driver code\n    public static void main(String[] args) {\n        int[] arr = { 10, 4, 16, 20 };\n        int n = arr.length;\n        int[] prefixSum = new int[n];\n\n        fillPrefixSum(arr, n, prefixSum);\n\n        for (int i = 0; i &lt; n; i++)\n            System.out.print(prefixSum[i] + \" \");\n\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/arrays/#find-pivot-index-or-equilibrium-point","title":"Find Pivot Index or Equilibrium Point","text":"<p>https://leetcode.com/problems/find-pivot-index/</p> <pre><code>class Solution {\n    public int pivotIndex(int[] nums) {\n\n        int sum = 0;\n\n        for (int ele : nums) {\n            sum += ele;\n        }\n\n        int leftsum = 0;\n        for (int i = 0; i &lt; nums.length; i++) {\n            if (leftsum == sum - leftsum - nums[i]) {\n                return i;\n            }\n            leftsum += nums[i];\n        }\n\n        return -1;\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/arrays/#maximum-occurred-integer-in-n-ranges","title":"Maximum occurred integer in N ranges*","text":"<p>Here <code>L[i]</code> and <code>R[i]</code> present ranges : 1- 15, 4-8, 9-12 etc...</p> <ul> <li>mark the starting of the range with 1 and ending with -1 on the next element after the range ends, do this for all ranges</li> <li>find the prefix sum array for the array and find the max element, the index will the be most occur ed integer in N ranges</li> </ul> <pre><code>class Solution {\n\n    static int MAX = 1000000;\n\n    // Return the maximum occurred element in all ranges.\n    static int maximumOccuredElement(int[] L, int[] R, int n) {\n        // Initalising all element of array to 0.\n        int[] arr = new int[MAX];\n\n        // to find the last range \n        int maxi = -1;\n\n        for (int i = 0; i &lt; n; i++) {\n            arr[L[i]] += 1;\n            arr[R[i] + 1] -= 1;\n            if (R[i] &gt; maxi) {\n                maxi = R[i];\n            }\n        }\n\n        // Finding prefix sum and index\n        // having maximum prefix sum.\n        int msum = arr[0];\n        int ind = 0;\n        for (int i = 1; i &lt; maxi + 1; i++) {\n            arr[i] += arr[i - 1];\n            if (msum &lt; arr[i]) {\n                msum = arr[i];\n                ind = i;\n            }\n        }\n        return ind;\n    }\n\n    // Driver program\n    static public void main(String[] args) {\n        int[] L = { 1, 4, 9, 13, 21 };\n        int[] R = { 15, 8, 12, 20, 30 };\n        int n = L.length;\n        System.out.println(maximumOccuredElement(L, R, n));\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/arrays/#strongest-neighbour-find-peak-element","title":"Strongest Neighbour | Find Peak Element","text":"<p>link : https://leetcode.com/problems/find-peak-element/</p> <pre><code>public class Solution {\n    public int findPeakElement(int[] nums) {\n        for (int i = 0; i &lt; nums.length - 1; i++) {\n            if (nums[i] &gt; nums[i + 1])\n                return i;\n        }\n        return nums.length - 1;\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/arrays/#first-missing-positive","title":"First Missing Positive","text":"<p>link : https://leetcode.com/problems/first-missing-positive/</p> <pre><code>class Solution {\n    public int firstMissingPositive(int[] nums) {\n\n        Set&lt;Integer&gt; set = new TreeSet&lt;&gt;();\n        for (int i = 0; i &lt; nums.length; i++) {\n            if (nums[i] &gt; 0)\n                set.add(nums[i]);\n        }\n        for (int i = 0; i &lt; nums.length; i++) {\n            if (!set.contains(i + 1))\n                return i + 1;\n        }\n        return nums.length + 1;\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/arrays/#rearrange-array-alternatively","title":"Rearrange array alternatively","text":"<pre><code>- Input:\nN = 6\narr[] = {1,2,3,4,5,6}\n\n- Output: \n6 1 5 2 4 3\nModified array is : 6 1 5 2 4 3\n\nExplanation: Max element = 6, min = 1, second max = 5, second min = 2, \nand so on... \n</code></pre> <pre><code>public class Solution {\n\n    // Prints max at first position, min at second\n    // position second max at third position, second\n    // min at fourth position and so on.\n    public static void rearrange(int arr[], int n) {\n\n        // initialize index of first minimum and first\n        // maximum element\n        int max_ele = arr[n - 1];\n        int min_ele = arr[0];\n\n        // traverse array elements\n        for (int i = 0; i &lt; n; i++) {\n\n            // at even index : we have to put maximum element\n            if (i % 2 == 0) {\n                arr[i] = max_ele;\n                max_ele -= 1;\n            }\n\n            // at odd index : we have to put minimum element\n            else {\n                arr[i] = min_ele;\n                min_ele += 1;\n            }\n        }\n    }\n\n    // Driver code\n    public static void main(String args[]) {\n        int arr[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n        int n = arr.length;\n\n        System.out.println(\"Original Array\");\n        for (int i = 0; i &lt; n; i++)\n            System.out.print(arr[i] + \" \");\n\n        rearrange(arr, n);\n\n        System.out.print(\"\\nModified Array\\n\");\n        for (int i = 0; i &lt; n; i++)\n            System.out.print(arr[i] + \" \");\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/arrays/#rearrange-the-array","title":"Rearrange the array","text":"<p>Given an array arr[] of size N where every element is in the range from 0 to n-1. Rearrange the given array so that arr[i] becomes arr[arr[i]].</p> <pre><code>class Solution {\n    // The function to rearrange an array in-place so that arr[i]\n    // becomes arr[arr[i]].\n    static void rearrange(int arr[], int n) {\n        // First step: Increase all values by (arr[arr[i]]%n)*n\n        for (int i = 0; i &lt; n; i++)\n\n            // learn\n            arr[i] += (arr[arr[i]] % n) * n;\n\n        // Second Step: Divide all values by n\n        // learn\n        for (int i = 0; i &lt; n; i++)\n            arr[i] /= n;\n    }\n\n    // A utility function to print an array of size n\n    static void printArr(int arr[], int n) {\n        for (int i = 0; i &lt; n; i++)\n            System.out.print(arr[i] + \" \");\n        System.out.println(\"\");\n    }\n\n    /* Driver program to test above functions */\n    public static void main(String[] args) {\n        int arr[] = { 3, 2, 0, 1 };\n        int n = arr.length;\n\n        System.out.println(\"Given Array is :\");\n        printArr(arr, n);\n\n        rearrange(arr, n);\n\n        System.out.println(\"Modified Array is :\");\n        printArr(arr, n);\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/arrays/#maximum-index","title":"Maximum Index","text":"<pre><code>class Solution {\n\n    /*\n     * For a given array arr[], returns the maximum j-i such that\n     * arr[j] &gt; arr[i]\n     */\n    static int maxIndexDiff(int arr[], int n) {\n        int maxDiff;\n        int i, j;\n\n        int RMax[] = new int[n];\n        int LMin[] = new int[n];\n\n    /*\n     * Construct LMin[] such that LMin[i] stores the minimum value\n     * from (arr[0], arr[1], ... arr[i])\n     */\n        LMin[0] = arr[0];\n        for (i = 1; i &lt; n; ++i)\n            LMin[i] = Math.min(arr[i], LMin[i - 1]);\n\n    /*\n     * Construct RMax[] such that RMax[j] stores the maximum value\n     * from (arr[j], arr[j+1], ..arr[n-1])\n     */\n        RMax[n - 1] = arr[n - 1];\n        for (j = n - 2; j &gt;= 0; --j)\n            RMax[j] = Math.max(arr[j], RMax[j + 1]);\n\n    /*\n     * Traverse both arrays from left to right to find optimum j - i\n     * This process is similar to merge() of MergeSort\n     */\n        i = 0;\n        j = 0;\n        maxDiff = -1;\n        while (j &lt; n &amp;&amp; i &lt; n) {\n            if (LMin[i] &lt;= RMax[j]) {\n                maxDiff = Math.max(maxDiff, j - i);\n                j = j + 1;\n            } else\n                i = i + 1;\n        }\n\n        return maxDiff;\n    }\n\n    /* Driver program to test the above functions */\n    public static void main(String[] args) {\n        int arr[] = { 9, 2, 3, 4, 5, 6, 7, 8, 18, 0 };\n        int n = arr.length;\n        int maxDiff = maxIndexDiff(arr, n);\n        System.out.println(maxDiff);\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/arrays/#check-if-array-is-sorted-and-rotated","title":"Check if array is sorted and rotated","text":"<pre><code>class Solution {\n\n    // Function to check if an array is\n    // Sorted and rotated clockwise\n    static boolean checkIfSortRotated(int arr[], int n) {\n        // Initializing two variables x,y as zero.\n        int x = 0, y = 0;\n\n        // Traversing array 0 to last element.\n        // n-1 is taken as we used i+1.\n        for (int i = 0; i &lt; n - 1; i++) {\n            if (arr[i] &lt; arr[i + 1])\n                x++;\n            else\n                y++;\n        }\n\n        // If till now both x,y are greater\n        // then 1 means array is not sorted.\n        // If both any of x,y is zero means\n        // array is not rotated.\n        if (x == 1 || y == 1) {\n            // Checking for last element with first.\n            if (arr[n - 1] &lt; arr[0])\n                x++;\n            else\n                y++;\n\n            // Checking for final result.\n            if (x == 1 || y == 1)\n                return true;\n        }\n        // If still not true then definitely false.\n        return false;\n    }\n\n    // Driver code\n    public static void main(String[] args) {\n        int arr[] = { 5, 1, 2, 3, 4 };\n\n        int n = arr.length;\n\n        // Function Call\n        boolean x = checkIfSortRotated(arr, n);\n        if (x == true)\n            System.out.println(\"YES\");\n        else\n            System.out.println(\"NO\");\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/arrays/#trapping-rainwater","title":"Trapping Rainwater","text":"<ul> <li>Step 1 : Find the max of ( tallest bar to the left <code>left[]</code> , itself )</li> <li>This will give the tallest bar on left till which it can hold water</li> <li>Step 2 : Find the max of ( tallest bar to the <code>right</code> , itself )</li> <li>This will give the tallest bar on right till which it can hold water</li> <li>Step 3 : Find the sum : <code>water += min ( left[i] , right[i] ) - arr[i]</code></li> <li>This will give you the water captured in between the bars</li> </ul> <p>link : https://leetcode.com/problems/trapping-rain-water/</p> <pre><code>class Solution {\n    public int trap(int[] height) {\n        int[] leftPeak = new int[height.length];\n        int[] rightPeak = new int[height.length];\n\n        // from left to right, we track all the peaks we see\n        int l = 0;\n        for (int i = 0; i &lt; height.length; i++) {\n            l = Math.max(l, height[i]);\n            leftPeak[i] = l;\n        }\n\n        // from right to left, we track all the peaks we see\n        int r = 0;\n        for (int i = height.length - 1; i &gt;= 0; i--) {\n            r = Math.max(r, height[i]);\n            rightPeak[i] = r;\n        }\n\n        // for each cell we compute the amount of water knowing left and right peak\n        int water = 0;\n        for (int i = 0; i &lt; height.length; i++) {\n            int h = Math.min(leftPeak[i], rightPeak[i]);\n            water += h - height[i];\n        }\n        return water;\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/arrays/#best-time-to-buy-and-sell-stock_1","title":"Best Time to Buy and Sell Stock","text":"<p>link : https://leetcode.com/problems/best-time-to-buy-and-sell-stock/</p> <pre><code>class Solution {\n    public int maxProfit(int[] prices) {\n        int maxProfit = 0;\n        int minBuy = prices[0], maxSell = prices[0];\n\n        for (int n : prices) {\n            if (n &lt; minBuy) {\n                minBuy = n;\n                maxSell = n;\n            } else if (n &gt; maxSell) {\n                maxSell = n;\n            }\n            maxProfit = Math.max(maxProfit, maxSell - minBuy);\n        }\n        return maxProfit;\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/arrays/#best-time-to-buy-and-sell-stock-ii","title":"Best Time to Buy and Sell Stock II","text":"<p>link : https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii/</p> <pre><code>class Solution {\n    public int maxProfit(int[] prices) {\n        int maxprofits = 0;\n\n        for (int i = 0; i &lt; prices.length - 1; i++) {\n            if (prices[i] &lt; prices[i + 1]) {\n                maxprofits += prices[i + 1] - prices[i];\n            }\n        }\n        return maxprofits;\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/arrays/#best-time-to-buy-and-sell-stock-iii","title":"Best Time to Buy and Sell Stock III","text":"<p>link : https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii/</p> <pre><code>class Solution {\n    public int maxProfit(int[] prices) {\n        int n = prices.length;\n        int arr[] = new int[n];\n        arr[0] = 0;\n        int min = prices[0];\n        for (int i = 1; i &lt; n; i++) {\n            arr[i] = Math.max(arr[i - 1], prices[i] - min);\n            min = Math.min(min, prices[i]);\n        }\n        int brr[] = new int[n];\n        brr[n - 1] = 0;\n        int max = prices[n - 1];\n        for (int i = n - 2; i &gt;= 0; i--) {\n            brr[i] = Math.max(brr[i + 1], max - prices[i]);\n            max = Math.max(max, prices[i]);\n        }\n        int ans = 0;\n        for (int i = 0; i &lt; n; i++) {\n            ans = Math.max(ans, arr[i] + brr[i]);\n        }\n        return ans;\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/arrays/#sub-array-sum-equals-k","title":"Sub array Sum Equals K","text":"<p>link : https://leetcode.com/problems/subarray-sum-equals-k/</p> <pre><code>public class Solution {\n    public int subarraySum(int[] nums, int k) {\n        int count = 0, sum = 0;\n        HashMap &lt; Integer, Integer &gt; map = new HashMap &lt; &gt; ();\n        map.put(0, 1);\n        for (int i = 0; i &lt; nums.length; i++) {\n            sum += nums[i];\n            if (map.containsKey(sum - k))\n                count += map.get(sum - k);\n            map.put(sum, map.getOrDefault(sum, 0) + 1);\n        }\n        return count;\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/arrays/#minimum-size-sub-array-sum","title":"Minimum Size Sub array Sum","text":"<p>link : https://leetcode.com/problems/minimum-size-subarray-sum/</p> <pre><code>class Solution {\n    public int minSubArrayLen(int target, int[] nums) {\n        int leftPos = 0, ret = Integer.MAX_VALUE, curSum = 0;\n        boolean flag = false;\n        for (int i = 0; i &lt; nums.length; i++) {\n            curSum += nums[i];\n            if (curSum &gt;= target) {\n                flag = true;\n                while (curSum &gt;= target) {\n                    curSum -= nums[leftPos++];\n                }\n                ret = Math.min(ret, i - leftPos + 2);\n            }\n        }\n\n        return flag ? ret : 0;\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/arrays/#sum-of-sub-array-minimums","title":"Sum of Sub array Minimums","text":"<p>link : https://leetcode.com/problems/sum-of-subarray-minimums/</p> <pre><code>public class Solution {\n    public int subarraySum(int[] nums, int k) {\n        int count = 0, sum = 0;\n        HashMap &lt; Integer, Integer &gt; map = new HashMap &lt; &gt; ();\n        map.put(0, 1);\n        for (int i = 0; i &lt; nums.length; i++) {\n            sum += nums[i];\n            if (map.containsKey(sum - k))\n                count += map.get(sum - k);\n            map.put(sum, map.getOrDefault(sum, 0) + 1);\n        }\n        return count;\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/arrays/#maximum-sub-array-kadane-algorithm","title":"Maximum Sub array | Kadane Algorithm","text":"<p>link : https://leetcode.com/problems/maximum-subarray/</p> <pre><code>class Solution {\n    public int maxSubArray(int[] nums) {\n\n        int maxsum = Integer.MIN_VALUE;\n        int maxcalc = 0;\n\n        for (int ele : nums) {\n            maxcalc = maxcalc + ele;\n\n            if (maxsum &lt; maxcalc) {\n                maxsum = maxcalc;\n            }\n\n            if (maxcalc &lt; 0) {\n                maxcalc = 0;\n            }\n        }\n        return maxsum;\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/arrays/#kadane-algorithm","title":"Kadane Algorithm","text":"<pre><code>class Solution {\n\n    static void maxSubArraySum(int a[], int size) {\n        int max_so_far = Integer.MIN_VALUE,\n                max_ending_here = 0, start = 0,\n                end = 0, s = 0;\n\n        for (int i = 0; i &lt; size; i++) {\n            max_ending_here += a[i];\n\n            if (max_so_far &lt; max_ending_here) {\n                max_so_far = max_ending_here;\n                start = s;\n                end = i;\n            }\n\n            if (max_ending_here &lt; 0) {\n                max_ending_here = 0;\n                s = i + 1;\n            }\n        }\n        System.out.println(\"Maximum contiguous sum is \"\n                + max_so_far);\n        System.out.println(\"Starting index \" + start);\n        System.out.println(\"Ending index \" + end);\n    }\n\n    // Driver code\n    public static void main(String[] args) {\n        int a[] = { -2, -3, 4, -1, -2, 1, 5, -3 };\n        int n = a.length;\n        maxSubArraySum(a, n);\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/arrays/#sliding-window-maximum","title":"Sliding Window Maximum","text":"<pre><code>import java.util.ArrayList;\nimport java.util.Arrays;\n\npublic class Solution {\n\n    public static int[] maxSlidingWindow(int[] nums, int k) {\n\n        int sum = 0;\n        int max = Integer.MIN_VALUE;\n\n        for (int i = 0; i &lt; k; i++) {\n            sum += nums[i];\n        }\n\n        int index = 0;\n\n        for (int i = k; i &lt; nums.length; i++) {\n            sum = sum - nums[i - k] + nums[i];\n            if (sum &gt; max) {\n                max = sum;\n                index = i;\n            }\n        }\n\n        ArrayList&lt;Integer&gt; arr = new ArrayList&lt;&gt;();\n        for (int i = index - k +1, j = 0; j &lt; k; j++, i++) {\n            arr.add(nums[i]);\n        }\n\n        return arr.stream().mapToInt(i -&gt; i).toArray();\n    }\n\n    public static void main(String[] args) throws Exception {\n        int[] nums = new int[] { 1, 3, -1, -3, 5, 3, 6, 7 };\n        int k = 3;\n        System.out.println(Arrays.toString(maxSlidingWindow(nums, k)));\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/arrays/#maximum-gap","title":"Maximum Gap","text":"<p>link : https://leetcode.com/problems/maximum-gap/</p> <pre><code>class Solution\n{\npublic:\n    int maxSubArray(vector&lt;int&gt; &amp;nums)\n    {\n        int maxsum = -99990;\n        int maxcalc = 0;\n        for (int ele : nums)\n        {\n            maxcalc = maxcalc + ele;\n            if (maxsum &lt; maxcalc)\n                maxsum = maxcalc;\n\n            if (maxcalc &lt; 0)\n                maxcalc = 0;\n        }\n        return maxsum;\n    }\n};\n</code></pre>"},{"location":"data-structure-and-algorithms/binary-search-tree/","title":"Binary Search Tree","text":""},{"location":"data-structure-and-algorithms/binary-search-tree/#populating-next-right-pointers-in-each-node","title":"Populating Next Right Pointers in Each Node","text":"<pre><code>class Solution {\n    public Node connect(Node root) {\n        Queue&lt;Node&gt; q=new LinkedList&lt;&gt;();\n        if(root==null){\n            return null;\n        }\n        q.add(root);\n        while(!q.isEmpty()){\n          int size=q.size();\n          for(int i=1;i&lt;=size;i++){\n              Node curr=q.remove();\n              if(i==size){\n                 curr.next=null; \n              }else{\n                 curr.next=q.peek(); \n              }\n\n              if(curr.left!=null){\n                  q.add(curr.left);\n                  q.add(curr.right);\n              }\n          }   \n        }\n\n        return root;\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/binary-search-tree/#binary-tree-level-order-traversal","title":"Binary Tree Level Order Traversal","text":"<pre><code>class Solution {\n    ArrayList&lt;List&lt;Integer&gt;&gt; list = new ArrayList&lt;&gt;();\n    public List&lt;List&lt;Integer&gt;&gt; levelOrder(TreeNode root) {\n        if(root==null) return list;\n        Queue&lt;TreeNode&gt; q = new LinkedList&lt;&gt;();\n        q.add(root);\n        while(!q.isEmpty()){\n            int size = q.size(); \n            ArrayList&lt;Integer&gt; levelElement = new ArrayList&lt;&gt;(); \n            for(int i =0;i&lt;size;i++){\n                TreeNode node = q.remove();\n                levelElement.add(node.val);\n                if(node.left!=null) q.add(node.left);\n                if(node.right!=null) q.add(node.right);\n            }\n            list.add(levelElement);\n        }\n        return list;\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/binary-search-tree/#search-in-bst","title":"Search in BST","text":"<pre><code>import java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\nclass Node {\n    int key;\n    Node left;\n    Node right;\n\n    Node(int k) {\n        key = k;\n        left = right = null;\n    }\n}\n\n\nclass Main {\n\n    public static void main(String args[]) {\n        Node root = new Node(15);\n        root.left = new Node(5);\n        root.left.left = new Node(3);\n        root.right = new Node(20);\n        root.right.left = new Node(18);\n        root.right.left.left = new Node(16);\n        root.right.right = new Node(80);\n        int x = 16;\n\n        if (search(root, x))\n            System.out.print(\"Found\");\n        else\n            System.out.print(\"Not Found\");\n    }\n\n    public static boolean search(Node root, int x) {\n        if (root == null)\n            return false;\n        if (root.key == x)\n            return true;\n        else if (root.key &gt; x) {\n            return search(root.left, x);\n        } else {\n            return search(root.right, x);\n        }\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/binary-search-tree/#search-in-bst-recursively","title":"Search in BST ( recursively )","text":"<pre><code>import java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\nclass Node {\n    int key;\n    Node left;\n    Node right;\n\n    Node(int k) {\n        key = k;\n        left = right = null;\n    }\n}\n\n\nclass Main {\n\n    public static void main(String args[]) {\n        Node root = new Node(15);\n        root.left = new Node(5);\n        root.left.left = new Node(3);\n        root.right = new Node(20);\n        root.right.left = new Node(18);\n        root.right.left.left = new Node(16);\n        root.right.right = new Node(80);\n        int x = 16;\n\n        if (search(root, x))\n            System.out.print(\"Found\");\n        else\n            System.out.print(\"Not Found\");\n    }\n\n    public static boolean search(Node root, int x) {\n        while (root != null) {\n            if (root.key == x)\n                return true;\n            else if (root.key &lt; x)\n                root = root.right;\n            else\n                root = root.left;\n        }\n        return false;\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/binary-search-tree/#insert-bst-recursively","title":"Insert BST ( Recursively )","text":"<pre><code>import java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\nclass Node {\n    int key;\n    Node left;\n    Node right;\n\n    Node(int k) {\n        key = k;\n        left = right = null;\n    }\n}\n\n\nclass Main {\n\n    public static void main(String args[]) {\n        Node root = new Node(10);\n        root.left = new Node(5);\n        root.right = new Node(15);\n        root.right.left = new Node(12);\n        root.right.right = new Node(18);\n        int x = 20;\n\n        root = insert(root, x);\n        inorder(root);\n    }\n\n    public static Node insert(Node root, int x) {\n        if (root == null)\n            return new Node(x);\n        else if (root.key &lt; x)\n            root.right = insert(root.right, x);\n        else if (root.key &gt; x)\n            root.left = insert(root.left, x);\n        return root;\n    }\n\n    public static void inorder(Node root) {\n        if (root != null) {\n            inorder(root.left);\n            System.out.print(root.key + \" \");\n            inorder(root.right);\n        }\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/binary-search-tree/#insert-in-bst-iteratively","title":"Insert in BST ( Iteratively )","text":"<pre><code>import java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\nclass Node {\n    int key;\n    Node left;\n    Node right;\n\n    Node(int k) {\n        key = k;\n        left = right = null;\n    }\n}\n\n\nclass Main {\n\n    public static void main(String args[]) {\n        Node root = new Node(10);\n        root.left = new Node(5);\n        root.right = new Node(15);\n        root.right.left = new Node(12);\n        root.right.right = new Node(18);\n        int x = 20;\n\n        root = insert(root, x);\n        inorder(root);\n    }\n\n    public static Node insert(Node root, int x) {\n        Node temp = new Node(x);\n        Node parent = null, curr = root;\n        while (curr != null) {\n            parent = curr;\n            if (curr.key &gt; x)\n                curr = curr.left;\n            else if (curr.key &lt; x)\n                curr = curr.right;\n            else\n                return root;\n        }\n        if (parent == null)\n            return temp;\n        if (parent.key &gt; x)\n            parent.left = temp;\n        else\n            parent.right = temp;\n        return root;\n    }\n\n    public static void inorder(Node root) {\n        if (root != null) {\n            inorder(root.left);\n            System.out.print(root.key + \" \");\n            inorder(root.right);\n        }\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/binary-search-tree/#delete-in-bst","title":"Delete in BST","text":"<pre><code>import java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\nclass Node {\n    int key;\n    Node left;\n    Node right;\n\n    Node(int k) {\n        key = k;\n        left = right = null;\n    }\n}\n\n\nclass Main {\n\n    public static void main(String args[]) {\n        Node root = new Node(10);\n        root.left = new Node(5);\n        root.right = new Node(15);\n        root.right.left = new Node(12);\n        root.right.right = new Node(18);\n        int x = 15;\n\n        root = delNode(root, x);\n        inorder(root);\n    }\n\n    public static Node getSuccessor(Node curr) {\n        curr = curr.right;\n        while (curr != null &amp;&amp; curr.left != null)\n            curr = curr.left;\n        return curr;\n    }\n\n    public static Node delNode(Node root, int x) {\n        if (root == null)\n            return root;\n        if (root.key &gt; x)\n            root.left = delNode(root.left, x);\n        else if (root.key &lt; x)\n            root.right = delNode(root.right, x);\n        else {\n            if (root.left == null) {\n                return root.right;\n            } else if (root.right == null) {\n                return root.left;\n            } else {\n                Node succ = getSuccessor(root);\n                root.key = succ.key;\n                root.right = delNode(root.right, succ.key);\n            }\n        }\n        return root;\n    }\n\n    public static void inorder(Node root) {\n        if (root != null) {\n            inorder(root.left);\n            System.out.print(root.key + \" \");\n            inorder(root.right);\n        }\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/binary-search-tree/#floor-in-bst","title":"Floor in BST","text":"<pre><code>import java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\nclass Node {\n    int key;\n    Node left;\n    Node right;\n\n    Node(int k) {\n        key = k;\n        left = right = null;\n    }\n}\n\n\nclass Main {\n\n    public static void main(String args[]) {\n        Node root = new Node(15);\n        root.left = new Node(5);\n        root.left.left = new Node(3);\n        root.right = new Node(20);\n        root.right.left = new Node(18);\n        root.right.left.left = new Node(16);\n        root.right.right = new Node(80);\n        int x = 17;\n\n        System.out.print(\"Floor: \" + (floor(root, 17).key));\n    }\n\n    public static Node floor(Node root, int x) {\n        Node res = null;\n        while (root != null) {\n            if (root.key == x)\n                return root;\n            else if (root.key &gt; x)\n                root = root.left;\n            else {\n                res = root;\n                root = root.right;\n            }\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/binary-search-tree/#ceil-in-bst","title":"Ceil in BST","text":"<pre><code>import java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\nclass Node {\n    int key;\n    Node left;\n    Node right;\n\n    Node(int k) {\n        key = k;\n        left = right = null;\n    }\n}\n\nclass Main {\n\n    public static void main(String args[]) {\n        Node root = new Node(15);\n        root.left = new Node(5);\n        root.left.left = new Node(3);\n        root.right = new Node(20);\n        root.right.left = new Node(18);\n        root.right.left.left = new Node(16);\n        root.right.right = new Node(80);\n        int x = 17;\n\n        System.out.print(\"Ceil: \" + (ceil(root, 17).key));\n    }\n\n    public static Node ceil(Node root, int x) {\n        Node res = null;\n        while (root != null) {\n            if (root.key == x)\n                return root;\n            else if (root.key &lt; x)\n                root = root.right;\n            else {\n                res = root;\n                root = root.left;\n            }\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/binary-search-tree/#revisit-avl-tree","title":"Revisit AVL Tree","text":""},{"location":"data-structure-and-algorithms/binary-search-tree/#revisit-red-black-tree","title":"Revisit Red Black Tree","text":""},{"location":"data-structure-and-algorithms/binary-search-tree/#treeset-in-java","title":"TreeSet In java","text":""},{"location":"data-structure-and-algorithms/binary-search-tree/#add-contains-iterator","title":"Add | Contains | Iterator","text":"<pre><code>import java.util.*;\n\nclass TreeSetExample {\n\n    public static void main(String[] args) {\n\n        // Creating an empty TreeSet\n        TreeSet&lt;String&gt; s = new TreeSet&lt;String&gt;();\n\n        // Elements are added using add() method\n        s.add(\"gfg\");\n        s.add(\"courses\");\n        s.add(\"ide\");\n\n        // Displaying the TreeSet\n        // in sorted order\n        System.out.println(s);\n\n        // Checking whether \"ide\" is present\n        // or not\n        System.out.println(s.contains(\"ide\"));\n\n        // Iterator to traverse the TreeSet\n        Iterator&lt;String&gt; i = s.iterator();\n        while (i.hasNext())\n            System.out.println(i.next());\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/binary-search-tree/#addremove","title":"Add+Remove","text":"<pre><code>import java.util.*;\n\nclass TreeSetExample {\n\n    public static void main(String[] args) {\n\n        // Creating an empty TreeSet\n        TreeSet&lt;Integer&gt; s = new TreeSet&lt;Integer&gt;();\n\n        // Elements are added using add() method\n        s.add(10);\n        s.add(5);\n        s.add(2);\n        s.add(15);\n\n        // Removing 5 from TreeSet\n        s.remove(5);\n\n        // foreach way of traversal\n        for (Integer x : s)\n            System.out.print(x + \" \");\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/binary-search-tree/#lower-higher-floor-ceiling","title":"Lower | Higher | Floor | Ceiling","text":"<pre><code>import java.util.*;\n\nclass TreeSetExample {\n\n    public static void main(String[] args) {\n\n        // Creating an empty TreeSet\n        TreeSet&lt;Integer&gt; s = new TreeSet&lt;Integer&gt;();\n\n        // Elements are added using add() method\n        s.add(10);\n        s.add(5);\n        s.add(2);\n        s.add(15);\n\n        // Prints the largest value lower than 5\n        // Here it is 2\n        System.out.println(s.lower(5));\n\n        // Prints the smallest higher value than 5\n        // Between 10 and 15 smallest is 10\n        System.out.println(s.higher(5));\n\n        // Value &lt;= 5\n        System.out.println(s.floor(5));\n\n        // Value &gt;= 5\n        System.out.println(s.ceiling(5));\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/binary-search-tree/#treemap-in-java","title":"TreeMap in Java","text":""},{"location":"data-structure-and-algorithms/binary-search-tree/#example","title":"Example","text":"<pre><code>import java.util.*;\n\nclass GFG {\n    public static void main(String args[]) {\n        // Initialization of a TreeMap \n        // using Generics \n        TreeMap&lt;Integer, String&gt; t\n                = new TreeMap&lt;Integer, String&gt;();\n\n        // Inserting the Elements \n        t.put(10, \"geeks\");\n        t.put(15, \"ide\");\n        t.put(5, \"courses\");\n\n        // Prints the TreeMap\n        System.out.println(t);\n\n        // Check for the key in the map\n        System.out.println(t.containsKey(10));\n\n        // Iterating over TreeMap\n        for (Map.Entry&lt;Integer, String&gt; e : t.entrySet())\n            System.out.println(e.getKey() + \" \" + e.getValue());\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/binary-search-tree/#higherkey-lowerkey-floorkey-ceilingkey","title":"HigherKey | LowerKey | FloorKey | CeilingKey","text":"<pre><code>import java.util.*;\n\nclass GFG {\n    public static void main(String args[]) {\n        // Initialization of a TreeMap \n        // using Generics \n        TreeMap&lt;Integer, String&gt; t\n                = new TreeMap&lt;Integer, String&gt;();\n\n        // Inserting the Elements \n        t.put(10, \"geeks\");\n        t.put(15, \"ide\");\n        t.put(5, \"courses\");\n\n        // returns the smallest key greater \n        // than the passed key i.e., 15\n        System.out.println(t.higherKey(10));\n\n        // returns the greatest smaller key \n        // than the passed key i.e., 5\n        System.out.println(t.lowerKey(10));\n\n        // greatest key &lt;= passed key i.e., 10\n        System.out.println(t.floorKey(10));\n\n        // greatest key &gt;= passed key i.e., 10\n        System.out.println(t.ceilingKey(10));\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/binary-search-tree/#getvalue","title":"GetValue","text":"<pre><code>import java.util.*;\n\nclass GFG {\n    public static void main(String args[]) {\n        // Initialization of a TreeMap \n        // using Generics \n        TreeMap&lt;Integer, String&gt; t\n                = new TreeMap&lt;Integer, String&gt;();\n\n        // Inserting the Elements \n        t.put(10, \"geeks\");\n        t.put(15, \"ide\");\n        t.put(5, \"courses\");\n\n        // returns the key-value pair corresponding\n        // to higher key and prints the associated value\n        System.out.println(t.higherEntry(10).getValue());\n\n        // returns the key-value pair corresponding\n        // to lower key prints the associated value\n        System.out.println(t.lowerEntry(10).getValue());\n\n        // returns a key-value mapping associated \n        // with the greatest key &lt;= to the given key\n        System.out.println(t.floorEntry(10).getValue());\n\n        // returns a key-value mapping associated \n        // with the least key &gt;= to the given key\n        System.out.println(t.ceilingEntry(10).getValue());\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/binary-search-tree/#ceiling-on-left-side-in-an-array","title":"Ceiling on left side in an array","text":"<pre><code>import java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\nclass GFG {\n\n    public static void main(String args[]) {\n        int arr[] = {2, 8, 30, 15, 25, 12};\n        int n = arr.length;\n\n        printCeiling(arr, n);\n    }\n\n    public static void printCeiling(int arr[], int n) {\n        System.out.print(\"-1\" + \" \");\n        TreeSet&lt;Integer&gt; s = new TreeSet&lt;&gt;();\n        s.add(arr[0]);\n        for (int i = 1; i &lt; n; i++) {\n            if (s.ceiling(arr[i]) != null)\n                System.out.print(s.ceiling(arr[i]) + \" \");\n            else\n                System.out.print(\"-1\" + \" \");\n            s.add(arr[i]);\n        }\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/binary-search-tree/#find-kth-smallest-in-bst","title":"Find Kth Smallest in BST","text":"<pre><code>import java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\nclass Node {\n    int data;\n    Node left, right;\n    int lCount;\n\n    Node(int x) {\n        data = x;\n        left = right = null;\n        lCount = 0;\n    }\n}\n\nclass Gfg {\n    public static Node insert(Node root, int x) {\n        if (root == null)\n            return new Node(x);\n\n        if (x &lt; root.data) {\n            root.left = insert(root.left, x);\n            root.lCount++;\n        } else if (x &gt; root.data)\n            root.right = insert(root.right, x);\n        return root;\n    }\n\n    public static Node kthSmallest(Node root, int k) {\n        if (root == null)\n            return null;\n\n        int count = root.lCount + 1;\n        if (count == k)\n            return root;\n\n        if (count &gt; k)\n            return kthSmallest(root.left, k);\n\n        return kthSmallest(root.right, k - count);\n    }\n\n    public static void main(String args[]) {\n        Node root = null;\n        int keys[] = {20, 8, 22, 4, 12, 10, 14};\n\n        for (int x : keys)\n            root = insert(root, x);\n\n        int k = 4;\n        Node res = kthSmallest(root, k);\n        if (res == null)\n            System.out.println(\"There are less \"\n                    + \"than k nodes in the BST\");\n        else\n            System.out.println(\"K-th Smallest\"\n                    + \" Element is \" + res.data);\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/binary-search-tree/#check-for-bst","title":"Check for BST","text":"<pre><code>import java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\nclass Node {\n    int key;\n    Node left, right;\n\n    Node(int x) {\n        key = x;\n        left = right = null;\n    }\n}\n\nclass Gfg {\n    static int prev = Integer.MIN_VALUE;\n\n    public static boolean isBST(Node root) {\n        if (root == null)\n            return true;\n\n        if (isBST(root.left) == false) return false;\n\n        if (root.key &lt;= prev) return false;\n        prev = root.key;\n\n        return isBST(root.right);\n    }\n\n    public static void main(String args[]) {\n        Node root = new Node(4);\n        root.left = new Node(2);\n        root.right = new Node(5);\n        root.left.left = new Node(1);\n        root.left.right = new Node(3);\n\n        if (isBST(root))\n            System.out.println(\"IS BST\");\n        else\n            System.out.println(\"Not a BST\");\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/binary-search-tree/#fix-bst-with-two-nodes-swapped","title":"Fix BST with Two Nodes Swapped","text":"<pre><code>import java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\nclass Node {\n    int key;\n    Node left, right;\n\n    Node(int x) {\n        key = x;\n        left = right = null;\n    }\n}\n\nclass Gfg {\n    public static void inorder(Node root) {\n        if (root != null) {\n            inorder(root.left);\n            System.out.print(root.key + \" \");\n            inorder(root.right);\n        }\n    }\n\n    static Node prev = null, first = null, second = null;\n\n    public static void fixBST(Node root) {\n        if (root == null)\n            return;\n        fixBST(root.left);\n        if (prev != null &amp;&amp; root.key &lt; prev.key) {\n            if (first == null)\n                first = prev;\n            second = root;\n        }\n        prev = root;\n\n        fixBST(root.right);\n    }\n\n    public static void main(String args[]) {\n        Node root = new Node(18);\n        root.left = new Node(60);\n        root.right = new Node(70);\n        root.left.left = new Node(4);\n        root.right.left = new Node(8);\n        root.right.right = new Node(80);\n\n        inorder(root);\n        System.out.println();\n        ;\n        fixBST(root);\n        int temp = first.key;\n        first.key = second.key;\n        second.key = temp;\n        inorder(root);\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/binary-search-tree/#pair-sum-with-given-bst","title":"Pair Sum with given BST","text":"<pre><code>import java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\nclass Node {\n    int key;\n    Node left, right;\n\n    Node(int x) {\n        key = x;\n        left = right = null;\n    }\n}\n\nclass Gfg {\n\n    public static boolean isPairSum(Node root, int sum, HashSet&lt;Integer&gt; s) {\n        if (root == null) return false;\n\n        if (isPairSum(root.left, sum, s) == true)\n            return true;\n\n        if (s.contains(sum - root.key))\n            return true;\n        else\n            s.add(root.key);\n        return isPairSum(root.right, sum, s);\n    }\n\n    public static void main(String args[]) {\n        Node root = new Node(10);\n        root.left = new Node(8);\n        root.right = new Node(20);\n        root.left.left = new Node(4);\n        root.left.right = new Node(9);\n        root.right.left = new Node(11);\n        root.right.right = new Node(30);\n        root.right.right.left = new Node(25);\n\n        int sum = 33;\n\n        HashSet&lt;Integer&gt; s = new HashSet&lt;&gt;();\n        System.out.print(isPairSum(root, sum, s));\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/binary-search-tree/#vertical-sum-in-a-binary-tree","title":"Vertical Sum in a Binary Tree","text":"<pre><code>import java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\nclass Node {\n    int key;\n    Node left, right;\n\n    Node(int x) {\n        key = x;\n        left = right = null;\n    }\n}\n\nclass Gfg {\n\n    public static void vSumR(Node root, int hd, TreeMap&lt;Integer, Integer&gt; mp) {\n        if (root == null) return;\n        vSumR(root.left, hd - 1, mp);\n        int pSum = (mp.get(hd) == null) ? 0 : mp.get(hd);\n        mp.put(hd, pSum + root.key);\n        vSumR(root.right, hd + 1, mp);\n    }\n\n    public static void vSum(Node root) {\n        TreeMap&lt;Integer, Integer&gt; mp = new TreeMap&lt;Integer, Integer&gt;();\n        vSumR(root, 0, mp);\n        for (Map.Entry sum : mp.entrySet())\n            System.out.print(sum.getValue() + \" \");\n    }\n\n    public static void main(String args[]) {\n        Node root = new Node(10);\n        root.left = new Node(20);\n        root.right = new Node(50);\n        root.left.left = new Node(30);\n        root.left.right = new Node(40);\n\n        vSum(root);\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/binary-search-tree/#vertical-traversal-of-binary-tree","title":"Vertical Traversal of Binary Tree","text":"<pre><code>import java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\nclass Node {\n    int key;\n    Node left, right;\n\n    Node(int x) {\n        key = x;\n        left = right = null;\n    }\n}\n\nclass Pair {\n    Node node;\n    int hd;\n\n    Pair(Node n, int h) {\n        node = n;\n        hd = h;\n    }\n}\n\nclass Gfg {\n\n    public static void vTraversal(Node root) {\n        Queue&lt;Pair&gt; q = new LinkedList&lt;&gt;();\n        Map&lt;Integer, ArrayList&lt;Integer&gt;&gt; mp = new TreeMap&lt;&gt;();\n        q.add(new Pair(root, 0));\n        while (q.isEmpty() == false) {\n            Pair p = q.poll();\n            Node curr = p.node;\n            int hd = p.hd;\n            if (mp.containsKey(hd))\n                mp.get(hd).add(curr.key);\n            else {\n                ArrayList&lt;Integer&gt; al = new ArrayList&lt;&gt;();\n                al.add(curr.key);\n                mp.put(hd, al);\n            }\n            if (curr.left != null)\n                q.add(new Pair(curr.left, hd - 1));\n            if (curr.right != null)\n                q.add(new Pair(curr.right, hd + 1));\n        }\n        for (Map.Entry&lt;Integer, ArrayList&lt;Integer&gt;&gt; p : mp.entrySet()) {\n            ArrayList&lt;Integer&gt; al = p.getValue();\n            for (int x : al)\n                System.out.print(x + \" \");\n            System.out.println();\n        }\n    }\n\n    public static void main(String args[]) {\n        Node root = new Node(10);\n        root.left = new Node(20);\n        root.right = new Node(30);\n        root.left.left = new Node(40);\n        root.left.right = new Node(50);\n\n        vTraversal(root);\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/binary-search-tree/#top-view-of-binary-tree","title":"Top View of Binary Tree","text":"<pre><code>import java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\nclass Node {\n    int key;\n    Node left, right;\n\n    Node(int x) {\n        key = x;\n        left = right = null;\n    }\n}\n\nclass Pair {\n    Node node;\n    int hd;\n\n    Pair(Node n, int h) {\n        node = n;\n        hd = h;\n    }\n}\n\nclass Gfg {\n\n    public static void topView(Node root) {\n        Queue&lt;Pair&gt; q = new LinkedList&lt;&gt;();\n        Map&lt;Integer, Integer&gt; mp = new TreeMap&lt;&gt;();\n        q.add(new Pair(root, 0));\n        while (q.isEmpty() == false) {\n            Pair p = q.poll();\n            Node curr = p.node;\n            int hd = p.hd;\n            if (mp.containsKey(hd) == false)\n                mp.put(hd, curr.key);\n            if (curr.left != null)\n                q.add(new Pair(curr.left, hd - 1));\n            if (curr.right != null)\n                q.add(new Pair(curr.right, hd + 1));\n        }\n        for (Map.Entry&lt;Integer, Integer&gt; x : mp.entrySet()) {\n            System.out.print(x.getValue() + \" \");\n        }\n    }\n\n    public static void main(String args[]) {\n        Node root = new Node(10);\n        root.left = new Node(20);\n        root.right = new Node(30);\n        root.left.left = new Node(40);\n        root.left.right = new Node(50);\n\n        topView(root);\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/binary-search-tree/#bottom-view-of-binary-tree","title":"Bottom View of Binary Tree","text":"<pre><code>import java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\nclass Node {\n    int key;\n    Node left, right;\n\n    Node(int x) {\n        key = x;\n        left = right = null;\n    }\n}\n\nclass Pair {\n    Node node;\n    int hd;\n\n    Pair(Node n, int h) {\n        node = n;\n        hd = h;\n    }\n}\n\nclass Gfg {\n\n    public static void topView(Node root) {\n        Queue&lt;Pair&gt; q = new LinkedList&lt;&gt;();\n        Map&lt;Integer, Integer&gt; mp = new TreeMap&lt;&gt;();\n        q.add(new Pair(root, 0));\n        while (q.isEmpty() == false) {\n            Pair p = q.poll();\n            Node curr = p.node;\n            int hd = p.hd;\n            mp.put(hd, curr.key);\n            if (curr.left != null)\n                q.add(new Pair(curr.left, hd - 1));\n            if (curr.right != null)\n                q.add(new Pair(curr.right, hd + 1));\n        }\n        for (Map.Entry&lt;Integer, Integer&gt; x : mp.entrySet()) {\n            System.out.print(x.getValue() + \" \");\n        }\n    }\n\n    public static void main(String args[]) {\n        Node root = new Node(10);\n        root.left = new Node(20);\n        root.right = new Node(30);\n        root.left.left = new Node(40);\n        root.left.right = new Node(50);\n\n        topView(root);\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/bit-manipulation/","title":"Bit Manipulation","text":"<ul> <li>12 : 1100 - 5 : 0101 = 0111</li> <li>inverse bits of 5 : 1010 and add 1 : 1011</li> <li>1100+1011 = 0111 = 7</li> <li>&amp; : AND</li> <li>| : OR</li> <li>^ : XOR</li> <li>~ : inverse</li> <li>&gt;&gt; : right shift | a&gt;&gt;1; divide by 2</li> <li>&lt;&lt; : left shift | a&lt;&lt;1; multiple by 2</li> <li>bitwise OR is sum of 2 number </li> <li>a = 5 (101) and b = 2 (010) </li> <li>a|b = 111 which is 7 : if no carry is involved </li> <li>is carry is there, then a|b + a\\&amp;b</li> </ul>"},{"location":"data-structure-and-algorithms/bit-manipulation/#divide-and-multiply","title":"Divide and Multiply","text":"<pre><code>int a = 6;\nint ans1 = a &lt;&lt; 1;\nint ans2 = a &gt;&gt; 1;\ncout &lt;&lt; ans1 &lt;&lt; \" \" &lt;&lt; ans2 &lt;&lt; endl;\n</code></pre>"},{"location":"data-structure-and-algorithms/bit-manipulation/#check-if-the-kth-bit-is-set-or-not","title":"Check if the kth bit is set or not","text":"<pre><code>int num = 7; // 0111\nint k = 3;\n\n// bring ! in 0!11 to 011! and check for 1\n\nint ans = num &gt;&gt; (k - 1);\nif (ans &amp; 1 == 1)\n{\n    cout &lt;&lt; \"yes\" &lt;&lt; endl;\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/bit-manipulation/#check-if-the-number-is-odd-or-even","title":"Check If The Number is Odd or Even","text":"<pre><code>// if last bit if 1, then odd, else even\nint num = 5; // 101, \nif (num &amp; 1 == 1)\n    cout &lt;&lt; \"odd\\n\";\nelse\n    cout &lt;&lt; \"even\\n\";\n</code></pre>"},{"location":"data-structure-and-algorithms/bit-manipulation/#to-swap-two-numbers","title":"To swap two numbers","text":"<pre><code>// it is what it is\nint a = 5;\nint b = 7;\na = a ^ b;\nb = a ^ b;\na = a ^ b;\ncout &lt;&lt; b &lt;&lt; \" \" &lt;&lt; a &lt;&lt; \"\\n\";\n</code></pre>"},{"location":"data-structure-and-algorithms/bit-manipulation/#check-if-a-number-is-a-power-of-2","title":"Check if a number is a power of 2","text":"<pre><code>// 8 = 1000\n// 7 = 0111\n// &amp; = 0000\nint x = 8;\nif ((x &amp; (x - 1)) == 0)\n    cout &lt;&lt; \"Yes\\n\";\nelse\n    cout &lt;&lt; \"No\\n\";\n</code></pre>"},{"location":"data-structure-and-algorithms/bit-manipulation/#count-set-bits","title":"Count set bits","text":"<pre><code>int num = 31;\nint count = 0;\nwhile (num &gt; 0)\n{\n    if (num &amp; 1 == 1) // like %2 for odd\n    {\n        ++count;\n    }\n    num = num&gt;&gt;1; // like divide by 2\n}\ncout &lt;&lt; \"Count : \" &lt;&lt; count &lt;&lt; endl;\n</code></pre>"},{"location":"data-structure-and-algorithms/bit-manipulation/#find-the-odd-occuring-element","title":"Find the odd occuring element","text":"<pre><code>#include &lt;stdio.h&gt;\n\n// Function to return the only odd\n// occurring element\nint findOdd(int arr[], int n)\n{\n    int res = 0, i;\n    for (i = 0; i &lt; n; i++)\n        res ^= arr[i];\n    return res;\n}\n\nint main(void)\n{\n    int arr[] = { 12, 12, 14, 90, 14, 14, 14 };\n    int n = sizeof(arr) / sizeof(arr[0]);\n    printf(\"The odd occurring element is %d \",\n           findOdd(arr, n));\n    return 0;\n}\n\noutput :\nThe odd occurring element is 90 \n</code></pre>"},{"location":"data-structure-and-algorithms/dynamic-programming/","title":"Dynamic Programming","text":""},{"location":"data-structure-and-algorithms/dynamic-programming/#factorial-using-dp","title":"Factorial using DP","text":""},{"location":"data-structure-and-algorithms/dynamic-programming/#memoization","title":"Memoization","text":"<pre><code>/*package whatever //do not write package name here */\n\nimport java.io.*;\nimport java.util.*;\nimport static java.lang.System.out;\n\nclass GFG {\n\n    static int[] memo;\n\n    static int fib(int n) {\n        if (memo[n] == -1) {\n            int res;\n\n            if (n == 0 || n == 1)\n                return n;\n\n            else {\n                res = fib(n - 1) + fib(n - 2);\n\n            }\n\n            memo[n] = res;\n\n        }\n\n        return memo[n];\n    }\n\n    public static void main(String[] args) {\n\n        int n = 5;\n\n        memo = new int[n + 1];\n\n        Arrays.fill(memo, -1);\n\n        out.println(fib(n));\n\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/dynamic-programming/#tabulation","title":"Tabulation","text":"<pre><code>/*package whatever //do not write package name here */\n\nimport java.io.*;\nimport java.util.*;\nimport static java.lang.System.out;\n\nclass GFG {\n\n    static int fib(int n) {\n        int f[] = new int[n + 1];\n\n        f[0] = 0;\n        f[1] = 1;\n\n        for (int i = 2; i &lt;= n; i++) {\n            f[i] = f[i - 1] + f[i - 2];\n        }\n\n        return f[n];\n\n    }\n\n    public static void main(String[] args) {\n\n        int n = 5;\n\n        out.println(fib(n));\n\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/dynamic-programming/#longest-common-subsequence-part-1","title":"Longest Common Subsequence (Part 1)","text":""},{"location":"data-structure-and-algorithms/dynamic-programming/#memoization_1","title":"Memoization","text":"<pre><code>/*package whatever //do not write package name here */\n\nimport java.io.*;\nimport java.util.*;\nimport static java.lang.System.out;\n\nclass GFG {\n\n    static int[][] memo;\n\n    static int lcs(String s1, String s2, int n, int m) {\n        if (memo[n][m] != -1)\n            return memo[n][m];\n\n        if (n == 0 || m == 0)\n            memo[n][m] = 0;\n\n        else {\n            if (s1.charAt(n - 1) == s2.charAt(m - 1))\n                memo[n][m] = 1 + lcs(s1, s2, n - 1, m - 1);\n            else\n                memo[n][m] = Math.max(lcs(s1, s2, n - 1, m), lcs(s1, s2, n, m - 1));\n        }\n\n        return memo[n][m];\n\n    }\n\n    public static void main(String[] args) {\n\n        String s1 = \"AXYZ\", s2 = \"BAZ\";\n\n        int n = 4, m = 3;\n\n        memo = new int[n + 1][m + 1];\n\n        for (int[] i : memo) {\n            Arrays.fill(i, -1);\n        }\n\n        System.out.println(lcs(s1, s2, n, m));\n\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/dynamic-programming/#tabulation_1","title":"Tabulation","text":"<pre><code>/*package whatever //do not write package name here */\n\nimport java.io.*;\nimport java.util.*;\nimport static java.lang.System.out;\n\nclass GFG {\n\n    static int lcs(String s1, String s2) {\n        int m = s1.length(), n = s2.length();\n\n        int dp[][] = new int[m + 1][n + 1];\n\n        for (int i = 1; i &lt;= m; i++) {\n            for (int j = 1; j &lt;= n; j++) {\n                if (s1.charAt(i - 1) == s2.charAt(j - 1))\n                    dp[i][j] = 1 + dp[i - 1][j - 1];\n                else\n                    dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n            }\n        }\n\n        return dp[m][n];\n\n    }\n\n    public static void main(String[] args) {\n\n        String s1 = \"AXYZ\", s2 = \"BAZ\";\n\n        System.out.println(lcs(s1, s2));\n\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/dynamic-programming/#variation-of-lcs","title":"Variation of LCS","text":"<ul> <li>Diff Utility</li> <li>Min. insert or delete to convert s1 to s2</li> <li>Short common sequence</li> <li>Longest Palindrome Sub sequence</li> <li>Longest Repeating Sub sequence</li> <li>Printing LCS</li> </ul>"},{"location":"data-structure-and-algorithms/dynamic-programming/#coin-change-count-combinations","title":"Coin Change Count Combinations","text":"<pre><code>/*package whatever //do not write package name here */\n\nimport java.io.*;\nimport java.util.*;\nimport static java.lang.System.out;\n\nclass GFG {\n\n    static int getCount(int coins[], int n, int sum) {\n        int dp[][] = new int[sum + 1][n + 1];\n\n        for (int i = 0; i &lt;= n; i++) {\n            dp[0][i] = 1;\n        }\n\n        for (int i = 1; i &lt;= sum; i++) {\n            for (int j = 1; j &lt;= n; j++) {\n                dp[i][j] = dp[i][j - 1];\n\n                if (coins[j - 1] &lt;= i)\n                    dp[i][j] += dp[i - coins[j - 1]][j];\n            }\n        }\n\n        return dp[sum][n];\n\n    }\n\n    public static void main(String[] args) {\n\n        int coins[] = { 1, 2, 3 }, sum = 4, n = 3;\n\n        System.out.println(getCount(coins, n, sum));\n\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/dynamic-programming/#edit-distance-problem","title":"Edit Distance Problem","text":"<pre><code>/*package whatever //do not write package name here */\n\nimport java.io.*;\nimport java.util.*;\nimport static java.lang.System.out;\n\nclass GFG {\n\n    static int eD(String s1, String s2, int m, int n) {\n        if (m == 0)\n            return n;\n        if (n == 0)\n            return m;\n\n        if (s1.charAt(m - 1) == s2.charAt(n - 1))\n            return eD(s1, s2, m - 1, n - 1);\n        else {\n            return 1 + Math.min(eD(s1, s2, m, n - 1), Math.min(eD(s1, s2, m - 1, n), eD(s1, s2, m - 1, n - 1)));\n        }\n\n    }\n\n    public static void main(String[] args) {\n\n        String s1 = \"CAT\", s2 = \"CUT\";\n        int n = 3, m = 3;\n\n        System.out.println(eD(s1, s2, m, n));\n\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/dynamic-programming/#edit-distance-problem-dp","title":"Edit Distance Problem DP","text":"<pre><code>/*package whatever //do not write package name here */\n\nimport java.io.*;\nimport java.util.*;\nimport static java.lang.System.out;\n\nclass GFG {\n\n    static int eD(String s1, String s2, int m, int n) {\n        int dp[][] = new int[m + 1][n + 1];\n\n        for (int i = 0; i &lt;= m; i++) {\n            dp[i][0] = i;\n        }\n\n        for (int j = 0; j &lt;= n; j++) {\n            dp[0][j] = j;\n        }\n\n        for (int i = 1; i &lt;= m; i++) {\n            for (int j = 1; j &lt;= n; j++) {\n                if (s1.charAt(i - 1) == s2.charAt(j - 1)) {\n                    dp[i][j] = dp[i - 1][j - 1];\n                } else {\n                    dp[i][j] = 1 + Math.min(dp[i - 1][j], Math.min(dp[i][j - 1], dp[i - 1][j - 1]));\n\n                }\n            }\n        }\n\n        return dp[m][n];\n    }\n\n    public static void main(String[] args) {\n\n        String s1 = \"CAT\", s2 = \"CUT\";\n        int n = 3, m = 3;\n\n        System.out.println(eD(s1, s2, m, n));\n\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/dynamic-programming/#longest-increasing-subsequence-problem","title":"Longest Increasing Subsequence Problem","text":"<pre><code>/*package whatever //do not write package name here */\n\nimport java.io.*;\nimport java.util.*;\nimport static java.lang.System.out;\n\nclass GFG {\n\n    static int LIS(int arr[], int n) {\n        int lis[] = new int[n];\n\n        lis[0] = 1;\n\n        for (int i = 1; i &lt; n; i++) {\n            lis[i] = 1;\n            for (int j = 0; j &lt; i; j++)\n                if (arr[i] &gt; arr[j])\n                    lis[i] = Math.max(lis[i], lis[j] + 1);\n        }\n\n        int res = lis[0];\n\n        for (int i = 0; i &lt; n; i++) {\n            res = Math.max(lis[i], res);\n        }\n\n        return res;\n\n    }\n\n    public static void main(String[] args) {\n        int arr[] = { 3, 4, 2, 8, 10, 5, 1 };\n        int n = 7;\n\n        System.out.println(LIS(arr, n));\n\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/dynamic-programming/#longest-increasing-subsequence-o-nlogn","title":"Longest Increasing Subsequence O( nlog(n) )","text":"<pre><code>/*package whatever //do not write package name here */\n\nimport java.io.*;\nimport java.util.*;\nimport static java.lang.System.out;\n\nclass GFG {\n\n    static int ceilIdx(int tail[], int l, int r, int key) {\n        while (r &gt; l) {\n            int m = l + (r - l) / 2;\n            if (tail[m] &gt;= key)\n                r = m;\n            else\n                l = m + 1;\n        }\n\n        return r;\n    }\n\n    static int LIS(int arr[], int n) {\n\n        int[] tail = new int[n];\n        int len = 1;\n\n        tail[0] = arr[0];\n\n        for (int i = 1; i &lt; n; i++) {\n\n            if (arr[i] &gt; tail[len - 1]) {\n                tail[len] = arr[i];\n                len++;\n            } else {\n                int c = ceilIdx(tail, 0, len - 1, arr[i]);\n\n                tail[c] = arr[i];\n            }\n        }\n\n        return len;\n    }\n\n    public static void main(String[] args) {\n        int arr[] = { 3, 10, 20, 4, 6, 7 };\n        int n = 6;\n\n        System.out.println(LIS(arr, n));\n\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/dynamic-programming/#variation-of-lis","title":"Variation of LIS","text":"<ul> <li>Minimum deletions to make array sorted</li> <li>Maximum Sum Increasing Sub sequence</li> <li>Max Length Bitonic Solution</li> <li>Building Bridges</li> <li>The longest chain</li> </ul>"},{"location":"data-structure-and-algorithms/dynamic-programming/#maximum-cuts","title":"Maximum Cuts","text":"<pre><code>/*package whatever //do not write package name here */\n\nimport java.io.*;\nimport java.util.*;\nimport static java.lang.System.out;\n\nclass GFG {\n\n    static int maxCuts(int n, int a, int b, int c) {\n\n        int dp[] = new int[n + 1];\n\n        dp[0] = 0;\n\n        for (int i = 1; i &lt;= n; i++) {\n            dp[i] = -1;\n\n            if (i - a &gt;= 0)\n                dp[i] = Math.max(dp[i], dp[i - a]);\n\n            if (i - b &gt;= 0)\n                dp[i] = Math.max(dp[i], dp[i - b]);\n\n            if (i - c &gt;= 0)\n                dp[i] = Math.max(dp[i], dp[i - c]);\n\n            if (dp[i] != -1)\n                dp[i]++;\n        }\n\n        return dp[n];\n\n    }\n\n    public static void main(String[] args) {\n        int n = 5, a = 1, b = 2, c = 3;\n\n        System.out.println(maxCuts(n, a, b, c));\n\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/dynamic-programming/#minimum-coins-to-make-a-value","title":"Minimum coins to make a value","text":"<pre><code>/*package whatever //do not write package name here */\n\nimport java.io.*;\nimport java.util.*;\nimport static java.lang.System.out;\n\nclass GFG {\n\n    static int minCoins(int arr[], int m, int value) {\n\n        int dp[] = new int[value + 1];\n\n        dp[0] = 0;\n\n        for (int i = 1; i &lt;= value; i++)\n            dp[i] = Integer.MAX_VALUE;\n\n        for (int i = 1; i &lt;= value; i++) {\n\n            for (int j = 0; j &lt; m; j++)\n                if (arr[j] &lt;= i) {\n                    int sub_res = dp[i - arr[j]];\n                    if (sub_res != Integer.MAX_VALUE &amp;&amp; sub_res + 1 &lt; dp[i])\n                        dp[i] = sub_res + 1;\n\n                }\n\n        }\n        return dp[value];\n\n    }\n\n    public static void main(String[] args) {\n        int arr[] = { 3, 4, 1 }, val = 5, n = 3;\n\n        System.out.println(minCoins(arr, n, val));\n\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/dynamic-programming/#minimum-jumps-to-reach-at-end","title":"Minimum Jumps to reach at end","text":"<pre><code>/*package whatever //do not write package name here */\n\nimport java.io.*;\nimport java.util.*;\nimport static java.lang.System.out;\n\nclass GFG {\n\n    static int minJumps(int arr[], int n) {\n\n        int dp[] = new int[n];\n        int i, j;\n\n        dp[0] = 0;\n\n        for (i = 1; i &lt; n; i++) {\n            dp[i] = Integer.MAX_VALUE;\n            for (j = 0; j &lt; i; j++) {\n                if (i &lt;= j + arr[j] &amp;&amp; dp[j] != Integer.MAX_VALUE) {\n                    dp[i] = Math.min(dp[i], dp[j] + 1);\n                    break;\n                }\n            }\n        }\n        return dp[n - 1];\n    }\n\n    public static void main(String[] args) {\n        int arr[] = { 3, 4, 2, 1, 2, 1 }, n = 6;\n\n        System.out.println(minJumps(arr, n));\n\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/dynamic-programming/#0-1-knapsack-problem","title":"0-1 knapsack problem","text":"<pre><code>/*package whatever //do not write package name here */\n\nimport java.io.*;\nimport java.util.*;\nimport static java.lang.System.out;\n\nclass GFG {\n\n    static int knapSack(int W, int wt[], int val[], int n) {\n\n        if (n == 0 || W == 0)\n            return 0;\n\n        if (wt[n - 1] &gt; W)\n            return knapSack(W, wt, val, n - 1);\n\n        else\n            return Math.max(val[n - 1] + knapSack(W - wt[n - 1], wt, val, n - 1), knapSack(W, wt, val, n - 1));\n    }\n\n    public static void main(String[] args) {\n        int val[] = { 10, 40, 30, 50 };\n        int wt[] = { 5, 4, 6, 3 };\n        int W = 10;\n        int n = 4;\n\n        System.out.println(knapSack(W, wt, val, n));\n\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/dynamic-programming/#0-1-knapsack-problem-dp-solution","title":"0-1 knapsack problem DP Solution","text":"<pre><code>/*package whatever //do not write package name here */\n\nimport java.io.*;\nimport java.util.*;\nimport static java.lang.System.out;\n\nclass GFG {\n\n    static int knapSack(int W, int wt[], int val[], int n) {\n\n        int dp[][] = new int[n + 1][W + 1];\n\n        for (int i = 0; i &lt;= W; i++) {\n            dp[0][i] = 0;\n        }\n\n        for (int i = 0; i &lt;= n; i++) {\n            dp[i][0] = 0;\n        }\n\n        for (int i = 1; i &lt;= n; i++) {\n            for (int j = 1; j &lt;= W; j++) {\n                if (wt[i - 1] &gt; j)\n                    dp[i][j] = dp[i - 1][j];\n                else\n                    dp[i][j] = Math.max(val[i - 1] + dp[i - 1][j - wt[i - 1]], dp[i - 1][j]);\n            }\n        }\n\n        return dp[n][W];\n    }\n\n    public static void main(String[] args) {\n        int val[] = { 10, 40, 30, 50 };\n        int wt[] = { 5, 4, 6, 3 };\n        int W = 10;\n        int n = 4;\n\n        System.out.println(knapSack(W, wt, val, n));\n\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/dynamic-programming/#optimal-strategy-for-a-game","title":"Optimal Strategy for a Game","text":"<pre><code>/*package whatever //do not write package name here */\n\nimport java.io.*;\nimport java.util.*;\nimport static java.lang.System.out;\n\nclass GFG {\n\n    static int sol(int[] arr, int n) {\n        int dp[][] = new int[n][n];\n\n        for (int i = 0; i &lt; n - 1; i++) {\n            dp[i][i + 1] = Math.max(arr[i], arr[i + 1]);\n        }\n\n        for (int gap = 3; gap &lt; n; gap = gap + 2) {\n            for (int i = 0; i + gap &lt; n; i++) {\n                int j = gap + i;\n\n                dp[i][j] = Math.max((arr[i] + Math.min(dp[i + 1][j], dp[i + 1][j - 1])),\n                        (arr[i] + Math.min(dp[i + 1][j - 1], dp[i][j - 2])));\n            }\n        }\n\n        return dp[0][n - 1];\n    }\n\n    public static void main(String[] args) {\n\n        int n = 4;\n\n        int arr[] = { 20, 5, 4, 6 };\n\n        System.out.println(sol(arr, n));\n\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/dynamic-programming/#egg-dropping-puzzle-part-1","title":"Egg Dropping Puzzle - Part 1","text":"<pre><code>public class GFG {\n\n    /*\n     * Function to get minimum number of trials needed in worst case with n eggs and\n     * k floors\n     */\n    static int eggDrop(int n, int k) {\n        // If there are no floors, then\n        // no trials needed. OR if there\n        // is one floor, one trial needed.\n        if (k == 1 || k == 0)\n            return k;\n\n        // We need k trials for one egg\n        // and k floors\n        if (n == 1)\n            return k;\n\n        int min = Integer.MAX_VALUE;\n        int x, res;\n\n        // Consider all droppings from\n        // 1st floor to kth floor and\n        // return the minimum of these\n        // values plus 1.\n        for (x = 1; x &lt;= k; x++) {\n            res = Math.max(eggDrop(n - 1, x - 1), eggDrop(n, k - x));\n            if (res &lt; min)\n                min = res;\n        }\n\n        return min + 1;\n    }\n\n    // Driver code\n    public static void main(String args[]) {\n        int n = 2, k = 10;\n        System.out.print(\"Minimum number of \" + \"trials in worst case with \" + n + \" eggs and \" + k + \" floors is \"\n                + eggDrop(n, k));\n    }\n\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/dynamic-programming/#egg-dropping-puzzle-part-2","title":"Egg Dropping Puzzle - Part 2","text":"<pre><code>/*package whatever //do not write package name here */\n\nimport java.io.*;\nimport java.util.*;\nimport static java.lang.System.out;\n\nclass GFG {\n\n    static int res(int e, int f) {\n\n        int dp[][] = new int[f + 1][e + 1];\n\n        for (int i = 1; i &lt;= e; i++) {\n            dp[1][i] = 1;\n            dp[0][i] = 0;\n        }\n\n        for (int j = 1; j &lt;= f; j++) {\n            dp[j][1] = j;\n        }\n\n        for (int i = 2; i &lt;= f; i++) {\n            for (int j = 2; j &lt;= e; j++) {\n                dp[i][j] = Integer.MAX_VALUE;\n                for (int x = 1; x &lt;= i; x++) {\n                    dp[i][j] = Math.min(dp[i][j], 1 + Math.max(dp[x - 1][j - 1], dp[i - x][j]));\n                }\n            }\n        }\n\n        return dp[f][e];\n    }\n\n    public static void main(String[] args) {\n\n        int n = 2;\n\n        int f = 10;\n\n        System.out.println(res(n, f));\n\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/dynamic-programming/#count-bsts-with-n-keys","title":"Count BSTs with n keys","text":"<p>A recursive structure is discussed, then a dynamic programming solution is discussed, finally relation with Catalan Numbers.</p> <pre><code>/*package whatever //do not write package name here */\n\nimport java.io.*;\nimport java.util.*;\nimport static java.lang.System.out;\n\nclass GFG {\n\n    static int countBSTs(int n) {\n        int dp[] = new int[n + 1];\n\n        dp[0] = 1;\n\n        for (int i = 1; i &lt;= n; i++) {\n            dp[i] = 0;\n\n            for (int j = 0; j &lt; i; j++) {\n                dp[i] += dp[j] * dp[i - j - 1];\n            }\n        }\n\n        return dp[n];\n    }\n\n    public static void main(String[] args) {\n\n        int n = 4;\n\n        System.out.println(countBSTs(n));\n\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/dynamic-programming/#maximum-sum-with-no-two-consecutive","title":"Maximum sum with no two consecutive","text":""},{"location":"data-structure-and-algorithms/dynamic-programming/#dp-code-in-o1-space","title":"DP-Code in O(1) space","text":"<pre><code>/*package whatever //do not write package name here */\n\nimport java.io.*;\nimport java.util.*;\nimport static java.lang.System.out;\n\nclass GFG {\n\n    static int maxSum(int arr[], int n) {\n        if (n == 0)\n            return arr[0];\n\n        int prev_prev = arr[0];\n        int prev = Math.max(arr[0], arr[1]);\n        int res = prev;\n\n        for (int i = 3; i &lt;= n; i++) {\n            res = Math.max(prev, prev_prev + arr[i - 1]);\n\n            prev_prev = prev;\n\n            prev = res;\n        }\n\n        return res;\n    }\n\n    public static void main(String[] args) {\n\n        int n = 5, arr[] = { 10, 20, 30, 40, 50 };\n\n        System.out.println(maxSum(arr, n));\n\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/dynamic-programming/#dp-code-in-on-space","title":"DP-Code in O(n) space","text":"<pre><code>/*package whatever //do not write package name here */\n\nimport java.io.*;\nimport java.util.*;\nimport static java.lang.System.out;\n\nclass GFG {\n\n    static int maxSum(int arr[], int n) {\n        if (n == 0)\n            return arr[0];\n\n        int dp[] = new int[n + 1];\n\n        dp[1] = arr[0];\n        dp[2] = Math.max(arr[0], arr[1]);\n\n        for (int i = 3; i &lt;= n; i++) {\n            dp[i] = Math.max(dp[i - 1], dp[i - 2] + arr[i - 1]);\n        }\n\n        return dp[n];\n    }\n\n    public static void main(String[] args) {\n\n        int n = 5, arr[] = { 10, 20, 30, 40, 50 };\n\n        System.out.println(maxSum(arr, n));\n\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/dynamic-programming/#subset-sum-problem-recursive-solution","title":"Subset Sum Problem (Recursive Solution)","text":"<pre><code>/*package whatever //do not write package name here */\n\nimport java.io.*;\nimport java.util.*;\nimport static java.lang.System.out;\n\nclass GFG {\n\n    static int countSubsets(int arr[], int n, int sum) {\n        if (n == 0)\n            return sum == 0 ? 1 : 0;\n\n        return countSubsets(arr, n - 1, sum) + countSubsets(arr, n - 1, sum - arr[n - 1]);\n    }\n\n    public static void main(String[] args) {\n\n        int n = 3, arr[] = { 10, 20, 15 }, sum = 25;\n\n        System.out.println(countSubsets(arr, n, sum));\n\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/dynamic-programming/#subset-sum-problem-dp-solution","title":"Subset Sum Problem (DP Solution)","text":"<pre><code>/*package whatever //do not write package name here */\n\nimport java.io.*;\nimport java.util.*;\nimport static java.lang.System.out;\n\nclass GFG {\n\n    static int countSubsets(int arr[], int n, int sum) {\n        int dp[][] = new int[n + 1][sum + 1];\n\n        for (int i = 0; i &lt;= n; i++)\n            dp[i][0] = 1;\n        for (int j = 1; j &lt;= sum; j++)\n            dp[0][j] = 0;\n\n        for (int i = 1; i &lt;= n; i++) {\n            for (int j = 1; j &lt;= sum; j++) {\n                if (j &lt; arr[i - 1])\n                    dp[i][j] = dp[i - 1][j];\n                else\n                    dp[i][j] = dp[i - 1][j] + dp[i][j - arr[i - 1]];\n            }\n        }\n\n        return dp[n][sum];\n    }\n\n    public static void main(String[] args) {\n\n        int n = 3, arr[] = { 2, 5, 3 }, sum = 5;\n\n        System.out.println(countSubsets(arr, n, sum));\n\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/dynamic-programming/#matrix-chain-multiplication","title":"Matrix Chain Multiplication","text":"<pre><code>/* A naive recursive implementation that simply follows \nthe above optimal substructure property */\nclass MatrixChainMultiplication {\n    // Matrix Ai has dimension p[i-1] x p[i] for i = 1..n\n    static int MatrixChainOrder(int p[], int i, int j) {\n        if (i + 1 == j)\n            return 0;\n\n        int min = Integer.MAX_VALUE;\n\n        // place parenthesis at different places between first\n        // and last matrix, recursively calculate count of\n        // multiplications for each parenthesis placement and\n        // return the minimum count\n        for (int k = i + 1; k &lt; j; k++) {\n            int count = MatrixChainOrder(p, i, k) + MatrixChainOrder(p, k, j) + p[i] * p[k] * p[j];\n\n            if (count &lt; min)\n                min = count;\n        }\n\n        // Return minimum count\n        return min;\n    }\n\n    // Driver program to test above function\n    public static void main(String args[]) {\n        int arr[] = new int[] { 40, 20, 30, 10, 30 };\n        int n = arr.length;\n        System.out.println(\"Minimum number of multiplications is \" + MatrixChainOrder(arr, 0, n - 1));\n\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/dynamic-programming/#matrix-chain-multiplication-dp-solution","title":"Matrix Chain Multiplication (DP Solution)","text":"<pre><code>/* A naive recursive implementation that simply follows \nthe above optimal substructure property */\nclass MatrixChainMultiplication {\n    // Matrix Ai has dimension p[i-1] x p[i] for i = 1..n\n    static int MatrixChainOrder(int p[]) {\n        int n = p.length;\n        int dp[][] = new int[n][n];\n        for (int i = 0; i &lt; n - 1; i++)\n            dp[i][i + 1] = 0;\n\n        for (int gap = 2; gap &lt; n; gap++) {\n            for (int i = 0; i + gap &lt; n; i++) {\n                int j = i + gap;\n                dp[i][j] = Integer.MAX_VALUE;\n                for (int k = i + 1; k &lt; j; k++) {\n                    dp[i][j] = Math.min(dp[i][j], dp[i][k] + dp[k][j] + p[i] * p[k] * p[j]);\n                }\n            }\n        }\n\n        return dp[0][n - 1];\n    }\n\n    // Driver program to test above function\n    public static void main(String args[]) {\n        int arr[] = new int[] { 40, 20, 30, 10, 30 };\n        int n = arr.length;\n        System.out.println(\"Minimum number of multiplications is \" + MatrixChainOrder(arr));\n\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/dynamic-programming/#palindrome-partitioning","title":"Palindrome Partitioning","text":"<pre><code>/*package whatever //do not write package name here */\n\nimport java.io.*;\nimport java.util.*;\nimport static java.lang.System.out;\n\nclass GFG {\n\n    static boolean isPalindrome(String input, int start, int end) {\n        // Using two pointer technique to check pallindrome\n        while (start &lt; end) {\n            if (input.charAt(start) != input.charAt(end))\n                return false;\n            start++;\n            end--;\n        }\n        return true;\n    }\n\n    static int palPart(String str) {\n        int n = str.length();\n\n        int dp[][] = new int[n][n];\n\n        for (int i = 0; i &lt; n; i++) {\n            dp[i][i] = 0;\n        }\n\n        for (int gap = 1; gap &lt; n; gap++) {\n            for (int i = 0; i + gap &lt; n; i++) {\n                int j = i + gap;\n\n                if (isPalindrome(str, i, j)) {\n                    dp[i][j] = 0;\n                } else {\n                    dp[i][j] = Integer.MAX_VALUE;\n\n                    for (int k = i; k &lt; j; k++) {\n                        dp[i][j] = Math.min(dp[i][j], 1 + dp[i][k] + dp[k + 1][j]);\n                    }\n                }\n            }\n        }\n\n        return dp[0][n - 1];\n    }\n\n    public static void main(String[] args) {\n\n        String s = \"geek\";\n\n        System.out.println(palPart(s));\n\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/dynamic-programming/#allocate-minimum-pages-naive-method","title":"Allocate Minimum Pages (Naive Method)","text":"<pre><code>import java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\nclass GFG {\n\n    public static void main(String args[]) {\n        int arr[] = { 10, 20, 10, 30 };\n        int n = arr.length;\n        int k = 2;\n\n        System.out.print(minPages(arr, n, k));\n    }\n\n    public static int sum(int arr[], int b, int e) {\n        int s = 0;\n        for (int i = b; i &lt;= e; i++)\n            s += arr[i];\n        return s;\n    }\n\n    public static int minPages(int arr[], int n, int k) {\n        if (k == 1)\n            return sum(arr, 0, n - 1);\n        if (n == 1)\n            return arr[0];\n        int res = Integer.MAX_VALUE;\n        for (int i = 1; i &lt; n; i++) {\n            res = Math.min(res, Math.max(minPages(arr, i, k - 1), sum(arr, i, n - 1)));\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/dynamic-programming/#allocate-minimum-pages-dp-solution","title":"Allocate Minimum Pages (DP Solution)","text":"<pre><code>import java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\nclass GFG { \n\n    public static void main(String args[]) \n    { \n        int arr[]={10,20,10,30};\n        int n=arr.length;\n        int k=2;\n\n        System.out.print(minPages(arr,n,k)); \n    } \n\n    public static int sum(int arr[],int b, int e){\n        int s=0;\n        for(int i=b;i&lt;=e;i++)\n            s+=arr[i];\n        return s;\n    }\n\n    public static int minPages(int arr[],int n, int k){\n        int[][] dp=new int[k+1][n+1];\n        for(int i=1;i&lt;=n;i++)\n            dp[1][i]=sum(arr,0,i-1);\n        for(int i=1;i&lt;=k;i++)\n            dp[i][1]=arr[0];\n\n        for(int i=2;i&lt;=k;i++){\n            for(int j=2;j&lt;=n;j++){\n                int res=Integer.MAX_VALUE;\n                for(int p=1;p&lt;j;p++){\n                    res=Math.min(res,Math.max(dp[i-1][p],sum(arr,p,j-1)));\n                }\n                dp[i][j]=res;\n            }\n        }\n        return dp[k][n];\n    }\n} \n</code></pre>"},{"location":"data-structure-and-algorithms/graph/","title":"Graph","text":""},{"location":"data-structure-and-algorithms/graph/#directed-vs-undirected-graph","title":"Directed vs UnDirected Graph","text":""},{"location":"data-structure-and-algorithms/graph/#directed-graph","title":"Directed Graph","text":"<ul> <li>Degree = no. edges from a graph</li> <li>Sum of degrees = 2 x | no of edges |</li> <li>max number of edge = [ v * (v-1) ]/2</li> </ul>"},{"location":"data-structure-and-algorithms/graph/#undirected-graph","title":"Undirected Graph","text":"<ul> <li>Degree = in-degree + out-degree </li> <li>Sum of in-degree = | no of edges |</li> <li>Sum of out-degree = | no of edges |</li> <li>max number of edge = v * (v-1)</li> </ul>"},{"location":"data-structure-and-algorithms/graph/#concepts-on-graph","title":"Concepts on graph","text":"<ul> <li>Walk (sometimes path) : from going one edge to another via connected edges</li> <li>v1 -&gt; v2 -&gt; v4 -&gt; v2 </li> <li>if no edge exists between 2 vertices, you cannot walk directly</li> <li>Path (simple path) : a walk without repeated vertices allowed</li> <li>Degree : all edges to vertices</li> <li>in-degree : directed graph incoming edges</li> <li>out-degree : directed graph outgoing edges</li> <li>Cyclic : if the walk starts and ends on the same vertices</li> <li>they can directed and undirected</li> <li>Acyclic :  </li> <li>Undirected acyclic graph (UDAG)</li> <li>Directed acyclic graph (DAG)</li> <li>Weighted graph : edges with some weight assigned to it</li> <li>unweighted graph : simple edges</li> </ul>"},{"location":"data-structure-and-algorithms/graph/#adjacency-matrix-vs-list","title":"Adjacency Matrix vs List","text":""},{"location":"data-structure-and-algorithms/graph/#adjacency-matrix","title":"Adjacency Matrix","text":"<p>adjacency matrix : undirected graph</p> <ul> <li>If the diagonal of matrix is 0 and upper and lower triangle are symmetric, then it is a undirected graph</li> <li>size of matrix = |v|x|v|</li> <li>If graph is not symmetric , then it is a directed graph</li> </ul> <p>adjacency matrix : directed graph</p> <ul> <li>space required : |v|x|v|</li> <li>check if u &amp; v are adj : O(1)</li> <li>find all vertices : O(v) : simple matrix row traversal</li> <li>adding/removing edges : O(1)</li> </ul>"},{"location":"data-structure-and-algorithms/graph/#adjacency-matrix-list","title":"Adjacency Matrix List","text":"<p>adjacency list undirected graph</p> <p>adjacency list directed graph</p> <ul> <li>space required : O(V+E)</li> <li>undirected : V+2E</li> <li>directed : V+E</li> <li>check if there is a edge from u to v : O(v)</li> <li>find all adjacency of u : O(degree(u))</li> <li>Find degree of u : O(1)</li> <li>Add an edge : O(1)</li> <li>remove and edge : O(v)</li> </ul>"},{"location":"data-structure-and-algorithms/graph/#applications-of-dfs-vs-bfs","title":"Applications of DFS vs BFS","text":""},{"location":"data-structure-and-algorithms/graph/#applications-of-breadth-first-search","title":"Applications of Breadth First Search","text":"<ul> <li>Shortest Path in unweighted graph</li> <li>Crawler in Search Engine</li> <li>Peer to Peer network</li> <li>Social Networking Search</li> <li>In garbage collection (Cheney's Algorithm)</li> <li>Cycle Detection</li> <li>Ford Fulkerson Algorithm</li> <li>Broadcasting</li> </ul>"},{"location":"data-structure-and-algorithms/graph/#applications-of-depth-first-search","title":"Applications of Depth First Search","text":"<ul> <li>Cycle Detection</li> <li>Topological Sorting</li> <li>Solving Maze and Puzzle Problems</li> <li>Path Finding</li> </ul>"},{"location":"data-structure-and-algorithms/graph/#adjacency-list-implementation-in-java","title":"Adjacency List implementation in Java","text":"<pre><code>import java.util.*;\n\nclass Graph {\n\n    static void addEdge(ArrayList&lt;ArrayList&lt;Integer&gt;&gt; adj, int u, int v) {\n        adj.get(u).add(v);\n        adj.get(v).add(u);\n    }\n\n    static void printGraph(ArrayList&lt;ArrayList&lt;Integer&gt;&gt; adj) {\n        for (int i = 0; i &lt; adj.size(); i++) {\n            for (int j = 0; j &lt; adj.get(i).size(); j++) {\n                System.out.print(adj.get(i).get(j) + \" \");\n            }\n            System.out.println();\n        }\n    }\n\n    public static void main(String[] args) {\n        int V = 4;\n        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; adj = new ArrayList&lt;ArrayList&lt;Integer&gt;&gt;(V);\n\n        for (int i = 0; i &lt; V; i++)\n            adj.add(new ArrayList&lt;Integer&gt;());\n\n        // Adding edges one by one\n        addEdge(adj, 0, 1); addEdge(adj, 0, 2);\n        addEdge(adj, 1, 2); addEdge(adj, 1, 3);\n\n        printGraph(adj);\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/graph/#breadth-first-search-graph-traversal","title":"Breadth First Search Graph Traversal","text":""},{"location":"data-structure-and-algorithms/graph/#how-it-works","title":"How it works","text":"<ul> <li>create a queue to maintain elements for breadth first search</li> <li>to avoid repeating the visited nodes in cyclic graph, create a boolean array of size |v| to mark array[i] as true/false indicating visited status</li> <li>CODE FOR BFS disconnected graph is same </li> </ul>"},{"location":"data-structure-and-algorithms/graph/#disconnected-graph-how-it-works","title":"Disconnected Graph:  How it works","text":"<ul> <li>same as BFS, the algorithm is called for every node assuming it is the source vertice of the disconnected graph.</li> <li>we keep track of visited vertices in an boolean array just like BFS but this visited array is passed from source caller to BFS algorithm (in Java : array is pass by reference)</li> <li>this visited array will avoid calling BFS for nodes of island as they would have been visited </li> </ul>"},{"location":"data-structure-and-algorithms/graph/#to-count-the-number-of-island-in-graph","title":"To count the number of island in graph","text":"<ul> <li>keep track of island source with counter</li> <li>every islands nodes will be ignored as they will be marked as visited by BFS</li> </ul> <pre><code>import java.util.*;\n\nclass Graph {\n\n    static void addEdge(ArrayList&lt;ArrayList&lt;Integer&gt;&gt; adj, int u, int v) {\n        adj.get(u).add(v);\n        adj.get(v).add(u);\n    }\n\n    static void BFS(ArrayList&lt;ArrayList&lt;Integer&gt;&gt; adj, int s, boolean[] visited) {\n        Queue&lt;Integer&gt; q = new LinkedList&lt;&gt;();\n\n        visited[s] = true;\n        q.add(s);\n\n        while (q.isEmpty() == false) {\n            int u = q.poll();\n            System.out.print(u + \" \");\n\n            for (int v : adj.get(u)) {\n                if (visited[v] == false) {\n                    visited[v] = true;\n                    q.add(v);\n                }\n            }\n        }\n    }\n\n    static void BFSDin(ArrayList&lt;ArrayList&lt;Integer&gt;&gt; adj, int V) {\n        boolean[] visited = new boolean[V];\n        int count = 0;        // for counting number of islands\n        for (int i = 0; i &lt; V; i++)\n            visited[i] = false;\n        for (int i = 0; i &lt; V; i++) {\n            if (visited[i] == false) {\n                BFS(adj, i, visited);\n                count++;    // every islands source will be counted, as\n                            // its nodes will be marked visited by BFS\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        int V = 7;\n        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; adj = new ArrayList&lt;ArrayList&lt;Integer&gt;&gt;(V);\n\n        for (int i = 0; i &lt; V; i++)\n            adj.add(new ArrayList&lt;Integer&gt;());\n\n        addEdge(adj, 0, 1); addEdge(adj, 5, 6); addEdge(adj, 4, 6);\n        addEdge(adj, 0, 2); addEdge(adj, 2, 3); addEdge(adj, 1, 3); \n        addEdge(adj, 4, 5);\n\n        System.out.println(\"Following is Breadth First Traversal: \");\n        BFSDin(adj, V);\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/graph/#depth-first-search","title":"Depth First Search","text":""},{"location":"data-structure-and-algorithms/graph/#how-it-works_1","title":"How it works","text":"<ul> <li>Depth first search is achieved with recursion just like tree</li> <li>To avoid cyclic loops, a boolean array containing visited nodes is maintain and passed in the recursion</li> </ul>"},{"location":"data-structure-and-algorithms/graph/#disconnected-graph-how-it-works_1","title":"Disconnected Graph:  How it works","text":"<ul> <li>same as BFS, the algorithm is called for every node assuming it is the source vertice of the disconnected graph.</li> <li>we keep track of visited vertices in an boolean array just like DFS but this visited array is present in recursion call from source caller to DFS algorithm (in Java : array is pass by reference)</li> <li>this visited array will avoid calling DFS for nodes of island as they would have been visited </li> </ul> <pre><code>import java.util.*;\n\nclass Graph {\n\n    static void addEdge(ArrayList&lt;ArrayList&lt;Integer&gt;&gt; adj, int u, int v) {\n        adj.get(u).add(v);\n        adj.get(v).add(u);\n    }\n\n    static void DFSRec(ArrayList&lt;ArrayList&lt;Integer&gt;&gt; adj, int s, boolean[] visited) {\n        visited[s] = true;\n        System.out.print(s + \" \");\n\n        for (int u : adj.get(s)) {\n            if (visited[u] == false)\n                DFSRec(adj, u, visited);\n        }\n    }\n\n    static void DFS(ArrayList&lt;ArrayList&lt;Integer&gt;&gt; adj, int V) {\n        boolean[] visited = new boolean[V];\n        int count = 0;\n\n        for (int i = 0; i &lt; V; i++)\n            visited[i] = false;\n\n        // for include disconnected graphs as well\n        for (int i = 0; i &lt; V; i++) {\n            if (visited[i] == false) {\n                DFSRec(adj, i, visited);\n                count++;\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        int V = 5;\n        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; adj = new ArrayList&lt;ArrayList&lt;Integer&gt;&gt;(V);\n\n        for (int i = 0; i &lt; V; i++)\n            adj.add(new ArrayList&lt;Integer&gt;());\n\n        addEdge(adj, 0, 1); addEdge(adj, 0, 2); addEdge(adj, 1, 2);\n        addEdge(adj, 3, 4);\n\n        System.out.println(\"Following is Depth First Traversal for disconnected graphs: \");\n        DFS(adj, V);\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/graph/#-","title":"------------","text":""},{"location":"data-structure-and-algorithms/graph/#bfs-shortest-path-in-an-unweighted-graph","title":"BFS : Shortest Path in an Unweighted Graph","text":"<pre><code>import java.util.*;\n\nclass Graph {\n\n    static void addEdge(ArrayList&lt;ArrayList&lt;Integer&gt;&gt; adj, int u, int v) {\n        adj.get(u).add(v);\n        adj.get(v).add(u);\n    }\n\n    static void BFS(ArrayList&lt;ArrayList&lt;Integer&gt;&gt; adj, int V, int s, int[] dist) {\n        boolean[] visited = new boolean[V];\n        for (int i = 0; i &lt; V; i++)\n            visited[i] = false;\n\n        Queue&lt;Integer&gt; q = new LinkedList&lt;&gt;();\n\n        visited[s] = true;\n        q.add(s);\n\n        while (q.isEmpty() == false) {\n            int u = q.poll();\n\n            for (int v : adj.get(u)) {\n                if (visited[v] == false) {\n                    dist[v] = dist[u] + 1;\n                    visited[v] = true;\n                    q.add(v);\n                }\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        int V = 4;\n        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; adj = new ArrayList&lt;ArrayList&lt;Integer&gt;&gt;(V);\n\n        for (int i = 0; i &lt; V; i++)\n            adj.add(new ArrayList&lt;Integer&gt;());\n\n        addEdge(adj, 0, 1);\n        addEdge(adj, 1, 2);\n        addEdge(adj, 2, 3);\n        addEdge(adj, 0, 2);\n        addEdge(adj, 1, 3);\n        int[] dist = new int[V];\n        for (int i = 0; i &lt; V; i++) {\n            dist[i] = Integer.MAX_VALUE;\n        }\n        dist[0] = 0;\n        BFS(adj, V, 0, dist);\n\n        for (int i = 0; i &lt; V; i++) {\n            System.out.print(dist[i] + \" \");\n        }\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/graph/#dfs-detect-cycle-in-undirected-graph","title":"DFS : Detect Cycle in Undirected Graph","text":"<pre><code>import java.util.*;\n\nclass Graph {\n\n    static void addEdge(ArrayList&lt;ArrayList&lt;Integer&gt;&gt; adj, int u, int v) {\n        adj.get(u).add(v);\n        adj.get(v).add(u);\n    }\n\n    static boolean DFSRec(ArrayList&lt;ArrayList&lt;Integer&gt;&gt; adj, int s, boolean[] visited, int parent) {\n        visited[s] = true;\n\n        for (int u : adj.get(s)) {\n            if (visited[u] == false) {\n                if (DFSRec(adj, u, visited, s) == true) {\n                    return true;\n                }\n            } else if (u != parent) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    static boolean DFS(ArrayList&lt;ArrayList&lt;Integer&gt;&gt; adj, int V) {\n        boolean[] visited = new boolean[V];\n        for (int i = 0; i &lt; V; i++)\n            visited[i] = false;\n\n        for (int i = 0; i &lt; V; i++) {\n            if (visited[i] == false)\n                if (DFSRec(adj, i, visited, -1) == true)\n                    return true;\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        int V = 6;\n        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; adj = new ArrayList&lt;ArrayList&lt;Integer&gt;&gt;(V);\n\n        for (int i = 0; i &lt; V; i++)\n            adj.add(new ArrayList&lt;Integer&gt;());\n\n        addEdge(adj, 0, 1);\n        addEdge(adj, 1, 2);\n        addEdge(adj, 2, 4);\n        addEdge(adj, 4, 5);\n        addEdge(adj, 1, 3);\n        addEdge(adj, 2, 3);\n\n        if (DFS(adj, V) == true)\n            System.out.println(\"Cycle found\");\n        else\n            System.out.println(\"No cycle found\");\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/graph/#dfs-part-1-detect-cycle-in-a-directed-graph","title":"DFS : Part 1 : Detect Cycle in a Directed Graph","text":"<pre><code>import java.util.*;\n\nclass Graph {\n\n    static void addEdge(ArrayList&lt;ArrayList&lt;Integer&gt;&gt; adj, int u, int v) {\n        adj.get(u).add(v);\n        adj.get(v).add(u);\n    }\n\n    static boolean DFSRec(ArrayList&lt;ArrayList&lt;Integer&gt;&gt; adj, int s, boolean[] visited, boolean[] recSt) {\n        visited[s] = true;\n        recSt[s] = true;\n\n        for (int u : adj.get(s)) {\n            if (visited[u] == false &amp;&amp; DFSRec(adj, u, visited, recSt) == true) {\n                return true;\n            } else if (recSt[u] == true) {\n                return true;\n            }\n        }\n        recSt[s] = false;\n        return false;\n    }\n\n    static boolean DFS(ArrayList&lt;ArrayList&lt;Integer&gt;&gt; adj, int V) {\n        boolean[] visited = new boolean[V];\n        for (int i = 0; i &lt; V; i++)\n            visited[i] = false;\n\n        boolean[] recSt = new boolean[V];\n        for (int i = 0; i &lt; V; i++)\n            recSt[i] = false;\n\n        for (int i = 0; i &lt; V; i++) {\n            if (visited[i] == false)\n                if (DFSRec(adj, i, visited, recSt) == true)\n                    return true;\n        }\n        return false;\n    }\n\n    public static void main(String[] args) {\n        int V = 6;\n        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; adj = new ArrayList&lt;ArrayList&lt;Integer&gt;&gt;(V);\n\n        for (int i = 0; i &lt; V; i++)\n            adj.add(new ArrayList&lt;Integer&gt;());\n\n        addEdge(adj, 0, 1);\n        addEdge(adj, 2, 1);\n        addEdge(adj, 2, 3);\n        addEdge(adj, 3, 4);\n        addEdge(adj, 4, 5);\n        addEdge(adj, 5, 3);\n\n        if (DFS(adj, V) == true)\n            System.out.println(\"Cycle found\");\n        else\n            System.out.println(\"No cycle found\");\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/graph/#topological-sorting-kahns-bfs-based-algortihm","title":"Topological Sorting (Kahn's BFS Based Algortihm)","text":"<pre><code>import java.util.*;\n\nclass Graph {\n\n    static void addEdge(ArrayList&lt;ArrayList&lt;Integer&gt;&gt; adj, int u, int v) {\n        adj.get(u).add(v);\n    }\n\n    static void topologicalSort(ArrayList&lt;ArrayList&lt;Integer&gt;&gt; adj, int V) {\n        int[] in_degree = new int[V];\n\n        for (int u = 0; u &lt; V; u++) {\n            for (int x : adj.get(u))\n                in_degree[x]++;\n        }\n\n        Queue&lt;Integer&gt; q = new LinkedList&lt;&gt;();\n        for (int i = 0; i &lt; V; i++)\n            if (in_degree[i] == 0)\n                q.add(i);\n\n        while (q.isEmpty() == false) {\n            int u = q.poll();\n            System.out.print(u + \" \");\n\n            for (int x : adj.get(u))\n                if (--in_degree[x] == 0)\n                    q.add(x);\n        }\n    }\n\n    public static void main(String[] args) {\n        int V = 5;\n        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; adj = new ArrayList&lt;ArrayList&lt;Integer&gt;&gt;(V);\n\n        for (int i = 0; i &lt; V; i++)\n            adj.add(new ArrayList&lt;Integer&gt;());\n\n        addEdge(adj, 0, 2);\n        addEdge(adj, 0, 3);\n        addEdge(adj, 1, 3);\n        addEdge(adj, 1, 4);\n        addEdge(adj, 2, 3);\n\n        System.out.println(\"Following is a Topological Sort of\");\n        topologicalSort(adj, V);\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/graph/#part-2-detect-cycle-in-a-directed-graph-using-kahns-algorithm","title":"Part 2 : Detect Cycle in a Directed Graph ( using kahn's Algorithm )","text":"<pre><code>import java.util.*;\n\nclass Graph {\n\n    static void addEdge(ArrayList&lt;ArrayList&lt;Integer&gt;&gt; adj, int u, int v) {\n        adj.get(u).add(v);\n    }\n\n    static void topologicalSort(ArrayList&lt;ArrayList&lt;Integer&gt;&gt; adj, int V) {\n        int[] in_degree = new int[V];\n\n        for (int u = 0; u &lt; V; u++) {\n            for (int x : adj.get(u))\n                in_degree[x]++;\n        }\n\n        Queue&lt;Integer&gt; q = new LinkedList&lt;&gt;();\n        for (int i = 0; i &lt; V; i++)\n            if (in_degree[i] == 0)\n                q.add(i);\n\n        int count = 0;\n        while (q.isEmpty() == false) {\n            int u = q.poll();\n\n            for (int x : adj.get(u))\n                if (--in_degree[x] == 0)\n                    q.add(x);\n\n            count++;\n        }\n        if (count != V) {\n            System.out.println(\"There exists a cycle in the graph\");\n        } else {\n            System.out.println(\"There exists no cycle in the graph\");\n        }\n    }\n\n    public static void main(String[] args) {\n        int V = 5;\n        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; adj = new ArrayList&lt;ArrayList&lt;Integer&gt;&gt;(V);\n\n        for (int i = 0; i &lt; V; i++)\n            adj.add(new ArrayList&lt;Integer&gt;());\n\n        addEdge(adj, 0, 1);\n        addEdge(adj, 4, 1);\n        addEdge(adj, 1, 2);\n        addEdge(adj, 2, 3);\n        addEdge(adj, 3, 1);\n\n        topologicalSort(adj, V);\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/graph/#topological-sorting-dfs-based-algorithm","title":"Topological Sorting (DFS Based Algorithm)","text":"<pre><code>import java.util.*;\n\nclass Graph {\n\n    static void addEdge(ArrayList&lt;ArrayList&lt;Integer&gt;&gt; adj, int u, int v) {\n        adj.get(u).add(v);\n    }\n\n    static void DFS(ArrayList&lt;ArrayList&lt;Integer&gt;&gt; adj, int u, Stack&lt;Integer&gt; st, boolean visited[]) {\n        visited[u] = true;\n\n        for (int v : adj.get(u)) {\n            if (visited[v] == false)\n                DFS(adj, v, st, visited);\n        }\n        st.push(new Integer(u));\n    }\n\n    static void topologicalSort(ArrayList&lt;ArrayList&lt;Integer&gt;&gt; adj, int V) {\n        boolean[] visited = new boolean[V];\n        for (int i = 0; i &lt; V; i++)\n            visited[i] = false;\n        Stack&lt;Integer&gt; st = new Stack&lt;Integer&gt;();\n\n        for (int u = 0; u &lt; V; u++) {\n            if (visited[u] == false) {\n                DFS(adj, u, st, visited);\n            }\n        }\n\n        while (st.empty() == false)\n            System.out.print(st.pop() + \" \");\n\n    }\n\n    public static void main(String[] args) {\n        int V = 5;\n        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; adj = new ArrayList&lt;ArrayList&lt;Integer&gt;&gt;(V);\n\n        for (int i = 0; i &lt; V; i++)\n            adj.add(new ArrayList&lt;Integer&gt;());\n\n        addEdge(adj, 0, 1);\n        addEdge(adj, 1, 3);\n        addEdge(adj, 2, 3);\n        addEdge(adj, 3, 4);\n        addEdge(adj, 2, 4);\n\n        System.out.println(\"Following is a Topological Sort of\");\n        topologicalSort(adj, V);\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/graph/#shortest-path-in-directed-acyclic-graph","title":"Shortest Path in Directed Acyclic Graph","text":"<pre><code>import java.util.Iterator;\nimport java.util.LinkedList;\nimport java.util.Stack;\n\nclass AdjListNode {\n    private int v;\n    private int weight;\n\n    AdjListNode(int _v, int _w) {\n        v = _v;\n        weight = _w;\n    }\n\n    int getV() {\n        return v;\n    }\n\n    int getWeight() {\n        return weight;\n    }\n}\n\nclass Graph {\n    private int V;\n    private LinkedList&lt;AdjListNode&gt; adj[];\n\n    Graph(int v) {\n        V = v;\n        adj = new LinkedList[V];\n        for (int i = 0; i &lt; v; ++i)\n            adj[i] = new LinkedList&lt;AdjListNode&gt;();\n    }\n\n    void addEdge(int u, int v, int weight) {\n        AdjListNode node = new AdjListNode(v, weight);\n        adj[u].add(node);\n    }\n\n    void topologicalSortUtil(int v, Boolean visited[], Stack stack) {\n\n        visited[v] = true;\n        Integer i;\n\n        Iterator&lt;AdjListNode&gt; it = adj[v].iterator();\n        while (it.hasNext()) {\n            AdjListNode node = it.next();\n            if (!visited[node.getV()])\n                topologicalSortUtil(node.getV(), visited, stack);\n        }\n\n        stack.add(v);\n    }\n\n    void shortestPath(int s) {\n        Stack stack = new Stack();\n        int dist[] = new int[V];\n\n        Boolean visited[] = new Boolean[V];\n        for (int i = 0; i &lt; V; i++)\n            visited[i] = false;\n\n        for (int i = 0; i &lt; V; i++)\n            if (visited[i] == false)\n                topologicalSortUtil(i, visited, stack);\n\n        for (int i = 0; i &lt; V; i++)\n            dist[i] = Integer.MAX_VALUE;\n        dist[s] = 0;\n\n        while (stack.empty() == false) {\n            int u = (int) stack.pop();\n\n            Iterator&lt;AdjListNode&gt; it;\n            if (dist[u] != Integer.MAX_VALUE) {\n                it = adj[u].iterator();\n                while (it.hasNext()) {\n                    AdjListNode i = it.next();\n                    if (dist[i.getV()] &gt; dist[u] + i.getWeight())\n                        dist[i.getV()] = dist[u] + i.getWeight();\n                }\n            }\n        }\n\n        for (int i = 0; i &lt; V; i++) {\n            if (dist[i] == Integer.MAX_VALUE)\n                System.out.print(\"INF \");\n            else\n                System.out.print(dist[i] + \" \");\n        }\n    }\n}\n\nclass Main {\n    public static void main(String args[]) {\n\n        Graph g = new Graph(6);\n        g.addEdge(0, 1, 2);\n        g.addEdge(0, 4, 1);\n        g.addEdge(1, 2, 3);\n        g.addEdge(4, 2, 2);\n        g.addEdge(4, 5, 4);\n        g.addEdge(2, 3, 6);\n        g.addEdge(5, 3, 1);\n\n        int s = 0;\n        System.out.println(\"Following are shortest distances \" + \"from source \" + s);\n        g.shortestPath(s);\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/graph/#prims-algorithm-minimum-spanning-tree","title":"Prim's Algorithm / Minimum Spanning Tree","text":"<pre><code>import java.util.*;\nimport java.lang.*;\nimport java.io.*;\n\nclass Gfg {\n\n    static final int V = 4;\n\n    public static int primMST(int graph[][]) {\n\n        int[] key = new int[V];\n        int res = 0;\n        Arrays.fill(key, Integer.MAX_VALUE);\n        boolean[] mSet = new boolean[V];\n        key[0] = 0;\n\n        for (int count = 0; count &lt; V; count++) {\n            int u = -1;\n\n            for (int i = 0; i &lt; V; i++)\n                if (!mSet[i] &amp;&amp; (u == -1 || key[i] &lt; key[u]))\n                    u = i;\n            mSet[u] = true;\n            res += key[u];\n\n            for (int v = 0; v &lt; V; v++)\n\n                if (graph[u][v] != 0 &amp;&amp; mSet[v] == false)\n                    key[v] = Math.min(key[v], graph[u][v]);\n        }\n        return res;\n    }\n\n    public static void main(String[] args) {\n        int graph[][] = new int[][] { { 0, 5, 8, 0 }, { 5, 0, 10, 15 }, { 8, 10, 0, 20 }, { 0, 15, 20, 0 }, };\n\n        System.out.print(primMST(graph));\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/graph/#dijkstras-shortest-path-algorithm","title":"Dijkstra's Shortest Path Algorithm","text":"<pre><code>import java.util.*;\nimport java.lang.*;\nimport java.io.*;\n\nclass Gfg {\n\n    static final int V = 4;\n\n    public static int[] djikstra(int graph[][], int src) {\n\n        int[] dist = new int[V];\n        int res = 0;\n        Arrays.fill(dist, Integer.MAX_VALUE);\n        dist[src] = 0;\n        boolean[] fin = new boolean[V];\n\n        for (int count = 0; count &lt; V - 1; count++) {\n            int u = -1;\n\n            for (int i = 0; i &lt; V; i++)\n                if (!fin[i] &amp;&amp; (u == -1 || dist[i] &lt; dist[u]))\n                    u = i;\n            fin[u] = true;\n\n            for (int v = 0; v &lt; V; v++)\n\n                if (graph[u][v] != 0 &amp;&amp; fin[v] == false)\n                    dist[v] = Math.min(dist[v], dist[u] + graph[u][v]);\n        }\n        return dist;\n    }\n\n    public static void main(String[] args) {\n        int graph[][] = new int[][] { { 0, 50, 100, 0 }, { 50, 0, 30, 200 }, { 100, 30, 0, 20 }, { 0, 200, 20, 0 }, };\n\n        for (int x : djikstra(graph, 0)) {\n            System.out.print(x + \" \");\n        }\n\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/graph/#kosarajus-algorithm-part-1","title":"Kosaraju's Algorithm Part 1","text":"<pre><code>import java.io.*;\nimport java.util.*;\nimport java.util.LinkedList;\n\nclass Graph {\n    private int V;\n    private LinkedList&lt;Integer&gt; adj[];\n\n    Graph(int v) {\n        V = v;\n        adj = new LinkedList[v];\n        for (int i = 0; i &lt; v; ++i)\n            adj[i] = new LinkedList();\n    }\n\n    void addEdge(int v, int w) {\n        adj[v].add(w);\n    }\n\n    void DFSUtil(int v, boolean visited[]) {\n\n        visited[v] = true;\n        System.out.print(v + \" \");\n\n        int n;\n\n        Iterator&lt;Integer&gt; i = adj[v].iterator();\n        while (i.hasNext()) {\n            n = i.next();\n            if (!visited[n])\n                DFSUtil(n, visited);\n        }\n    }\n\n    Graph getTranspose() {\n        Graph g = new Graph(V);\n        for (int v = 0; v &lt; V; v++) {\n            Iterator&lt;Integer&gt; i = adj[v].listIterator();\n            while (i.hasNext())\n                g.adj[i.next()].add(v);\n        }\n        return g;\n    }\n\n    void fillOrder(int v, boolean visited[], Stack stack) {\n        visited[v] = true;\n\n        Iterator&lt;Integer&gt; i = adj[v].iterator();\n        while (i.hasNext()) {\n            int n = i.next();\n            if (!visited[n])\n                fillOrder(n, visited, stack);\n        }\n\n        stack.push(new Integer(v));\n    }\n\n    void printSCCs() {\n        Stack stack = new Stack();\n\n        boolean visited[] = new boolean[V];\n        for (int i = 0; i &lt; V; i++)\n            visited[i] = false;\n\n        for (int i = 0; i &lt; V; i++)\n            if (visited[i] == false)\n                fillOrder(i, visited, stack);\n\n        Graph gr = getTranspose();\n\n        for (int i = 0; i &lt; V; i++)\n            visited[i] = false;\n\n        while (stack.empty() == false) {\n            int v = (int) stack.pop();\n\n            if (visited[v] == false) {\n                gr.DFSUtil(v, visited);\n                System.out.println();\n            }\n        }\n    }\n\n    public static void main(String args[]) {\n        Graph g = new Graph(5);\n        g.addEdge(1, 0);\n        g.addEdge(0, 2);\n        g.addEdge(2, 1);\n        g.addEdge(0, 3);\n        g.addEdge(3, 4);\n\n        System.out.println(\"Following are strongly connected components \" + \"in given graph \");\n        g.printSCCs();\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/graph/#bellman-ford-shortest-path-algorithm","title":"Bellman Ford Shortest Path Algorithm","text":"<pre><code>import java.util.*;\nimport java.lang.*;\nimport java.io.*;\n\nclass Graph {\n\n    class Edge {\n        int src, dest, weight;\n\n        Edge() {\n            src = dest = weight = 0;\n        }\n    };\n\n    int V, E;\n    Edge edge[];\n\n    Graph(int v, int e) {\n        V = v;\n        E = e;\n        edge = new Edge[e];\n        for (int i = 0; i &lt; e; ++i)\n            edge[i] = new Edge();\n    }\n\n    void BellmanFord(Graph graph, int src) {\n        int V = graph.V, E = graph.E;\n        int dist[] = new int[V];\n\n        for (int i = 0; i &lt; V; ++i)\n            dist[i] = Integer.MAX_VALUE;\n        dist[src] = 0;\n\n        for (int i = 1; i &lt; V; ++i) {\n            for (int j = 0; j &lt; E; ++j) {\n                int u = graph.edge[j].src;\n                int v = graph.edge[j].dest;\n                int weight = graph.edge[j].weight;\n                if (dist[u] != Integer.MAX_VALUE &amp;&amp; dist[u] + weight &lt; dist[v])\n                    dist[v] = dist[u] + weight;\n            }\n        }\n\n        for (int j = 0; j &lt; E; ++j) {\n            int u = graph.edge[j].src;\n            int v = graph.edge[j].dest;\n            int weight = graph.edge[j].weight;\n            if (dist[u] != Integer.MAX_VALUE &amp;&amp; dist[u] + weight &lt; dist[v]) {\n                System.out.println(\"Graph contains negative weight cycle\");\n                return;\n            }\n        }\n        printArr(dist, V);\n    }\n\n    void printArr(int dist[], int V) {\n        System.out.println(\"Vertex Distance from Source\");\n        for (int i = 0; i &lt; V; ++i)\n            System.out.println(i + \"\\t\\t\" + dist[i]);\n    }\n\n    public static void main(String[] args) {\n        int V = 4;\n        int E = 5;\n\n        Graph graph = new Graph(V, E);\n\n        // add edge 0-1 (or A-B)\n        graph.edge[0].src = 0;\n        graph.edge[0].dest = 1;\n        graph.edge[0].weight = 1;\n\n        // add edge 0-2 (or A-C)\n        graph.edge[1].src = 0;\n        graph.edge[1].dest = 2;\n        graph.edge[1].weight = 4;\n\n        // add edge 1-2 (or B-C)\n        graph.edge[2].src = 1;\n        graph.edge[2].dest = 2;\n        graph.edge[2].weight = -3;\n\n        // add edge 1-3 (or B-D)\n        graph.edge[3].src = 1;\n        graph.edge[3].dest = 3;\n        graph.edge[3].weight = 2;\n\n        // add edge 2-3 (or C-D)\n        graph.edge[4].src = 2;\n        graph.edge[4].dest = 3;\n        graph.edge[4].weight = 3;\n\n        graph.BellmanFord(graph, 0);\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/graph/#articulation-point","title":"Articulation Point","text":"<pre><code>import java.io.*; \nimport java.util.*; \nimport java.util.LinkedList; \n\n\nclass Graph \n{ \n    private int V; \n\n    private LinkedList&lt;Integer&gt; adj[]; \n    int time = 0; \n    static final int NIL = -1; \n\n    Graph(int v) \n    { \n        V = v; \n        adj = new LinkedList[v]; \n        for (int i=0; i&lt;v; ++i) \n            adj[i] = new LinkedList(); \n    } \n\n    void addEdge(int v, int w) \n    { \n        adj[v].add(w);  \n        adj[w].add(v);  \n    } \n\n    void APUtil(int u, boolean visited[], int disc[], \n                int low[], int parent[], boolean ap[]) \n    { \n\n        int children = 0; \n\n        visited[u] = true; \n\n        disc[u] = low[u] = ++time; \n\n        Iterator&lt;Integer&gt; i = adj[u].iterator(); \n        while (i.hasNext()) \n        { \n            int v = i.next(); \n            if (!visited[v]) \n            { \n                children++; \n                parent[v] = u; \n                APUtil(v, visited, disc, low, parent, ap); \n\n\n                low[u] = Math.min(low[u], low[v]); \n\n\n                if (parent[u] == NIL &amp;&amp; children &gt; 1) \n                    ap[u] = true; \n\n                if (parent[u] != NIL &amp;&amp; low[v] &gt;= disc[u]) \n                    ap[u] = true; \n            } \n\n            else if (v != parent[u]) \n                low[u] = Math.min(low[u], disc[v]); \n        } \n    } \n\n    void AP() \n    { \n\n        boolean visited[] = new boolean[V]; \n        int disc[] = new int[V]; \n        int low[] = new int[V]; \n        int parent[] = new int[V]; \n        boolean ap[] = new boolean[V];\n\n\n        for (int i = 0; i &lt; V; i++) \n        { \n            parent[i] = NIL; \n            visited[i] = false; \n            ap[i] = false; \n        } \n\n        for (int i = 0; i &lt; V; i++) \n            if (visited[i] == false) \n                APUtil(i, visited, disc, low, parent, ap); \n\n        for (int i = 0; i &lt; V; i++) \n            if (ap[i] == true) \n                System.out.print(i+\" \"); \n    } \n\n    public static void main(String args[]) \n    { \n        System.out.println(\"Articulation points in first graph \"); \n        Graph g = new Graph(5); \n        g.addEdge(1, 0); \n        g.addEdge(0, 2); \n        g.addEdge(2, 1); \n        g.addEdge(0, 3); \n        g.addEdge(3, 4); \n        g.AP(); \n        System.out.println(); \n    } \n}\n</code></pre>"},{"location":"data-structure-and-algorithms/graph/#bridges-in-graph","title":"Bridges in Graph","text":"<pre><code>import java.io.*; \nimport java.util.*; \nimport java.util.LinkedList; \n\nclass Graph \n{ \n    private int V; \n\n    private LinkedList&lt;Integer&gt; adj[]; \n    int time = 0; \n    static final int NIL = -1; \n\n    Graph(int v) \n    { \n        V = v; \n        adj = new LinkedList[v]; \n        for (int i=0; i&lt;v; ++i) \n            adj[i] = new LinkedList(); \n    } \n\n    void addEdge(int v, int w) \n    { \n        adj[v].add(w);  \n        adj[w].add(v); \n    } \n\n\n    void bridgeUtil(int u, boolean visited[], int disc[], int low[], int parent[]) \n    { \n\n        visited[u] = true; \n\n        disc[u] = low[u] = ++time; \n\n        Iterator&lt;Integer&gt; i = adj[u].iterator(); \n        while (i.hasNext()) \n        { \n            int v = i.next(); \n\n            if (!visited[v]) \n            { \n                parent[v] = u; \n                bridgeUtil(v, visited, disc, low, parent); \n\n\n                low[u] = Math.min(low[u], low[v]); \n\n\n                if (low[v] &gt; disc[u]) \n                    System.out.println(u+\" \"+v); \n            } \n\n\n            else if (v != parent[u]) \n                low[u] = Math.min(low[u], disc[v]); \n        } \n    } \n\n    void bridge() \n    { \n        boolean visited[] = new boolean[V]; \n        int disc[] = new int[V]; \n        int low[] = new int[V]; \n        int parent[] = new int[V]; \n\n\n        for (int i = 0; i &lt; V; i++) \n        { \n            parent[i] = NIL; \n            visited[i] = false; \n        } \n\n\n        for (int i = 0; i &lt; V; i++) \n            if (visited[i] == false) \n                bridgeUtil(i, visited, disc, low, parent); \n    } \n\n    public static void main(String args[]) \n    { \n        System.out.println(\"Bridges in first graph \"); \n        Graph g = new Graph(5); \n        g.addEdge(1, 0); \n        g.addEdge(0, 2); \n        g.addEdge(2, 1); \n        g.addEdge(0, 3); \n        g.addEdge(3, 4); \n        g.bridge(); \n    }\n\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/graph/#tarjans-algorithm","title":"Tarjans Algorithm","text":"<pre><code>import java.io.*; \nimport java.util.*; \n\nclass Graph{ \n\nprivate int V; \n\nprivate LinkedList&lt;Integer&gt; adj[]; \nprivate int Time; \n\n@SuppressWarnings(\"unchecked\") \nGraph(int v) \n{ \n    V = v; \n    adj = new LinkedList[v]; \n\n    for(int i = 0; i &lt; v; ++i) \n        adj[i] = new LinkedList(); \n\n    Time = 0; \n} \n\nvoid addEdge(int v,int w) \n{ \n    adj[v].add(w); \n} \n\nvoid SCCUtil(int u, int low[], int disc[], boolean stackMember[], Stack&lt;Integer&gt; st) \n{ \n    disc[u] = Time; \n    low[u] = Time; \n    Time += 1; \n    stackMember[u] = true; \n    st.push(u); \n\n    int n; \n\n    Iterator&lt;Integer&gt; i = adj[u].iterator(); \n\n    while (i.hasNext()) \n    { \n        n = i.next(); \n\n        if (disc[n] == -1) \n        { \n            SCCUtil(n, low, disc, stackMember, st); \n\n\n            low[u] = Math.min(low[u], low[n]); \n        } \n        else if (stackMember[n] == true) \n        { \n\n            low[u] = Math.min(low[u], disc[n]); \n        } \n    } \n\n    int w = -1; \n    if (low[u] == disc[u]) \n    { \n        while (w != u) \n        { \n            w = (int)st.pop(); \n            System.out.print(w + \" \"); \n            stackMember[w] = false; \n        } \n        System.out.println(); \n    } \n} \n\nvoid SCC() \n{ \n\n    int disc[] = new int[V]; \n    int low[] = new int[V]; \n    for(int i = 0;i &lt; V; i++) \n    { \n        disc[i] = -1; \n        low[i] = -1; \n    } \n\n    boolean stackMember[] = new boolean[V]; \n    Stack&lt;Integer&gt; st = new Stack&lt;Integer&gt;(); \n\n    for(int i = 0; i &lt; V; i++) \n    { \n        if (disc[i] == -1) \n            SCCUtil(i, low, disc, stackMember, st); \n    } \n} \n\npublic static void main(String args[]) \n{ \n    Graph g = new Graph(5); \n\n    g.addEdge(1, 0); \n    g.addEdge(0, 2); \n    g.addEdge(2, 1); \n    g.addEdge(0, 3); \n    g.addEdge(3, 4); \n    System.out.println(\"SSC in the graph \"); \n    g.SCC(); \n\n} \n}\n</code></pre>"},{"location":"data-structure-and-algorithms/graph/#kruskals-algorithm","title":"Kruskal's Algorithm","text":"<pre><code>// Java program for Kruskal's algorithm to find Minimum \n// Spanning Tree of a given connected, undirected and \n// weighted graph \nimport java.util.*;\nimport java.lang.*;\nimport java.io.*;\n\nclass Graph {\n    // A class to represent a graph edge\n    class Edge implements Comparable&lt;Edge&gt; {\n        int src, dest, weight;\n\n        // Comparator function used for sorting edges\n        // based on their weight\n        public int compareTo(Edge compareEdge) {\n            return this.weight - compareEdge.weight;\n        }\n    };\n\n    // A class to represent a subset for union-find\n    class subset {\n        int parent, rank;\n    };\n\n    int V, E; // V-&gt; no. of vertices &amp; E-&gt;no.of edges\n    Edge edge[]; // collection of all edges\n\n    // Creates a graph with V vertices and E edges\n    Graph(int v, int e) {\n        V = v;\n        E = e;\n        edge = new Edge[E];\n        for (int i = 0; i &lt; e; ++i)\n            edge[i] = new Edge();\n    }\n\n    // A utility function to find set of an element i\n    // (uses path compression technique)\n    int find(subset subsets[], int i) {\n        // find root and make root as parent of i (path compression)\n        if (subsets[i].parent != i)\n            subsets[i].parent = find(subsets, subsets[i].parent);\n\n        return subsets[i].parent;\n    }\n\n    // A function that does union of two sets of x and y\n    // (uses union by rank)\n    void Union(subset subsets[], int x, int y) {\n        int xroot = find(subsets, x);\n        int yroot = find(subsets, y);\n\n        // Attach smaller rank tree under root of high rank tree\n        // (Union by Rank)\n        if (subsets[xroot].rank &lt; subsets[yroot].rank)\n            subsets[xroot].parent = yroot;\n        else if (subsets[xroot].rank &gt; subsets[yroot].rank)\n            subsets[yroot].parent = xroot;\n\n        // If ranks are same, then make one as root and increment\n        // its rank by one\n        else {\n            subsets[yroot].parent = xroot;\n            subsets[xroot].rank++;\n        }\n    }\n\n    // The main function to construct MST using Kruskal's algorithm\n    void KruskalMST() {\n        Edge result[] = new Edge[V]; // Tnis will store the resultant MST\n        int e = 0; // An index variable, used for result[]\n        int i = 0; // An index variable, used for sorted edges\n        for (i = 0; i &lt; V; ++i)\n            result[i] = new Edge();\n\n        // Step 1: Sort all the edges in non-decreasing order of their\n        // weight. If we are not allowed to change the given graph, we\n        // can create a copy of array of edges\n        Arrays.sort(edge);\n\n        // Allocate memory for creating V ssubsets\n        subset subsets[] = new subset[V];\n        for (i = 0; i &lt; V; ++i)\n            subsets[i] = new subset();\n\n        // Create V subsets with single elements\n        for (int v = 0; v &lt; V; ++v) {\n            subsets[v].parent = v;\n            subsets[v].rank = 0;\n        }\n\n        i = 0; // Index used to pick next edge\n\n        int res = 0;\n        // Number of edges to be taken is equal to V-1\n        while (e &lt; V - 1) {\n            // Step 2: Pick the smallest edge. And increment\n            // the index for next iteration\n            Edge next_edge = new Edge();\n            next_edge = edge[i++];\n\n            int x = find(subsets, next_edge.src);\n            int y = find(subsets, next_edge.dest);\n\n            // If including this edge does't cause cycle,\n            // include it in result and increment the index\n            // of result for next edge\n            if (x != y) {\n                result[e++] = next_edge;\n                Union(subsets, x, y);\n\n                res += next_edge.weight;\n            }\n            // Else discard the next_edge\n        }\n\n        // print the contents of result[] to display\n        // the built MST\n\n        System.out.println(\"Weight of MST is: \" + res);\n    }\n\n    // Driver Program\n    public static void main(String[] args) {\n\n        int V = 5; // Number of vertices in graph\n        int E = 7; // Number of edges in graph\n        Graph graph = new Graph(V, E);\n\n        // add edge 0-1\n        graph.edge[0].src = 0;\n        graph.edge[0].dest = 1;\n        graph.edge[0].weight = 10;\n\n        // add edge 0-2\n        graph.edge[1].src = 0;\n        graph.edge[1].dest = 2;\n        graph.edge[1].weight = 8;\n\n        // add edge 0-3\n        graph.edge[2].src = 1;\n        graph.edge[2].dest = 2;\n        graph.edge[2].weight = 5;\n\n        // add edge 1-3\n        graph.edge[3].src = 1;\n        graph.edge[3].dest = 3;\n        graph.edge[3].weight = 3;\n\n        // add edge 2-3\n        graph.edge[4].src = 2;\n        graph.edge[4].dest = 3;\n        graph.edge[4].weight = 4;\n\n        // add egde 2-4\n        graph.edge[5].src = 2;\n        graph.edge[5].dest = 4;\n        graph.edge[5].weight = 12;\n\n        // add edge 3-4\n        graph.edge[6].src = 3;\n        graph.edge[6].dest = 4;\n        graph.edge[6].weight = 15;\n\n        graph.KruskalMST();\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/graph/#prims-algorithm","title":"Prim's Algorithm","text":"<pre><code>import java.util.*;\nimport java.lang.*;\nimport java.io.*;\n\nclass Gfg {\n\n    static final int V = 4;\n\n    public static int primMST(int graph[][]) {\n\n        int[] key = new int[V];\n        int res = 0;\n        Arrays.fill(key, Integer.MAX_VALUE);\n        boolean[] mSet = new boolean[V];\n        key[0] = 0;\n\n        for (int count = 0; count &lt; V; count++) {\n            int u = -1;\n\n            for (int i = 0; i &lt; V; i++)\n                if (!mSet[i] &amp;&amp; (u == -1 || key[i] &lt; key[u]))\n                    u = i;\n            mSet[u] = true;\n            res += key[u];\n\n            for (int v = 0; v &lt; V; v++)\n\n                if (graph[u][v] != 0 &amp;&amp; mSet[v] == false)\n                    key[v] = Math.min(key[v], graph[u][v]);\n        }\n        return res;\n    }\n\n    public static void main(String[] args) {\n        int graph[][] = new int[][] { { 0, 5, 8, 0 }, { 5, 0, 10, 15 }, { 8, 10, 0, 20 }, { 0, 15, 20, 0 }, };\n\n        System.out.print(primMST(graph));\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/graph/#dijkstras-algorithm-java","title":"Dijkstra's Algorithm Java","text":"<pre><code>import java.util.*;\nimport java.lang.*;\nimport java.io.*;\n\nclass Gfg {\n\n    static final int V = 4;\n\n    public static int[] djikstra(int graph[][], int src) {\n\n        int[] dist = new int[V];\n        int res = 0;\n        Arrays.fill(dist, Integer.MAX_VALUE);\n        dist[src] = 0;\n        boolean[] fin = new boolean[V];\n\n        for (int count = 0; count &lt; V - 1; count++) {\n            int u = -1;\n\n            for (int i = 0; i &lt; V; i++)\n                if (!fin[i] &amp;&amp; (u == -1 || dist[i] &lt; dist[u]))\n                    u = i;\n            fin[u] = true;\n\n            for (int v = 0; v &lt; V; v++)\n\n                if (graph[u][v] != 0 &amp;&amp; fin[v] == false)\n                    dist[v] = Math.min(dist[v], dist[u] + graph[u][v]);\n        }\n        return dist;\n    }\n\n    public static void main(String[] args) {\n        int graph[][] = new int[][] { { 0, 50, 100, 0 }, { 50, 0, 30, 200 }, { 100, 30, 0, 20 }, { 0, 200, 20, 0 }, };\n\n        for (int x : djikstra(graph, 0)) {\n            System.out.print(x + \" \");\n        }\n\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/graph/#kosarajus-algorithm","title":"Kosaraju's Algorithm","text":"<pre><code>import java.io.*;\nimport java.util.*;\nimport java.util.LinkedList;\n\nclass Graph {\n    private int V;\n    private LinkedList&lt;Integer&gt; adj[];\n\n    Graph(int v) {\n        V = v;\n        adj = new LinkedList[v];\n        for (int i = 0; i &lt; v; ++i)\n            adj[i] = new LinkedList();\n    }\n\n    void addEdge(int v, int w) {\n        adj[v].add(w);\n    }\n\n    void DFSUtil(int v, boolean visited[]) {\n\n        visited[v] = true;\n        System.out.print(v + \" \");\n\n        int n;\n\n        Iterator&lt;Integer&gt; i = adj[v].iterator();\n        while (i.hasNext()) {\n            n = i.next();\n            if (!visited[n])\n                DFSUtil(n, visited);\n        }\n    }\n\n    Graph getTranspose() {\n        Graph g = new Graph(V);\n        for (int v = 0; v &lt; V; v++) {\n            Iterator&lt;Integer&gt; i = adj[v].listIterator();\n            while (i.hasNext())\n                g.adj[i.next()].add(v);\n        }\n        return g;\n    }\n\n    void fillOrder(int v, boolean visited[], Stack stack) {\n        visited[v] = true;\n\n        Iterator&lt;Integer&gt; i = adj[v].iterator();\n        while (i.hasNext()) {\n            int n = i.next();\n            if (!visited[n])\n                fillOrder(n, visited, stack);\n        }\n\n        stack.push(new Integer(v));\n    }\n\n    void printSCCs() {\n        Stack stack = new Stack();\n\n        boolean visited[] = new boolean[V];\n        for (int i = 0; i &lt; V; i++)\n            visited[i] = false;\n\n        for (int i = 0; i &lt; V; i++)\n            if (visited[i] == false)\n                fillOrder(i, visited, stack);\n\n        Graph gr = getTranspose();\n\n        for (int i = 0; i &lt; V; i++)\n            visited[i] = false;\n\n        while (stack.empty() == false) {\n            int v = (int) stack.pop();\n\n            if (visited[v] == false) {\n                gr.DFSUtil(v, visited);\n                System.out.println();\n            }\n        }\n    }\n\n    public static void main(String args[]) {\n        Graph g = new Graph(5);\n        g.addEdge(1, 0);\n        g.addEdge(0, 2);\n        g.addEdge(2, 1);\n        g.addEdge(0, 3);\n        g.addEdge(3, 4);\n\n        System.out.println(\"Following are strongly connected components \" + \"in given graph \");\n        g.printSCCs();\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/graph/#bellman-ford-shortest-path-algorithm_1","title":"Bellman Ford Shortest Path Algorithm","text":"<pre><code>class Graph {\n\n    class Edge {\n        int src, dest, weight;\n\n        Edge() {\n            src = dest = weight = 0;\n        }\n    };\n\n    int V, E;\n    Edge edge[];\n\n    Graph(int v, int e) {\n        V = v;\n        E = e;\n        edge = new Edge[e];\n        for (int i = 0; i &lt; e; ++i)\n            edge[i] = new Edge();\n    }\n\n    void BellmanFord(Graph graph, int src) {\n        int V = graph.V, E = graph.E;\n        int dist[] = new int[V];\n\n        for (int i = 0; i &lt; V; ++i)\n            dist[i] = Integer.MAX_VALUE;\n        dist[src] = 0;\n\n        for (int i = 1; i &lt; V; ++i) {\n            for (int j = 0; j &lt; E; ++j) {\n                int u = graph.edge[j].src;\n                int v = graph.edge[j].dest;\n                int weight = graph.edge[j].weight;\n                if (dist[u] != Integer.MAX_VALUE &amp;&amp; dist[u] + weight &lt; dist[v])\n                    dist[v] = dist[u] + weight;\n            }\n        }\n\n        for (int j = 0; j &lt; E; ++j) {\n            int u = graph.edge[j].src;\n            int v = graph.edge[j].dest;\n            int weight = graph.edge[j].weight;\n            if (dist[u] != Integer.MAX_VALUE &amp;&amp; dist[u] + weight &lt; dist[v]) {\n                System.out.println(\"Graph contains negative weight cycle\");\n                return;\n            }\n        }\n        printArr(dist, V);\n    }\n\n    void printArr(int dist[], int V) {\n        System.out.println(\"Vertex Distance from Source\");\n        for (int i = 0; i &lt; V; ++i)\n            System.out.println(i + \"\\t\\t\" + dist[i]);\n    }\n\n    public static void main(String[] args) {\n        int V = 4;\n        int E = 5;\n\n        Graph graph = new Graph(V, E);\n\n        // add edge 0-1 (or A-B)\n        graph.edge[0].src = 0;\n        graph.edge[0].dest = 1;\n        graph.edge[0].weight = 1;\n\n        // add edge 0-2 (or A-C)\n        graph.edge[1].src = 0;\n        graph.edge[1].dest = 2;\n        graph.edge[1].weight = 4;\n\n        // add edge 1-2 (or B-C)\n        graph.edge[2].src = 1;\n        graph.edge[2].dest = 2;\n        graph.edge[2].weight = -3;\n\n        // add edge 1-3 (or B-D)\n        graph.edge[3].src = 1;\n        graph.edge[3].dest = 3;\n        graph.edge[3].weight = 2;\n\n        // add edge 2-3 (or C-D)\n        graph.edge[4].src = 2;\n        graph.edge[4].dest = 3;\n        graph.edge[4].weight = 3;\n\n        graph.BellmanFord(graph, 0);\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/greedy-and-backtracking/","title":"Greedy &amp; Backtracking","text":""},{"location":"data-structure-and-algorithms/greedy-and-backtracking/#coin-pay-back-problem","title":"Coin Pay Back Problem","text":"<pre><code>import java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\nclass GFG {\n\n    static int minCoins(int coin[], int n, int amount) {\n        Arrays.sort(coin);\n\n        int res = 0;\n\n        for (int i = n - 1; i &gt;= 0; i--) {\n            if (coin[i] &lt;= amount) {\n                int c = (int) Math.floor(amount / coin[i]);\n\n                res = res + c;\n\n                amount = amount - c * coin[i];\n            }\n\n            if (amount == 0)\n                break;\n        }\n\n        return res;\n    }\n\n    public static void main(String args[]) {\n        int coin[] = { 5, 10, 2, 1 }, n = 4, amount = 57;\n\n        System.out.println(minCoins(coin, n, amount));\n\n    }\n\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/greedy-and-backtracking/#activity-selection-problem","title":"Activity Selection Problem","text":"<pre><code>import java.util.Arrays;\nimport java.util.Comparator;\n\nclass Activity {\n    int start;\n    int finish;\n\n    Activity(int s, int f) {\n        start = s;\n        finish = f;\n    }\n}\n\nclass MyCmp implements Comparator&lt;Activity&gt; {\n    public int compare(Activity a1, Activity a2) {\n        return a1.finish - a2.finish;\n    }\n}\n\nclass GFG {\n\n    static int maxActivity(Activity arr[], int n) {\n        Arrays.sort(arr, new MyCmp());\n\n        int res = 1;\n        int prev = 0;\n\n        for (int curr = 1; curr &lt; n; curr++) {\n\n            if (arr[curr].start &gt;= arr[prev].finish) {\n                res++;\n\n                prev = curr;\n            }\n        }\n\n        return res;\n    }\n\n    public static void main(String args[]) {\n        Activity arr[] = { new Activity(12, 25), new Activity(10, 20), new Activity(20, 30) };\n        int n = 3;\n\n        System.out.println(maxActivity(arr, n));\n\n    }\n\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/greedy-and-backtracking/#fractional-knapsnack-problem","title":"Fractional KnapSnack Problem","text":"<pre><code>import java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\nclass GFG {\n\n    static int minCoins(int coin[], int n, int amount) {\n        Arrays.sort(coin);\n\n        int res = 0;\n\n        for (int i = n - 1; i &gt;= 0; i--) {\n            if (coin[i] &lt;= amount) {\n                int c = (int) Math.floor(amount / coin[i]);\n\n                res = res + c;\n\n                amount = amount - c * coin[i];\n            }\n\n            if (amount == 0)\n                break;\n        }\n\n        return res;\n    }\n\n    public static void main(String args[]) {\n        int coin[] = { 5, 10, 2, 1 }, n = 4, amount = 57;\n\n        System.out.println(minCoins(coin, n, amount));\n\n    }\n\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/greedy-and-backtracking/#given-a-string-abc-print-all-combination-without-ab","title":"Given a string \"ABC\", print all combination without \"AB\"","text":"<pre><code>import java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\nclass Gfg\n{\n\n    public static void permute(String str, int l, int r){\n\n        if(l==r){\n            System.out.print(str+\" \");\n            return;\n        }else{\n            for(int i=l;i&lt;=r;i++){\n                if(isSafe(str,l,i,r)){\n                str=new String(swap(str, i, l));\n\n                permute(str,l+1,r);\n\n                str=new String(swap(str, i, l));}\n            }   \n        }\n    }\n\n    public static boolean isSafe(String str,int l, int i, int r){\n        if(l!=0 &amp;&amp; str.charAt(l-1)=='A' &amp;&amp; str.charAt(i)=='B')\n            return false;\n        if(r==(l+1) &amp;&amp; str.charAt(i)=='A' &amp;&amp; str.charAt(l)=='B')\n            return false;\n        return true;\n    }\n\n    public static char[] swap(String str, int i, int j) \n    { \n        char ch[] = str.toCharArray(); \n        char temp = ch[i]; \n        ch[i] = ch[j]; \n        ch[j] = temp; \n        return ch; \n    }\n\n    public static void main(String args[])\n    {\n        String str=\"ABC\";\n\n        permute(str,0,str.length()-1); \n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/greedy-and-backtracking/#rat-in-a-maze","title":"Rat in a Maze","text":"<pre><code>import java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\nclass Gfg\n{\n\n    static int N; \n\n    static void printSolution(int sol[][]) \n    { \n        for (int i = 0; i &lt; N; i++) { \n            for (int j = 0; j &lt; N; j++) \n                System.out.print( \" \" + sol[i][j] + \" \"); \n            System.out.println(); \n        } \n    } \n\n    static boolean isSafe( int maze[][], int i, int j) \n    { \n        return (i &lt; N &amp;&amp; j &lt; N &amp;&amp; maze[i][j] == 1); \n    } \n\n    static boolean solveMaze(int maze[][]) \n    { \n        int sol[][] = new int[N][N]; \n\n        if (solveMazeRec(maze, 0, 0, sol) == false) { \n            System.out.print(\"Solution doesn't exist\"); \n            return false; \n        } \n\n        printSolution(sol); \n        return true; \n    } \n\n    static boolean solveMazeRec(int maze[][], int i, int j, int sol[][]) \n    {  \n        if (i == N - 1 &amp;&amp; j == N - 1 &amp;&amp; maze[i][j] == 1) { \n            sol[i][j] = 1; \n            return true; \n        } \n\n        if (isSafe(maze, i, j) == true) {  \n            sol[i][j] = 1; \n\n            if (solveMazeRec(maze, i + 1, j, sol)) \n                return true; \n\n            if (solveMazeRec(maze, i, j + 1, sol)) \n                return true; \n\n            sol[i][j] = 0; \n        } \n\n        return false; \n    } \n\n    public static void main(String args[])\n    {\n        int maze[][] = { { 1, 0, 0, 0 }, \n                         { 1, 1, 0, 1 }, \n                         { 0, 1, 0, 0 }, \n                         { 1, 1, 1, 1 } }; \n\n        N = maze.length; \n        solveMaze(maze); \n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/greedy-and-backtracking/#n-queen-problem","title":"N Queen Problem","text":"<pre><code>import java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\nclass Gfg\n{\n\n    static final int N = 4;\n    static int board[][] = { { 0, 0, 0, 0 }, \n                    { 0, 0, 0, 0 }, \n                    { 0, 0, 0, 0 }, \n                    { 0, 0, 0, 0 } };\n    static void printSolution(int board[][]) \n    { \n        for (int i = 0; i &lt; N; i++) { \n            for (int j = 0; j &lt; N; j++) \n                System.out.print(\" \" + board[i][j] \n                                 + \" \"); \n            System.out.println(); \n        } \n    }\n\n    static boolean isSafe(int row, int col) \n    { \n        int i, j; \n\n        for (i = 0; i &lt; col; i++) \n            if (board[row][i] == 1) \n                return false; \n\n        for (i = row, j = col; i &gt;= 0 &amp;&amp; j &gt;= 0; i--, j--) \n            if (board[i][j] == 1) \n                return false; \n\n        for (i = row, j = col; j &gt;= 0 &amp;&amp; i &lt; N; i++, j--) \n            if (board[i][j] == 1) \n                return false; \n\n        return true; \n    } \n\n    static boolean solveRec(int col) \n    { \n        if (col == N) \n            return true; \n\n        for (int i = 0; i &lt; N; i++) {  \n            if (isSafe(i, col)) { \n                board[i][col] = 1; \n\n                if (solveRec(col + 1) == true) \n                    return true; \n\n                board[i][col] = 0; \n            } \n        }\n        return false;\n    }\n\n    static  boolean solve() \n    { \n\n        if (solveRec(0) == false) { \n            System.out.print(\"Solution does not exist\"); \n            return false; \n        } \n\n        printSolution(board); \n        return true; \n    }\n\n    public static void main(String args[])\n    {\n        solve(); \n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/greedy-and-backtracking/#sudoku-problem","title":"Sudoku Problem","text":"<pre><code>import java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\nclass GFG  \n{ \n    public static boolean isSafe(int[][] board,int row, int col, int num) \n    { \n\n        for (int d = 0; d &lt; board.length; d++)  \n        { \n\n            if (board[row][d] == num) { \n                return false; \n            } \n        } \n\n        for (int r = 0; r &lt; board.length; r++)  \n        { \n\n            if (board[r][col] == num)  \n            { \n                return false; \n            } \n        }  \n        int sqrt = (int)Math.sqrt(board.length); \n        int boxRowStart = row - row % sqrt; \n        int boxColStart = col - col % sqrt; \n\n        for (int r = boxRowStart; \n             r &lt; boxRowStart + sqrt; r++)  \n        { \n            for (int d = boxColStart; \n                 d &lt; boxColStart + sqrt; d++)  \n            { \n                if (board[r][d] == num)  \n                { \n                    return false; \n                } \n            } \n        } \n\n        return true; \n    } \n\n    public static boolean solveSudoku( \n        int[][] board, int n) \n    { \n        int row = -1; \n        int col = -1; \n        boolean isEmpty = true; \n        for (int i = 0; i &lt; n; i++)  \n        { \n            for (int j = 0; j &lt; n; j++)  \n            { \n                if (board[i][j] == 0)  \n                { \n                    row = i; \n                    col = j; \n                    isEmpty = false; \n                    break; \n                } \n            } \n            if (!isEmpty) { \n                break; \n            } \n        } \n\n        if (isEmpty)  \n        { \n            return true; \n        } \n\n        for (int num = 1; num &lt;= n; num++)  \n        { \n            if (isSafe(board, row, col, num))  \n            { \n                board[row][col] = num; \n                if (solveSudoku(board, n))  \n                { \n                    // print(board, n); \n                    return true; \n                } \n                else \n                { \n                    // replace it \n                    board[row][col] = 0; \n                } \n            } \n        } \n        return false; \n    } \n\n    public static void print(int[][] board, int N) \n    { \n        for (int r = 0; r &lt; N; r++)  \n        { \n            for (int d = 0; d &lt; N; d++) \n            { \n                System.out.print(board[r][d]); \n                System.out.print(\" \"); \n            } \n            System.out.print(\"\\n\"); \n\n            if ((r + 1) % (int)Math.sqrt(N) == 0) \n            { \n                System.out.print(\"\"); \n            } \n        } \n    } \n\n    public static void main(String args[]) \n    { \n\n        int[][] board = new int[][] { \n            { 3, 0, 6, 5, 0, 8, 4, 0, 0 }, \n            { 5, 2, 0, 0, 0, 0, 0, 0, 0 }, \n            { 0, 8, 7, 0, 0, 0, 0, 3, 1 }, \n            { 0, 0, 3, 0, 1, 0, 0, 8, 0 }, \n            { 9, 0, 0, 8, 6, 3, 0, 0, 5 }, \n            { 0, 5, 0, 0, 9, 0, 6, 0, 0 }, \n            { 1, 3, 0, 0, 0, 0, 2, 5, 0 }, \n            { 0, 0, 0, 0, 0, 0, 0, 7, 4 }, \n            { 0, 0, 5, 2, 0, 6, 3, 0, 0 } \n        }; \n        int N = board.length; \n\n        if (solveSudoku(board, N))  \n        {  \n            print(board, N); \n        } \n        else { \n            System.out.println(\"No solution\"); \n        } \n    } \n}\n</code></pre>"},{"location":"data-structure-and-algorithms/heap/","title":"Heap","text":"<p>children elements are smaller/bigger than parent</p>"},{"location":"data-structure-and-algorithms/heap/#types-of-heaps","title":"Types of Heaps","text":"<ul> <li>Min Heap : Highest priority items assigned the lowest value</li> <li>Max Heap : Highest priority items assigned the highest value</li> </ul>"},{"location":"data-structure-and-algorithms/heap/#applications-of-heap","title":"Applications of Heap","text":"<ul> <li>Used to implement HeapSort</li> <li>Used to implement PriorityQueue</li> </ul>"},{"location":"data-structure-and-algorithms/heap/#formulaes","title":"Formulae's","text":"<ul> <li>left of element : (2*i+1)</li> <li>right of element : (2*i+2)</li> <li>parent of element : (i-1)/2</li> </ul>"},{"location":"data-structure-and-algorithms/heap/#binary-heap-implementation-array","title":"Binary Heap Implementation (Array)","text":"<pre><code>import java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\nclass Main {\n\n    public static class MinHeap {\n        int arr[];\n        int size;\n        int capacity;\n\n        MinHeap(int c) {\n            size = 0;\n            capacity = c;\n            arr = new int[c];\n        }\n\n        int left(int i) {\n            return (2 * i + 1);\n        }\n\n        int right(int i) {\n            return (2 * i + 2);\n        }\n\n        int parent(int i) {\n            return (i - 1) / 2;\n        }\n    }\n\n    public static void main(String args[]) {\n        MinHeap h = new MinHeap(11);\n\n    }\n\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/heap/#binary-heap-insert-array-minheap","title":"Binary Heap Insert (Array) : MinHeap","text":"<pre><code>import java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\nclass Test {\n\n    public static class MinHeap {\n        int arr[];\n        int size;\n        int capacity;\n\n        MinHeap(int c) {\n            size = 0;\n            capacity = c;\n            arr = new int[c];\n        }\n\n        int left(int i) {\n            return (2 * i + 1);\n        }\n\n        int right(int i) {\n            return (2 * i + 2);\n        }\n\n        int parent(int i) {\n            return (i - 1) / 2;\n        }\n\n\n        public void insert(int x) {\n            if (size == capacity) return;\n            size++;\n            arr[size - 1] = x;\n\n            for (int i = size - 1; i != 0 &amp;&amp; arr[parent(i)] &gt; arr[i]; ) {\n                int temp = arr[i];\n                arr[i] = arr[parent(i)];\n                arr[parent(i)] = temp;\n                i = parent(i);\n            }\n        }\n\n    }\n\n    public static void main(String args[]) {\n        MinHeap h = new MinHeap(11);\n        h.insert(3);\n        h.insert(2);\n        h.insert(15);\n        h.insert(20);\n    }\n\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/heap/#binary-heap-heapify-and-extract-minheap","title":"Binary Heap (Heapify and Extract) : MinHeap","text":"<p>Extract operation is super important</p> <pre><code>import java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\nclass Test {\n\n    public static class MinHeap {\n        int arr[];\n        int size;\n        int capacity;\n\n        MinHeap(int c) {\n            size = 0;\n            capacity = c;\n            arr = new int[c];\n        }\n\n        int left(int i) {\n            return (2 * i + 1);\n        }\n\n        int right(int i) {\n            return (2 * i + 2);\n        }\n\n        int parent(int i) {\n            return (i - 1) / 2;\n        }\n\n\n        public void insert(int x) {\n            if (size == capacity) return;\n            size++;\n            arr[size - 1] = x;\n\n            for (int i = size - 1; i != 0 &amp;&amp; arr[parent(i)] &gt; arr[i]; ) {\n                int temp = arr[i];\n                arr[i] = arr[parent(i)];\n                arr[parent(i)] = temp;\n                i = parent(i);\n            }\n        }\n\n        public void minHeapify(int i) {\n            int lt = left(i);\n            int rt = right(i);\n            int smallest = i;\n            if (lt &lt; size &amp;&amp; arr[lt] &lt; arr[i])\n                smallest = lt;\n            if (rt &lt; size &amp;&amp; arr[rt] &lt; arr[smallest])\n                smallest = rt;\n            if (smallest != i) {\n                int temp = arr[i];\n                arr[i] = arr[smallest];\n                arr[smallest] = temp;\n                minHeapify(smallest);\n            }\n        }\n\n        public int extractMin() {\n            if (size &lt;= 0)\n                return Integer.MAX_VALUE;\n            if (size == 1) {\n                size--;\n                return arr[0];\n            }\n            int temp = arr[0];\n            arr[0] = arr[size - 1];\n            arr[size - 1] = temp;\n            size--;\n            minHeapify(0);\n\n            return arr[size];\n        }\n\n    }\n\n    public static void main(String args[]) {\n        MinHeap h = new MinHeap(11);\n        h.insert(3);\n        h.insert(2);\n        h.insert(15);\n        h.insert(20);\n        System.out.print(h.extractMin());\n    }\n\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/heap/#binary-heap-decrease-key-delete","title":"Binary Heap (Decrease Key | Delete)","text":"<pre><code>import java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\nclass Test {\n\n    public static class MinHeap {\n        int arr[];\n        int size;\n        int capacity;\n\n        MinHeap(int c) {\n            size = 0;\n            capacity = c;\n            arr = new int[c];\n        }\n\n        int left(int i) {\n            return (2 * i + 1);\n        }\n\n        int right(int i) {\n            return (2 * i + 2);\n        }\n\n        int parent(int i) {\n            return (i - 1) / 2;\n        }\n\n\n        public void insert(int x) {\n            if (size == capacity) return;\n            size++;\n            arr[size - 1] = x;\n\n            for (int i = size - 1; i != 0 &amp;&amp; arr[parent(i)] &gt; arr[i]; ) {\n                int temp = arr[i];\n                arr[i] = arr[parent(i)];\n                arr[parent(i)] = temp;\n                i = parent(i);\n            }\n        }\n\n        public void minHeapify(int i) {\n            int lt = left(i);\n            int rt = right(i);\n            int smallest = i;\n            if (lt &lt; size &amp;&amp; arr[lt] &lt; arr[i])\n                smallest = lt;\n            if (rt &lt; size &amp;&amp; arr[rt] &lt; arr[smallest])\n                smallest = rt;\n            if (smallest != i) {\n                int temp = arr[i];\n                arr[i] = arr[smallest];\n                arr[smallest] = temp;\n                minHeapify(smallest);\n            }\n        }\n\n        public int extractMin() {\n            if (size &lt;= 0)\n                return Integer.MAX_VALUE;\n            if (size == 1) {\n                size--;\n                return arr[0];\n            }\n            int temp = arr[0];\n            arr[0] = arr[size - 1];\n            arr[size - 1] = temp;\n            size--;\n            minHeapify(0);\n\n            return arr[size];\n        }\n\n        void decreaseKey(int i, int x) {\n            arr[i] = x;\n            while (i != 0 &amp;&amp; arr[parent(i)] &gt; arr[i]) {\n                int temp = arr[i];\n                arr[i] = arr[parent(i)];\n                arr[parent(i)] = temp;\n                i = parent(i);\n            }\n        }\n\n        void deleteKey(int i) {\n            decreaseKey(i, Integer.MIN_VALUE);\n            extractMin();\n        }\n\n    }\n\n    public static void main(String args[]) {\n        MinHeap h = new MinHeap(11);\n        h.insert(3);\n        h.insert(2);\n        h.deleteKey(0);\n        h.insert(15);\n        h.insert(20);\n        System.out.println(h.extractMin());\n        h.decreaseKey(2, 1);\n        System.out.println(h.extractMin());\n    }\n\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/heap/#binary-heap-build-heap-important","title":"Binary Heap ( Build Heap ) IMPORTANT","text":"<pre><code>import java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\nclass Test {\n\n    public static class MinHeap {\n        int arr[];\n        int size;\n        int capacity;\n\n        MinHeap(int c) {\n            size = 0;\n            capacity = c;\n            arr = new int[c];\n        }\n\n        int left(int i) {\n            return (2 * i + 1);\n        }\n\n        int right(int i) {\n            return (2 * i + 2);\n        }\n\n        int parent(int i) {\n            return (i - 1) / 2;\n        }\n\n        public void minHeapify(int i) {\n            int lt = left(i);\n            int rt = right(i);\n            int smallest = i;\n            if (lt &lt; size &amp;&amp; arr[lt] &lt; arr[i])\n                smallest = lt;\n            if (rt &lt; size &amp;&amp; arr[rt] &lt; arr[smallest])\n                smallest = rt;\n            if (smallest != i) {\n                int temp = arr[i];\n                arr[i] = arr[smallest];\n                arr[smallest] = temp;\n                minHeapify(smallest);\n            }\n        }\n        // IMPORTANT\n        public void buildHeap() {\n            for (int i = (size - 2) / 2; i &gt;= 0; i--)\n                minHeapify(i);\n        }\n\n    }\n\n    public static void main(String args[]) {\n        MinHeap h = new MinHeap(11);\n    }\n\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/heap/#heap-sort","title":"Heap Sort","text":"<pre><code>import java.lang.*;\n\npublic class Main {\n    public void buildheap(int arr[], int n) {\n        for (int i = n / 2 - 1; i &gt;= 0; i--)\n            heapify(arr, n, i);\n    }\n\n    public void sort(int arr[]) {\n        int n = arr.length;\n\n        buildheap(arr, n);\n\n        for (int i = n - 1; i &gt; 0; i--) {\n\n            int temp = arr[0];\n            arr[0] = arr[i];\n            arr[i] = temp;\n\n            heapify(arr, i, 0);\n        }\n    }\n\n    void heapify(int arr[], int n, int i) {\n        int largest = i;\n        int l = 2 * i + 1;\n        int r = 2 * i + 2;\n\n        if (l &lt; n &amp;&amp; arr[l] &gt; arr[largest])\n            largest = l;\n\n        if (r &lt; n &amp;&amp; arr[r] &gt; arr[largest])\n            largest = r;\n\n        if (largest != i) {\n            int swap = arr[i];\n            arr[i] = arr[largest];\n            arr[largest] = swap;\n\n            heapify(arr, n, largest);\n        }\n    }\n\n    static void printArray(int arr[]) {\n        int n = arr.length;\n        for (int i = 0; i &lt; n; ++i)\n            System.out.print(arr[i] + \" \");\n        System.out.println();\n    }\n\n    public static void main(String args[]) {\n        int arr[] = {12, 11, 13, 5, 6, 7};\n        int n = arr.length;\n\n        Main ob = new Main();\n        ob.sort(arr);\n\n        System.out.println(\"Sorted array is\");\n        printArray(arr);\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/heap/#priority-queue-min-heap-edition","title":"Priority Queue (Min Heap Edition)","text":"<pre><code>// Java program to demonstrate working of\n// PriorityQueue in Java\n\nimport java.util.*;\n\nclass Main {\n    public static void main(String args[]) {\n        // Creating empty priority queue\n        PriorityQueue&lt;Integer&gt; pq = new PriorityQueue&lt;Integer&gt;();\n\n        // Adding items to the pQueue using add()\n        pq.add(10);\n        pq.add(20);\n        pq.add(15);\n\n\n        // Printing the top element of PriorityQueue\n        System.out.println(pq.peek());\n\n        // Printing the top element and removing it\n        // from the PriorityQueue container\n        System.out.println(pq.poll());\n\n\n        // Printing the top element again\n        System.out.println(pq.peek());\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/heap/#priority-queue-max-heap-edition","title":"Priority Queue (Max Heap Edition)","text":"<pre><code>// Java program to demonstrate working of\n// PriorityQueue in Java\n\nimport java.util.*;\n\nclass Main {\n    public static void main(String args[]) {\n        // Creating empty priority queue\n        PriorityQueue&lt;Integer&gt; pq\n                = new PriorityQueue&lt;Integer&gt;(\n                Collections.reverseOrder());\n\n        // Adding items to the pQueue using add()\n        pq.add(10);\n        pq.add(20);\n        pq.add(15);\n\n        // Above PriorityQueue is stored as following\n        //       20\n        //      /  \\\n        //    10    15\n\n        // Printing the top element of PriorityQueue\n        System.out.println(pq.peek());\n\n        // Printing the top element and removing it\n        // from the PriorityQueue container\n        System.out.println(pq.poll());\n\n        // Post poll() PriorityQueue looks like\n        //       15\n        //      /  \n        //    10   \n\n        // Printing the top element again\n        System.out.println(pq.peek());\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/heap/#k-sorted-array","title":"K-Sorted Array","text":"<pre><code>import java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\nclass Main {\n    private static void sortK(int[] arr, int n, int k) {\n\n        PriorityQueue&lt;Integer&gt; pq = new PriorityQueue&lt;&gt;();\n\n        for (int i = 0; i &lt; k + 1; i++) {\n            pq.add(arr[i]);\n        }\n\n        int index = 0;\n        for (int i = k + 1; i &lt; n; i++) {\n            arr[index++] = pq.peek();\n            pq.poll();\n            pq.add(arr[i]);\n        }\n\n        while (pq.isEmpty() == false) {\n            arr[index++] = pq.poll();\n        }\n\n    }\n\n    private static void printArray(int[] arr, int n) {\n        for (int i = 0; i &lt; n; i++)\n            System.out.print(arr[i] + \" \");\n    }\n\n    public static void main(String[] args) {\n        int k = 3;\n        int arr[] = {2, 6, 3, 12, 56, 8};\n        int n = arr.length;\n        sortK(arr, n, k);\n        System.out.println(\"Following is sorted array\");\n        printArray(arr, n);\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/heap/#buy-maximum-items-with-the-given-sum","title":"Buy Maximum Items with the given sum","text":"<pre><code>import java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\nclass Main {\n\n    public static void main(String args[]) {\n        int n = 5;\n        int cost[] = new int[]{1, 12, 5, 111, 200};\n        int sum = 10;\n\n        PriorityQueue&lt;Integer&gt; pq = new PriorityQueue&lt;Integer&gt;();\n\n        int res = 0;\n        for (int i = 0; i &lt; n; i++)\n            pq.add(cost[i]);\n\n        for (int i = 0; i &lt; n; i++) {\n            if (pq.peek() &lt;= sum) {\n                sum -= pq.poll();\n                res++;\n            } else {\n                break;\n            }\n        }\n        System.out.print(res);\n\n    }\n\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/heap/#kth-largest-element","title":"Kth Largest Element","text":"<pre><code>import java.io.*;\nimport java.util.*;\n\nclass GFG {\n\n    public static void firstKElements(int arr[], int n, int k) {\n\n        PriorityQueue&lt;Integer&gt; minHeap = new PriorityQueue&lt;&gt;();\n        for (int i = 0; i &lt; k; i++) {\n            minHeap.add(arr[i]);\n        }\n        for (int i = k; i &lt; n; i++) {\n            if (minHeap.peek() &gt; arr[i])\n                continue;\n            else {\n                minHeap.poll();\n                minHeap.add(arr[i]);\n            }\n        }\n\n        Iterator iterator = minHeap.iterator();\n\n        while (iterator.hasNext()) {\n            System.out.print(iterator.next() + \" \");\n        }\n    }\n\n    public static void main(String[] args) {\n        int arr[] = {11, 3, 2, 1, 15, 5, 4, 45, 88, 96, 50, 45};\n\n        int size = arr.length;\n\n        int k = 3;\n\n        firstKElements(arr, size, k);\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/heap/#k-closet-element","title":"K Closet Element","text":"<pre><code>import java.io.*;\nimport java.util.*;\n\nclass GFG {\n\n    public static void firstKElements(int arr[], int n, int k) {\n\n        PriorityQueue&lt;Integer&gt; minHeap = new PriorityQueue&lt;&gt;();\n        for (int i = 0; i &lt; k; i++) {\n            minHeap.add(arr[i]);\n        }\n        for (int i = k; i &lt; n; i++) {\n            if (minHeap.peek() &gt; arr[i])\n                continue;\n            else {\n                minHeap.poll();\n                minHeap.add(arr[i]);\n            }\n        }\n\n        Iterator iterator = minHeap.iterator();\n\n        while (iterator.hasNext()) {\n            System.out.print(iterator.next() + \" \");\n        }\n    }\n\n    public static void main(String[] args) {\n        int arr[] = {11, 3, 2, 1, 15, 5, 4, 45, 88, 96, 50, 45};\n\n        int size = arr.length;\n\n        int k = 3;\n\n        firstKElements(arr, size, k);\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/heap/#merge-k-sorted-arrays","title":"Merge K Sorted Arrays","text":"<pre><code>import java.io.*;\nimport java.util.*;\n\nclass Triplet implements Comparable&lt;Triplet&gt; {\n    int val, aPos, vPos;\n\n    Triplet(int v, int ap, int vp) {\n        val = v;\n        aPos = ap;\n        vPos = vp;\n    }\n\n    public int compareTo(Triplet t) {\n        if (val &lt;= t.val) return -1;\n        else return 1;\n    }\n}\n\nclass GFG {\n\n\n    public static List&lt;Integer&gt; mergeArr(ArrayList&lt;ArrayList&lt;Integer&gt;&gt; arr) {\n        List&lt;Integer&gt; res = new ArrayList&lt;Integer&gt;();\n        PriorityQueue&lt;Triplet&gt; pq = new PriorityQueue&lt;Triplet&gt;();\n\n        for (int i = 0; i &lt; arr.size(); i++)\n            pq.add(new Triplet(arr.get(i).get(0), i, 0));\n\n        while (pq.isEmpty() == false) {\n            Triplet curr = pq.poll();\n            res.add(curr.val);\n            int ap = curr.aPos;\n            int vp = curr.vPos;\n            if (vp + 1 &lt; arr.get(ap).size()) {\n                pq.add(new Triplet(arr.get(ap).get(vp + 1), ap, vp + 1));\n            }\n        }\n\n        return res;\n    }\n\n    public static void main(String[] args) {\n        ArrayList&lt;ArrayList&lt;Integer&gt;&gt; arr = new ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();\n\n        ArrayList&lt;Integer&gt; a1 = new ArrayList&lt;Integer&gt;();\n        a1.add(10);\n        a1.add(20);\n        a1.add(30);\n        arr.add(a1);\n\n        ArrayList&lt;Integer&gt; a2 = new ArrayList&lt;Integer&gt;();\n        a2.add(5);\n        a2.add(15);\n        arr.add(a2);\n\n        ArrayList&lt;Integer&gt; a3 = new ArrayList&lt;Integer&gt;();\n        a3.add(1);\n        a3.add(9);\n        a3.add(11);\n        a3.add(18);\n        arr.add(a3);\n\n        List&lt;Integer&gt; res = mergeArr(arr);\n\n        System.out.println(\"Merged array is \");\n        for (int x : res)\n            System.out.print(x + \" \");\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/heap/#median-of-stream","title":"Median of Stream","text":"<pre><code>import java.io.*;\nimport java.util.*;\n\nclass Node {\n    double data;\n    Node left, right;\n    int lCount;\n    Node(double x)\n    {\n        data = x;\n        left = right = null;\n        lCount = 0;\n    }\n}\n\nclass GFG{\n\npublic static void printMedians(int arr[],int n){\n    PriorityQueue&lt;Integer&gt; g=new PriorityQueue&lt;Integer&gt;();\n    PriorityQueue&lt;Integer&gt; s=new PriorityQueue&lt;Integer&gt;(Collections.reverseOrder());\n    s.add(arr[0]);\n    System.out.print(arr[0]+\" \");\n    for(int i=1;i&lt;n;i++){\n        int x=arr[i];\n        if(s.size()&gt;g.size())\n        {\n            if(s.peek()&gt;x){\n                g.add(s.poll());\n                s.add(x);\n            }else g.add(x);\n            System.out.print(((double)(s.peek()+g.peek())/2)+\" \");\n        }else{\n            if(x&lt;=s.peek()){\n                s.add(x);\n            }else{\n                g.add(x);\n                s.add(g.poll());\n            }\n            System.out.print(s.peek()+\" \");\n        }\n    }\n}\n\n    public static void main(String args[])\n    {\n        int keys[] = { 12, 15, 10, 5, 8, 7, 16};\n\n        printMedians(keys,7);\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/introduction/","title":"Introduction","text":""},{"location":"data-structure-and-algorithms/introduction/#asymptotic-notation","title":"Asymptotic Notation","text":"<ul> <li>Asymptotic notations are mathematical tools to represent the time complexity of algorithms for asymptotic analysis. The following 3 asymptotic notations are mostly used to represent the time complexity of algorithms.</li> <li>Asymptotic analysis refers to computing the running time of any operation in mathematical units of computation</li> </ul>"},{"location":"data-structure-and-algorithms/introduction/#theta-notation","title":"\u0398 Theta Notation","text":"<ul> <li>The theta notation bounds a function from above and below, so it defines exact asymptotic behavior.</li> </ul> <pre><code>\u0398(g(n)) = {      f(n): there exist positive constants c1, c2 and n0 \n          such that :\n                      0 &lt;= c1*g(n) &lt;= f(n) &lt;= c2*g(n) \n                  for all n &gt;= n0\n      }\n</code></pre> <p>A simple way to get the Theta notation of an expression is to drop low-order terms and ignore leading constants. </p>"},{"location":"data-structure-and-algorithms/introduction/#big-o-notation","title":"Big O Notation","text":"<p>The Big O notation defines an upper bound of an algorithm, it bounds a function only from above</p> <p>If we use O notation to represent time complexity of Insertion sort, we have to use two statements for best and worst cases</p> <ol> <li>The worst case time complexity of Insertion Sort is O($n^2$).</li> <li>The best case time complexity of Insertion Sort is O(n). Note that O($n^2$) also covers linear time.</li> </ol> <pre><code>O(g(n)) = {     f(n): there exist positive constants \n                c and n0 such that \n                        0 &lt;= f(n) &lt;= c*g(n) \n                for all n &gt;= n0\n          }\n</code></pre>"},{"location":"data-structure-and-algorithms/introduction/#delta-notation","title":"\u03a9 Delta Notation","text":"<p>Just as Big O notation provides an asymptotic upper bound on a function, \u03a9 notation provides an asymptotic lower bound.</p> <pre><code>\u03a9 (g(n)) = {    f(n): there exist positive constants c and n0 \n                such that \n                    0 &lt;= c*g(n) &lt;= f(n) \n                for all n &gt;= n0\n            }\n</code></pre>"},{"location":"data-structure-and-algorithms/introduction/#deriving-big-o-notation","title":"Deriving Big O notation","text":"<p>O(1): Time complexity of a function (or set of statements) is considered as O(1) if it doesn't contain loop, recursion and call to any other non-constant time function.</p> <p>O(n): Time Complexity of a loop is considered as O(n) if the loop variables is incremented / decremented by a constant amount</p> <pre><code>// Here c is a positive integer constant   \nfor (int i = 1; i &lt;= n; i += c) {  \n    // some O(1) expressions\n}\n</code></pre> <p>O($n^c$): Time complexity of nested loops is equal to the number of times the innermost statement is executed. For example the following sample loops have O($n^c$) time complexity</p> <pre><code>for (int i = 1; i &lt;=n; i += c) {\n       for (int j = 1; j &lt;=n; j += c) {\n          // some O(1) expressions\n    }\n}\n</code></pre> <p>O( Log(n) ): Time Complexity of a loop is considered as O( Log(n) ) if the loop variables is divided / multiplied by a constant amount</p> <pre><code>for (int i = 1; i &lt;=n; i *= c) {\n       // some O(1) expressions\n }\n\nfor (int i = n; i &gt; 0; i /= c) {\n   // some O(1) expressions\n}\n</code></pre> <p>O( Log(Log(n)) ): Time Complexity of a loop is considered as O( Log(Log(n)) ) if the loop variables is reduced / increased exponentially by a constant amount</p> <pre><code>// Here c is a constant greater than 1   \n for (int i = 2; i &lt;=n; i = pow(i, c)) { \n     // some O(1) expressions\n }\n</code></pre> <p>O( m+n ) : When there are consecutive loops, we calculate time complexity as sum of time complexities of individual loops.</p> <pre><code>for (int i = 1; i &lt;=m; i += c) {  \n        // some O(1) expressions\n }\n\nfor (int i = 1; i &lt;=n; i += c) {\n    // some O(1) expressions\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/linkedlist/","title":"LinkedList","text":""},{"location":"data-structure-and-algorithms/linkedlist/#remove-nth-node-from-end-of-list","title":"Remove Nth Node From End of List","text":"<p>Given the <code>head</code> of a linked list, remove the <code>nth</code> node from the end of the list and return its head.</p> <pre><code>Input: head = [1,2,3,4,5], n = 2\nOutput: [1,2,3,5]\nExample 2:\n\nInput: head = [1], n = 1\nOutput: []\nExample 3:\n\nInput: head = [1,2], n = 1\nOutput: [1]\n</code></pre> <pre><code>/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution \n{\n    public ListNode removeNthFromEnd(ListNode head, int n) \n    {\n        if(head.next==null)\n            return null;\n\n        ListNode slow=head;\n        ListNode fast=head;\n\n        for(int i=1;i&lt;=n;i++)\n            fast=fast.next;\n\n        // edge case handeled when we have to delete the 1st node \n        // i.e n=size of linked list\n\n        if(fast==null)\n            return head.next;\n\n        while(fast!=null &amp;&amp; fast.next!=null)\n        {\n            fast=fast.next;\n            slow=slow.next;\n        }\n\n        slow.next=slow.next.next;\n        return head;\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/linkedlist/#linkedlist-cycle","title":"LinkedList Cycle","text":"<pre><code>/**\n * Definition for singly-linked list.\n * class ListNode {\n * int val;\n * ListNode next;\n * ListNode(int x) {\n * val = x;\n * next = null;\n * }\n * }\n */\npublic class Solution {\n    public boolean hasCycle(ListNode head) {\n        if (head == null || head.next == null || head.next.next == null) {\n            return false;\n        }\n\n        ListNode slow = head;\n        ListNode fast = head.next;\n\n        while (fast != null &amp;&amp; fast.next != null) {\n            fast = fast.next.next;\n            slow = slow.next;\n            if (slow == fast) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/linkedlist/#delete-the-middle-node-of-a-linked-list","title":"Delete the Middle Node of a Linked List","text":"<pre><code>You are given the head of a linked list. Delete the middle node, \nand return the head of the modified linked list.\n\nInput: head = [1,3,4,7,1,2,6]\nOutput: [1,3,4,1,2,6]\nExplanation: 7 is the middle element\n\n\nclass Solution {\n    public ListNode deleteMiddle(ListNode head) {\n        if (head == null || head.next == null) {\n            return null;\n        }\n        if (head.next.next == null) {\n            head.next = null;\n            return head;\n        }\n        ListNode fast = head;\n        ListNode slow = head;\n        while (fast != null &amp;&amp; fast.next != null) {\n            fast = fast.next.next;\n            slow = slow.next;\n        }\n        slow.val = slow.next.val;\n        slow.next = slow.next.next;\n        return head;\n    }\n}Delete the Middle Node of a Linked List\n</code></pre> <pre><code>You are given the head of a linked list. Delete the middle node, \nand return the head of the modified linked list.\n\nInput: head = [1,3,4,7,1,2,6]\nOutput: [1,3,4,1,2,6]\nExplanation: 7 is the middle element\n</code></pre> <pre><code>class Solution {\n    public ListNode deleteMiddle(ListNode head) {\n        if (head == null || head.next == null) {\n            return null;\n        }\n        if (head.next.next == null) {\n            head.next = null;\n            return head;\n        }\n        ListNode fast = head;\n        ListNode slow = head;\n        while (fast != null &amp;&amp; fast.next != null) {\n            fast = fast.next.next;\n            slow = slow.next;\n        }\n        slow.val = slow.next.val;\n        slow.next = slow.next.next;\n        return head;\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/linkedlist/#merge-two-sorted-list","title":"Merge two sorted List","text":"<pre><code>class Solution {\n    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {\n\n        ListNode temp = new ListNode();\n        ListNode ans = temp;\n\n        while (list1 != null &amp;&amp; list2 != null) {\n            if (list1.val &lt; list2.val) {\n                temp.next = list1;\n                temp = temp.next;\n                list1 = list1.next;\n            } else {\n                temp.next = list2;\n                temp = temp.next;\n                list2 = list2.next;\n            }\n        }\n\n        if (list1 != null) {\n            temp.next = list1;\n        }\n        if (list2 != null) {\n            temp.next = list2;\n        }\n\n        return ans.next;\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/linkedlist/#remove-linked-list-elements","title":"Remove Linked List Elements","text":"<p>Given the <code>head</code> of a linked list and an integer <code>val</code>, remove all the nodes of the linked list that has <code>Node.val == val</code>, and return the new head.</p> <pre><code>Input: head = [1,2,6,3,4,5,6], val = 6\nOutput: [1,2,3,4,5]\nExample 2:\n\nInput: head = [], val = 1\nOutput: []\nExample 3:\n\nInput: head = [7,7,7,7], val = 7\nOutput: []\n</code></pre>"},{"location":"data-structure-and-algorithms/linkedlist/#middle-of-the-linked-list","title":"Middle of the Linked List","text":"<p>Given the <code>head</code> of a singly linked list, return the middle node of the linked list.</p> <p>If there are two middle nodes, return the second middle node.</p> <pre><code>/**\n * Definition for singly-linked list.\n * public class ListNode {\n * int val;\n * ListNode next;\n * ListNode() {}\n * ListNode(int val) { this.val = val; }\n * ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution {\n    public ListNode middleNode(ListNode head) {\n        ListNode slow = head, fast = head;\n        while (fast != null &amp;&amp; fast.next != null) {\n            slow = slow.next;\n            fast = fast.next.next;\n        }\n        return slow;\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/linkedlist/#remove-nth-node-from-end-of-list_1","title":"Remove Nth Node From End of List","text":"<p>Given the <code>head</code> of a linked list, remove the <code>nth</code> node from the end of the list and return its head.</p> <pre><code>Input: head = [1,2,3,4,5], n = 2\nOutput: [1,2,3,5]\nExample 2:\n\nInput: head = [1], n = 1\nOutput: []\nExample 3:\n\nInput: head = [1,2], n = 1\nOutput: [1]\n</code></pre> <pre><code>/**\n * Definition for singly-linked list.\n * public class ListNode {\n *     int val;\n *     ListNode next;\n *     ListNode() {}\n *     ListNode(int val) { this.val = val; }\n *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }\n * }\n */\nclass Solution \n{\n    public ListNode removeNthFromEnd(ListNode head, int n) \n    {\n        if(head.next==null)\n            return null;\n\n        ListNode slow=head;\n        ListNode fast=head;\n\n        for(int i=1;i&lt;=n;i++)\n            fast=fast.next;\n\n        // edge case handeled when we have to delete the 1st node \n        // i.e n=size of linked list\n\n        if(fast==null)\n            return head.next;\n\n        while(fast!=null &amp;&amp; fast.next!=null)\n        {\n            fast=fast.next;\n            slow=slow.next;\n        }\n\n        slow.next=slow.next.next;\n        return head;\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/linkedlist/#singly-linkedlist-implementation","title":"Singly LinkedList Implementation","text":"<pre><code>public class Program {\n    static class Node {\n        int number;\n        Node next;\n\n        public Node(int number) {\n            this.number = number;\n            next = null;\n        }\n    }\n\n    public static void main(  ) {\n\n        Node head;\n        Node first = new Node(10);\n        Node second = new Node(20);\n        Node third = new Node(30);\n        Node fourth = new Node(40);\n\n        first.next = second;\n        second.next = third;\n        third.next = fourth;\n\n        System.out.println(\"Iterative Printing\");\n        printLinkedList(first);\n\n        System.out.println(\"Recursive Printing\");\n        printLinkedLRecursive(first);\n\n        System.out.println(\"Inserting head\");\n        head = insertHeadLL(0, first);\n        printLinkedLRecursive(head);\n\n        System.out.println(\"Inserting at end\");\n        head = insertNodeEndLL(50, head);\n        printLinkedLRecursive(head);\n\n        System.out.println(\"Deleting Head node\");\n        head = deleteHeadNodeLL(head);\n        printLinkedList(head);\n\n        System.out.println(\"Delete Last node\");\n        head = deleteLastNodeLL(head);\n        printLinkedLRecursive(head);\n\n        System.out.println(\"Insert data at postion\");\n        head = insertDataAtPos(4, 25, head);\n        printLinkedLRecursive(head);\n\n        System.out.println(\"Find Data iter  : \" + searchInLLIter(30, head));\n        System.out.println(\"Find Data recur : \" + searchInLLRec(60, 1, head));\n\n    }\n\n    public static void printLinkedList(Node curr) {\n        while (curr != null) {\n            System.out.print(curr.number + \" \");\n            curr = curr.next;\n        }\n        System.out.println();\n    }\n\n    public static void printLinkedLRecursive(Node curr) {\n        if (curr == null) {\n            System.out.println();\n            return;\n        }\n        System.out.print(curr.number + \" \");\n        printLinkedLRecursive(curr.next);\n    }\n\n    public static Node insertHeadLL(int number, Node currHead) {\n        Node newNode = new Node(number);\n        newNode.next = currHead;\n        return newNode;\n    }\n\n    public static Node insertNodeEndLL(int number, Node head) {\n        Node ptr = head;\n        if (head == null) {\n            return insertHeadLL(number, null);\n        }\n\n        // DESIGN\n        while (ptr.next != null)\n            ptr = ptr.next;\n\n        ptr.next = new Node(number);\n        return head;\n\n    }\n\n    public static Node deleteHeadNodeLL(Node head) {\n        if (head == null) {\n            return null;\n        }\n        return head.next;\n    }\n\n    public static Node deleteLastNodeLL(Node head) {\n        if (head == null) {\n            return null;\n        }\n\n        if (head.next == null) {\n            return null;\n        }\n\n        Node ptr = head;\n\n        // DESIGN\n        while (ptr.next.next != null)\n            ptr = ptr.next;\n\n        ptr.next = null;\n        return head;\n    }\n\n    public static Node insertDataAtPos(int position, int number, Node head) {\n        if (position == 1) {\n            return insertHeadLL(number, head);\n        }\n\n        // *** DESIGN ***\n        Node ptr = head;\n        for (int i = 1; i &lt; position - 1 &amp;&amp; ptr != null; i++) {\n            ptr = ptr.next;\n        }\n\n        if (ptr == null) {\n            return head;\n        }\n\n        Node temp = new Node(number);\n        temp.next = ptr.next;\n        ptr.next = temp;\n        return head;\n\n    }\n\n    public static int searchInLLIter(int number, Node head) {\n        Node ptr = head;\n        int count = 1;\n        while (ptr != null) {\n            if (ptr.number == number) {\n                return count;\n            }\n            ptr = ptr.next;\n            count++;\n        }\n        return -1;\n    }\n\n    public static int searchInLLRec(int number, int index, Node head) {\n        if (head == null) {\n            return -1;\n        }\n        if (head.number == number) {\n            return index;\n        }\n        return searchInLLRec(number, index + 1, head.next);\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/linkedlist/#circular-linkedlist-implementation","title":"Circular LinkedList Implementation","text":"<pre><code>public class Program {\n    static class Node {\n        int number;\n        Node next;\n\n        public Node(int number) {\n            this.number = number;\n            next = null;\n        }\n    }\n\n    public static void main(  ) {\n        Node head = new Node(10);\n        head.next = new Node(20);\n        head.next.next = new Node(30);\n        head.next.next.next = new Node(40);\n        head.next.next.next.next = head;\n\n        System.out.println(\"Printing CLL\");\n        printCLL(head);\n\n        System.out.println(\"Insert Head\");\n        head = insertHead(0, head);\n        printCLL(head);\n\n        System.out.println(\"Insert tail\");\n        head = insertTail(50, head);\n        printCLL(head);\n\n        System.out.println(\"delete head\");\n        head = deleteHead(head);\n        printCLL(head);\n\n        System.out.println(\"delete kth node\");\n        head = deleteKthNode(3, head);\n        printCLL(head);\n\n    }\n\n    public static void printCLL(Node head) {\n        Node ptr = head;\n\n        if (head == null) {\n            return;\n        }\n\n        // DESIGN\n        do {\n            System.out.print(ptr.number + \" \");\n            ptr = ptr.next;\n        } while (ptr != head);\n        System.out.println();\n    }\n\n    public static Node insertHead(int number, Node head) {\n        Node temp = new Node(number);\n\n        if (head == null) {\n            temp.next = temp;\n            return temp;\n        }\n\n        temp.next = head.next;\n        head.next = temp;\n\n        int t = head.number;\n        head.number = temp.number;\n        temp.number = t;\n        return head;\n\n    }\n\n    public static Node insertTail(int number, Node head) {\n\n        Node temp = new Node(number);\n\n        if (head == null) {\n            temp.next = temp;\n            return temp;\n        }\n\n        temp.next = head.next;\n        head.next = temp;\n\n        int t = temp.number;\n        temp.number = head.number;\n        head.number = t;\n        return temp;\n\n    }\n\n    public static Node deleteHead(Node head) {\n        if (head == null || head.next == head) {\n            return null;\n        }\n\n        int t = head.next.number;\n        head.next = head.next.next;\n        head.number = t;\n\n        return head;\n\n    }\n\n    public static Node deleteKthNode(int pos, Node head) {\n        if (pos == 1) {\n            return deleteHead(head);\n        }\n\n        Node ptr = head;\n\n        for (int i = 0; i &lt; pos - 2; i++) {\n            ptr = ptr.next;\n        }\n\n        ptr.next = ptr.next.next;\n        return head;\n\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/linkedlist/#doubly-linkedlist-implementation","title":"Doubly LinkedList Implementation","text":"<pre><code>public class Program {\n\n    static class Node {\n        int number;\n        Node next;\n        Node prev;\n\n        public Node(int number) {\n            this.number = number;\n            this.next = null;\n            this.prev = null;\n        }\n    }\n\n    public static void main(  ) {\n\n        Node head;\n        Node first = new Node(10);\n        Node second = new Node(20);\n        Node third = new Node(30);\n        Node fourth = new Node(40);\n\n        first.next = second;\n        first.prev = null;\n        second.next = third;\n        second.prev = first;\n        third.prev = second;\n        third.next = fourth;\n        fourth.prev = third;\n        fourth.next = null;\n\n        System.out.println(\"Inserting at the beginning\");\n        head = insertAtTheBegin(0, first);\n        printLL(head);\n\n        System.out.println(\"Inserting at the End\");\n        head = insertAtTheEnd(50, head);\n        printLL(head);\n\n        System.out.println(\"Delete Head\");\n        head = deleteHeadDLL(head);\n        printLL(head);\n\n        System.out.println(\"Delete Last Node \");\n        head = deleteLastHead(head);\n        printLL(head);\n\n        System.out.println(\"reversing a DLL\");\n        Node newHead = reverseDLL(head);\n        printLL(newHead);\n    }\n\n    public static void printLL(Node node) {\n\n        if (node == null) {\n            System.out.println();\n            return;\n        }\n\n        System.out.print(node.number + \" \");\n        printLL(node.next);\n\n    }\n\n    public static Node insertAtTheBegin(int number, Node head) {\n\n        if (head == null) {\n            return new Node(number);\n        }\n\n        Node temp = new Node(number);\n        head.prev = temp;\n        temp.next = head;\n        return temp;\n    }\n\n    public static Node insertAtTheEnd(int number, Node head) {\n        if (head == null) {\n            return new Node(number);\n        }\n\n        Node ptr = head;\n\n        // DESIGN\n        while (ptr.next != null)\n            ptr = ptr.next;\n\n        Node temp = new Node(number);\n        ptr.next = temp;\n        temp.prev = ptr;\n        return head;\n    }\n\n    public static Node reverseDLL(Node head) {\n        if (head == null || head.next == null) {\n            return head;\n        }\n\n        Node prev = null;\n        Node curr = head;\n\n        while (curr != null) {\n            prev = curr.prev;\n            curr.prev = curr.next;\n            curr.next = prev;\n            curr = curr.prev;\n        }\n        return prev.prev;\n\n    }\n\n    public static Node deleteHeadDLL(Node head) {\n        if (head == null) {\n            return head;\n        }\n\n        if (head.next == null) {\n            return null;\n        }\n\n        head = head.next;\n        head.prev = null;\n        return head;\n\n    }\n\n    public static Node deleteLastHead(Node head) {\n        if (head == null) {\n            return head;\n        }\n        if (head.next == null) {\n            return null;\n        }\n\n        Node ptr = head;\n        while (ptr.next.next != null)\n            ptr = ptr.next;\n\n        ptr.next = null;\n        return head;\n    }\n\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/linkedlist/#insert-into-sorted-linkedlist","title":"Insert into sorted Linkedlist","text":"<pre><code>public class Program {\n\n    static class Node {\n        int number;\n        Node next;\n\n        public Node(int number) {\n            this.number = number;\n            this.next = null;\n        }\n    }\n\n    public static void main(String[] args) {\n        Node first = new Node(10);\n        first.next = new Node(20);\n        first.next.next = new Node(30);\n        first.next.next.next = new Node(40);\n\n        Node head = first;\n\n        System.out.println(\"sorted insert\");\n        head = sortedInsert(13, head);\n        printLL(head);\n\n    }\n\n    public static void printLL(Node head) {\n        Node ptr = head;\n\n        do {\n            System.out.print(ptr.number + \" \");\n            ptr = ptr.next;\n        } while (ptr != null);\n\n        System.out.println();\n    }\n\n    public static Node sortedInsert(int number, Node head) {\n\n        Node temp = new Node(number);\n\n        if (head == null) {\n            return temp;\n        }\n\n        if (number &lt; head.number) {\n            temp.next = head;\n            return temp;\n        }\n\n        Node curr = head;\n        while (curr.next != null &amp;&amp; curr.next.number &lt; number) {\n            curr = curr.next;\n        }\n\n        temp.next = curr.next;\n        curr.next = temp;\n        return head;\n\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/linkedlist/#middle-of-linked-list","title":"Middle of Linked List","text":"<pre><code>class Program {\n\n    static class Node {\n        int data;\n        Node next;\n\n        Node(int x) {\n            data = x;\n            next = null;\n        }\n    }\n\n    public static void main ( String[] args ) {\n        Node head = new Node(10);\n        head.next = new Node(20);\n        head.next.next = new Node(30);\n        head.next.next.next = new Node(40);\n        head.next.next.next.next = new Node(50);\n        printlist(head);\n        System.out.print(\"Position of element in Linked List: \");\n        printMiddle(head);\n\n    }\n\n    static void printMiddle(Node head) {\n        if (head == null) return;\n        Node slow = head, fast = head;\n        while (fast != null &amp;&amp; fast.next != null) {\n            slow = slow.next;\n            fast = fast.next.next;\n        }\n        System.out.print(slow.data);\n    }\n\n    public static void printlist(Node head) {\n        Node curr = head;\n        while (curr != null) {\n            System.out.print(curr.data + \" \");\n            curr = curr.next;\n        }\n        System.out.println();\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/linkedlist/#reverse-a-linked-list-iteratively","title":"Reverse a Linked-list Iteratively","text":"<pre><code>public class Program {\n\n    static class Node {\n        int data;\n        Node next;\n\n        Node(int x) {\n            data = x;\n            next = null;\n        }\n    }\n\n    public static void main(String[] args ) {\n        Node head = new Node(10);\n        head.next = new Node(20);\n        head.next.next = new Node(30);\n        head.next.next.next = new Node(40);\n        head.next.next.next.next = new Node(50);\n\n        System.out.print(\"Position of element in Linked List: \");\n        head = reverseLL(head);\n        printlist(head);\n\n    }\n\n    static Node reverseLL(Node head) {\n        if(head == null || head.next == null) {\n            return head;\n        }\n\n        Node prev = null;\n        Node curr = head;\n\n        while(curr != null) {\n            Node next = curr.next;\n            curr.next = prev;\n            prev = curr;\n            curr = next;\n        }\n        return prev;\n    }\n\n    public static void printlist(Node head) {\n        Node curr = head;\n        while (curr != null) {\n            System.out.print(curr.data + \" \");\n            curr = curr.next;\n        }\n        System.out.println();\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/linkedlist/#reverse-a-linked-list-recursively","title":"Reverse a linked-list recursively","text":"<pre><code>public class Main {\n    static class Node {\n        int number;\n        Node next;\n\n        public Node(int number) {\n            this.number = number;\n            this.next = null;\n        }\n    }\n\n    public static void main(String[] args) {\n        Node head = new Node(0);\n        head.next = new Node(10);\n        head.next.next = new Node(20);\n        head.next.next.next = new Node(30);\n\n        head = reverseLL(head, null);\n        printLL(head);\n    }\n\n    public static Node reverseLL(Node curr, Node prev) {\n        if (curr == null) {\n            return prev;\n        }\n\n        Node next = curr.next;\n        curr.next = prev;\n\n        return reverseLL(next, curr);\n    }\n\n    public static void printLL(Node head) {\n        Node ptr = head;\n        while (ptr != null) {\n            System.out.print(ptr.number + \" \");\n            ptr = ptr.next;\n        }\n    }\n\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/linkedlist/#delete-duplicate-item","title":"Delete duplicate Item","text":"<pre><code>public class Main {\n    static class Node \n    {\n        int number;\n        Node next;\n\n        public Node(int number)\n        {\n            this.number = number;\n            this.next = null;\n        }\n    }\n\n    public static void main(String[] args)\n    {\n\n        Node head = new Node(0);\n        head.next = new Node(10);\n        head.next.next = new Node(10);\n        head.next.next.next = new Node(30);\n        head.next.next.next.next = new Node(30);\n\n        System.out.println(\"Printing : \");\n        printLL(head);\n\n        System.out.println(\"Deleting : \");\n        deleteDLL(head);\n        printLL(head);\n\n    }\n\n    static void printLL(Node head) {\n        Node ptr = head;\n        while(ptr != null) {\n            System.out.print(ptr.number+\" \");\n            ptr = ptr.next;\n        }\n        System.out.println();\n    }\n\n    static void deleteDLL(Node head) {\n        Node ptr = head;\n        while(ptr != null &amp;&amp; ptr.next != null) {\n            if (ptr.number == ptr.next.number) {\n                ptr.next = ptr.next.next;\n            } else {\n                ptr = ptr.next;\n            }            \n        }\n    }\n\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/linkedlist/#floyd-detection-algorithm","title":"Floyd Detection Algorithm","text":"<pre><code>public class Main {\n    static class Node {\n        int data;\n        Node next;\n\n        Node(int x) {\n            data = x;\n            next = null;\n        }\n    }\n\n    public static void main(String args[]) {\n        Node head = new Node(15);\n        head.next = new Node(10);\n        head.next.next = new Node(12);\n        head.next.next.next = new Node(20);\n        head.next.next.next.next = head.next;\n        if (isLoop(head))\n            System.out.print(\"Loop found\");\n        else\n            System.out.print(\"No Loop\");\n    }\n\n    static boolean isLoop(Node head) {\n        Node slow_p = head, fast_p = head;\n\n        while (fast_p != null &amp;&amp; fast_p.next != null) {\n            slow_p = slow_p.next;\n            fast_p = fast_p.next.next;\n            if (slow_p == fast_p) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void printlist(Node head) {\n        Node curr = head;\n        while (curr != null) {\n            System.out.print(curr.data + \" \");\n            curr = curr.next;\n        }\n        System.out.println();\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/linkedlist/#detect-and-remove-the-loop-in-linked-list","title":"Detect and remove the loop in Linked List","text":"<pre><code>public class Main {\n    static class Node {\n        int data;\n        Node next;\n\n        Node(int x) {\n            data = x;\n            next = null;\n        }\n    }\n\n    public static void main(String args[]) {\n        Node head = new Node(15);\n        head.next = new Node(10);\n        head.next.next = new Node(12);\n        head.next.next.next = new Node(20);\n        head.next.next.next.next = head.next;\n        if (isLoop(head))\n            System.out.print(\"Loop found\");\n        else\n            System.out.print(\"No Loop\");\n    }\n\n    static boolean isLoop(Node head) {\n        Node slow_p = head, fast_p = head;\n\n        while (fast_p != null &amp;&amp; fast_p.next != null) {\n            slow_p = slow_p.next;\n            fast_p = fast_p.next.next;\n            if (slow_p == fast_p) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    public static void printlist(Node head) {\n        Node curr = head;\n        while (curr != null) {\n            System.out.print(curr.data + \" \");\n            curr = curr.next;\n        }\n        System.out.println();\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/linkedlist/#delete-node-with-only-pointer-given-to-it","title":"Delete node with only pointer given to it","text":"<pre><code>class Main {\n\n    static class Node {\n        int data;\n        Node next;\n\n        Node(int x) {\n            data = x;\n            next = null;\n        }\n    }\n\n    public static void main(String args[]) {\n        Node head = new Node(10);\n        head.next = new Node(20);\n        Node ptr = new Node(30);\n        head.next.next = ptr;\n        head.next.next.next = new Node(40);\n        head.next.next.next.next = new Node(25);\n        printlist(head);\n        deleteNode(ptr);\n        printlist(head);\n    }\n\n    static void deleteNode(Node ptr) {\n        Node temp = ptr.next;\n        ptr.data = temp.data;\n        ptr.next = temp.next;\n    }\n\n    public static void printlist(Node head) {\n        Node curr = head;\n        while (curr != null) {\n            System.out.print(curr.data + \" \");\n            curr = curr.next;\n        }\n        System.out.println();\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/linkedlist/#segregate-even-odd-nodes-in-linked-list","title":"Segregate even &amp; odd nodes in Linked List","text":"<pre><code>public class Main {\n\n    static class Node {\n        int data;\n        Node next;\n\n        Node(int x) {\n            data = x;\n            next = null;\n        }\n    }\n\n    public static void main(String args[]) {\n        Node head = new Node(17);\n        head.next = new Node(15);\n        head.next.next = new Node(8);\n        head.next.next.next = new Node(12);\n        head.next.next.next.next = new Node(10);\n        head.next.next.next.next.next = new Node(5);\n        head.next.next.next.next.next.next = new Node(4);\n        printlist(head);\n        head = segregate(head);\n        printlist(head);\n\n    }\n\n    static Node segregate(Node head) {\n        Node eS = null, eE = null, oS = null, oE = null;\n        for (Node curr = head; curr != null; curr = curr.next) {\n            int x = curr.data;\n            if (x % 2 == 0) {\n                if (eS == null) {\n                    eS = curr;\n                    eE = eS;\n                } else {\n                    eE.next = curr;\n                    eE = eE.next;\n                }\n            } else {\n                if (oS == null) {\n                    oS = curr;\n                    oE = oS;\n                } else {\n                    oE.next = curr;\n                    oE = oE.next;\n                }\n            }\n        }\n        if (oS == null || eS == null)\n            return head;\n        eE.next = oS;\n        oE.next = null;\n        return eS;\n    }\n\n    public static void printlist(Node head) {\n        Node curr = head;\n        while (curr != null) {\n            System.out.print(curr.data + \" \");\n            curr = curr.next;\n        }\n        System.out.println();\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/linkedlist/#intersection-of-two-linked-list","title":"Intersection of two linked-list","text":"<pre><code>class Main {\n\n    static Node headA, headB;\n\n    static class Node {\n\n        int data;\n        Node next;\n\n        Node(int d) {\n            data = d;\n            next = null;\n        }\n    }\n\n    int getNode() {\n        int c1 = getCount(headA);\n        int c2 = getCount(headB);\n        int d;\n\n        if (c1 &gt; c2) {\n            d = c1 - c2;\n            return _getIntesectionNode(d, headA, headB);\n        } else {\n            d = c2 - c1;\n            return _getIntesectionNode(d, headB, headA);\n        }\n    }\n\n    int _getIntesectionNode(int d, Node node1, Node node2) {\n        int i;\n        Node current1 = node1;\n        Node current2 = node2;\n        for (i = 0; i &lt; d; i++) {\n            if (current1 == null) {\n                return -1;\n            }\n            current1 = current1.next;\n        }\n        while (current1 != null &amp;&amp; current2 != null) {\n            if (current1.data == current2.data) {\n                return current1.data;\n            }\n            current1 = current1.next;\n            current2 = current2.next;\n        }\n\n        return -1;\n    }\n\n    int getCount(Node node) {\n        Node current = node;\n        int count = 0;\n\n        while (current != null) {\n            count++;\n            current = current.next;\n        }\n\n        return count;\n    }\n\n    public static void main(String[] args) {\n        Main list = new Main();\n\n        list.headA = new Node(3);\n        list.headA.next = new Node(6);\n        list.headA.next.next = new Node(9);\n        list.headA.next.next.next = new Node(15);\n        list.headA.next.next.next.next = new Node(30);\n\n        list.headB = new Node(10);\n        list.headB.next = new Node(15);\n        list.headB.next.next = new Node(30);\n\n        System.out.println(list.getNode());\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/linkedlist/#pairwise-swap-in-linked-list","title":"Pairwise swap in linked-list","text":"<pre><code>class Main {\n    static class Node {\n        int data;\n        Node next;\n\n        Node(int x) {\n            data = x;\n            next = null;\n        }\n    }\n\n    public static void main(String args[]) {\n        Node head = new Node(1);\n        head.next = new Node(2);\n        head.next.next = new Node(3);\n        head.next.next.next = new Node(4);\n        head.next.next.next.next = new Node(5);\n        printlist(head);\n        head = pairwiseSwap(head);\n        printlist(head);\n\n    }\n\n    static Node pairwiseSwap(Node head) {\n        if (head == null || head.next == null)\n            return head;\n        Node curr = head.next.next;\n        Node prev = head;\n        head = head.next;\n        head.next = prev;\n        while (curr != null &amp;&amp; curr.next != null) {\n            prev.next = curr.next;\n            prev = curr;\n            Node next = curr.next.next;\n            curr.next.next = curr;\n            curr = next;\n        }\n        prev.next = curr;\n        return head;\n    }\n\n    public static void printlist(Node head) {\n        Node curr = head;\n        while (curr != null) {\n            System.out.print(curr.data + \" \");\n            curr = curr.next;\n        }\n        System.out.println();\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/linkedlist/#clone-a-linked-list-using-a-random-pointer","title":"Clone a linked list using a random pointer","text":"<pre><code>import java.util.HashMap;\n\nclass Main {\n\n    static class Node {\n        int data;\n        Node next, random;\n\n        Node(int x) {\n            data = x;\n            next = random = null;\n        }\n    }\n\n    public static void print(Node start) {\n        Node ptr = start;\n        while (ptr != null) {\n            System.out.println(\"Data = \" + ptr.data + \", Random  = \" + ptr.random.data);\n            ptr = ptr.next;\n        }\n    }\n\n    public static Node clone(Node head) {\n        HashMap&lt;Node, Node&gt; hm = new HashMap&lt;Node, Node&gt;();\n        for (Node curr = head; curr != null; curr = curr.next)\n            hm.put(curr, new Node(curr.data));\n\n        for (Node curr = head; curr != null; curr = curr.next) {\n            Node cloneCurr = hm.get(curr);\n            cloneCurr.next = hm.get(curr.next);\n            cloneCurr.random = hm.get(curr.random);\n        }\n        Node head2 = hm.get(head);\n\n        return head2;\n    }\n\n    public static void main(String[] args) {\n        Node head = new Node(10);\n        head.next = new Node(5);\n        head.next.next = new Node(20);\n        head.next.next.next = new Node(15);\n        head.next.next.next.next = new Node(20);\n\n        head.random = head.next.next;\n        head.next.random = head.next.next.next;\n        head.next.next.random = head;\n        head.next.next.next.random = head.next.next;\n        head.next.next.next.next.random = head.next.next.next;\n\n        System.out.print(\"Original list : \\n\");\n        print(head);\n\n        System.out.print(\"\\nCloned list : \\n\");\n        Node cloned_list = clone(head);\n        print(cloned_list);\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/linkedlist/#clone-linked-list-using-random-pointer-without-hashing","title":"Clone linked-list using random pointer without hashing","text":"<pre><code>public class Main {\n    static class Node {\n        int data;\n        Node next, random;\n\n        Node(int x) {\n            data = x;\n            next = random = null;\n        }\n    }\n\n    public static void print(Node start) {\n        Node ptr = start;\n        while (ptr != null) {\n            System.out.println(\"Data = \" + ptr.data + \", Random  = \" + ptr.random.data);\n            ptr = ptr.next;\n        }\n    }\n\n    public static Node clone(Node head) {\n        Node next, temp;\n        for (Node curr = head; curr != null;) {\n            next = curr.next;\n            curr.next = new Node(curr.data);\n            curr.next.next = next;\n            curr = next;\n        }\n        for (Node curr = head; curr != null; curr = curr.next.next) {\n            curr.next.random = (curr.random != null) ? (curr.random.next) : null;\n        }\n\n        Node original = head, copy = head.next;\n\n        temp = copy;\n\n        while (original != null &amp;&amp; copy != null) {\n            original.next = original.next != null ? original.next.next : original.next;\n\n            copy.next = copy.next != null ? copy.next.next : copy.next;\n            original = original.next;\n            copy = copy.next;\n        }\n\n        return temp;\n    }\n\n    public static void main(String[] args) {\n        Node head = new Node(10);\n        head.next = new Node(5);\n        head.next.next = new Node(20);\n        head.next.next.next = new Node(15);\n        head.next.next.next.next = new Node(20);\n\n        head.random = head.next.next;\n        head.next.random = head.next.next.next;\n        head.next.next.random = head;\n        head.next.next.next.random = head.next.next;\n        head.next.next.next.next.random = head.next.next.next;\n\n        System.out.print(\"Original list : \\n\");\n        print(head);\n\n        System.out.print(\"\\nCloned list : \\n\");\n        Node cloned_list = clone(head);\n        print(cloned_list);\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/linkedlist/#lru-least-recently-used-cache-design","title":"LRU ( least recently used ) Cache Design","text":"<pre><code>import java.util.*;\nimport java.io.*;\nimport java.lang.*;\nimport java.util.*; \n\nclass Node { \n    int key; \n    int value; \n    Node pre; \n    Node next; \n\n    public Node(int key, int value) \n    { \n        this.key = key; \n        this.value = value; \n    } \n} \n\nclass LRUCache { \n    private HashMap&lt;Integer, Node&gt; map; \n    private int capacity, count; \n    private Node head, tail; \n\n    public LRUCache(int capacity) \n    { \n        this.capacity = capacity; \n        map = new HashMap&lt;&gt;(); \n        head = new Node(0, 0); \n        tail = new Node(0, 0); \n        head.next = tail; \n        tail.pre = head; \n        head.pre = null; \n        tail.next = null; \n        count = 0; \n    } \n\n    public void deleteNode(Node node) \n    { \n        node.pre.next = node.next; \n        node.next.pre = node.pre; \n    } \n\n    public void addToHead(Node node) \n    { \n        node.next = head.next; \n        node.next.pre = node; \n        node.pre = head; \n        head.next = node; \n    } \n\n    public int get(int key) \n    { \n        if (map.get(key) != null) { \n            Node node = map.get(key); \n            int result = node.value; \n            deleteNode(node); \n            addToHead(node); \n            System.out.println(\"Got the value : \" + \n                result + \" for the key: \" + key); \n            return result; \n        } \n        System.out.println(\"Did not get any value\" + \n                            \" for the key: \" + key); \n        return -1; \n    } \n\n    public void set(int key, int value) \n    { \n        System.out.println(\"Going to set the (key, \"+ \n            \"value) : (\" + key + \", \" + value + \")\"); \n        if (map.get(key) != null) { \n            Node node = map.get(key); \n            node.value = value; \n            deleteNode(node); \n            addToHead(node); \n        } \n        else { \n            Node node = new Node(key, value); \n            map.put(key, node); \n            if (count &lt; capacity) { \n                count++; \n                addToHead(node); \n            } \n            else { \n                map.remove(tail.pre.key); \n                deleteNode(tail.pre); \n                addToHead(node); \n            } \n        } \n    } \n} \n\npublic class TestLRUCache { \n    public static void main(String[] args) \n    { \n\n        LRUCache cache = new LRUCache(2); \n\n        // it will store a key (1) with value \n        // 10 in the cache. \n        cache.set(1, 10); \n\n        // it will store a key (2) with value 20 in the cache. \n        cache.set(2, 20); \n        System.out.println(\"Value for the key: 1 is \" + cache.get(1)); // returns 10 \n\n        // removing key 2 and store a key (3) with value 30 in the cache. \n        cache.set(3, 30); \n\n        System.out.println(\"Value for the key: 2 is \" + \n                cache.get(2)); // returns -1 (not found) \n\n        // removing key 1 and store a key (4) with value 40 in the cache. \n        cache.set(4, 40); \n        System.out.println(\"Value for the key: 1 is \" + \n            cache.get(1)); // returns -1 (not found) \n        System.out.println(\"Value for the key: 3 is \" + \n                        cache.get(3)); // returns 30 \n        System.out.println(\"Value for the key: 4 is \" + \n                        cache.get(4)); // return 40 \n    } \n}\n</code></pre>"},{"location":"data-structure-and-algorithms/linkedlist/#merge-two-sorted-linked-lists","title":"Merge two sorted linked lists","text":"<pre><code>import java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\nclass Node {\n    int data;\n    Node next;\n\n    Node(int x) {\n        data = x;\n        next = null;\n    }\n}\n\nclass Test {\n\n    public static void main(String args[]) {\n        Node a = new Node(10);\n        a.next = new Node(20);\n        a.next.next = new Node(30);\n        Node b = new Node(5);\n        b.next = new Node(35);\n        printlist(sortedMerge(a, b));\n\n    }\n\n    static Node sortedMerge(Node a, Node b) {\n        if (a == null)\n            return b;\n        if (b == null)\n            return a;\n        Node head = null, tail = null;\n        if (a.data &lt;= b.data) {\n            head = tail = a;\n            a = a.next;\n        } else {\n            head = tail = b;\n            b = b.next;\n        }\n        while (a != null &amp;&amp; b != null) {\n            if (a.data &lt;= b.data) {\n                tail.next = a;\n                tail = a;\n                a = a.next;\n            } else {\n                tail.next = b;\n                tail = b;\n                b = b.next;\n            }\n        }\n        if (a == null) {\n            tail.next = b;\n        } else {\n            tail.next = a;\n        }\n        return head;\n    }\n\n    public static void printlist(Node head) {\n        Node curr = head;\n        while (curr != null) {\n            System.out.print(curr.data + \" \");\n            curr = curr.next;\n        }\n        System.out.println();\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/linkedlist/#palindrome-linked-list","title":"Palindrome linked-list","text":"<pre><code>import java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\nclass Node {\n    char data;\n    Node next;\n\n    Node(char x) {\n        data = x;\n        next = null;\n    }\n}\n\nclass Test {\n\n    public static void main(String args[]) {\n        Node head = new Node('g');\n        head.next = new Node('f');\n        head.next.next = new Node('g');\n        if (isPalindrome(head))\n            System.out.print(\"Yes\");\n        else\n            System.out.print(\"No\");\n\n    }\n\n    static Node reverseList(Node head) {\n        if (head == null || head.next == null)\n            return head;\n        Node rest_head = reverseList(head.next);\n        Node rest_tail = head.next;\n        rest_tail.next = head;\n        head.next = null;\n        return rest_head;\n    }\n\n    static boolean isPalindrome(Node head) {\n        if (head == null)\n            return true;\n        Node slow = head, fast = head;\n        while (fast.next != null &amp;&amp; fast.next.next != null) {\n            slow = slow.next;\n            fast = fast.next.next;\n        }\n        Node rev = reverseList(slow.next);\n        Node curr = head;\n        while (rev != null) {\n            if (rev.data != curr.data)\n                return false;\n            rev = rev.next;\n            curr = curr.next;\n        }\n        return true;\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/mathematics/","title":"Mathematics","text":""},{"location":"data-structure-and-algorithms/mathematics/#basic-maths","title":"Basic Maths","text":"<p>Sum of AP : sum = n/2 * (2a+(n-1)d)</p> <p>Sum of GP : a(1-r^n)/1-r</p> <p>Mean : sum of all numbers divided by number of numbers</p> <p>Median :</p> <ul> <li>For odd number of numbers : middle number</li> <li>For even number of numbers : ( mean of middle numbers ) / 2</li> </ul> <p>LCM : LCM(a,b) = |a.b|/gcd(a,b)</p>"},{"location":"data-structure-and-algorithms/mathematics/#gcd-or-hcf","title":"GCD or HCF","text":"<pre><code>int gcd(int a, int b)\n{\n    if (a == 0)\n    {\n        return b;\n    }\n    return gcd(b % a, a);\n}\n\nint main()\n{\n    cout &lt;&lt; gcd(32, 24) &lt;&lt; endl;\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/mathematics/#number-of-digits","title":"Number of Digits","text":""},{"location":"data-structure-and-algorithms/mathematics/#number-of-digits-in-a-number-iteratively","title":"Number of Digits in a number ( iteratively )","text":"<pre><code>int number = 123456;\nint len = 0;\n\nwhile (number &gt; 0)\n{\n    number = number / 10;\n    len++;\n}\n\ncout &lt;&lt; len &lt;&lt; \"\\n\";\n</code></pre>"},{"location":"data-structure-and-algorithms/mathematics/#number-of-digits-in-a-number-recursively","title":"Number of Digits in a number ( recursively )","text":"<pre><code>int numOfDigits(int num)\n{\n    if (num == 0)\n    {\n        return 0;\n    }\n    return numOfDigits(num / 10) + 1;\n}\n\nint main()\n{\n    int number = 123456;\n    cout &lt;&lt; numOfDigits(number);\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/mathematics/#number-of-digits-in-a-number-mathematically","title":"Number of Digits in a number ( mathematically )","text":"<pre><code>int number = 1234561;\ncout &lt;&lt; (int)(log10(number)+1);\n</code></pre>"},{"location":"data-structure-and-algorithms/mathematics/#first-n-prime","title":"First N Prime","text":"<pre><code>int number = 200;\n\nfor (int i = 0; i &lt; number; i++)\n{\n    if (i == 0 || i == 1) {\n        continue;\n    }\n\n    bool flag = 1;\n\n    for (int j = 2; j &lt; sqrt(i); j++) {\n        if (i % j == 0) {\n            flag = 0;\n        }\n    }\n\n    if (flag) {\n        cout &lt;&lt; \"Prime : \" &lt;&lt; i &lt;&lt; \"\\n\";\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/mathematics/#factorial-of-a-number","title":"Factorial of a number","text":"<pre><code>int fact(int n)\n{\n    if (n == 0)\n    {\n        return 1;\n    }\n    return n * fact(n - 1);\n}\n\nint main()\n{\n    cout &lt;&lt; fact(7) &lt;&lt; endl;\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/matrix/","title":"Matrix","text":""},{"location":"data-structure-and-algorithms/matrix/#search-a-2d-matrix","title":"Search a 2D Matrix","text":"<pre><code>Write an efficient algorithm that searches for a value in an m x n matrix. \nThis matrix has the following properties:\n\nIntegers in each row are sorted from left to right.\nThe first integer of each row is greater than the last integer \nof the previous row\n\nInput: \nmatrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3\n\nOutput: true\n</code></pre> <pre><code>class Solution {\n    public boolean searchMatrix(int[][] matrix, int target) {\n        int start = 0;\n        int last = matrix[0].length - 1;\n\n        while (last &gt;= 0 &amp;&amp; start &lt; matrix.length) {\n            if (matrix[start][last] &lt; target)\n                start++;\n            else if (matrix[start][last] &gt; target)\n                last--;\n            else\n                return true;\n        }\n\n        return false;\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/matrix/#flood-fill","title":"Flood Fill","text":"<pre><code>An image is represented by an m x n integer grid image \nwhere image[i][j] represents the pixel value of the image.\n\nYou are also given three integers sr, sc, and newColor. \nYou should perform a flood fill on the image starting \nfrom the pixel image[sr][sc].\n\nTo perform a flood fill, consider the starting pixel, \nplus any pixels connected 4-directionally to the starting pixel \nof the same color as the starting pixel, \nplus any pixels connected 4-directionally to those pixels \n(also with the same color), and so on. \n\nReplace the color of all of the aforementioned pixels with newColor.\n\nReturn the modified image after performing the flood fill.\n</code></pre> <pre><code>class Solution {\n    public int[][] floodFill(int[][] image, int sr, int sc, int newColor) {\n        int color = image[sr][sc];\n        if (color != newColor)\n            dfs(image, sr, sc, color, newColor);\n        return image;\n    }\n\n    public void dfs(int[][] image, int r, int c, int color, int newColor) {\n        if (image[r][c] == color) {\n            image[r][c] = newColor;\n            if (r &gt;= 1)\n                dfs(image, r - 1, c, color, newColor);\n            if (c &gt;= 1)\n                dfs(image, r, c - 1, color, newColor);\n            if (r + 1 &lt; image.length)\n                dfs(image, r + 1, c, color, newColor);\n            if (c + 1 &lt; image[0].length)\n                dfs(image, r, c + 1, color, newColor);\n        }\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/matrix/#max-area-of-island","title":"Max Area of Island","text":"<pre><code>You are given an m x n binary matrix grid. \nAn island is a group of 1's (representing land) connected 4-directionally \n(horizontal or vertical.) You may assume all four edges of the \ngrid are surrounded by water.\n\nThe area of an island is the number of cells with a value 1 in the island.\n\nReturn the maximum area of an island in grid. If there is no island, return 0.\n</code></pre> <pre><code>class Solution {\n    int[][] grid;\n    boolean[][] seen;\n\n    public int area(int r, int c) {\n        if (r &lt; 0 || r &gt;= grid.length || c &lt; 0 || c &gt;= grid[0].length ||\n                seen[r][c] || grid[r][c] == 0)\n            return 0;\n        seen[r][c] = true;\n        return (1 + area(r + 1, c) + area(r - 1, c)\n                + area(r, c - 1) + area(r, c + 1));\n    }\n\n    public int maxAreaOfIsland(int[][] grid) {\n        this.grid = grid;\n        seen = new boolean[grid.length][grid[0].length];\n        int ans = 0;\n        for (int r = 0; r &lt; grid.length; r++) {\n            for (int c = 0; c &lt; grid[0].length; c++) {\n                ans = Math.max(ans, area(r, c));\n            }\n        }\n        return ans;\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/matrix/#reshape-the-matrix","title":"Reshape the Matrix","text":"<pre><code>In MATLAB, there is a handy function called reshape which \n    can reshape an m x n matrix into a new one with a \n    different size r x c keeping its original data.\n\nYou are given an m x n matrix mat and two integers r and c \n    representing the number of rows and the \n    number of columns of the wanted reshaped matrix.\n\nInput: mat = [[1,2],[3,4]], r = 1, c = 4\nOutput: [[1,2,3,4]\n</code></pre> <pre><code>class Solution {\n    public int[][] matrixReshape(int[][] mat, int r, int c) {\n        int n = mat.length;\n        int m = mat[0].length;\n\n        if ((n * m) != (r * c))\n            return mat;\n\n        int[][] ans = new int[r][c];\n        int k = 0, l = 0;\n\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = 0; j &lt; m; j++) {\n                if (l &gt;= c) {\n                    l = 0;\n                    k++;\n                }\n                ans[k][l++] = mat[i][j];\n            }\n        }\n        return ans;\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/matrix/#pascals-triangle","title":"Pascal's Triangle","text":"<pre><code>Example 1:\n\nInput: numRows = 5\nOutput: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]\n</code></pre> <pre><code>import java.util.ArrayList;\nimport java.util.List;\n\nclass Solution {\n    public List&lt;List&lt;Integer&gt;&gt; generate(int numRows) {\n        List&lt;List&lt;Integer&gt;&gt; triangle = new ArrayList&lt;&gt;();\n\n        if (numRows == 0)\n            return triangle;\n        List&lt;Integer&gt; firstRow = new ArrayList&lt;&gt;();\n        firstRow.add(1);\n        triangle.add(firstRow);\n\n        for (int i = 1; i &lt; numRows; i++) {\n            List&lt;Integer&gt; prevRow = triangle.get(i - 1);\n            List&lt;Integer&gt; row = new ArrayList&lt;&gt;();\n\n            row.add(1);\n            for (int j = 1; j &lt; i; j++) {\n                row.add(prevRow.get(j - 1) + prevRow.get(j));\n            }\n            row.add(1);\n            triangle.add(row);\n        }\n        return triangle;\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/matrix/#boundary-traversal-of-matrix","title":"Boundary traversal of matrix","text":"<pre><code>class Solution {\n    public static void printBoundary(int a[][], int m, int n) {\n    for (int i = 0; i &lt; m; i++) {\n        for (int j = 0; j &lt; n; j++) {\n            if (i == 0)\n                System.out.print(a[i][j] + \" \");\n            else if (i == m - 1)\n                System.out.print(a[i][j] + \" \");\n            else if (j == 0)\n                System.out.print(a[i][j] + \" \");\n            else if (j == n - 1)\n                System.out.print(a[i][j] + \" \");\n            else\n                System.out.print(\"  \");\n        }\n        System.out.println(\"\");\n    }\n    }\n\n    public static void main(String[] args) {\n        int a[][] = {\n                { 1, 2, 3, 4 },\n                { 5, 6, 7, 8 },\n                { 1, 2, 3, 4 },\n                { 5, 6, 7, 8 }\n        };\n        printBoundary(a, 4, 4);\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/matrix/#spirally-traversing-of-matrix","title":"Spirally traversing of matrix","text":"<pre><code>class Solution {\n    // Function print matrix in spiral form\n    static void spiralPrint(int m, int n, int a[][]) {\n    int i, k = 0, l = 0;\n\n    // k - starting row index\n    // m - ending row index\n    // l - starting column index\n    // n - ending column index\n    // i - iterator\n\n    while (k &lt; m &amp;&amp; l &lt; n) {\n        // Print the first row from the\n        // remaining rows\n        for (i = l; i &lt; n; ++i) {\n            System.out.print(a[k][i] + \" \");\n        }\n        k++;\n        // Print the last column from the\n        // remaining columns\n        for (i = k; i &lt; m; ++i) {\n            System.out.print(a[i][n - 1] + \" \");\n        }\n        n--;\n        // Print the last row from the\n        // remaining rows\n        if (k &lt; m) {\n            for (i = n - 1; i &gt;= l; --i) {\n                System.out.print(a[m - 1][i] + \" \");\n            }\n            m--;\n        }\n        // Print the first column from the\n        // remaining columns\n        if (l &lt; n) {\n            for (i = m - 1; i &gt;= k; --i) {\n                System.out.print(a[i][l] + \" \");\n            }\n            l++;\n        }\n    }\n    }\n\n    // driver program\n    public static void main(String[] args) {\n    int R = 3;\n    int C = 6;\n    int a[][] = {\n            { 1, 2, 3, 4, 5, 6 },\n            { 7, 8, 9, 10, 11, 12 },\n            { 13, 14, 15, 16, 17, 18 }\n    };\n    spiralPrint(R, C, a);\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/matrix/#adding-two-matrices","title":"Adding two matrices","text":"<pre><code>public class Solution {\n\nstatic int[][] sumMatrix(int a[][], int b[][]) {\n    int n1 = a.length, n2 = b.length;\n    int m1 = a[0].length, m2 = b[0].length;\n    int arr[][] = new int[n1][m1];\n\n    if (n1 == n2 &amp;&amp; m1 == m2) {\n        for (int i = 0; i &lt; a.length; i++) {\n            for (int j = 0; j &lt; a[i].length; j++) {\n                arr[i][j] = a[i][j] + b[i][j];\n            }\n        }\n    } else {\n        return new int[][] {};\n    }\n\n    return arr;\n}\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/matrix/#sum-of-upper-and-lower-triangles","title":"Sum of upper and lower triangles","text":"<pre><code>import java.util.ArrayList;\n\n/**\n * Solution\n */\npublic class Solution {\n\nstatic ArrayList&lt;Integer&gt; sumTriangles(int matrix[][], int n) {\n    ArrayList&lt;Integer&gt; arrlst = new ArrayList&lt;&gt;();\n    int uppertrig = 0;\n    int lowertrig = 0;\n    for (int i = 0; i &lt; matrix.length; i++) {\n        for (int j = 0; j &lt; matrix.length; j++) {\n            if (j &gt;= i) {\n                uppertrig += matrix[i][j];\n            }\n            if (j &lt;= i) {\n                lowertrig += matrix[i][j];\n            }\n        }\n    }\n\n    arrlst.add(uppertrig);\n    arrlst.add(lowertrig);\n\n    return arrlst;\n}\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/matrix/#matrix-multiplication","title":"Matrix Multiplication","text":"<pre><code>public class Solution {\n    public static void main(String args[]) {\n\n    int a[][] = { { 1, 1, 1 }, { 2, 2, 2 }, { 3, 3, 3 } };\n    int b[][] = { { 1, 1, 1 }, { 2, 2, 2 }, { 3, 3, 3 } };\n\n    int c[][] = new int[3][3]; \n\n    for (int i = 0; i &lt; 3; i++) {\n        for (int j = 0; j &lt; 3; j++) {\n            c[i][j] = 0;\n            for (int k = 0; k &lt; 3; k++) {\n                c[i][j] += a[i][k] * b[k][j];\n            } \n            System.out.print(c[i][j] + \" \"); \n        } \n        System.out.println();\n    }\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/matrix/#print-matrix-in-snake-pattern","title":"Print matrix in snake pattern","text":"<pre><code>public class Solution {\n    static void print(int[][] mat) {\n    // Traverse through all rows\n    for (int i = 0; i &lt; mat.length; i++) {\n\n        // If current row is even, print from\n        // left to right\n        if (i % 2 == 0) {\n            for (int j = 0; j &lt; mat[0].length; j++)\n                System.out.print(mat[i][j] + \" \");\n            System.out.println();\n            // If current row is odd, print from\n            // right to left\n        } else {\n            for (int j = mat[0].length - 1; j &gt;= 0; j--)\n                System.out.print(mat[i][j] + \" \");\n            System.out.println();\n        }\n    }\n    }\n\n    public static void main(String[] args) {\n        int[][] mat = {\n                { 10, 20, 30, 40 },\n                { 15, 25, 35, 45 },\n                { 27, 29, 37, 48 },\n                { 32, 33, 39, 50 }\n        };\n        print(mat);\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/matrix/#transpose-without-extra-space","title":"Transpose without extra space","text":"<pre><code>// Function to find transpose of a matrix.\nstatic void swap(int mat[][], int i, int j) {\n    int temp = mat[i][j];\n    mat[i][j] = mat[j][i];\n    mat[j][i] = temp;\n}\n\nstatic void transpose(int matrix[][], int n) {\n    // code here\n    for (int i = 0; i &lt; n; i++) {\n        for (int j = i; j &lt; n; j++) {\n            swap(matrix, i, j);\n        }\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/matrix/#rotate-by-90-degree","title":"Rotate by 90 degree","text":"<pre><code>void rotateby90(vector&lt;vector&lt;int&gt; &gt;&amp; matrix, int n) \n{ \n   // code here \n   for(int i=0;i&lt;n;i++){\n       for(int j=0;j&lt;i;j++){\n           swap(matrix[i][j],matrix[j][i]);\n       }\n   }\n   for(int i=0;i&lt;n/2;i++){\n       for(int j=0;j&lt;n;j++){\n           swap(matrix[i][j],matrix[n-1-i][j]);\n       }\n   }\n} \n</code></pre>"},{"location":"data-structure-and-algorithms/matrix/#reversing-the-columns-of-a-matrix","title":"Reversing the columns of a Matrix","text":"<pre><code>Input:\n\nR = 4, C = 3\nmatrix[][] = {\n    { 1, 0, 0},\n    { 1, 0, 0},\n    { 1, 0, 0},\n    { 0, 0, 0}\n}\n\nOutput: \n1 1 1\n1 1 1\n1 1 1\n1 0 0 \n\nExplanation:\n\nThe position of cells that have 1 in\nthe original matrix are (0,0), (1,0)\nand (2,0). Therefore, all cells in row\n0,1,2 are and column 0 are modified to 1. \n</code></pre> <pre><code>static void reverseCol(int matrix[][])\n{\n   // code here \n   for(int i=0;i&lt;matrix.length;i++){\n       for(int j=0;j&lt;matrix[i].length/2;j++){\n           int temp=matrix[i][j];\n           matrix[i][j]=matrix[i][matrix[i].length-j-1];\n           matrix[i][matrix[i].length-j-1]=temp;\n       }\n   }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/matrix/#boolean-matrix","title":"Boolean Matrix","text":"<pre><code>class Solution {\n    public static void modifyMatrix(int mat[][]) {\n\n        // variables to check if there are any 1\n        // in first row and column\n        boolean row_flag = false;\n        boolean col_flag = false;\n\n        // updating the first row and col if 1\n        // is encountered\n        for (int i = 0; i &lt; mat.length; i++) {\n            for (int j = 0; j &lt; mat[0].length; j++) {\n                if (i == 0 &amp;&amp; mat[i][j] == 1)\n                    row_flag = true;\n\n                if (j == 0 &amp;&amp; mat[i][j] == 1)\n                    col_flag = true;\n\n                if (mat[i][j] == 1) {\n\n                    mat[0][j] = 1;\n                    mat[i][0] = 1;\n                }\n            }\n        }\n\n        // Modify the input matrix mat[] using the\n        // first row and first column of Matrix mat\n        for (int i = 1; i &lt; mat.length; i++) {\n            for (int j = 1; j &lt; mat[0].length; j++) {\n                if (mat[0][j] == 1 || mat[i][0] == 1) {\n                    mat[i][j] = 1;\n                }\n            }\n        }\n\n        // modify first row if there was any 1\n        if (row_flag == true) {\n            for (int i = 0; i &lt; mat[0].length; i++) {\n                mat[0][i] = 1;\n            }\n        }\n\n        // modify first col if there was any 1\n        if (col_flag == true) {\n            for (int i = 0; i &lt; mat.length; i++) {\n                mat[i][0] = 1;\n            }\n        }\n    }\n\n    /* A utility function to print a 2D matrix */\n    public static void printMatrix(int mat[][]) {\n        for (int i = 0; i &lt; mat.length; i++) {\n            for (int j = 0; j &lt; mat[0].length; j++) {\n                System.out.print(mat[i][j]);\n            }\n            System.out.println(\"\");\n        }\n    }\n\n    // Driver function to test the above function\n    public static void main(String args[]) {\n\n        int mat[][] = {\n                { 1, 0, 0, 1 },\n                { 0, 0, 1, 0 },\n                { 0, 0, 0, 0 }\n        };\n\n        System.out.println(\"Input Matrix :\");\n        printMatrix(mat);\n\n        modifyMatrix(mat);\n\n        System.out.println(\"Matrix After Modification :\");\n        printMatrix(mat);\n\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/matrix/#make-matrix-beautiful","title":"Make matrix beautiful","text":"<pre><code>Input:\n\nN = 3\nmatrix[][] = {\n    {1, 2, 3},\n    {4, 2, 3},\n    {3, 2, 1}\n}\n\nOutput: 6\n\nExplanation:\n\nOriginal matrix is as follows:\n1 2 3\n4 2 3\n3 2 1\n\nWe need to make increment in such a way \nthat each row and column has one time 2, \none time 3 , one time 4. For that we \nneed 6 operations\n</code></pre> <pre><code>import java.util.Arrays;\n\nclass Solution {\n    // Function to find minimum number of operations that are required\n    // to make the matrix beautiful.\nstatic int findMinOperation(int matrix[][], int n)\n{\n    int sumRow[] = new int[n];\n    int sumCol[] = new int[n];\n    Arrays.fill(sumRow, 0);\n    Arrays.fill(sumCol, 0);\n\n    //calculating sumRow[] and sumCol[] array.\n    for(int i = 0; i &lt; n; i++)\n    {\n        for(int j = 0; j &lt; n; j++)\n        {\n            sumRow[i] += matrix[i][j];\n            sumCol[j] += matrix[i][j];\n\n        }\n    }\n\n    //finding maximum sum value in either row or in column.\n    int maxSum = 0;\n    for (int i = 0; i &lt; n; ++i)\n    {\n        maxSum = Math.max(maxSum, sumRow[i]);\n        maxSum = Math.max(maxSum, sumCol[i]);\n    } \n\n    int count = 0;\n    for (int i = 0, j = 0; i &lt; n &amp;&amp; j &lt; n;) \n    {\n        //finding minimum increment required in either row or column.\n        int diff = Math.min(maxSum - sumRow[i], maxSum - sumCol[j]);\n\n        //adding difference in corresponding cell, \n        //sumRow[] and sumCol[] array.\n        matrix[i][j] += diff;\n        sumRow[i] += diff;\n        sumCol[j] += diff;\n\n        //updating the result.\n        count += diff;\n\n        //if ith row is satisfied, incrementing i for next iteration.\n        if (sumRow[i] == maxSum)\n            ++i;\n\n        //if jth column is satisfied, incrementing j for next iteration.\n        if (sumCol[j] == maxSum)\n            ++j;\n    }\n    //returning the result.\n    return count;\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/matrix/#unique-rows-in-boolean-matrix","title":"Unique rows in boolean matrix","text":"<pre><code>Input:\n\nrow = 3, col = 4 \nM[][] = {\n    {1 1 0 1},\n    {1 0 0 1},\n    {1 1 0 1}\n}\n\nOutput: '1 1 0 1' &amp; '1 0 0 1'\n\nExplanation: \nAbove the matrix of size 3x4 looks like\n1 1 0 1\n1 0 0 1\n1 1 0 1\n\nThe two unique rows are 1 1 0 1 and 1 0 0 1.\n</code></pre> <pre><code>import java.util.HashSet;\n\npublic class Solution {\n\n    public static void printArray(int arr[][], int row, int col) {\n\n        HashSet&lt;String&gt; set = new HashSet&lt;String&gt;();\n\n        for (int i = 0; i &lt; row; i++) {\n            String s = \"\";\n\n            for (int j = 0; j &lt; col; j++)\n                s += String.valueOf(arr[i][j]);\n\n            if (!set.contains(s)) {\n                set.add(s);\n                System.out.println(s);\n            }\n        }\n    }\n\n    // Driver code\n    public static void main(String[] args) {\n\n        int arr[][] = {\n                { 0, 1, 0, 0, 1 },\n                { 1, 0, 1, 1, 0 },\n                { 0, 1, 0, 0, 1 },\n                { 1, 1, 1, 0, 0 }\n        };\n\n        printArray(arr, 4, 5);\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/miscellaneous/","title":"Miscellaneous","text":""},{"location":"data-structure-and-algorithms/miscellaneous/#segment-binary-index-tree-disjointed","title":"Segment &amp; Binary Index Tree &amp; Disjointed","text":""},{"location":"data-structure-and-algorithms/miscellaneous/#setssegment-tree-simple","title":"SetsSegment Tree ( simple )","text":"<pre><code>import java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\nclass GFG {\n\n    static int getSum(int arr[], int qs, int qe) {\n        int sum = 0;\n\n        for (int i = qs; i &lt;= qe; i++)\n            sum = sum + arr[i];\n\n        return sum;\n    }\n\n    static void update(int arr[], int i, int newVal) {\n        arr[i] = newVal;\n    }\n\n    public static void main(String args[]) {\n\n        int arr[] = { 10, 20, 30, 40, 50 }, n = 5;\n\n        System.out.print(getSum(arr, 0, 2) + \" \");\n        System.out.print(getSum(arr, 1, 3) + \" \");\n\n        update(arr, 1, 60);\n\n        System.out.print(getSum(arr, 0, 2) + \" \");\n        System.out.print(getSum(arr, 1, 3) + \" \");\n\n    }\n\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/miscellaneous/#segment-tree-prefix-sum","title":"Segment Tree Prefix Sum","text":"<pre><code>import java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\nclass GFG {\n\n    static int getSum(int pre_sum[], int qs, int qe) {\n        if (qs == 0)\n            return pre_sum[qe];\n\n        else\n            return pre_sum[qe] - pre_sum[qs - 1];\n    }\n\n    static void update(int pre_sum[], int arr[], int i, int newVal, int n) {\n        int diff = newVal - arr[i];\n\n        for (int j = i; j &lt; n; j++)\n            pre_sum[j] += diff;\n    }\n\n    static void initialize(int pre_sum[], int arr[], int n) {\n        pre_sum[0] = arr[0];\n\n        for (int i = 1; i &lt; n; i++) {\n            pre_sum[i] = pre_sum[i - 1] + arr[i];\n        }\n    }\n\n    public static void main(String args[]) {\n\n        int arr[] = { 10, 20, 30, 40, 50 }, n = 5;\n\n        int pre_sum[] = new int[n];\n\n        initialize(pre_sum, arr, n);\n\n        System.out.print(getSum(pre_sum, 0, 2) + \" \");\n        System.out.print(getSum(pre_sum, 1, 3) + \" \");\n\n        update(pre_sum, arr, 1, 60, n);\n\n        System.out.print(getSum(pre_sum, 0, 2) + \" \");\n        System.out.print(getSum(pre_sum, 1, 3) + \" \");\n\n    }\n\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/miscellaneous/#constructing-segment-tree","title":"Constructing Segment Tree","text":"<pre><code>import java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\nclass GFG {\n\n    static int CST(int ss, int se, int si, int arr[], int tree[]) {\n        if (ss == se) {\n            tree[si] = arr[ss];\n            return arr[ss];\n        }\n\n        int mid = (ss + se) / 2;\n\n        tree[si] = CST(ss, mid, 2 * si + 1, arr, tree) + CST(mid + 1, se, 2 * si + 2, arr, tree);\n\n        return tree[si];\n    }\n\n    public static void main(String args[]) {\n\n        int arr[] = { 10, 20, 30, 40 }, n = 4;\n\n        int tree[] = new int[4 * n];\n\n        System.out.println(CST(0, n - 1, 0, arr, tree));\n\n    }\n\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/miscellaneous/#range-query-on-segment-tree","title":"Range Query on Segment Tree","text":"<pre><code>import java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\nclass GFG {\n\n    static int CST(int ss, int se, int si, int arr[], int tree[]) {\n        if (ss == se) {\n            tree[si] = arr[ss];\n            return arr[ss];\n        }\n\n        int mid = (ss + se) / 2;\n\n        tree[si] = CST(ss, mid, 2 * si + 1, arr, tree) + CST(mid + 1, se, 2 * si + 2, arr, tree);\n\n        return tree[si];\n    }\n\n    static int getSumRec(int qs, int qe, int ss, int se, int si, int tree[]) {\n        if (se &lt; qs || ss &gt; qe)\n            return 0;\n        if (qs &lt;= ss &amp;&amp; qe &gt;= se)\n            return tree[si];\n\n        int mid = (ss + se) / 2;\n\n        return getSumRec(qs, qe, ss, mid, 2 * si + 1, tree) + getSumRec(qs, qe, mid + 1, se, 2 * si + 2, tree);\n    }\n\n    public static void main(String args[]) {\n\n        int arr[] = { 10, 20, 30, 40 }, n = 4;\n\n        int tree[] = new int[4 * n];\n\n        CST(0, n - 1, 0, arr, tree);\n\n        System.out.println(getSumRec(0, 2, 0, 3, 0, tree));\n\n    }\n\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/miscellaneous/#update-query-on-segment-tree","title":"Update Query on Segment Tree","text":"<pre><code>import java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\nclass GFG {\n\n    static int CST(int ss, int se, int si, int arr[], int tree[]) {\n        if (ss == se) {\n            tree[si] = arr[ss];\n            return arr[ss];\n        }\n\n        int mid = (ss + se) / 2;\n\n        tree[si] = CST(ss, mid, 2 * si + 1, arr, tree) + CST(mid + 1, se, 2 * si + 2, arr, tree);\n\n        return tree[si];\n    }\n\n    static void updateRec(int ss, int se, int i, int si, int diff, int tree[]) {\n        if (i &lt; ss || i &gt; se)\n            return;\n\n        tree[si] = tree[si] + diff;\n\n        if (se &gt; ss) {\n            int mid = (ss + se) / 2;\n\n            updateRec(ss, mid, i, 2 * si + 1, diff, tree);\n            updateRec(mid + 1, se, i, 2 * si + 2, diff, tree);\n\n        }\n    }\n\n    public static void main(String args[]) {\n\n        int arr[] = { 10, 20, 30, 40 }, n = 4;\n\n        int tree[] = new int[4 * n];\n\n        CST(0, n - 1, 0, arr, tree);\n\n        updateRec(0, 3, 1, 0, 5, tree);\n\n    }\n\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/miscellaneous/#binary-indexed-tree-prefix-sum-implementation","title":"Binary Indexed Tree ( Prefix Sum Implementation )","text":"<pre><code>import java.util.*;\nimport java.lang.*;\nimport java.io.*;\n\nclass BinaryIndexedTree {\n\n    final static int MAX = 1000;\n\n    static int BITree[] = new int[MAX];\n\n    int getSum(int index) {\n        int sum = 0;\n\n        index = index + 1;\n\n        while (index &gt; 0) {\n\n            sum += BITree[index];\n\n            index -= index &amp; (-index);\n        }\n        return sum;\n    }\n\n    public static void updateBIT(int n, int index, int val) {\n\n        index = index + 1;\n\n        while (index &lt;= n) {\n\n            BITree[index] += val;\n\n            index += index &amp; (-index);\n        }\n    }\n\n    void constructBITree(int arr[], int n) {\n\n        for (int i = 1; i &lt;= n; i++)\n            BITree[i] = 0;\n\n        for (int i = 0; i &lt; n; i++)\n            updateBIT(n, i, arr[i]);\n    }\n\n    public static void main(String args[]) {\n        int freq[] = { 10, 20, 30, 40, 50, 60, 70, 80, 90 };\n        int n = freq.length;\n        BinaryIndexedTree tree = new BinaryIndexedTree();\n\n        tree.constructBITree(freq, n);\n\n        System.out.println(\"Sum of elements in arr[0..5]\" + \" is \" + tree.getSum(5));\n\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/miscellaneous/#binary-indexed-tree-update-operation","title":"Binary Indexed Tree ( Update Operation )","text":"<pre><code>import java.util.*;\nimport java.lang.*;\nimport java.io.*;\n\nclass BinaryIndexedTree {\n\n    final static int MAX = 1000;\n\n    static int BITree[] = new int[MAX];\n\n    public static void updateBIT(int n, int index, int val) {\n\n        index = index + 1;\n\n        while (index &lt;= n) {\n\n            BITree[index] += val;\n\n            index += index &amp; (-index);\n        }\n    }\n\n    void constructBITree(int arr[], int n) {\n\n        for (int i = 1; i &lt;= n; i++)\n            BITree[i] = 0;\n\n        for (int i = 0; i &lt; n; i++)\n            updateBIT(n, i, arr[i]);\n    }\n\n    public static void main(String args[]) {\n        int freq[] = { 10, 20, 30, 40, 50, 60, 70, 80, 90 };\n        int n = freq.length;\n        BinaryIndexedTree tree = new BinaryIndexedTree();\n\n        tree.constructBITree(freq, n);\n\n        updateBIT(n, 2, 35);\n\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/miscellaneous/#segment-tree-simple","title":"Segment Tree ( simple )","text":"<pre><code>import java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\nclass GFG {\n\n    static int getSum(int arr[], int qs, int qe) {\n        int sum = 0;\n\n        for (int i = qs; i &lt;= qe; i++)\n            sum = sum + arr[i];\n\n        return sum;\n    }\n\n    static void update(int arr[], int i, int newVal) {\n        arr[i] = newVal;\n    }\n\n    public static void main(String args[]) {\n\n        int arr[] = { 10, 20, 30, 40, 50 }, n = 5;\n\n        System.out.print(getSum(arr, 0, 2) + \" \");\n        System.out.print(getSum(arr, 1, 3) + \" \");\n\n        update(arr, 1, 60);\n\n        System.out.print(getSum(arr, 0, 2) + \" \");\n        System.out.print(getSum(arr, 1, 3) + \" \");\n\n    }\n\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/miscellaneous/#segment-tree-prefix-sum_1","title":"Segment Tree Prefix Sum","text":"<pre><code>import java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\nclass GFG {\n\n    static int getSum(int pre_sum[], int qs, int qe) {\n        if (qs == 0)\n            return pre_sum[qe];\n\n        else\n            return pre_sum[qe] - pre_sum[qs - 1];\n    }\n\n    static void update(int pre_sum[], int arr[], int i, int newVal, int n) {\n        int diff = newVal - arr[i];\n\n        for (int j = i; j &lt; n; j++)\n            pre_sum[j] += diff;\n    }\n\n    static void initialize(int pre_sum[], int arr[], int n) {\n        pre_sum[0] = arr[0];\n\n        for (int i = 1; i &lt; n; i++) {\n            pre_sum[i] = pre_sum[i - 1] + arr[i];\n        }\n    }\n\n    public static void main(String args[]) {\n\n        int arr[] = { 10, 20, 30, 40, 50 }, n = 5;\n\n        int pre_sum[] = new int[n];\n\n        initialize(pre_sum, arr, n);\n\n        System.out.print(getSum(pre_sum, 0, 2) + \" \");\n        System.out.print(getSum(pre_sum, 1, 3) + \" \");\n\n        update(pre_sum, arr, 1, 60, n);\n\n        System.out.print(getSum(pre_sum, 0, 2) + \" \");\n        System.out.print(getSum(pre_sum, 1, 3) + \" \");\n\n    }\n\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/miscellaneous/#constructing-segment-tree_1","title":"Constructing Segment Tree","text":"<pre><code>import java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\nclass GFG {\n\n    static int CST(int ss, int se, int si, int arr[], int tree[]) {\n        if (ss == se) {\n            tree[si] = arr[ss];\n            return arr[ss];\n        }\n\n        int mid = (ss + se) / 2;\n\n        tree[si] = CST(ss, mid, 2 * si + 1, arr, tree) + CST(mid + 1, se, 2 * si + 2, arr, tree);\n\n        return tree[si];\n    }\n\n    public static void main(String args[]) {\n\n        int arr[] = { 10, 20, 30, 40 }, n = 4;\n\n        int tree[] = new int[4 * n];\n\n        System.out.println(CST(0, n - 1, 0, arr, tree));\n\n    }\n\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/miscellaneous/#range-query-on-segment-tree_1","title":"Range Query on Segment Tree","text":"<pre><code>import java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\nclass GFG {\n\n    static int CST(int ss, int se, int si, int arr[], int tree[]) {\n        if (ss == se) {\n            tree[si] = arr[ss];\n            return arr[ss];\n        }\n\n        int mid = (ss + se) / 2;\n\n        tree[si] = CST(ss, mid, 2 * si + 1, arr, tree) + CST(mid + 1, se, 2 * si + 2, arr, tree);\n\n        return tree[si];\n    }\n\n    static int getSumRec(int qs, int qe, int ss, int se, int si, int tree[]) {\n        if (se &lt; qs || ss &gt; qe)\n            return 0;\n        if (qs &lt;= ss &amp;&amp; qe &gt;= se)\n            return tree[si];\n\n        int mid = (ss + se) / 2;\n\n        return getSumRec(qs, qe, ss, mid, 2 * si + 1, tree) + getSumRec(qs, qe, mid + 1, se, 2 * si + 2, tree);\n    }\n\n    public static void main(String args[]) {\n\n        int arr[] = { 10, 20, 30, 40 }, n = 4;\n\n        int tree[] = new int[4 * n];\n\n        CST(0, n - 1, 0, arr, tree);\n\n        System.out.println(getSumRec(0, 2, 0, 3, 0, tree));\n\n    }\n\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/miscellaneous/#update-query-on-segment-tree_1","title":"Update Query on Segment Tree","text":"<pre><code>import java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\nclass GFG {\n\n    static int CST(int ss, int se, int si, int arr[], int tree[]) {\n        if (ss == se) {\n            tree[si] = arr[ss];\n            return arr[ss];\n        }\n\n        int mid = (ss + se) / 2;\n\n        tree[si] = CST(ss, mid, 2 * si + 1, arr, tree) + CST(mid + 1, se, 2 * si + 2, arr, tree);\n\n        return tree[si];\n    }\n\n    static void updateRec(int ss, int se, int i, int si, int diff, int tree[]) {\n        if (i &lt; ss || i &gt; se)\n            return;\n\n        tree[si] = tree[si] + diff;\n\n        if (se &gt; ss) {\n            int mid = (ss + se) / 2;\n\n            updateRec(ss, mid, i, 2 * si + 1, diff, tree);\n            updateRec(mid + 1, se, i, 2 * si + 2, diff, tree);\n\n        }\n    }\n\n    public static void main(String args[]) {\n\n        int arr[] = { 10, 20, 30, 40 }, n = 4;\n\n        int tree[] = new int[4 * n];\n\n        CST(0, n - 1, 0, arr, tree);\n\n        updateRec(0, 3, 1, 0, 5, tree);\n\n    }\n\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/miscellaneous/#binary-indexed-tree-prefix-sum-implementation_1","title":"Binary Indexed Tree ( Prefix Sum Implementation )","text":"<pre><code>import java.util.*;\nimport java.lang.*;\nimport java.io.*;\n\nclass BinaryIndexedTree {\n\n    final static int MAX = 1000;\n\n    static int BITree[] = new int[MAX];\n\n    int getSum(int index) {\n        int sum = 0;\n\n        index = index + 1;\n\n        while (index &gt; 0) {\n\n            sum += BITree[index];\n\n            index -= index &amp; (-index);\n        }\n        return sum;\n    }\n\n    public static void updateBIT(int n, int index, int val) {\n\n        index = index + 1;\n\n        while (index &lt;= n) {\n\n            BITree[index] += val;\n\n            index += index &amp; (-index);\n        }\n    }\n\n    void constructBITree(int arr[], int n) {\n\n        for (int i = 1; i &lt;= n; i++)\n            BITree[i] = 0;\n\n        for (int i = 0; i &lt; n; i++)\n            updateBIT(n, i, arr[i]);\n    }\n\n    public static void main(String args[]) {\n        int freq[] = { 10, 20, 30, 40, 50, 60, 70, 80, 90 };\n        int n = freq.length;\n        BinaryIndexedTree tree = new BinaryIndexedTree();\n\n        tree.constructBITree(freq, n);\n\n        System.out.println(\"Sum of elements in arr[0..5]\" + \" is \" + tree.getSum(5));\n\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/miscellaneous/#binary-indexed-tree-update-operation_1","title":"Binary Indexed Tree ( Update Operation )","text":"<pre><code>import java.util.*;\nimport java.lang.*;\nimport java.io.*;\n\nclass BinaryIndexedTree {\n\n    final static int MAX = 1000;\n\n    static int BITree[] = new int[MAX];\n\n    public static void updateBIT(int n, int index, int val) {\n\n        index = index + 1;\n\n        while (index &lt;= n) {\n\n            BITree[index] += val;\n\n            index += index &amp; (-index);\n        }\n    }\n\n    void constructBITree(int arr[], int n) {\n\n        for (int i = 1; i &lt;= n; i++)\n            BITree[i] = 0;\n\n        for (int i = 0; i &lt; n; i++)\n            updateBIT(n, i, arr[i]);\n    }\n\n    public static void main(String args[]) {\n        int freq[] = { 10, 20, 30, 40, 50, 60, 70, 80, 90 };\n        int n = freq.length;\n        BinaryIndexedTree tree = new BinaryIndexedTree();\n\n        tree.constructBITree(freq, n);\n\n        updateBIT(n, 2, 35);\n\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/queue/","title":"Queue","text":""},{"location":"data-structure-and-algorithms/queue/#implementation-of-queue-using-array","title":"Implementation of Queue using Array","text":""},{"location":"data-structure-and-algorithms/queue/#special-trick-in-order-to-maintain-queue-in-array-make-it-circular-by-using-capacity","title":"Special trick (in order to maintain queue in array, make it circular by using %capacity)","text":"<pre><code>import java.lang.*;\n\nclass Queue {\n    int front, rear, size;\n    int capacity;\n    int[] array;\n\n    public Queue(int capacity) {\n        this.capacity = capacity;\n        front = this.size = 0;\n        rear = capacity - 1;\n        array = new int[this.capacity];\n    }\n\n    boolean isFull(Queue queue) {\n        return (queue.size == queue.capacity);\n    }\n\n    boolean isEmpty(Queue queue) {\n        return (queue.size == 0);\n    }\n\n    void enqueue(int item) {\n        if (isFull(this))\n            return;\n        this.rear = (this.rear + 1)\n                % this.capacity;\n        this.array[this.rear] = item;\n        this.size = this.size + 1;\n        System.out.println(item\n                + \" enqueued to queue\");\n    }\n\n    int dequeue() {\n        if (isEmpty(this))\n            return Integer.MIN_VALUE;\n\n        int item = this.array[this.front];\n        this.front = (this.front + 1)\n                % this.capacity;\n        this.size = this.size - 1;\n        return item;\n    }\n\n    int front() {\n        if (isEmpty(this))\n            return Integer.MIN_VALUE;\n\n        return this.array[this.front];\n    }\n\n    int rear() {\n        if (isEmpty(this))\n            return Integer.MIN_VALUE;\n\n        return this.array[this.rear];\n    }\n}\n\n\npublic class Main {\n    public static void main(String[] args) {\n        Queue queue = new Queue(1000);\n\n        queue.enqueue(10);\n        queue.enqueue(20);\n        queue.enqueue(30);\n        queue.enqueue(40);\n\n        System.out.println(queue.dequeue()\n                + \" dequeued from queue\\n\");\n\n        System.out.println(\"Front item is \"\n                + queue.front());\n\n        System.out.println(\"Rear item is \"\n                + queue.rear());\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/queue/#implementing-stack-using-queue","title":"Implementing stack using queue","text":"<pre><code>import java.util.*;\n\nclass Main {\n\n    static class Stack {\n\n        static Queue&lt;Integer&gt; q1 = new LinkedList&lt;Integer&gt;();\n        static Queue&lt;Integer&gt; q2 = new LinkedList&lt;Integer&gt;();\n\n\n        static int curr_size;\n\n        Stack() {\n            curr_size = 0;\n        }\n\n        static void push(int x) {\n            curr_size++;\n\n\n            q2.add(x);\n\n\n            while (!q1.isEmpty()) {\n                q2.add(q1.peek());\n                q1.remove();\n            }\n\n\n            Queue&lt;Integer&gt; q = q1;\n            q1 = q2;\n            q2 = q;\n        }\n\n        static void pop() {\n\n\n            if (q1.isEmpty())\n                return;\n            q1.remove();\n            curr_size--;\n        }\n\n        static int top() {\n            if (q1.isEmpty())\n                return -1;\n            return q1.peek();\n        }\n\n        static int size() {\n            return curr_size;\n        }\n    }\n\n\n    public static void main(String[] args) {\n        Stack s = new Stack();\n        s.push(10);\n        s.push(5);\n        s.push(15);\n        s.push(20);\n\n        System.out.println(\"current size: \" + s.size());\n        System.out.println(s.top());\n        s.pop();\n        System.out.println(s.top());\n        s.pop();\n        System.out.println(s.top());\n\n        System.out.println(\"current size: \" + s.size());\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/queue/#reversing-a-queue","title":"Reversing a Queue","text":""},{"location":"data-structure-and-algorithms/queue/#recursively","title":"Recursively","text":"<pre><code>import java.util.LinkedList;\nimport java.util.*;\n\n\npublic class Main {\n\n\n    static void Print(Queue&lt;Integer&gt; q) {\n        for (Integer x : q)\n            System.out.print(x + \" \");\n    }\n\n\n    static void reverse(Queue&lt;Integer&gt; q) {\n        if (q.isEmpty())\n            return;\n\n        int x = q.peek();\n        q.remove();\n\n        reverse(q);\n        q.add(x);\n\n    }\n\n\n    public static void main(String args[]) {\n        Queue&lt;Integer&gt; queue = new LinkedList&lt;Integer&gt;();\n        queue.add(12);\n        queue.add(5);\n        queue.add(15);\n        queue.add(20);\n\n        reverse(queue);\n        Print(queue);\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/queue/#reversing-a-queue_1","title":"Reversing a Queue","text":""},{"location":"data-structure-and-algorithms/queue/#iteratively","title":"Iteratively","text":"<pre><code>import java.util.LinkedList;\nimport java.util.Queue;\nimport java.util.Stack;\n\n\npublic class Main {\n\n    static Queue&lt;Integer&gt; queue;\n\n\n    static void Print() {\n        for (Integer x : queue)\n            System.out.print(x + \" \");\n    }\n\n\n    static void reversequeue() {\n        Stack&lt;Integer&gt; stack = new Stack&lt;&gt;();\n        while (!queue.isEmpty()) {\n            stack.add(queue.peek());\n            queue.remove();\n        }\n        while (!stack.isEmpty()) {\n            queue.add(stack.peek());\n            stack.pop();\n        }\n    }\n\n\n    public static void main(String args[]) {\n        queue = new LinkedList&lt;Integer&gt;();\n        queue.add(12);\n        queue.add(5);\n        queue.add(15);\n        queue.add(20);\n\n        reversequeue();\n        Print();\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/queue/#generate-numbers-with-given-digits","title":"Generate numbers with given digits","text":"<pre><code>import java.util.LinkedList;\nimport java.util.*;\n\n\npublic class Main {\n\n\n    static void printFirstN(int n) {\n        Queue&lt;String&gt; q = new LinkedList&lt;&gt;();\n\n        q.add(\"5\");\n        q.add(\"6\");\n\n        for (int i = 0; i &lt; n; i++) {\n            String curr = q.poll();\n\n            System.out.print(curr + \" \");\n\n            q.add(curr + \"5\");\n            q.add(curr + \"6\");\n        }\n\n    }\n\n\n    public static void main(String args[]) {\n        int n = 5;\n\n        printFirstN(n);\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/recursion/","title":"Recursion","text":""},{"location":"data-structure-and-algorithms/recursion/#tail-recursion","title":"Tail recursion","text":"<p>The tail recursion is better than non-tail recursion. As there is no task left after the recursive call, it will be easier for the compiler to optimize the code. When one function is called, its address is stored inside the stack. So if it is tail recursion, then storing addresses into stack is not needed.</p> <p>We can use factorial using recursion, but the function is not tail recursive. The value of fact(n-1) is used inside the fact(n).</p> <pre><code>long fact(int n){\n   if(n &lt;= 1)\n      return 1;\n   n * fact(n-1);\n}\n</code></pre> <p>We can make it tail recursive, by adding some other parameters. This is like below \u2212</p> <pre><code>long fact(long n, long a){\n   if(n == 0)\n      return a;\n   return fact(n-1, a*n);\n}\n</code></pre> <p>When last statement is recursion, it is tail recursion, which is optimized by compiler using goto statements.</p>"},{"location":"data-structure-and-algorithms/recursion/#1-to-n-and-n-to-1","title":"1 to N and N to 1","text":"<pre><code>class Solution {\n    public static void main(String[] args) {\n        System.out.println(\"--- start ---\");\n\n        print1ToN(9);\n        System.out.println();\n        printNTo1(9);\n\n        System.out.println(\"\\n--- end ---\");\n    }\n\n    private static void printNTo1(int i) {\n        if (i == 0) {\n            return;\n        }\n        System.out.print(i + \"|\");\n        printNTo1(i - 1);\n    }\n\n    private static void print1ToN(int i) {\n        if (i == 0) {\n            return;\n        }\n        print1ToN(i - 1);\n        System.out.print(i + \"|\");\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/recursion/#tower-of-hanoi","title":"Tower of Hanoi","text":"<p>Tower of Hanoi is a mathematical puzzle where we have three rods and n disks. The objective of the puzzle is to move the entire stack to another rod, obeying the following simple rules:</p> <ol> <li>Only one disk can be moved at a time.</li> <li>Each move consists of taking the upper disk from one of the stacks and placing it on top of another stack i.e. a disk can only be moved if it is the uppermost disk on a stack.</li> <li>No disk may be placed on top of a smaller disk.</li> </ol> <p>Just remember : <code>132 | 123 | 231</code></p> <pre><code>Take an example for 2 disks :\nLet rod 1 = 'A', rod 2 = 'B', rod 3 = 'C'.\n\nStep 1 : Shift first disk from 'A' to 'B'.\nStep 2 : Shift second disk from 'A' to 'C'.\nStep 3 : Shift first disk from 'B' to 'C'.\n\nThe pattern here is :\nShift 'n-1' disks from 'A' to 'B'.\nShift last disk from 'A' to 'C'.\nShift 'n-1' disks from 'B' to 'C'.\n\nImage illustration for 3 disks \n</code></pre> <pre><code>Output : Disk 1 moved from A to B\n         Disk 2 moved from A to C\n         Disk 1 moved from B to C\n\nInput : 3\nOutput : Disk 1 moved from A to C\n         Disk 2 moved from A to B\n         Disk 1 moved from C to B\n         Disk 3 moved from A to C\n         Disk 1 moved from B to A\n         Disk 2 moved from B to C\n         Disk 1 moved from A to C\n</code></pre> <pre><code>class Program {\n    static void towerOfHanoi(int n, char from_rod,\n            char to_rod, char aux_rod) {\n        if (n == 1) {\n            System.out.println(\n                    \"Move disk 1 from rod \" +\n                            from_rod + \" to rod \" + to_rod);\n            return;\n        }\n\n        towerOfHanoi(n - 1, from_rod, aux_rod, to_rod);\n\n        System.out.println(\n                \"Move disk \" + n + \" from rod \" +\n                        from_rod + \" to rod \" + to_rod);\n\n        towerOfHanoi(n - 1, aux_rod, to_rod, from_rod);\n    }\n\n    public static void main(String[] args) {\n        int n = 4; // Number of disks\n        towerOfHanoi(n, 'A', 'C', 'B');\n        // A, B and C are names of rods\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/recursion/#fibonacci-recursion","title":"Fibonacci (Recursion)","text":"<pre><code>class Solution {\n    static public int fib(int n) {\n        if (n &lt;= 1)\n            return n;\n        return fib(n - 1) + fib(n - 2);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(fib(5));\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/recursion/#count-total-digits","title":"Count Total Digits","text":"<pre><code>class Solution {\n    public static int countDigits(int n) {\n        if (n &lt; 10) {\n            return 1;\n        }\n\n        // triming one digit in recursive call\n        return 1 + countDigits(n / 10);\n    }\n\n    public static void main(String[] args) {\n        System.out.println(countDigits(10121));\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/recursion/#sum-of-digits","title":"Sum of Digits","text":"<pre><code>class Solution {\n    public static int sumOfDigits(int n) {\n        if (n == 0) {\n          return 0;\n        }\n\n        // extract first digit + sum of all others\n        // why extract, cuz it will be left out in first call stack\n        return n % 10 + sumOfDigits(n / 10);\n      }\n\n    public static void main(String[] args) {\n        System.out.println(sumOfDigits(10121));\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/recursion/#is-string-palindrome","title":"Is string palindrome","text":"<pre><code>class App {\n    public static void main(String[] args) {\n        System.out.println(palindrome(\"aabaa\"));\n        System.out.println(palindrome(\"abc\"));\n    }\n\n    private static boolean palindrome(String str) {\n        if(str.length() == 0) return true;\n        return checkPalindrome(str, 0, str.length() - 1);\n    }\n\n    private static boolean checkPalindrome(String str, int s, int e) {\n\n        // reach the same character\n        if(s == e) return true;\n\n        // base case\n        if (str.charAt(s) != str.charAt(e)) return true;\n\n        // advance to start+1 and end-1\n        if (s &lt; e + 1) {\n            return checkPalindrome(str, s + 1, e - 1);\n        }\n\n        return true;\n    }\n}kjava\n</code></pre>"},{"location":"data-structure-and-algorithms/recursion/#josephus-problem","title":"Josephus problem","text":"<pre><code>class Solution {\n\n    static int josephus(int n, int k) {\n        if (n == 1)\n            return 1;\n        else\n            // learn this ....\n            return (josephus(n - 1, k) + k - 1) % n + 1;\n    }\n\n    public static void main(String[] args) {\n        int n = 14;\n        int k = 2;\n        System.out.println(\"The chosen place is \"\n                + josephus(n, k));\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/recursion/#power-using-recursion","title":"Power Using Recursion","text":"<pre><code>class Solution {\n\n    // Function to calculate N raised to the power P\n    static int power(int N, int P) {\n        if (P == 0)\n            return 1;\n        else\n            return N * power(N, P - 1);\n    }\n\n    public static void main(String[] args) {\n        int N = 2;\n        int P = 3;\n        // n**p\n        System.out.println(power(N, P));\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/recursion/#digital-root","title":"Digital Root","text":"<p>Sum of all digits ,, till a single digit is achieved</p> <p>ex : <code>99999</code> -&gt; <code>45</code> -&gt; <code>9</code> </p> <pre><code>class Solution {\n\n    public static int digitalRoot(int n) {\n        if (n &lt; 10)\n            return n;\n\n        return digitalRoot(n % 10 + digitalRoot(n / 10));\n    }\n\n    public static void main(String[] args) {\n        System.out.println(digitalRoot(99999));\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/recursion/#sum-of-digit-of-a-number","title":"Sum of digit of a number","text":"<p>using recursion</p> <pre><code>class Solution {\n    static int sum_of_digit(int n) {\n        if (n == 0)\n            return 0;\n        return (n % 10 + sum_of_digit(n / 10));\n    }\n\n    public static void main(String[] args) {\n        int num = 12345;\n        int result = sum_of_digit(num);\n        System.out.println(\"Sum of digits is \" + result);\n    }\n}\nj\n</code></pre>"},{"location":"data-structure-and-algorithms/recursion/#rod-cutting","title":"Rod cutting","text":"<p>Important : Inputs should be sort</p> <pre><code>class Solution {\n    static int rodCutting(int n, int a, int b, int c) {\n        if (n == 0)\n            return 0;\n        if (n &lt; 0)\n            return -1;\n\n        int res = Math.max(\n                Math.max(\n                rodCutting(n - a, a, b, c),\n                rodCutting(n - b, a, b, c)),\n                rodCutting(n - c, a, b, c));\n\n        if (res == -1)\n            return -1;\n        return 1 + res;\n    }\n\n    public static void main(String[] args) {\n        int n = 25;\n        int a = 11, b = 12, c = 13;\n        System.out.println(rodCutting(n, a, b, c));\n\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/recursion/#all-subsets-of-string","title":"All subsets of string","text":"<pre><code>class Soltution {\n\n    // str : Stores input string\n    // curr : Stores current subset\n    // index : Index in current subset, curr\n    static void powerSet(String str, int index, String curr) {\n        int n = str.length();\n\n        // base case\n        if (index == n) {\n            System.out.println(curr);\n            return;\n        }\n\n        // Two cases for every character\n        // (i) We consider the character\n        // as part of current subset\n        // (ii) We do not consider current\n        // character as part of current subset\n        powerSet(str, index + 1, curr + str.charAt(index));\n        powerSet(str, index + 1, curr);\n    }\n\n    public static void main(String[] args) {\n        String str = \"abc\", curr = \"\";\n        int index = 0;\n        powerSet(str, index, curr);\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/recursion/#all-permutation-of-string","title":"All permutation of String","text":"<pre><code>import java.util.ArrayList;\n\nclass Solution {\n    static public void findPermutation(String s, ArrayList&lt;String&gt; lst,\n            String ans) {\n        if (s.length() == 0) {\n            lst.add(ans);\n            return;\n        }\n\n        for (int i = 0; i &lt; s.length(); i++) {\n            String str = s.substring(0, i) + s.substring(i + 1);\n            findPermutation(str, lst, ans + s.charAt(i));\n        }\n    }\n\n    static public ArrayList&lt;String&gt; permutation(String S) {\n        ArrayList&lt;String&gt; lst = new ArrayList&lt;&gt;();\n        String ans = \"\";\n\n        findPermutation(S, lst, ans);\n        return lst;\n    }\n\n    public static void main(String[] args) {\n        var result = permutation(\"uday\");\n        System.out.println(result.toString());\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/sorting/","title":"Sorting","text":""},{"location":"data-structure-and-algorithms/sorting/#selection-sort","title":"Selection Sort","text":"<p>selection sort </p> <pre><code>class Solution {\n    void sort(int arr[]) {\n        int n = arr.length;\n\n        // One by one move boundary of unsorted subarray\n        for (int i = 0; i &lt; n - 1; i++) {\n            // Find the minimum element in unsorted array\n            int min_idx = i;\n            for (int j = i + 1; j &lt; n; j++)\n                if (arr[j] &lt; arr[min_idx])\n                    min_idx = j;\n\n            // Swap the found minimum element with the first\n            // element\n            int temp = arr[min_idx];\n            arr[min_idx] = arr[i];\n            arr[i] = temp;\n        }\n    }\n\n    // Prints the array\n    void printArray(int arr[]) {\n        int n = arr.length;\n        for (int i = 0; i &lt; n; ++i)\n            System.out.print(arr[i] + \" \");\n        System.out.println();\n    }\n\n    // Driver code to test above\n    public static void main(String[] args) {\n        Solution ob = new Solution();\n        int arr[] = { 64, 25, 12, 22, 11 };\n        ob.sort(arr);\n        System.out.println(\"Sorted array\");\n        ob.printArray(arr);\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/sorting/#c-programming","title":"C programming","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main() {\n\n  int N = 20;\n  int arr[N];\n\n  for(int i=0; i&lt;N; i++) {\n    arr[i] = rand()%100;\n  }\n\n  for(int i = 0; i&lt;N; i++) {\n    printf(\"%d \", arr[i]);\n  }\n\n  printf(\"\\n\");\n\n  for(int i=0; i&lt;N-1; i++) {\n    int minindex = i;\n\n    for(int j=i+1; j&lt;N; j++) {\n      if(arr[j]&lt;arr[minindex]) {\n        minindex = j;\n      }\n    }\n\n    int temp = arr[minindex];\n    arr[minindex] = arr[i];\n    arr[i] = temp;\n\n  }\n\n    for(int i = 0; i&lt;N; i++) {\n    printf(\"%d \", arr[i]);\n  }\n\n  printf(\"\\n\");\n\n\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/sorting/#insertion-sort","title":"Insertion Sort","text":"<pre><code>class Solution {\n    static void sort(int arr[]) {\n        int n = arr.length;\n        for (int i = 1; i &lt; n; ++i) {\n            int key = arr[i];\n            int j = i - 1;\n            while (j &gt;= 0 &amp;&amp; arr[j] &gt; key) {\n                arr[j + 1] = arr[j];\n                j = j - 1;\n            }\n            arr[j + 1] = key;\n            arr_printer(arr);\n        }\n    }\n\n    static void arr_printer(int[] arr) {\n        for (int key : arr) {\n            System.out.print(key + \" \");\n        }\n        System.out.print(\"\\n\");\n    }\n\n    static void printArray(int arr[]) {\n        int n = arr.length;\n        for (int i = 0; i &lt; n; ++i)\n            System.out.print(arr[i] + \" \");\n        System.out.println();\n    }\n\n    public static void main(String[] args) {\n        int arr[] = { 13, 12, 11, 10, 6, 5 };\n        sort(arr);\n        printArray(arr);\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/sorting/#quick-sort","title":"Quick Sort","text":"<pre><code>class Solution {\n    int partition(int arr[], int low, int high) {\n        int pivot = arr[high];\n        // index of smaller element\n        int i = (low - 1);\n        for (int j = low; j &lt; high; j++) {\n            // If current element is smaller than the pivot\n            if (arr[j] &lt; pivot) {\n                i++;\n                int temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n        // swap arr[i+1] and arr[high] (or pivot)\n        int temp = arr[i + 1];\n        arr[i + 1] = arr[high];\n        arr[high] = temp;\n        return i + 1;\n    }\n\n    void sort(int arr[], int low, int high) {\n        if (low &lt; high) {\n            int pi = partition(arr, low, high);\n            sort(arr, low, pi - 1);\n            sort(arr, pi + 1, high);\n        }\n    }\n\n    static void printArray(int arr[]) {\n        int n = arr.length;\n        for (int i = 0; i &lt; n; ++i)\n            System.out.print(arr[i] + \" \");\n        System.out.println();\n    }\n\n    // Driver program\n    public static void main(String[] args) {\n        int arr[] = { 10, 7, 8, 9, 1, 5 };\n        int n = arr.length;\n        Solution ob = new Solution();\n        ob.sort(arr, 0, n - 1);\n        System.out.println(\"sorted array\");\n        printArray(arr);\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/sorting/#merge-sort","title":"Merge Sort","text":"<pre><code>class Solution {\n    void merge(int arr[], int l, int m, int r) {\n        // Find sizes of two subarrays to be merged\n        int n1 = m - l + 1;\n        int n2 = r - m;\n        /* Create temp arrays */\n        int L[] = new int[n1];\n        int R[] = new int[n2];\n        /* Copy data to temp arrays */\n        for (int i = 0; i &lt; n1; ++i)\n            L[i] = arr[l + i];\n        for (int j = 0; j &lt; n2; ++j)\n            R[j] = arr[m + 1 + j];\n        /* Merge the temp arrays */\n        // Initial indexes of first and second subarrays\n        int i = 0, j = 0;\n        // Initial index of merged subarry array\n        int k = l;\n        while (i &lt; n1 &amp;&amp; j &lt; n2) {\n            if (L[i] &lt;= R[j]) {\n                arr[k] = L[i];\n                i++;\n            } else {\n                arr[k] = R[j];\n                j++;\n            }\n            k++;\n        }\n        /* Copy remaining elements of L[] if any */\n        while (i &lt; n1) {\n            arr[k] = L[i];\n            i++;\n            k++;\n        }\n        /* Copy remaining elements of R[] if any */\n        while (j &lt; n2) {\n            arr[k] = R[j];\n            j++;\n            k++;\n        }\n    }\n\n    // Main function that sorts arr[l..r] using\n    // merge()\n    void sort(int arr[], int l, int r) {\n        if (l &lt; r) {\n            // Find the middle point\n            int m = (l + r) / 2;\n            // Sort first and second halves\n            sort(arr, l, m);\n            sort(arr, m + 1, r);\n            // Merge the sorted halves\n            merge(arr, l, m, r);\n        }\n    }\n\n    /* A utility function to print array of size n */\n    static void printArray(int arr[]) {\n        int n = arr.length;\n        for (int i = 0; i &lt; n; ++i)\n            System.out.print(arr[i] + \" \");\n        System.out.println();\n    }\n\n    // Driver code\n    public static void main(String[] args) {\n        int arr[] = { 12, 11, 13, 5, 6, 7 };\n        System.out.println(\"Given Array\");\n        printArray(arr);\n        Solution ob = new Solution();\n        ob.sort(arr, 0, arr.length - 1);\n        System.out.println(\"\\nSorted array\");\n        printArray(arr);\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/sorting/#bubble-sort","title":"Bubble Sort","text":"<pre><code>class Solution {\n    void bubbleSort(int arr[]) {\n        int n = arr.length;\n        for (int i = 0; i &lt; n - 1; i++)\n            for (int j = 0; j &lt; n - i - 1; j++)\n                if (arr[j] &gt; arr[j + 1]) {\n                    // swap arr[j+1] and arr[j]\n                    int temp = arr[j];\n                    arr[j] = arr[j + 1];\n                    arr[j + 1] = temp;\n                }\n    }\n\n    /* Prints the array */\n    void printArray(int arr[]) {\n        int n = arr.length;\n        for (int i = 0; i &lt; n; ++i)\n            System.out.print(arr[i] + \" \");\n        System.out.println();\n    }\n\n    // Driver method to test above\n    public static void main(String[] args) {\n        Solution ob = new Solution();\n        int arr[] = { 64, 34, 25, 12, 22, 11, 90 };\n        ob.bubbleSort(arr);\n        System.out.println(\"Sorted array\");\n        ob.printArray(arr);\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/sorting/#c-programming_1","title":"C Programming","text":"<pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n\nint main() {\n\n  int N = 20;\n  int arr[N];\n\n  for (int i = 0; i &lt; N; i++) {\n    arr[i] = rand() % 100;\n    printf(\"%d \", arr[i]);\n  }\n\n  printf(\"\\n\");\n\n  for (int i = 0; i &lt; N - 1; i++) {\n    for (int j = 0; j &lt; N - i - 1; j++) {\n      if (arr[j] &gt; arr[j + 1]) {\n        int temp = arr[j + 1];\n        arr[j + 1] = arr[j];\n        arr[j] = temp;\n      }\n    }\n  }\n\n  for (int i = 0; i &lt; N; i++) {\n    printf(\"%d \", arr[i]);\n  }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/sorting/#radix-sort","title":"Radix Sort","text":"<pre><code>import java.util.*;\n\nclass Solution {\n    static int getMax(int arr[], int n) {\n        int mx = arr[0];\n        for (int i = 1; i &lt; n; i++)\n            if (arr[i] &gt; mx)\n                mx = arr[i];\n        return mx;\n    }\n\n    // A function to do counting sort of arr[] according to\n    // the digit represented by exp.\n    static void countSort(int arr[], int n, int exp) {\n        int output[] = new int[n]; // output array\n        int i;\n        int count[] = new int[10];\n        Arrays.fill(count, 0);\n        // Store count of occurrences in count[]\n        for (i = 0; i &lt; n; i++)\n            count[(arr[i] / exp) % 10]++;\n        // Change count[i] so that count[i] now contains\n        // actual position of this digit in output[]\n        for (i = 1; i &lt; 10; i++)\n            count[i] += count[i - 1];\n        // Build the output array\n        for (i = n - 1; i &gt;= 0; i--) {\n            output[count[(arr[i] / exp) % 10] - 1] = arr[i];\n            count[(arr[i] / exp) % 10]--;\n        }\n        // Copy the output array to arr[], so that arr[] now\n        // contains sorted numbers according to curent digit\n        for (i = 0; i &lt; n; i++)\n            arr[i] = output[i];\n    }\n\n    // The main function to that sorts arr[] of size n using\n    // Radix Sort\n    static void radixsort(int arr[], int n) {\n        // Find the maximum number to know number of digits\n        int m = getMax(arr, n);\n        // Do counting sort for every digit. Note that\n        // instead of passing digit number, exp is passed.\n        // exp is 10^i where i is current digit number\n        for (int exp = 1; m / exp &gt; 0; exp *= 10)\n            countSort(arr, n, exp);\n    }\n\n    // A utility function to print an array\n    static void print(int arr[], int n) {\n        for (int i = 0; i &lt; n; i++)\n            System.out.print(arr[i] + \" \");\n    }\n\n    /* Driver Code */\n    public static void main(String[] args) {\n        int arr[] = { 170, 45, 75, 90, 802, 24, 2, 66 };\n        int n = arr.length;\n        // Function Call\n        radixsort(arr, n);\n        print(arr, n);\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/sorting/#bucket-sort","title":"Bucket Sort","text":"<pre><code>import java.util.*;\nimport java.util.Collections;\n\nclass Solution {\n\n    // Function to sort arr[] of size n\n    // using bucket sort\n    static void bucketSort(float arr[], int n) {\n        if (n &lt;= 0)\n            return;\n\n        // 1) Create n empty buckets\n        @SuppressWarnings(\"unchecked\")\n        Vector&lt;Float&gt;[] buckets = new Vector[n];\n\n        for (int i = 0; i &lt; n; i++) {\n            buckets[i] = new Vector&lt;Float&gt;();\n        }\n\n        // 2) Put array elements in different buckets\n        for (int i = 0; i &lt; n; i++) {\n            float idx = arr[i] * n;\n            buckets[(int) idx].add(arr[i]);\n        }\n\n        // 3) Sort individual buckets\n        for (int i = 0; i &lt; n; i++) {\n            Collections.sort(buckets[i]);\n        }\n\n        // 4) Concatenate all buckets into arr[]\n        int index = 0;\n        for (int i = 0; i &lt; n; i++) {\n            for (int j = 0; j &lt; buckets[i].size(); j++) {\n                arr[index++] = buckets[i].get(j);\n            }\n        }\n    }\n\n    // Driver code\n    public static void main(String args[]) {\n        float arr[] = { (float) 0.897, (float) 0.565,\n                (float) 0.656, (float) 0.1234,\n                (float) 0.665, (float) 0.3434 };\n\n        int n = arr.length;\n        bucketSort(arr, n);\n\n        System.out.println(\"Sorted array is \");\n        for (float el : arr) {\n            System.out.print(el + \" \");\n        }\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/sorting/#heap-sort","title":"Heap Sort","text":"<pre><code>class Solution {\n    public void sort(int arr[]) {\n        int n = arr.length;\n        // Build heap (rearrange array)\n        for (int i = n / 2 - 1; i &gt;= 0; i--)\n            heapify(arr, n, i);\n        // One by one extract an element from heap\n        for (int i = n - 1; i &gt; 0; i--) {\n            // Move current root to end\n            int temp = arr[0];\n            arr[0] = arr[i];\n            arr[i] = temp;\n            // call max heapify on the reduced heap\n            heapify(arr, i, 0);\n        }\n    }\n\n    // To heapify a subtree rooted with node i which is\n    // an index in arr[]. n is size of heap\n    void heapify(int arr[], int n, int i) {\n        int largest = i; // Initialize largest as root\n        int l = 2 * i + 1; // left = 2*i + 1\n        int r = 2 * i + 2; // right = 2*i + 2\n        // If left child is larger than root\n        if (l &lt; n &amp;&amp; arr[l] &gt; arr[largest])\n            largest = l;\n        // If right child is larger than largest so far\n        if (r &lt; n &amp;&amp; arr[r] &gt; arr[largest])\n            largest = r;\n        // If largest is not root\n        if (largest != i) {\n            int swap = arr[i];\n            arr[i] = arr[largest];\n            arr[largest] = swap;\n            // Recursively heapify the affected sub-tree\n            heapify(arr, n, largest);\n        }\n    }\n\n    /* A utility function to print array of size n */\n    static void printArray(int arr[]) {\n        int n = arr.length;\n        for (int i = 0; i &lt; n; ++i)\n            System.out.print(arr[i] + \" \");\n        System.out.println();\n    }\n\n    // Driver code\n    public static void main(String[] args) {\n        int arr[] = { 12, 11, 13, 5, 6, 7 };\n        int n = arr.length;\n        Solution ob = new Solution();\n        ob.sort(arr);\n        System.out.println(\"Sorted array is\");\n        printArray(arr);\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/stack/","title":"Stack","text":""},{"location":"data-structure-and-algorithms/stack/#implement-queue-using-stack","title":"Implement Queue using Stack","text":"<pre><code>class MyQueue {\n    Stack stack;\n    int top;\n\n    public MyQueue() {\n        stack = new Stack();\n    }\n\n    public void push(int x) {\n        Stack temp = new Stack();\n        if (stack.isEmpty()) {\n            stack.push(x);\n        } else {\n            while (!stack.isEmpty()) {\n                temp.push(stack.pop());\n            }\n            stack.push(x);\n            while (!temp.isEmpty()) {\n                stack.push(temp.pop());\n            }\n        }\n    }\n\n    public int pop() {\n        return (int) stack.pop();\n    }\n\n    public int peek() {\n        return (int) stack.peek();\n    }\n\n    public boolean empty() {\n        return stack.isEmpty();\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/stack/#balanced-parenthesis","title":"Balanced Parenthesis","text":"<pre><code>import java.util.Stack;\n\nclass Solution {\n\n    static public boolean isValid(String s) {\n        Stack&lt;Character&gt; stck = new Stack&lt;&gt;();\n\n        for (char bracket : s.toCharArray()) {\n            if (bracket == '(' || bracket == '[' || bracket == '{') {\n                stck.push(bracket);\n            } else {\n                try {\n                    char lstBracker = stck.peek();\n                    if (lstBracker == '(' &amp;&amp; bracket == ')') {\n                        stck.pop();\n                    } else if (lstBracker == '[' &amp;&amp; bracket == ']') {\n                        stck.pop();\n                    } else if (lstBracker == '{' &amp;&amp; bracket == '}') {\n                        stck.pop();\n                    } else {\n                        return false;\n                    }\n                } catch (Exception e) {\n                    return false;\n                }\n            }\n        }\n\n        return stck.size() == 0 ? true : false;\n\n    }\n\n    public static void main(String[] args) {\n        System.out.println(isValid(\"{()}[]\"));\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/stack/#two-stacks-in-an-arrayuseless-question","title":"Two stacks in an array(Useless Question)","text":"<pre><code>        import java.io.*;\n        import java.util.*;\n\nclass TwoStacks {\n    int cap;\n    int top1, top2;\n    int arr[];\n\n    TwoStacks(int n) {\n        arr = new int[n];\n        cap = n;\n        top1 = -1;\n        top2 = cap;\n    }\n\n    void push1(int x) {\n        if (top1 &lt; top2 - 1) {\n            top1++;\n            arr[top1] = x;\n        } else {\n            System.out.println(\"Stack Overflow\");\n            System.exit(1);\n        }\n    }\n\n    void push2(int x) {\n        if (top1 &lt; top2 - 1) {\n            top2--;\n            arr[top2] = x;\n        } else {\n            System.out.println(\"Stack Overflow\");\n            System.exit(1);\n        }\n    }\n\n    int pop1() {\n        if (top1 &gt;= 0) {\n            int x = arr[top1];\n            top1--;\n            return x;\n        } else {\n            System.out.println(\"Stack Underflow\");\n            System.exit(1);\n        }\n        return 0;\n    }\n\n    int pop2() {\n        if (top2 &lt; cap) {\n            int x = arr[top2];\n            top2++;\n            return x;\n        } else {\n            System.out.println(\"Stack Underflow\");\n            System.exit(1);\n        }\n        return 0;\n    }\n}\n\nclass Main {\n\n    public static void main(String[] args) {\n\n        TwoStacks ts = new TwoStacks(5);\n        ts.push1(5);\n        ts.push2(10);\n        ts.push2(15);\n        ts.push1(11);\n        ts.push2(7);\n        System.out.println(\"Popped element from stack1 is: \" + ts.pop1());\n        ts.push2(40);\n        System.out.println(\"Popped element from stack2 is: \" + ts.pop2());\n\n    }\n\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/stack/#k-stacks-in-an-arrayuseless-question","title":"K Stacks in an array(UseLess Question)","text":"<pre><code>class kStacks {\n    int arr[];\n    int top[];\n    int next[];\n    int cap, k;\n    int freeTop;\n\n    kStacks(int k1, int n) {\n        k = k1;\n        cap = n;\n        arr = new int[cap];\n        top = new int[k];\n        next = new int[cap];\n\n        for (int i = 0; i &lt; k; i++)\n            top[i] = -1;\n\n        freeTop = 0;\n        for (int i = 0; i &lt; cap - 1; i++)\n            next[i] = i + 1;\n        next[cap - 1] = -1;\n    }\n\n    boolean isFull() {\n        return (freeTop == -1);\n    }\n\n    boolean isEmpty(int sn) {\n        return (top[sn] == -1);\n    }\n\n    void push(int x, int sn) {\n        if (isFull()) {\n            System.out.print(\"\\nStack Overflow\\n\");\n            return;\n        }\n\n        int i = freeTop;\n        freeTop = next[i];\n        next[i] = top[sn];\n        top[sn] = i;\n        arr[i] = x;\n    }\n\n    int pop(int sn) {\n        if (isEmpty(sn)) {\n            System.out.print(\"\\nStack Underflow\\n\");\n            return Integer.MAX_VALUE;\n        }\n\n        int i = top[sn];\n        top[sn] = next[i];\n        next[i] = freeTop;\n        freeTop = i;\n        return arr[i];\n    }\n\n}\n\nclass Main {\n\n    public static void main(String[] args) {\n\n        int k = 3, n = 10;\n        kStacks ks = new kStacks(k, n);\n\n        ks.push(15, 2);\n        ks.push(45, 2);\n\n        ks.push(17, 1);\n        ks.push(49, 1);\n        ks.push(39, 1);\n\n        ks.push(11, 0);\n        ks.push(9, 0);\n        ks.push(7, 0);\n\n        System.out.println(\"Popped element from stack 2 is \" + ks.pop(2));\n        System.out.println(\"Popped element from stack 1 is \" + ks.pop(1));\n        System.out.println(\"Popped element from stack 0 is \" + ks.pop(0));\n\n    }\n\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/stack/#stock-span-problem","title":"Stock Span Problem","text":"<pre><code>        import java.io.*;\n        import java.util.*;\n\nclass GFG {\n\n    public static void printSpan(int arr[], int n) {\n        Stack&lt;Integer&gt; s = new Stack&lt;&gt;();\n        s.add(0);\n        System.out.print(1 + \" \");\n        for (int i = 1; i &lt; n; i++) {\n            while (s.isEmpty() == false &amp;&amp; arr[s.peek()] &lt;= arr[i]) {\n                s.pop();\n            }\n            int span = s.isEmpty() ? i + 1 : i - s.peek();\n            System.out.print(span + \" \");\n            s.push(i);\n        }\n    }\n\n    public static void main(String[] args) {\n\n        int[] arr = new int[]{18, 12, 13, 14, 11, 16};\n\n        printSpan(arr, arr.length);\n\n    }\n\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/stack/#previous-greater-element","title":"Previous Greater Element","text":"<pre><code>        import java.io.*;\n        import java.util.*;\n\nclass GFG {\n\n    public static void printPrevGreater(int arr[], int n) {\n\n        Stack&lt;Integer&gt; s = new Stack&lt;&gt;();\n        s.add(arr[0]);\n        for (int i = 0; i &lt; n; i++) {\n            while (s.isEmpty() == false &amp;&amp; s.peek() &lt;= arr[i])\n                s.pop();\n            int pg = s.isEmpty() ? -1 : s.peek();\n            System.out.print(pg + \" \");\n            s.add(arr[i]);\n        }\n    }\n\n    public static void main(String[] args) {\n\n        int[] arr = new int[]{20, 30, 10, 5, 15};\n\n        printPrevGreater(arr, arr.length);\n\n    }\n\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/stack/#next-greater-element","title":"Next Greater Element","text":"<pre><code>import java.io.*;\nimport java.util.*;\n\nclass GFG {\n\n    public static ArrayList&lt;Integer&gt; nextGreater(int arr[],int n){\n        ArrayList&lt;Integer&gt; v=new ArrayList&lt;&gt;();\n        Stack &lt;Integer&gt; s=new Stack&lt;&gt;();\n        s.add(arr[n-1]);v.add(-1);\n        for(int i=n-2;i&gt;=0;i--){\n            while(s.isEmpty()==false &amp;&amp; s.peek()&lt;=arr[i])\n                s.pop();\n            int ng=s.isEmpty()?-1:s.peek();\n            v.add(ng);\n            s.add(arr[i]);\n        }\n        Collections.reverse(v);\n        return v;\n    }\n    public static void main (String[] args) {\n\n        int[] arr=new int[]{5,15,10,8,6,12,9,18};\n\n        for(int x: nextGreater(arr,arr.length)){\n            System.out.print(x + \" \");   \n        }  \n\n    }\n\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/stack/#largest-rectangular-area-in-a-histogram-part-1","title":"Largest Rectangular Area in a Histogram (Part 1)","text":"<pre><code>import java.io.*;\nimport java.util.*;\n\nclass GFG {\n\n    public static int getMaxArea(int arr[], int n) {\n        int res = 0;\n        int[] ps = new int[n];\n        int[] ns = new int[n];\n\n        Stack&lt;Integer&gt; s = new Stack&lt;&gt;();\n        s.add(0);\n        for (int i = 0; i &lt; n; i++) {\n            while (s.isEmpty() == false &amp;&amp; arr[s.peek()] &gt;= arr[i])\n                s.pop();\n            int pse = s.isEmpty() ? -1 : s.peek();\n            ps[i] = pse;\n            s.push(i);\n        }\n\n        while (s.isEmpty() == false) {\n            s.pop();\n        }\n\n        s.push(n - 1);\n        for (int i = n - 1; i &gt; 0; i--) {\n            while (s.isEmpty() == false &amp;&amp; arr[s.peek()] &gt;= arr[i])\n                s.pop();\n            int nse = s.isEmpty() ? n : s.peek();\n            ns[i] = nse;\n            s.add(i);\n        }\n\n        for (int i = 0; i &lt; n; i++) {\n            int curr = arr[i];\n            curr += (i - ps[i] - 1) * arr[i];\n            curr += (ns[i] - i - 1) * arr[i];\n            res = Math.max(res, curr);\n        }\n        return res;\n\n    }\n\n    public static void main(String[] args) {\n        int[] arr = new int[]{6, 2, 5, 4, 1, 5, 6};\n        System.out.print(\"Maximum Area: \" + getMaxArea(arr, arr.length));\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/stack/#largest-rectangular-area-in-a-histogram-part-2","title":"Largest Rectangular Area in a Histogram (Part 2)","text":"<pre><code>import java.io.*;\nimport java.util.*;\n\nclass GFG {\n\n    public static int getMaxArea(int arr[], int n) {\n        Stack&lt;Integer&gt; s = new Stack&lt;&gt;();\n        int res = 0;\n        int tp;\n        int curr;\n        for (int i = 0; i &lt; n; i++) {\n            while (s.isEmpty() == false &amp;&amp; arr[s.peek()] &gt;= arr[i]) {\n                tp = s.peek();\n                s.pop();\n                curr = arr[tp] * (s.isEmpty() ? i : i - s.peek() - 1);\n                res = Math.max(res, curr);\n            }\n            s.add(i);\n        }\n        while (s.isEmpty() == false) {\n            tp = s.peek();\n            s.pop();\n            curr = arr[tp] * (s.isEmpty() ? n : n - s.peek() - 1);\n            res = Math.max(res, curr);\n        }\n\n        return res;\n\n    }\n\n    public static void main(String[] args) {\n        int[] arr = new int[]{6, 2, 5, 4, 1, 5, 6};\n        System.out.print(\"Maximum Area: \" + getMaxArea(arr, arr.length));\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/stack/#largest-rectangle-with-all-1s-in-a-matrix","title":"Largest Rectangle with all 1's (in a matrix)","text":"<pre><code>import java.io.*;\nimport java.util.*;\n\nclass GFG {\n\n    public static int largestHist(int R, int C, int arr[]) {\n        Stack&lt;Integer&gt; result = new Stack&lt;Integer&gt;();\n\n        int top_val;\n        int max_area = 0;\n        int area = 0;\n\n        int i = 0;\n        while (i &lt; C) {\n            if (result.empty() || arr[result.peek()] &lt;= arr[i])\n                result.push(i++);\n\n            else {\n\n                top_val = arr[result.peek()];\n                result.pop();\n                area = top_val * i;\n\n                if (!result.empty())\n                    area = top_val * (i - result.peek() - 1);\n                max_area = Math.max(area, max_area);\n            }\n        }\n\n        while (!result.empty()) {\n            top_val = arr[result.peek()];\n            result.pop();\n            area = top_val * i;\n            if (!result.empty())\n                area = top_val * (i - result.peek() - 1);\n\n            max_area = Math.max(area, max_area);\n        }\n        return max_area;\n    }\n\n    static int maxRectangle(int R, int C, int mat[][]) {\n        int res = largestHist(R, C, mat[0]);\n\n        for (int i = 1; i &lt; R; i++) {\n\n            for (int j = 0; j &lt; C; j++)\n\n                if (mat[i][j] == 1)\n                    mat[i][j] += mat[i - 1][j];\n\n            res = Math.max(res, largestHist(R, C, mat[i]));\n        }\n\n        return res;\n    }\n\n    public static void main(String[] args) {\n        int R = 4;\n        int C = 4;\n\n        int A[][] = {\n                {0, 1, 1, 0},\n                {1, 1, 1, 1},\n                {1, 1, 1, 1},\n                {1, 1, 0, 0},\n        };\n        System.out.print(\"Area of maximum rectangle is \" + maxRectangle(R, C, A));\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/stack/#stack-with-getmin-in-o1","title":"Stack with getMin() in O(1)","text":"<pre><code>import java.io.*;\nimport java.util.*;\n\nclass MyStack {\n\n    Stack&lt;Integer&gt; ms;\n    Stack&lt;Integer&gt; as;\n\n    MyStack(){\n        ms=new Stack&lt;&gt;();\n        as=new Stack&lt;&gt;();\n    }\n\nvoid push(int x) {\n\n      if(ms.isEmpty() ) {\n          ms.add(x);as.add(x);return;\n      }\n\n      ms.add(x);\n\n      if(as.peek()&gt;=ms.peek())\n        as.add(x);\n   }\n\nvoid pop() {\n\n    if(as.peek()==ms.peek())\n        as.pop();\n    ms.pop();\n\n   }\n\nint top() {\n     return ms.peek();\n   }\n\nint getMin() {\n      return as.peek();\n   }\n}\n\nclass GFG {\n\n    public static void main(String[] args) \n    { \n        MyStack s=new MyStack();;\n        s.push(4);\n        s.push(5);\n        s.push(8);\n        s.push(1);\n        s.pop();\n\n        System.out.print(\" Minimum Element from Stack: \" + s.getMin() );\n\n    } \n}\n</code></pre>"},{"location":"data-structure-and-algorithms/stack/#design-a-stack-with-getmin-in-o1-space","title":"Design a Stack with getMin() in O(1) Space","text":""},{"location":"data-structure-and-algorithms/stack/#assuming-all-elements-positive","title":"Assuming all Elements Positive","text":"<pre><code>import java.io.*;\nimport java.util.*;\n\nclass MyStack {\n\n    Stack&lt;Integer&gt; s;\n    int min;\n\n    MyStack() {\n        s = new Stack&lt;&gt;();\n    }\n\n    void push(int x) {\n\n        if (s.isEmpty()) {\n            min = x;\n            s.add(x);\n        } else if (x &lt;= min) {\n            s.add(x - min);\n            min = x;\n        } else {\n            s.add(x);\n        }\n    }\n\n    int pop() {\n\n        int t = s.peek();\n        s.pop();\n        if (t &lt;= 0) {\n            int res = min;\n            min = min - t;\n            return res;\n        } else {\n            return t;\n        }\n    }\n\n    int peek() {\n        int t = s.peek();\n        return ((t &lt;= 0) ? min : t);\n    }\n\n    int getMin() {\n        return min;\n    }\n}\n\nclass GFG {\n\n    public static void main(String[] args) {\n        MyStack s = new MyStack();\n        ;\n        s.push(4);\n        s.push(5);\n        s.push(8);\n        s.push(1);\n        s.pop();\n\n        System.out.print(\" Minimum Element from Stack: \" + s.getMin());\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/stack/#handles-negatives","title":"Handles Negatives","text":"<pre><code>import java.io.*;\nimport java.util.*;\n\nclass MyStack {\n\n    Stack&lt;Integer&gt; s;\n    int min;\n\n    MyStack(){\n        s=new Stack&lt;&gt;();\n    }\n\n    void push(int x) {\n\n        if(s.isEmpty() ) {\n            min=x;\n            s.add(x);\n        }\n        else if(x&lt;=min){\n            s.add(2*x-min);\n            min=x;\n        }else{\n            s.add(x);\n        }\n    }\n\n    int pop() {\n\n        int t=s.peek();s.pop();\n        if(t&lt;=min){\n            int res=min;\n            min=2*min-t;\n            return res;\n        }else{\n            return t;\n        }\n    }\n\n    int peek() {\n        int t=s.peek();\n        return ((t&lt;=min)? min : t);\n    }\n\n    int getMin() {\n        return min;\n    }\n}\n\nclass GFG {\n\n    public static void main(String[] args)\n    {\n        MyStack s=new MyStack();;\n        s.push(4);\n        s.push(5);\n        s.push(8);\n        s.push(1);\n        s.pop();\n\n        System.out.print(\" Minimum Element from Stack: \" + s.getMin() );\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/strings/","title":"Strings","text":""},{"location":"data-structure-and-algorithms/strings/#longest-substring-without-repeating-characters","title":"Longest Substring Without Repeating Characters","text":"<pre><code>Given a string s, find the length of the longest substring without repeating characters\n\nExample 1:\n\nInput: s = \"abcabcbb\"\nOutput: 3\nExplanation: The answer is \"abc\", with the length of 3.\nExample 2:\n\nInput: s = \"bbbbb\"\nOutput: 1\nExplanation: The answer is \"b\", with the length of 1.\nExample 3:\n\nInput: s = \"pwwkew\"\nOutput: 3\nExplanation: The answer is \"wke\", with the length of 3.\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\n</code></pre> <pre><code>public class Solution {\n\n    static public int lengthOfLongestSubstring(String s) {\n        int result = 0;\n        Set&lt;Character&gt; charSet = new HashSet();\n        int windowStart = 0;\n        for (int windowEnd = 0; windowEnd &lt; s.length(); windowEnd++) {\n    // if the character at right pointer is duplicate, keep removing\n    // character at left pointer until the duplicate character is removed.\n            while (charSet.contains(s.charAt(windowEnd))) {\n                charSet.remove(s.charAt(windowStart));\n                windowStart++;\n            }\n    // add the character at the right pointer to the set\n            charSet.add(s.charAt(windowEnd));\n    // check if the current substring length is maximum\n            result = Math.max(result, windowEnd - windowStart + 1);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(lengthOfLongestSubstring(\"abcadef\"));\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/strings/#reverse-string","title":"Reverse String","text":"<pre><code>Write a function that reverses a string. \nThe input string is given as an array of characters s.\n\nYou must do this by modifying the input array in-place with O(1) extra memory.\n</code></pre> <pre><code>class Solution {\n    public void reverseString(char[] s) {\n        int low = 0, high = s.length - 1;\n        while (low &lt; high) {\n            char temp = s[low];\n            s[low] = s[high];\n            s[high] = temp;\n            low++;\n            high--;\n        }\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/strings/#reverse-words-in-a-string-iii","title":"Reverse Words in a String III","text":"<pre><code>Given a string s, reverse the order of characters in each word \nwithin a sentence while still preserving whitespace and initial word order.\n\nExample 1:\n\nInput: s = \"Let's take LeetCode contest\"\nOutput: \"s'teL ekat edoCteeL tsetnoc\"\n</code></pre> <pre><code>class Solution {\n    public String reverseWords(String s) {\n        String ans = \"\";\n        String temp = \"\";\n        for (int i = 0; i &lt; s.length(); i++) {\n            if (s.charAt(i) == ' ') {\n                ans += temp;\n                ans += \" \";\n                temp = \"\";\n            } else {\n                temp = s.charAt(i) + temp;\n            }\n        }\n\n        ans += temp;\n        return ans;\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/strings/#valid-anagram","title":"Valid Anagram","text":"<pre><code>Given two strings s and t, return true if t is an anagram of s, \nand false otherwise.\n\nAn Anagram is a word or phrase formed by rearranging the \nletters of a different word or phrase, typically using all \nthe original letters exactly once.\n\nExample 1:\n\nInput: s = \"anagram\", t = \"nagaram\"\nOutput: true\nExample 2:\n\nInput: s = \"rat\", t = \"car\"\nOutput: false\n</code></pre> <pre><code>class Solution {\n    public boolean isAnagram(String s, String t) {\n        if (s.length() &gt; t.length()) {\n            return isAnagram(t, s);\n        }\n\n        Map&lt;Character, Integer&gt; hm = new HashMap();\n\n        for (char c : s.toCharArray()) {\n            hm.put(c, hm.getOrDefault(c, 0) + 1);\n        }\n\n        for (char c : t.toCharArray()) {\n            if (!hm.containsKey(c) || hm.get(c) &lt;= 0)\n                return false;\n            hm.put(c, hm.get(c) - 1);\n        }\n\n        return true;\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/strings/#ransom-note","title":"Ransom Note","text":"<pre><code>Given two strings ransomNote and magazine, \nreturn true if ransomNote can be constructed from magazine and false otherwise.\n\nEach letter in magazine can only be used once in ransomNote.\n\nExample 1:\n\nInput: ransomNote = \"a\", magazine = \"b\"\nOutput: false\nExample 2:\n\nInput: ransomNote = \"aa\", magazine = \"ab\"\nOutput: false\n</code></pre> <pre><code>class Solution {\n    public boolean canConstruct(String ransomNote, String magazine) {\n                if (ransomNote.length() &gt; magazine.length())\n            return false;\n\n        int[] alpha = new int[26];\n\n        for (char ele : magazine.toCharArray()) {\n            alpha[ele - 97]++;\n        }\n\n        for (char ele : ransomNote.toCharArray()) {\n            if (alpha[ele - 97]-- &lt;= 0)\n                return false;\n        }\n\n        return true;\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/strings/#first-unique-character-in-a-string","title":"First Unique Character in a String","text":"<pre><code>Given a string s, find the first non-repeating character in it \nand return its index. If it does not exist, return -1.\n\nExample 1:\n\nInput: s = \"leetcode\"\nOutput: 0\nExample 2:\n\nInput: s = \"loveleetcode\"\nOutput: 2\n</code></pre> <pre><code>public class Solution {\n\n    static public int firstUniqChar(String s) {\n\n        HashMap&lt;Character, Integer&gt; hmap = new HashMap&lt;&gt;();\n\n        for (char ele : s.toCharArray()) {\n            hmap.put(ele, hmap.getOrDefault(ele, 0) + 1);\n        }\n\n        for(int i=0; i&lt;s.length(); i++) {\n            if(hmap.get( s.charAt(i) ) == 1) {\n                return i;\n            }\n        }\n\n        return -1;\n\n    }\n\n    public static void main(String[] args) {\n        System.out.println(firstUniqChar(\"loveleetcode\"));\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/strings/#longest-substring-without-repeating-characters_1","title":"Longest Substring Without Repeating Characters","text":"<pre><code>Given a string s, find the length of the longest substring without repeating characters\n\nExample 1:\n\nInput: s = \"abcabcbb\"\nOutput: 3\nExplanation: The answer is \"abc\", with the length of 3.\nExample 2:\n\nInput: s = \"bbbbb\"\nOutput: 1\nExplanation: The answer is \"b\", with the length of 1.\nExample 3:\n\nInput: s = \"pwwkew\"\nOutput: 3\nExplanation: The answer is \"wke\", with the length of 3.\nNotice that the answer must be a substring, \"pwke\" is a subsequence and not a substring.\n</code></pre> <pre><code>public class Solution {\n\n    static public int lengthOfLongestSubstring(String s) {\n        int result = 0;\n        Set&lt;Character&gt; charSet = new HashSet();\n        int windowStart = 0;\n        for (int windowEnd = 0; windowEnd &lt; s.length(); windowEnd++) {\n    // if the character at right pointer is duplicate, keep removing\n    // character at left pointer until the duplicate character is removed.\n            while (charSet.contains(s.charAt(windowEnd))) {\n                charSet.remove(s.charAt(windowStart));\n                windowStart++;\n            }\n    // add the character at the right pointer to the set\n            charSet.add(s.charAt(windowEnd));\n    // check if the current substring length is maximum\n            result = Math.max(result, windowEnd - windowStart + 1);\n        }\n        return result;\n    }\n\n    public static void main(String[] args) {\n        System.out.println(lengthOfLongestSubstring(\"abcadef\"));\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/strings/#print-frequencies-of-characters-of-string-of-lower-case-alphabets","title":"Print frequencies of characters of string of lower case alphabets","text":"<pre><code>class Solution {\n    public static void main(String[] args) {\n        String str = \"geeksforgeeks\";\n        int[] count = new int[26];\n        for (int i = 0; i &lt; str.length(); i++) {\n            count[str.charAt(i) - 'a']++;\n        }\n        for (int i = 0; i &lt; 26; i++) {\n            if (count[i] &gt; 0) {\n                System.out.println((char) (i + 'a') + \" \" + count[i]);\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/strings/#check-palindrome","title":"Check Palindrome","text":"<pre><code>class Solution {\n    public static boolean isPalindrome(String str) {\n        int start = str.length();\n        int end = str.length() - 1;\n        while (start &lt; end) {\n            if (str.charAt(start) != str.charAt(end)) {\n                return false;\n            }\n            start++;\n            end--;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        String str = \"geeksrorgeeks\";\n        System.out.println(isPalindrome(str));\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/strings/#check-string-is-subsequence-of-one-another","title":"Check string is subsequence of one another","text":"<pre><code>class Solution {\n    static boolean isSubSeq(String str1, String str2) {\n        if (str1.length() &lt; str2.length()) {\n            return false;\n        }\n        int s2p = 0;\n        for (int i = 0; i &lt; str1.length(); i++) {\n            if (str1.charAt(i) == str2.charAt(s2p)) {\n                s2p++;\n            }\n        }\n        return s2p == str2.length();\n    }\n\n    public static void main(String[] args) {\n        String str = \"geeksforgeeks\";\n        String str1 = \"grges\";\n        System.out.println(isSubSeq(str, str1));\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/strings/#check-if-two-strings-are-anagram","title":"Check if two strings are anagram","text":"<pre><code>class Solution {\n    static final int CHAR = 256;\n\n    static boolean areAnagram(String s1, String s2) {\n        if (s1.length() != s2.length())\n            return false;\n        int[] count = new int[CHAR];\n        for (int i = 0; i &lt; s1.length(); i++) {\n            count[s1.charAt(i)]++;\n            count[s2.charAt(i)]--;\n        }\n        for (int i = 0; i &lt; CHAR; i++) {\n            if (count[i] != 0) return false;\n        }\n        return true;\n    }\n\n    public static void main(String[] args) {\n        String str1 = \"abaac\";\n        String str2 = \"aacba\";\n        if (areAnagram(str1, str2))\n            System.out.println(\"The two strings are\"\n                    + \" anagram of each other\");\n        else\n            System.out.println(\"The two strings are not\"\n                    + \" anagram of each other\");\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/strings/#leftmost-repeating-character","title":"Leftmost Repeating character","text":"<pre><code>class Solution {\n    static final int CHAR = 256;\n\n    static int leftMost(String str) {\n        int[] count = new int[CHAR];\n        for (int i = 0; i &lt; str.length(); i++) {\n            count[str.charAt(i)]++;\n        }\n        for (int i = 0; i &lt; str.length(); i++) {\n            if (count[str.charAt(i)] &gt; 1) return i;\n        }\n        return -1;\n    }\n\n    public static void main(String[] args) {\n        String str = \"geeksforgeeks\";\n        System.out.println(\"Index of leftmost repeating character:\");\n        System.out.println(leftMost(str));\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/strings/#leftmost-non-repeating-character","title":"Leftmost non repeating character","text":"<pre><code>class Solution {\n    static final int CHAR = 256;\n\n    static int nonRep(String str) {\n        int[] count = new int[CHAR];\n        for (int i = 0; i &lt; str.length(); i++) {\n            count[str.charAt(i)]++;\n        }\n        for (int i = 0; i &lt; str.length(); i++) {\n            if (count[str.charAt(i)] == 1) return i;\n        }\n        return -1;\n    }\n\n    public static void main(String[] args) {\n        String str = \"geeksforgeeks\";\n        System.out.println(\"Index of leftmost non-repeating element:\");\n        System.out.println(nonRep(str));\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/strings/#reverse-words-in-string","title":"Reverse words in string","text":"<pre><code>class Solution {\n    static void reverse(char str[], int low, int high) {\n        while (low &lt;= high) {\n            //swap\n            char temp = str[low];\n            str[low] = str[high];\n            str[high] = temp;\n            //\n            low++;\n            high--;\n        }\n    }\n\n    static void reverseWords(char str[], int n) {\n        int start = 0;\n        for (int end = 0; end &lt; n; end++) {\n            if (str[end] == ' ') {\n                reverse(str, start, end - 1);\n                start = end + 1;\n            }\n        }\n        reverse(str, start, n - 1);\n        reverse(str, 0, n - 1);\n    }\n\n    public static void main(String[] args) {\n        String s = \"Welcome to Program\";\n        int n = s.length();\n        char[] str = s.toCharArray();\n        System.out.println(\"After reversing words in the string:\");\n        reverseWords(str, n);\n        System.out.println(str);\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/strings/#pattern-searching-in-string-for-all-cases","title":"Pattern Searching in String for ALL CASES","text":"<pre><code>class Solution {\n    static void patSearchinng(String txt, String pat) {\n        int m = pat.length();\n        int n = txt.length();\n        for (int i = 0; i &lt;= (n - m); i++) {\n            int j;\n            for (j = 0; j &lt; m; j++)\n                if (pat.charAt(j) != txt.charAt(i + j))\n                    break;\n            if (j == m)\n                System.out.print(i + \" \");\n        }\n    }\n\n    public static void main(String[] args) {\n        String txt = \"ABCABCD\";\n        String pat = \"ABCD\";\n        System.out.print(\"All index numbers where pattern found: \");\n        patSearchinng(txt, pat);\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/strings/#pattern-searching-string-in-distinct","title":"Pattern Searching String in DISTINCT","text":"<pre><code>class Solution {\n    static void patSearchinng(String txt, String pat) {\n        int m = pat.length();\n        int n = txt.length();\n        for (int i = 0; i &lt;= (n - m); ) {\n            int j;\n            for (j = 0; j &lt; m; j++)\n                if (pat.charAt(j) != txt.charAt(i + j))\n                    break;\n            if (j == m)\n                System.out.print(i + \" \");\n            if (j == 0) {\n                i++;\n            } else {\n                i = (i + j);\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        String txt = \"ABCABCD\";\n        String pat = \"ABCD\";\n        System.out.print(\"All index numbers where pattern found: \");\n        patSearchinng(txt, pat);\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/strings/#rapin-karp-alogrithm","title":"Rapin Karp Alogrithm","text":"<pre><code>class Solution {\n    static final int d = 256;\n    static final int q = 101;\n\n    static void RBSearch(String pat, String txt, int M, int N) {\n\n        //Compute (d^(M-1))%q\n        int h = 1;\n        for (int i = 1; i &lt;= M - 1; i++)\n            h = (h * d) % q;\n\n        //Compute p and to\n        int p = 0, t = 0;\n        for (int i = 0; i &lt; M; i++) {\n            p = (p * d + pat.charAt(i)) % q;\n            t = (t * d + txt.charAt(i)) % q;\n        }\n\n        for (int i = 0; i &lt;= (N - M); i++) {\n            //Check for hit\n            if (p == t) {\n                boolean flag = true;\n                for (int j = 0; j &lt; M; j++)\n                    if (txt.charAt(i + j) != pat.charAt(j)) {\n                        flag = false;\n                        break;\n                    }\n                if (flag == true) System.out.print(i + \" \");\n            }\n            //Compute ti+1 using ti\n            if (i &lt; N - M) {\n                t = ((d * (t - txt.charAt(i) * h)) + txt.charAt(i + M)) % q;\n                if (t &lt; 0) t = t + q;\n            }\n        }\n\n    }\n\n    public static void main ( String[] args ) {\n        String txt = \"GEEKS FOR GEEKS\";\n        String pat = \"GEEK\";\n        System.out.print(\"All index numbers where pattern found: \");\n        RBSearch(pat, txt, 4, 15);\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/strings/#kmp-algorithm-part-1-constructing-lps-array","title":"KMP Algorithm (Part 1 : Constructing LPS Array)","text":"<pre><code>class Solution {\n    static void fillLPS(String str, int lps[]) {\n        int n = str.length(), len = 0;\n        lps[0] = 0;\n        int i = 1;\n        while (i &lt; n) {\n            if (str.charAt(i) == str.charAt(len)) {\n                len++;\n                lps[i] = len;\n                i++;\n            } else {\n                if (len == 0) {\n                    lps[i] = 0;\n                    i++;\n                } else {\n                    len = lps[len - 1];\n                }\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        String txt = \"abacabad\";\n        int[] lps = new int[txt.length()];\n        fillLPS(txt, lps);\n        for (int i = 0; i &lt; txt.length(); i++) {\n            System.out.print(lps[i] + \" \");\n        }\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/strings/#kmp-agorithm-part-2-complete-algorithm","title":"KMP Agorithm (Part 2 : Complete Algorithm)","text":"<pre><code>class Solution {\n    static void fillLPS(String str, int lps[]) {\n        int n = str.length(), len = 0;\n        lps[0] = 0;\n        int i = 1;\n        while (i &lt; n) {\n            if (str.charAt(i) == str.charAt(len)) {\n                len++;\n                lps[i] = len;\n                i++;\n            } else {\n                if (len == 0) {\n                    lps[i] = 0;\n                    i++;\n                } else {\n                    len = lps[len - 1];\n                }\n            }\n        }\n    }\n\n    static void KMP(String pat, String txt) {\n        int N = txt.length();\n        int M = pat.length();\n        int[] lps = new int[M];\n        fillLPS(pat, lps);\n        int i = 0, j = 0;\n        while (i &lt; N) {\n            if (pat.charAt(j) == txt.charAt(i)) {\n                i++;\n                j++;\n            }\n            if (j == M) {\n                System.out.println(\"Found pattern at index \" + (i - j));\n                j = lps[j - 1];\n            } else if (i &lt; N &amp;&amp; pat.charAt(j) != txt.charAt(i)) {\n                if (j == 0)\n                    i++;\n                else\n                    j = lps[j - 1];\n            }\n        }\n    }\n\n    public static void main(String[] args) {\n        String txt = \"ababcababaad\", pat = \"ababa\";\n        KMP(pat, txt);\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/strings/#check-whether-strings-is-rotated","title":"Check whether strings is rotated","text":"<pre><code>class Solution {\n    static boolean areRotations(String s1, String s2) {\n        if (s1.length() != s2.length()) return false;\n        return ((s1 + s1).indexOf(s2) &gt;= 0);\n    }\n\n    public static void main(String[] args) {\n        String s1 = \"ABCD\";\n        String s2 = \"CDAB\";\n        if (areRotations(s1, s2)) {\n            System.out.println(\"Strings are rotations of each other\");\n        } else {\n            System.out.println(\"Strings are not rotations of each other\");\n        }\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/strings/#check-if-strings-are-rotations","title":"Check if Strings are Rotations","text":"<pre><code>class Solution {\n    static boolean areRotations(String s1, String s2) {\n        if (s1.length() != s2.length()) return false;\n        return ((s1 + s1).indexOf(s2) &gt;= 0);\n    }\n\n    public static void main(String[] args) {\n        String s1 = \"ABCD\";\n        String s2 = \"CDAB\";\n        if (areRotations(s1, s2)) {\n            System.out.println(\"Strings are rotations of each other\");\n        } else {\n            System.out.println(\"Strings are not rotations of each other\");\n        }\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/strings/#lexicographic-rank-of-a-string","title":"Lexicographic Rank of a String","text":"<pre><code>class Solution {\n    static final int CHAR = 256;\n\n    static int fact(int n) {\n        return (n &lt;= 1) ? 1 : n * fact(n - 1);\n    }\n\n    static int lexRank(String str) {\n        int res = 1;\n        int n = str.length();\n        int mul = fact(n);\n        int[] count = new int[CHAR];\n        for (int i = 0; i &lt; n; i++)\n            count[str.charAt(i)]++;\n        for (int i = 1; i &lt; CHAR; i++)\n            count[i] += count[i - 1];\n        for (int i = 0; i &lt; n - 1; i++) {\n            mul = mul / (n - i);\n            res = res + count[str.charAt(i) - 1] * mul;\n            for (int j = str.charAt(i); j &lt; CHAR; j++)\n                count[j]--;\n        }\n        return res;\n    }\n\n    public static void main(String[] args) {\n        String str = \"STRING\";\n        System.out.print(lexRank(str));\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/strings/#longest-substring-with-distinct-characters","title":"Longest Substring with Distinct Characters","text":"<pre><code>import java.util.*;\n\nclass Solution {\n    static int longestDistinct(String str) {\n        int n = str.length();\n        int res = 0;\n        int prev[] = new int[256];\n        Arrays.fill(prev, -1);\n        int i = 0;\n        for (int j = 0; j &lt; n; j++) {\n            i = Math.max(i, prev[str.charAt(j)] + 1);\n            int maxEnd = j - i + 1;\n            res = Math.max(res, maxEnd);\n            prev[str.charAt(j)] = j;\n        }\n        return res;\n    }\n\n    public static void main(String[] args) {\n        String str = \"geeksforgeeks\";\n        int len = longestDistinct(str);\n        System.out.print(\"The length of the longest distinct characters substring is \" + len);\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/tree/","title":"Tree","text":""},{"location":"data-structure-and-algorithms/tree/#simple-tree-construction","title":"Simple Tree Construction","text":"<pre><code>import java.lang.*;\n\nclass Node {\n    int key;\n    Node left;\n    Node right;\n\n    Node(int k) {\n        key = k;\n        left = right = null;\n    }\n}\n\nclass Main {\n\n    public static void main(String[] args) {\n        Node root = new Node(10);\n        root.left = new Node(20);\n        root.right = new Node(30);\n        root.left.left = new Node(40);\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/tree/#in-order-tree-traversal","title":"In Order Tree Traversal","text":"<pre><code>import java.lang.*;\n\nclass Node {\n    int key;\n    Node left;\n    Node right;\n\n    Node(int k) {\n        key = k;\n        left = right = null;\n    }\n}\n\nclass Main {\n\n    public static void main(String args[]) {\n        Node root = new Node(10);\n        root.left = new Node(20);\n        root.right = new Node(30);\n        root.right.left = new Node(40);\n        root.right.right = new Node(50);\n\n        inorder(root);\n    }\n\n    public static void inorder(Node root) {\n        if (root != null) {\n            inorder(root.left);\n            System.out.print(root.key + \" \");\n            inorder(root.right);\n        }\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/tree/#pre-order-traversal","title":"Pre Order Traversal","text":"<pre><code>import java.lang.*;\n\nclass Node {\n    int key;\n    Node left;\n    Node right;\n\n    Node(int k) {\n        key = k;\n        left = right = null;\n    }\n}\n\n\nclass Main {\n\n    public static void main(String args[]) {\n        Node root = new Node(10);\n        root.left = new Node(20);\n        root.right = new Node(30);\n        root.right.left = new Node(40);\n        root.right.right = new Node(50);\n\n        preorder(root);\n    }\n\n    public static void preorder(Node root) {\n        if (root != null) {\n            System.out.print(root.key + \" \");\n            preorder(root.left);\n            preorder(root.right);\n        }\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/tree/#post-order-traversal","title":"Post Order Traversal","text":"<pre><code>import java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\nclass Node {\n    int key;\n    Node left;\n    Node right;\n\n    Node(int k) {\n        key = k;\n        left = right = null;\n    }\n}\n\n\nclass Main {\n\n    public static void main(String args[]) {\n        Node root = new Node(10);\n        root.left = new Node(20);\n        root.right = new Node(30);\n        root.right.left = new Node(40);\n        root.right.right = new Node(50);\n\n        postorder(root);\n    }\n\n    public static void postorder(Node root) {\n        if (root != null) {\n            postorder(root.left);\n            postorder(root.right);\n            System.out.print(root.key + \" \");\n        }\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/tree/#height-of-binary-tree","title":"Height of Binary Tree","text":"<pre><code>import java.lang.*;\n\nclass Node {\n    int key;\n    Node left;\n    Node right;\n\n    Node(int k) {\n        key = k;\n        left = right = null;\n    }\n}\n\nclass Main {\n\n    public static void main(String args[]) {\n        Node root = new Node(10);\n        root.left = new Node(20);\n        root.right = new Node(30);\n        root.right.left = new Node(40);\n        root.right.right = new Node(50);\n\n        System.out.print(height(root));\n    }\n\n    public static int height(Node root) {\n        if (root == null)\n            return 0;\n        else\n            return (1 + Math.max(height(root.left), height(root.right)));\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/tree/#print-nodes-at-k-distance","title":"Print Nodes at K distance","text":"<pre><code>import java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\nclass Node {\n    int key;\n    Node left;\n    Node right;\n\n    Node(int k) {\n        key = k;\n        left = right = null;\n    }\n}\n\nclass Main {\n\n    public static void main(String args[]) {\n        Node root = new Node(10);\n        root.left = new Node(20);\n        root.right = new Node(30);\n        root.left.left = new Node(40);\n        root.left.right = new Node(50);\n        root.right.right = new Node(70);\n        root.right.right.right = new Node(80);\n        int k = 2;\n\n        printKDist(root, k);\n    }\n\n    public static void printKDist(Node root, int k) {\n        if (root == null) return;\n\n        if (k == 0) {\n            System.out.print(root.key + \" \");\n        } else {\n            printKDist(root.left, k - 1);\n            printKDist(root.right, k - 1);\n        }\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/tree/#level-order-traversal","title":"Level Order Traversal","text":"<pre><code>import java.util.*;\nimport java.lang.*;\n\nclass Node {\n    int key;\n    Node left;\n    Node right;\n\n    Node(int k) {\n        key = k;\n        left = right = null;\n    }\n}\n\n\nclass Main {\n\n    public static void main(String args[]) {\n        Node root = new Node(10);\n        root.left = new Node(20);\n        root.right = new Node(30);\n        root.left.left = new Node(40);\n        root.left.right = new Node(50);\n        root.right.left = new Node(60);\n        root.right.right = new Node(70);\n\n        printLevel(root);\n    }\n\n    public static void printLevel(Node root) {\n        if (root == null) return;\n        Queue&lt;Node&gt; q = new LinkedList&lt;&gt;();\n        q.add(root);\n        while (!q.isEmpty()) {\n            Node curr = q.poll();\n            System.out.print(curr.key + \" \");\n            if (curr.left != null)\n                q.add(curr.left);\n            if (curr.right != null)\n                q.add(curr.right);\n        }\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/tree/#level-order-traversal-line-by-line-part-1","title":"Level Order Traversal Line by Line (Part 1)","text":"<pre><code>import java.util.*;\nimport java.lang.*;\n\nclass Node {\n    int key;\n    Node left;\n    Node right;\n\n    Node(int k) {\n        key = k;\n        left = right = null;\n    }\n}\n\n\nclass Main {\n\n    public static void main(String args[]) {\n        Node root = new Node(10);\n        root.left = new Node(20);\n        root.right = new Node(30);\n        root.left.left = new Node(40);\n        root.left.right = new Node(50);\n        root.right.left = new Node(60);\n        root.right.right = new Node(70);\n\n        printLevel(root);\n    }\n\n    public static void printLevel(Node root) {\n        if (root == null) return;\n        Queue&lt;Node&gt; q = new LinkedList&lt;&gt;();\n        q.add(root);\n        q.add(null);\n        while (q.size() &gt; 1) {\n            Node curr = q.poll();\n            if (curr == null) {\n                System.out.println();\n                q.add(null);\n                continue;\n            }\n            System.out.print(curr.key + \" \");\n            if (curr.left != null)\n                q.add(curr.left);\n            if (curr.right != null)\n                q.add(curr.right);\n        }\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/tree/#level-order-traversal-line-by-line-part-2","title":"Level Order Traversal Line by Line (Part 2)","text":"<pre><code>import java.util.*;\nimport java.lang.*;\n\nclass Node {\n    int key;\n    Node left;\n    Node right;\n\n    Node(int k) {\n        key = k;\n        left = right = null;\n    }\n}\n\n\nclass Main {\n\n    public static void main(String args[]) {\n        Node root = new Node(10);\n        root.left = new Node(20);\n        root.right = new Node(30);\n        root.left.left = new Node(40);\n        root.left.right = new Node(50);\n        root.right.left = new Node(60);\n        root.right.right = new Node(70);\n\n        printLevel(root);\n    }\n\n    public static void printLevel(Node root) {\n        if (root == null) return;\n        Queue&lt;Node&gt; q = new LinkedList&lt;&gt;();\n        q.add(root);\n        while (!q.isEmpty()) {\n            int count = q.size();\n            for (int i = 0; i &lt; count; i++) {\n                Node curr = q.poll();\n                System.out.print(curr.key + \" \");\n                if (curr.left != null)\n                    q.add(curr.left);\n                if (curr.right != null)\n                    q.add(curr.right);\n            }\n            System.out.println();\n        }\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/tree/#size-of-binary-tree","title":"Size of Binary Tree","text":"<pre><code>import java.lang.*;\n\nclass Node {\n    int key;\n    Node left;\n    Node right;\n\n    Node(int k) {\n        key = k;\n        left = right = null;\n    }\n}\n\n\nclass Main {\n\n    public static void main(String args[]) {\n        Node root = new Node(10);\n        root.left = new Node(20);\n        root.right = new Node(30);\n        root.left.left = new Node(40);\n        root.left.right = new Node(50);\n        root.right.right = new Node(60);\n\n        System.out.print(getSize(root));\n    }\n\n    public static int getSize(Node root) {\n        if (root == null)\n            return 0;\n        else\n            return 1 + getSize(root.left) + getSize(root.right);\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/tree/#maximum-in-binary-tree","title":"Maximum in Binary Tree","text":"<pre><code>import java.lang.*;\n\nclass Node {\n    int key;\n    Node left;\n    Node right;\n\n    Node(int k) {\n        key = k;\n        left = right = null;\n    }\n}\n\n\nclass Main {\n\n    public static void main(String args[]) {\n        Node root = new Node(20);\n        root.left = new Node(80);\n        root.right = new Node(30);\n        root.right.left = new Node(40);\n        root.right.right = new Node(50);\n\n        System.out.print(getMax(root));\n    }\n\n    public static int getMax(Node root) {\n        if (root == null)\n            return Integer.MIN_VALUE;\n        else\n            return Math.max(root.key, Math.max(getMax(root.left), getMax(root.right)));\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/tree/#print-left-view-of-tree-recursively","title":"Print Left View of Tree ( Recursively )","text":"<pre><code>import java.lang.*;\n\nclass Node {\n    int key;\n    Node left;\n    Node right;\n\n    Node(int k) {\n        key = k;\n        left = right = null;\n    }\n}\n\n\nclass Main {\n\n    public static void main(String args[]) {\n        Node root = new Node(20);\n        root.left = new Node(80);\n        root.right = new Node(30);\n        root.right.left = new Node(40);\n        root.right.right = new Node(50);\n\n        System.out.print(getMax(root));\n    }\n\n    public static int getMax(Node root) {\n        if (root == null)\n            return Integer.MIN_VALUE;\n        else\n            return Math.max(root.key, Math.max(getMax(root.left), getMax(root.right)));\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/tree/#print-left-view-of-tree-iteratively","title":"Print Left View of Tree ( Iteratively )","text":"<pre><code>import java.util.*;\nimport java.lang.*;\n\nclass Node {\n    int key;\n    Node left;\n    Node right;\n\n    Node(int k) {\n        key = k;\n        left = right = null;\n    }\n}\n\n\nclass Main {\n\n    public static void main(String args[]) {\n        Node root = new Node(10);\n        root.left = new Node(20);\n        root.right = new Node(30);\n        root.right.left = new Node(40);\n        root.right.right = new Node(50);\n\n        printLeft(root);\n    }\n\n    public static void printLeft(Node root) {\n        if (root == null)\n            return;\n        Queue&lt;Node&gt; q = new LinkedList&lt;&gt;();\n        q.add(root);\n        while (!q.isEmpty()) {\n            int count = q.size();\n            for (int i = 0; i &lt; count; i++) {\n                Node curr = q.poll();\n                if (i == 0)\n                    System.out.print(curr.key + \" \");\n                if (curr.left != null)\n                    q.add(curr.left);\n                if (curr.right != null)\n                    q.add(curr.right);\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/tree/#children-sum-property","title":"Children Sum Property","text":"<pre><code>import java.lang.*;\n\nclass Node {\n    int key;\n    Node left;\n    Node right;\n\n    Node(int k) {\n        key = k;\n        left = right = null;\n    }\n}\n\n\nclass Main {\n\n    public static void main(String args[]) {\n        Node root = new Node(20);\n        root.left = new Node(8);\n        root.right = new Node(12);\n        root.right.left = new Node(3);\n        root.right.right = new Node(9);\n\n        System.out.print(isCSum(root));\n    }\n\n    public static boolean isCSum(Node root) {\n        if (root == null)\n            return true;\n        if (root.left == null &amp;&amp; root.right == null)\n            return true;\n        int sum = 0;\n        if (root.left != null) sum += root.left.key;\n        if (root.right != null) sum += root.right.key;\n\n        return (root.key == sum &amp;&amp; isCSum(root.left) &amp;&amp; isCSum(root.right));\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/tree/#check-if-tree-is-balanced","title":"Check if tree is balanced","text":"<pre><code>import java.lang.*;\n\nclass Node {\n    int key;\n    Node left;\n    Node right;\n\n    Node(int k) {\n        key = k;\n        left = right = null;\n    }\n}\n\n\nclass Main {\n\n    public static void main(String args[]) {\n        Node root = new Node(10);\n        root.left = new Node(5);\n        root.right = new Node(30);\n        root.right.left = new Node(15);\n        root.right.right = new Node(20);\n\n        if (isBalanced(root) &gt; 0)\n            System.out.print(\"Balanced\");\n        else\n            System.out.print(\"Not Balanced\");\n\n    }\n\n    public static int isBalanced(Node root) {\n        if (root == null)\n            return 0;\n        int lh = isBalanced(root.left);\n        if (lh == -1) return -1;\n        int rh = isBalanced(root.right);\n        if (rh == -1) return -1;\n\n        if (Math.abs(lh - rh) &gt; 1)\n            return -1;\n        else\n            return Math.max(lh, rh) + 1;\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/tree/#max-width-binary-tree","title":"Max Width Binary Tree","text":"<pre><code>import java.util.*;\nimport java.lang.*;\n\nclass Node {\n    int key;\n    Node left;\n    Node right;\n\n    Node(int k) {\n        key = k;\n        left = right = null;\n    }\n}\n\nclass Main {\n\n    public static void main(String args[]) {\n        Node root = new Node(10);\n        root.left = new Node(20);\n        root.right = new Node(30);\n        root.left.left = new Node(40);\n        root.left.right = new Node(50);\n        root.right.left = new Node(60);\n\n        System.out.print(maxWidth(root));\n    }\n\n    public static int maxWidth(Node root) {\n        if (root == null) return 0;\n        Queue&lt;Node&gt; q = new LinkedList&lt;&gt;();\n        q.add(root);\n        int res = 0;\n        while (!q.isEmpty()) {\n            int count = q.size();\n            res = Math.max(res, count);\n            for (int i = 0; i &lt; count; i++) {\n                Node curr = q.poll();\n                if (curr.left != null)\n                    q.add(curr.left);\n                if (curr.right != null)\n                    q.add(curr.right);\n            }\n        }\n        return res;\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/tree/#convert-binary-tree-to-doubly-linked-list","title":"Convert Binary Tree to Doubly Linked List","text":"<pre><code>import java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\nclass Node {\n    int key;\n    Node left;\n    Node right;\n\n    Node(int k) {\n        key = k;\n        left = right = null;\n    }\n}\n\nclass Main {\n\n    public static void main(String args[]) {\n        Node root = new Node(10);\n        root.left = new Node(5);\n        root.right = new Node(20);\n        root.right.left = new Node(30);\n        root.right.right = new Node(35);\n\n        Node head = BTToDLL(root);\n        printlist(head);\n    }\n\n    static Node prev = null;\n\n    public static Node BTToDLL(Node root) {\n        if (root == null) return root;\n\n        Node head = BTToDLL(root.left);\n        if (prev == null) {\n            head = root;\n        } else {\n            root.left = prev;\n            prev.right = root;\n        }\n        prev = root;\n        BTToDLL(root.right);\n        return head;\n    }\n\n    public static void printlist(Node head) {\n        Node curr = head;\n        while (curr != null) {\n            System.out.print(curr.key + \" \");\n            curr = curr.right;\n        }\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/tree/#construct-binary-tree-from-inorder-and-preorder","title":"Construct Binary Tree from Inorder and Preorder","text":"<pre><code>import java.lang.*;\n\nclass Node {\n    int key;\n    Node left;\n    Node right;\n\n    Node(int k) {\n        key = k;\n        left = right = null;\n    }\n}\n\n\nclass Main {\n\n    public static void main(String[] args) {\n        int[] in = {20, 10, 40, 30, 50};\n        int[] pre = {10, 20, 30, 40, 50};\n        int n = in.length;\n        Node root = cTree(in, pre, 0, n - 1);\n\n        inorder(root);\n    }\n\n    static int preIndex = 0;\n\n    public static Node cTree(int in[], int pre[], int is, int ie) {\n        if (is &gt; ie) return null;\n        Node root = new Node(pre[preIndex++]);\n\n        int inIndex = is;\n        for (int i = is; i &lt;= ie; i++) {\n            if (in[i] == root.key) {\n                inIndex = i;\n                break;\n            }\n        }\n        root.left = cTree(in, pre, is, inIndex - 1);\n        root.right = cTree(in, pre, inIndex + 1, ie);\n        return root;\n    }\n\n    public static void inorder(Node root) {\n        if (root != null) {\n            inorder(root.left);\n            System.out.print(root.key + \" \");\n            inorder(root.right);\n        }\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/tree/#tree-traversal-in-spiral-form-first-method","title":"Tree Traversal in Spiral Form (First Method)","text":"<pre><code>import java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\nclass Node {\n    int key;\n    Node left;\n    Node right;\n\n    Node(int k) {\n        key = k;\n        left = right = null;\n    }\n}\n\nclass Main {\n\n    public static void main(String args[]) {\n        Node root = new Node(1);\n        root.left = new Node(2);\n        root.right = new Node(3);\n        root.left.left = new Node(4);\n        root.left.right = new Node(5);\n        root.right.left = new Node(6);\n        root.right.right = new Node(7);\n\n        printSpiral(root);\n    }\n\n    public static void printSpiral(Node root) {\n        if (root == null) return;\n        Queue&lt;Node&gt; q = new LinkedList&lt;&gt;();\n        Stack&lt;Integer&gt; s = new Stack&lt;&gt;();\n        boolean reverse = false;\n        q.add(root);\n        while (q.isEmpty() == false) {\n            int count = q.size();\n            for (int i = 0; i &lt; count; i++) {\n                Node curr = q.poll();\n                if (reverse)\n                    s.add(curr.key);\n                else\n                    System.out.print(curr.key + \" \");\n                if (curr.left != null)\n                    q.add(curr.left);\n                if (curr.right != null)\n                    q.add(curr.right);\n            }\n            if (reverse) {\n                while (s.isEmpty() == false) {\n                    System.out.print(s.pop() + \" \");\n                }\n            }\n            reverse = !reverse;\n        }\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/tree/#tree-traversal-in-spiral-form-second-method","title":"Tree Traversal in Spiral Form (Second Method)","text":"<pre><code>import java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\nclass Node {\n    int key;\n    Node left;\n    Node right;\n\n    Node(int k) {\n        key = k;\n        left = right = null;\n    }\n}\n\n\nclass Main {\n\n    public static void main(String args[]) {\n        Node root = new Node(1);\n        root.left = new Node(2);\n        root.right = new Node(3);\n        root.left.left = new Node(4);\n        root.left.right = new Node(5);\n        root.right.left = new Node(6);\n        root.right.right = new Node(7);\n\n        printSpiral(root);\n    }\n\n    public static void printSpiral(Node root) {\n        if (root == null)\n            return;\n        Stack&lt;Node&gt; s1 = new Stack&lt;Node&gt;();\n        Stack&lt;Node&gt; s2 = new Stack&lt;Node&gt;();\n\n        s1.add(root);\n\n        while (!s1.isEmpty() || !s2.isEmpty()) {\n            while (!s1.empty()) {\n                Node temp = s1.peek();\n                s1.pop();\n                System.out.print(temp.key + \" \");\n\n                if (temp.right != null)\n                    s2.add(temp.right);\n\n                if (temp.left != null)\n                    s2.add(temp.left);\n            }\n\n            while (!s2.empty()) {\n                Node temp = s2.peek();\n                s2.pop();\n                System.out.print(temp.key + \" \");\n\n                if (temp.left != null)\n                    s1.add(temp.left);\n                if (temp.right != null)\n                    s1.add(temp.right);\n            }\n        }\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/tree/#diameter-of-a-binary-tree","title":"Diameter of a Binary Tree","text":"<pre><code>import java.lang.*;\n\nclass Node {\n    int key;\n    Node left;\n    Node right;\n\n    Node(int k) {\n        key = k;\n        left = right = null;\n    }\n}\n\n\nclass Main {\n\n    public static void main(String args[]) {\n        Node root = new Node(10);\n        root.left = new Node(20);\n        root.right = new Node(30);\n        root.right.left = new Node(40);\n        root.right.right = new Node(60);\n        root.right.left.left = new Node(50);\n        root.right.right.right = new Node(70);\n\n        System.out.println(\"Height: \" + height(root));\n        System.out.println(\"Diameter: \" + res);\n    }\n\n    static int res = 0;\n\n    public static int height(Node root) {\n        if (root == null)\n            return 0;\n        int lh = height(root.left);\n        int rh = height(root.right);\n        res = Math.max(res, 1 + lh + rh);\n\n        return 1 + Math.max(lh, rh);\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/tree/#lca-of-binary-tree","title":"LCA of Binary Tree","text":"<pre><code>import java.lang.*;\n\nclass Node {\n    int key;\n    Node left;\n    Node right;\n\n    Node(int k) {\n        key = k;\n        left = right = null;\n    }\n}\n\nclass Main {\n\n    public static void main(String args[]) {\n        Node root = new Node(10);\n        root.left = new Node(20);\n        root.right = new Node(30);\n        root.right.left = new Node(40);\n        root.right.right = new Node(50);\n        int n1 = 20, n2 = 50;\n\n        Node ans = lca(root, n1, n2);\n        System.out.println(\"LCA: \" + ans.key);\n    }\n\n    public static Node lca(Node root, int n1, int n2) {\n        if (root == null) return null;\n        if (root.key == n1 || root.key == n2)\n            return root;\n\n        Node lca1 = lca(root.left, n1, n2);\n        Node lca2 = lca(root.right, n1, n2);\n\n        if (lca1 != null &amp;&amp; lca2 != null)\n            return root;\n        if (lca1 != null)\n            return lca1;\n        else\n            return lca2;\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/tree/#burn-a-binary-tree-from-a-leaf","title":"Burn a Binary Tree from a Leaf","text":"<pre><code>import java.lang.*;\n\nclass Node {\n    int key;\n    Node left;\n    Node right;\n\n    Node(int k) {\n        key = k;\n        left = right = null;\n    }\n}\n\nclass Distance {\n    int val;\n\n    Distance(int d) {\n        val = d;\n    }\n}\n\nclass Main {\n\n    public static void main(String args[]) {\n        Node root = new Node(10);\n        root.left = new Node(20);\n        root.right = new Node(30);\n        root.left.left = new Node(40);\n        root.left.right = new Node(50);\n        root.left.left.left = new Node(60);\n        root.left.left.left.left = new Node(70);\n        Distance dist = new Distance(-1);\n        int leaf = 50;\n\n        burnTime(root, leaf, dist);\n        System.out.print(res);\n    }\n\n    static int res = 0;\n\n    public static int burnTime(Node root, int leaf, Distance dist) {\n        if (root == null) return 0;\n        if (root.key == leaf) {\n            dist.val = 0;\n            return 1;\n        }\n        Distance ldist = new Distance(-1), rdist = new Distance(-1);\n        int lh = burnTime(root.left, leaf, ldist);\n        int rh = burnTime(root.right, leaf, rdist);\n\n        if (ldist.val != -1) {\n            dist.val = ldist.val + 1;\n            res = Math.max(res, dist.val + rh);\n        } else if (rdist.val != -1) {\n            dist.val = rdist.val + 1;\n            res = Math.max(res, dist.val + lh);\n        }\n        return Math.max(lh, rh) + 1;\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/tree/#count-nodes-in-a-complete-binary-tree","title":"Count nodes in a Complete Binary Tree","text":"<pre><code>import java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\nclass Node  \n{ \n  int key; \n  Node left; \n  Node right; \n  Node(int k){\n      key=k;\n      left=right=null;\n  }\n}\n\n\nclass GFG { \n\n    public static void main(String args[]) \n    { \n        Node root=new Node(10);\n        root.left=new Node(20);\n        root.right=new Node(30);\n        root.right.left=new Node(40);\n        root.right.right=new Node(50);\n\n        System.out.print(countNode(root));\n    } \n\n    public static int countNode(Node root){\n        int lh=0,rh=0;\n        Node curr=root;\n        while(curr!=null){\n            lh++;\n            curr=curr.left;\n        }\n        curr=root;\n        while(curr!=null){\n            rh++;\n            curr=curr.right;\n        }\n        if(lh==rh){\n            return (int)Math.pow(2,lh)-1;\n        }else{\n            return 1+countNode(root.left)+countNode(root.right);\n        }\n    } \n}\n</code></pre>"},{"location":"data-structure-and-algorithms/tree/#serialize-a-binary-tree","title":"Serialize a Binary Tree","text":"<pre><code>import java.util.*;\nimport java.lang.*;\n\nclass Node {\n    int key;\n    Node left;\n    Node right;\n\n    Node(int k) {\n        key = k;\n        left = right = null;\n    }\n}\n\n\nclass Main {\n\n    public static void main(String args[]) {\n        Node root = new Node(10);\n        root.left = new Node(20);\n\n        ArrayList&lt;Integer&gt; arr = new ArrayList&lt;&gt;();\n        serialize(root, arr);\n        for (int x : arr) {\n            System.out.print(x + \" \");\n        }\n\n    }\n\n    static final int EMPTY = -1;\n\n    public static void serialize(Node root, ArrayList&lt;Integer&gt; arr) {\n        if (root == null) {\n            arr.add(EMPTY);\n            return;\n        }\n        arr.add(root.key);\n        serialize(root.left, arr);\n        serialize(root.right, arr);\n    }\n}\n</code></pre>"},{"location":"data-structure-and-algorithms/tree/#deserialize-a-binary-tree","title":"DeSerialize a Binary Tree","text":"<pre><code>import java.util.*;\nimport java.io.*;\nimport java.lang.*;\n\nclass Node {\n    int key;\n    Node left;\n    Node right;\n\n    Node(int k) {\n        key = k;\n        left = right = null;\n    }\n}\n\nclass Main {\n\n    public static void main(String args[]) {\n        Node root = new Node(10);\n        root.left = new Node(20);\n\n        ArrayList&lt;Integer&gt; arr = new ArrayList&lt;&gt;();\n        serialize(root, arr);\n        for (int x : arr) {\n            System.out.print(x + \" \");\n        }\n        System.out.println();\n        ;\n        Node root_new = deSerialize(arr);\n        inorder(root_new);\n\n    }\n\n    static final int EMPTY = -1;\n\n    public static void serialize(Node root, ArrayList&lt;Integer&gt; arr) {\n        if (root == null) {\n            arr.add(EMPTY);\n            return;\n        }\n        arr.add(root.key);\n        serialize(root.left, arr);\n        serialize(root.right, arr);\n    }\n\n    static int index = 0;\n\n    public static Node deSerialize(ArrayList&lt;Integer&gt; arr) {\n        if (index == arr.size())\n            return null;\n        int val = arr.get(index);\n        index++;\n        if (val == EMPTY) return null;\n        Node root = new Node(val);\n        root.left = deSerialize(arr);\n        root.right = deSerialize(arr);\n        return root;\n    }\n\n    public static void inorder(Node root) {\n        if (root != null) {\n            inorder(root.left);\n            System.out.print(root.key + \" \");\n            inorder(root.right);\n        }\n    }\n}\n</code></pre> <p>// TODO : iterative pre order traversal and efficient solution to it</p>"},{"location":"notes-md/Python/main/","title":"Introduction to Python","text":"<ul> <li>check version : <code>$python --version</code></li> <li>print hello world : <code>print(\"hello world\")</code></li> <li>single quotes in places where formating is needed or for shorter string</li> <li>double quotes for longer strings/paragraphs</li> <li><code>exit()</code> and <code>quit()</code> to end the intrepreter</li> <li>python commands as string : <code>$python -c 'print(\"Hello, World\")'</code></li> </ul>"},{"location":"notes-md/Python/main/#input-output","title":"Input &amp; Output","text":"<pre><code>name = input(\"enter name \")\nprint(name)\nprint(\"name is {}\".format(name))\n</code></pre> <p>Check for internal functions <pre><code>print(dir(__builtins__))\n\n\"\"\"\n['ArithmeticError', 'AssertionError', 'AttributeError'...]\n\"\"\"\n\nprint(dir(math))\n\n\"\"\"\n['__doc__', '__loader__', '__name__', '__package__', '__spec__', \n'acos', 'acosh', 'asin', 'asinh', 'atan', 'atan2', 'atanh', \n'ceil', 'comb', 'copysign', 'cos', 'cosh', 'degrees', 'dist' ...]\n\"\"\"\n\nclass MyClassObject(object):\n    pass\n\ndir(MyClassObject)\n\n# run_hello.py\nif __name__ == '__main__':\n    from hello import say_hello\n    say_hello()\n</code></pre></p>"},{"location":"notes-md/Python/main/#datatypes","title":"Datatypes","text":"<ul> <li>Python int/string has no limit, its bounded by system resource</li> <li>Float is defined by IEEE 754 double precision</li> <li>Char is string of length 1</li> <li><code>None</code> is a type to represent null</li> </ul>"},{"location":"notes-md/Python/main/#types","title":"Types","text":"Datatype in Python<pre><code>a:int = 2\nprint(a)\nprint(type(a))\n\nb = 9223372036854775807\nprint(b)\nprint(type(b))\n\npi:float = 3.14\nprint(pi)\nprint(type(pi))\n\nc = 'A'\nprint(c)\nprint(type(c))\n\nname:str = 'John Doe'\nprint(name)\nprint(type(name))\n\nq:bool = True\nprint(q)\nprint(type(q))\n\nx = None\nprint(x)\nprint(type(x))\n\nprint(True + False) # 1\nprint(True*False)   # 0\n</code></pre> <p>Output</p> <pre><code>2\n&lt;class 'int'&gt;\n9223372036854775807\n&lt;class 'int'&gt;\n3.14\n&lt;class 'float'&gt;\nA\n&lt;class 'str'&gt;\nJohn Doe\n&lt;class 'str'&gt;\nTrue\n&lt;class 'bool'&gt;\nNone\n&lt;class 'NoneType'&gt;\n</code></pre> <p>Number <pre><code>int_num = 10 #int value\nfloat_num = 10.2 #float value\ncomplex_num = 3.14j #complex value\nlong_num = 1234567L #long value\n</code></pre></p> <p>String <pre><code>a_str = \"hello world\"\nprint(a_str[0]) #output will be first character. H\nprint(a_str[0:5]) #output will be first five characters. Hello\n</code></pre></p>"},{"location":"notes-md/Python/main/#data-structures","title":"Data Structures","text":"<pre><code>a = (1,2,3)   # tuple a[0]\nb = [1,2,3]   # list\nc = {1,2,3}   # set\n</code></pre>"},{"location":"notes-md/Python/main/#set","title":"Set","text":"<ul> <li>Are unordered, meaning that the elements in a set do not have a specific order.</li> <li>Are mutable, meaning that the elements in a set can be changed after they are created.</li> <li>Are denoted by curly braces {}</li> </ul> <pre><code>name = \"abracadabra\"\na = set(name)\nprint(a)\n\na.add('z')\n# {'a', 'c', 'r', 'b', 'z', 'd'}\n\n# Frozen Sets- They are immutable and new elements cannot added after its defined.\nb = frozenset('asdfagsa')\nprint(b)\n\n# Existence check\n2 in {1,2,3} # True\n\n# Intersection &amp; Union\nprint({1, 2, 3, 4, 5}.intersection({3, 4, 5, 6}))\nprint({1, 2, 3, 4, 5}.union({3, 4, 5, 6}))\nprint({1, 2, 3, 4}.symmetric_difference({2, 3, 5})) \n# {1, 4, 5}\n</code></pre>"},{"location":"notes-md/Python/main/#list","title":"List","text":"<pre><code>names = ['Alice', 'Bob', 'Craig', 'Diana', 'Eric']\nnested_list = [['a', 'b', 'c'], [1, 2, 3]]\nprint(names[-1]) # Eric\nprint(names[-4]) # Bob\n\nnames.append(\"Sia\")\n# Outputs ['Alice', 'Bob', 'Craig', 'Diana', 'Eric', 'Sia']\n\nnames.insert(1, \"Nikki\")\n# Outputs ['Alice', 'Nikki', 'Bob', 'Craig', 'Diana', 'Eric', 'Sia']\n\nnames.remove(\"Bob\")\nprint(names) # Outputs ['Alice', 'Nikki', 'Craig', 'Diana', 'Eric', 'Sia']\n\nname.index(\"Alice\")\n# 0\n\na = [1, 1, 1, 2, 3, 4]\na.reverse()\n# [4, 3, 2, 1, 1, 1]\n# or\na[::-1]\n# [4, 3, 2, 1, 1, 1]\n\nfor name in names:\n    print (name)\n\n# can be an array of any data type or single data type.\nlist = [123, 'abcd', 10.2, 'd']\nlist1 = ['hello', 'world']\nprint(list)  # will output whole list. [123,'abcd',10.2,'d']\nprint(list[0:2])  # will output first two element of list. [123,'abcd']\n# will gave list1 two times. ['hello','world','hello','world']\nprint(list1 * 2)\nprint(list + list1)  # will gave concatenation of both the lists\n</code></pre>"},{"location":"notes-md/Python/main/#tuple","title":"Tuple","text":"<ul> <li>Are ordered, meaning that the elements in a tuple have a specific order.</li> <li>Are immutable, meaning that the elements in a tuple cannot be changed once they are created.</li> <li>Are denoted by parentheses ().</li> </ul> <pre><code>one_member_tuple = tuple(['Only member'])\nip_address = ('10.20.30.40', 8080)\n</code></pre>"},{"location":"notes-md/Python/main/#dictionary","title":"Dictionary","text":"<pre><code>state_capitals = {\n    'Arkansas': 'Little Rock',\n    'Colorado': 'Denver',\n    'California': 'Sacramento',\n    'Georgia': 'Atlanta'\n}\nca_capital = state_capitals['California']\n\nfor k in state_capitals.keys():\n    print('{} is the capital of {}'.format(state_capitals[k], k))\n\ndic={'name':'red','age':10}\nprint(dic) \n# will output all the key-value pairs. {'name':'red','age':10}\nprint(dic['name']) \n# will output only value with 'name' key. 'red'\nprint(dic.values()) \n# will output list of values in dic. ['red',10]\nprint(dic.keys()) \n# will output list of keys. ['name','age']\n</code></pre> <p>Default Dictionary <pre><code>from collections  import defaultdict\n\nstate = defaultdict( lambda : \"default\" )\n\nstate['1'] = \"uday\"\nstate['2'] = \"kunal\"\nstate['3'] = \"vishal\"\n\nprint(state['4'])\n# default\n</code></pre></p>"},{"location":"notes-md/Python/main/#conversion","title":"Conversion","text":"<pre><code>a = 'hello'\nlist(a)     # ['h', 'e', 'l', 'l', 'o']\nset(a)      # {'o', 'e', 'l', 'h'}\ntuple(a)    # ('h', 'e', 'l', 'l', 'o')\n</code></pre>"},{"location":"notes-md/Python/main/#operator","title":"Operator","text":"<pre><code>x = 0\ny = 1\nprint(x or y) # if x is False then y otherwise x  == 1\nprint(x and y) # if x is False then x otherwise y == 0\nprint(not x) # if x is True then False, otherwise True == True\n</code></pre> <p>Various Declaration</p> <pre><code>a, b, c = 1, 2, 3\na, b, _ = 1, 2, 3\n\nx = y = [7, 8, 9] \nx[0] == y[0] #true\nx[0] = 1\nprint(y[0]) # 1\n\n# nested list\nx = [1, 2, [3, 4, 5], 6, 7]\n</code></pre>"},{"location":"notes-md/Python/main/#strings","title":"Strings","text":"<pre><code>normal = 'foo\\nbar' # foo \\n bar\nescaped = 'foo\\\\nbar' # foo\\nbar\nraw = r'foo\\nbar' # foo\\nbar\n</code></pre>"},{"location":"notes-md/Python/main/#miscell-datatype","title":"Miscell Datatype","text":"<pre><code>## Functions\n\n- write on \u0002czjqqkd:2\u0003IS python pass by value or pass by reference\u0002czjqqkd:3\u0003\n\n**Declaration**\n\n```python\ndef myfunc():\n    a = 2\n    return a\n\nprint(myfunc)\n</code></pre> <ul> <li><code>pass</code> to continue with execution</li> </ul>"},{"location":"notes-md/Python/main/#enum-datatype","title":"Enum Datatype","text":"<pre><code>from enum import Enum\n\nclass Color(Enum):\n    red = 1\n    green = 2\n    blue = 3\n\nprint(Color.red)\nprint(Color(2))\n</code></pre>"},{"location":"notes-md/Python/main/#import-module","title":"Import Module","text":"<p>Programmatically accessing docstrings</p> <pre><code>\"\"\"This is the module docstring.\"\"\"\ndef sayHello():\n\"\"\"This is the function docstring.\"\"\"\nreturn 'Hello World'\n</code></pre> <pre><code>&gt;&gt;&gt; import helloWorld\n&gt;&gt;&gt; helloWorld.__doc__\n'This is the module docstring.'\n&gt;&gt;&gt; helloWorld.sayHello.__doc__\n'This is the function docstring.'\n</code></pre>"},{"location":"notes-md/Python/main/#if-elif-and-else","title":"if, elif, and else","text":"<pre><code>number = 5\nif number &gt; 2:\n    print(\"Number is bigger than 2.\")\nelif number &lt; 2: \n    print(\"Number is smaller than 2.\")\nelse:\n    print(\"Number is 2.\")\n</code></pre>"},{"location":"notes-md/Python/main/#looping-in-python","title":"Looping in Python","text":"<pre><code>i = 0\nwhile i &lt; 7:\n    print(i)\n    if i == 4:\n        print(\"Breaking from loop\")\n        break   \n    i += 1\n\n# 0 1 2 3 4 Breaking from loop\n\nfor i in range(0,6):\n    print(i)\n\n# 0 1 2 3 4 5\n\nfor index, item in enumerate(['one', 'two', 'three', 'four']):\n    print(index, '::', item)\n\n# 0 :: one\n# 1 :: two\n# 2 :: three\n# 3 :: four\n</code></pre> <p>-- 127</p>"},{"location":"notes-md/Web/react-fcc/","title":"React","text":""},{"location":"notes-md/Web/react-fcc/#introduction","title":"Introduction","text":"<p>Intro: React is an Open Source view library created and maintained by Facebook. It's a great tool to render the User Interface (UI) of modern web applications.</p> <p>React uses a syntax extension of JavaScript called JSX that allows you to write HTML directly within JavaScript. This has several benefits. It lets you use the full programmatic power of JavaScript within HTML, and helps to keep your code readable. For the most part, JSX is similar to the HTML that you have already learned, however there are a few key differences that will be covered throughout these challenges.</p> <p>For instance, because JSX is a syntactic extension of JavaScript, you can actually write JavaScript directly within JSX. To do this, you simply include the code you want to be treated as JavaScript within curly braces: <code>{ 'this is treated as JavaScript code' }</code>. Keep this in mind, since it's used in several future challenges.</p>"},{"location":"notes-md/Web/react-fcc/#jsx","title":"JSX","text":"<pre><code>const JSX = &lt;h1&gt;Hello JSX&lt;/h1&gt;;\nconst JS = &lt;div&gt;\n          &lt;h1&gt;Hello&lt;/h1&gt;\n          &lt;p&gt;Hello from p tag&lt;/p&gt;\n      &lt;/div&gt;\n</code></pre>"},{"location":"notes-md/Web/react-fcc/#comment","title":"Comment","text":"<pre><code>const JSX = (\n  &lt;div&gt;\n    &lt;h1&gt;This is a block of JSX&lt;/h1&gt;\n    &lt;p&gt;Here's a subtitle&lt;/p&gt;\n    {/* this is a comment */}\n  &lt;/div&gt;\n);\n</code></pre>"},{"location":"notes-md/Web/react-fcc/#render-html-elements-to-the-dom","title":"Render HTML Elements to the DOM","text":"<p>So far, you've learned that JSX is a convenient tool to write readable HTML within JavaScript. With React, we can render this JSX directly to the HTML DOM using React's rendering API known as ReactDOM.</p> <p>ReactDOM offers a simple method to render React elements to the DOM which looks like this: <code>ReactDOM.render(componentToRender, targetNode)</code>, where the first argument is the React element or component that you want to render, and the second argument is the DOM node that you want to render the component to.</p> <p>As you would expect, <code>ReactDOM.render()</code> must be called after the JSX element declarations, just like how you must declare variables before using them.</p> <pre><code>const JSX = (\n  &lt;div id=\"challenge-node\"&gt;\n    &lt;h1&gt;Hello World&lt;/h1&gt;\n    &lt;p&gt;Lets render this to the DOM&lt;/p&gt;\n  &lt;/div&gt;\n);\n// change code below this line\nReactDOM.render(JSX,document.getElementById(\"challenge-node\"))\n</code></pre>"},{"location":"notes-md/Web/react-fcc/#define-an-html-class-in-jsx","title":"Define an HTML Class in JSX","text":"<p>Now that you're getting comfortable writing JSX, you may be wondering how it differs from HTML.</p> <p>So far, it may seem that HTML and JSX are exactly the same.</p> <p>One key difference in JSX is that you can no longer use the word <code>class</code> to define HTML classes. This is because <code>class</code> is a reserved word in JavaScript. Instead, JSX uses <code>className</code>.</p> <p>In fact, the naming convention for all HTML attributes and event references in JSX become camelCase. For example, a click event in JSX is <code>onClick</code>, instead of <code>onclick</code>. Likewise, <code>onchange</code> becomes <code>onChange</code>. While this is a subtle difference, it is an important one to keep in mind moving forward.</p> <pre><code>const JSX = (\n  &lt;div className=\"myDiv\"&gt;\n    &lt;h1&gt;Add a class to this div&lt;/h1&gt;\n  &lt;/div&gt;\n);\n</code></pre>"},{"location":"notes-md/Web/react-fcc/#self-closing-jsx-tags","title":"Self-Closing JSX Tags","text":"<pre><code>const JSX = (\n  &lt;div&gt;\n    &lt;h2&gt;Welcome to React!&lt;/h2&gt; &lt;br /&gt;\n    &lt;p&gt;Be sure to close all tags!&lt;/p&gt;\n    &lt;hr /&gt;\n  &lt;/div&gt;\n);\n</code></pre>"},{"location":"notes-md/Web/react-fcc/#create-a-stateless-functional-component","title":"Create a Stateless Functional Component","text":"<p>Components are the core of React. Everything in React is a component and here you will learn how to create one.</p> <p>There are two ways to create a React component. The first way is to use a JavaScript function. Defining a component in this way creates a stateless functional component. The concept of state in an application will be covered in later challenges. For now, think of a stateless component as one that can receive data and render it, but does not manage or track changes to that data.</p> <p>To create a component with a function, you simply write a JavaScript function that returns either JSX or <code>null</code>. One important thing to note is that React requires your function name to begin with a capital letter.</p> <pre><code>const MyComponent = function() {\n  return (\n    &lt;div&gt;\n      Hello\n    &lt;/div&gt;\n  )\n}\n</code></pre>"},{"location":"notes-md/Web/react-fcc/#create-a-react-component","title":"Create a React Component","text":"<p>The other way to define a React component is with the ES6 <code>class</code> syntax. In the following example, <code>Kitten</code> extends <code>React.Component</code>:</p> <pre><code>  const ChildComponent = () =&gt; {\n    return (\n      &lt;div&gt;\n        &lt;p&gt;I am the child&lt;/p&gt;\n      &lt;/div&gt;\n    );\n  };\n\n  class ParentComponent extends React.Component {\n    constructor(props) {\n      super(props);\n    }\n    render() {\n      return (\n        &lt;div&gt;\n          &lt;h1&gt;I am the parent&lt;/h1&gt;\n          &lt;ChildComponent /&gt;\n        &lt;/div&gt;\n      );\n    }\n  };\n</code></pre>"},{"location":"notes-md/Web/react-fcc/#react-to-render-nested-components","title":"React to Render Nested Components","text":"<pre><code>const TypesOfFruit = () =&gt; {\n  return (\n    &lt;div&gt;\n      &lt;h2&gt;Fruits:&lt;/h2&gt;\n      &lt;ul&gt;\n        &lt;li&gt;Apples&lt;/li&gt;\n        &lt;li&gt;Blueberries&lt;/li&gt;\n        &lt;li&gt;Strawberries&lt;/li&gt;\n        &lt;li&gt;Bananas&lt;/li&gt;\n      &lt;/ul&gt;\n    &lt;/div&gt;\n  );\n};\n\nconst Fruits = () =&gt; {\n  return (\n    &lt;div&gt;\n        &lt;TypesOfFruit /&gt;\n    &lt;/div&gt;\n  );\n};\n\nclass TypesOfFood extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;h1&gt;Types of Food:&lt;/h1&gt;\n        &lt;Fruits /&gt;\n      &lt;/div&gt;\n    );\n  }\n};\n</code></pre> <p>Another Example</p> <pre><code>class Fruits extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      &lt;div&gt;\n          &lt;h2&gt;Fruits:&lt;/h2&gt;\n          &lt;NonCitrus /&gt;\n          &lt;Citrus /&gt;\n      &lt;/div&gt;\n    );\n  }\n};\n\nclass TypesOfFood extends React.Component {\n  constructor(props) {\n     super(props);\n  }\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;h1&gt;Types of Food:&lt;/h1&gt;\n          &lt;Fruits /&gt;\n        &lt;Vegetables /&gt;\n      &lt;/div&gt;\n    );\n  }\n};\n</code></pre>"},{"location":"notes-md/Web/react-fcc/#pass-props-to-a-stateless-functional-component","title":"Pass Props to a Stateless Functional Component","text":"<p>In React, you can pass props, or properties, to child components. Say you have an <code>App</code> component which renders a child component called <code>Welcome</code> which is a stateless functional component</p> <pre><code>const CurrentDate = (props) =&gt; {\n  return (\n    &lt;div&gt;\n     &lt;p&gt;The current date is: { props.date }&lt;/p&gt;\n    &lt;/div&gt;\n  );\n};\n\nclass Calendar extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;h3&gt;What date is it?&lt;/h3&gt;\n        &lt;CurrentDate date={Date()}/&gt;\n      &lt;/div&gt;\n    );\n  }\n};\n</code></pre>"},{"location":"notes-md/Web/react-fcc/#pass-an-array-as-props","title":"Pass an Array as Props","text":"<pre><code>const List = (props) =&gt; {\n  { /* change code below this line */ }\n  return &lt;p&gt;{props.tasks.join(\", \")}&lt;/p&gt;\n  { /* change code above this line */ }\n};\n\nclass ToDo extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;h1&gt;To Do Lists&lt;/h1&gt;\n        &lt;h2&gt;Today&lt;/h2&gt;\n        { /* change code below this line */ }\n        &lt;List tasks={[\"1\",\"1\",\"1\"]} /&gt;\n        &lt;h2&gt;Tomorrow&lt;/h2&gt;\n        &lt;List tasks={[\"1\",\"1\",\"1\"]}/&gt;\n        { /* change code above this line */ }\n      &lt;/div&gt;\n    );\n  }\n};\n</code></pre>"},{"location":"notes-md/Web/react-fcc/#default-props","title":"Default props","text":"<pre><code>const ShoppingCart = (props) =&gt; {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;Shopping Cart Component&lt;/h1&gt;\n      &lt;p&gt;{props.items}&lt;/p&gt;\n    &lt;/div&gt;\n  )\n};\n// change code below this line\nShoppingCart.defaultProps = {\n  items : 0\n}\n</code></pre>"},{"location":"notes-md/Web/react-fcc/#overiding-default-props","title":"Overiding Default props","text":"<pre><code>const Items = (props) =&gt; {\n  return &lt;h1&gt;Current Quantity of Items in Cart: {props.quantity}&lt;/h1&gt;\n}\nItems.defaultProps = {\n  quantity: 0\n}\n\nclass ShoppingCart extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return &lt;Items quantity={10}/&gt;\n  }\n};\n</code></pre>"},{"location":"notes-md/Web/react-fcc/#use-proptypes-to-define-the-props-you-expect","title":"Use PropTypes to Define the Props You Expect","text":"<p>Importing</p> <pre><code>import PropTypes from 'prop-types';\n</code></pre> <p>Code :</p> <pre><code>const Items = (props) =&gt; {\n  return &lt;h1&gt;Current Quantity of Items in Cart: {props.quantity}&lt;/h1&gt;\n};\n\nItems.propTypes = {\n  quantity : PropTypes.number.isRequired\n}\n\nItems.defaultProps = {\n  quantity: 0\n};\n\nclass ShoppingCart extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return &lt;Items /&gt;\n  }\n};\n</code></pre>"},{"location":"notes-md/Web/react-fcc/#access-props-using-thisprops","title":"Access Props Using this.props","text":"<p>The ES6 class component uses a slightly different convention to access props.</p> <p>Anytime you refer to a class component within itself, you use the <code>this</code> keyword. To access props within a class component, you preface the code that you use to access it with <code>this</code>. For example, if an ES6 class component has a prop called <code>data</code>, you write <code>{this.props.data}</code> in JSX.</p> <pre><code>class ReturnTempPassword extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n        &lt;div&gt;\n           &lt;p&gt;Your temporary password is: &lt;strong&gt;{this.props.tempPassword}&lt;/strong&gt;&lt;/p&gt;\n        &lt;/div&gt;\n    );\n  }\n};\n\nclass ResetPassword extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n        &lt;div&gt;\n          &lt;h2&gt;Reset Password&lt;/h2&gt;\n          &lt;h3&gt;We've generated a new temporary password for you.&lt;/h3&gt;\n          &lt;h3&gt;Please reset this password from your account settings ASAP.&lt;/h3&gt;\n            &lt;ReturnTempPassword tempPassword=\"xxxxxxxx\" /&gt;\n        &lt;/div&gt;\n    );\n  }\n};\n</code></pre>"},{"location":"notes-md/Web/react-fcc/#review-using-props-with-stateless-functional-components","title":"Review Using Props with Stateless Functional Components","text":"<p>A stateless functional component is any function you write which accepts props and returns JSX. A stateless component, on the other hand, is a class that extends <code>React.Component</code>, but does not use internal state (covered in the next challenge). Finally, a stateful component is a class component that does maintain its own internal state. You may see stateful components referred to simply as components or React components.</p> <p>A common pattern is to try to minimize statefulness and to create stateless functional components wherever possible. This helps contain your state management to a specific area of your application. In turn, this improves development and maintenance of your app by making it easier to follow how changes to state affect its behavior.</p> <pre><code>class CampSite extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;Camper/&gt;\n      &lt;/div&gt;\n    );\n  }\n};\nclass Camper extends React.Component {\n  constructor(props){\n    super(props)\n  }\n  render(){\n    return (\n      &lt;div&gt;\n        &lt;p&gt;{this.props.name}&lt;/p&gt;\n      &lt;/div&gt;\n    )\n  }\n}\nCamper.defaultProps = {\n  name : \"CamperBot\"\n}\nCamper.propTypes = {\n  name : PropTypes.string.isRequired\n}\n</code></pre>"},{"location":"notes-md/Web/react-fcc/#create-a-stateful-component","title":"Create a Stateful Component","text":"<p>One of the most important topics in React is <code>state</code>. State consists of any data your application needs to know about, that can change over time. You want your apps to respond to state changes and present an updated UI when necessary. React offers a nice solution for the state management of modern web applications.</p> <p>You create state in a React component by declaring a <code>state</code> property on the component class in its <code>constructor</code>. This initializes the component with <code>state</code> when it is created. The <code>state</code> property must be set to a JavaScript <code>object</code>. Declaring it looks like this:</p> <pre><code>this.state = {\n  // describe your state here\n}\n</code></pre>"},{"location":"notes-md/Web/react-fcc/#render-state-in-the-user-interface","title":"Render State in the User Interface","text":"<p>Once you define a component's initial state, you can display any part of it in the UI that is rendered. If a component is stateful, it will always have access to the data in <code>state</code> in its <code>render()</code> method. You can access the data with <code>this.state</code>.</p> <p>If you want to access a state value within the <code>return</code> of the render method, you have to enclose the value in curly braces.</p> <p><code>State</code> is one of the most powerful features of components in React. It allows you to track important data in your app and render a UI in response to changes in this data. If your data changes, your UI will change. React uses what is called a virtual DOM, to keep track of changes behind the scenes. When state data updates, it triggers a re-render of the components using that data - including child components that received the data as a prop. React updates the actual DOM, but only where necessary. This means you don't have to worry about changing the DOM. You simply declare what the UI should look like.</p> <p>Note that if you make a component stateful, no other components are aware of its <code>state</code>. Its <code>state</code> is completely encapsulated, or local to that component, unless you pass state data to a child component as <code>props</code>. This notion of encapsulated <code>state</code> is very important because it allows you to write certain logic, then have that logic contained and isolated in one place in your code.</p> <pre><code>class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: 'freeCodeCamp'\n    }\n  }\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;h1&gt;{this.state.name}&lt;/h1&gt;\n      &lt;/div&gt;\n    );\n  }\n};\n</code></pre>"},{"location":"notes-md/Web/react-fcc/#render-state-in-the-user-interface-another-way","title":"Render State in the User Interface Another Way","text":"<p>There is another way to access <code>state</code> in a component. In the <code>render()</code> method, before the <code>return</code> statement, you can write JavaScript directly. For example, you could declare functions, access data from <code>state</code> or <code>props</code>, perform computations on this data, and so on. Then, you can assign any data to variables, which you have access to in the <code>return</code> statement.</p> <pre><code>class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: 'freeCodeCamp'\n    }\n  }\n  render() {\n  const name = this.state.name\n    return (\n      &lt;div&gt;\n      &lt;h1&gt;{this.state.name}&lt;/h1&gt;\n      &lt;/div&gt;\n    );\n  }\n};\n</code></pre>"},{"location":"notes-md/Web/react-fcc/#thisstate-section-important","title":"this.state Section { important }","text":""},{"location":"notes-md/Web/react-fcc/#set-state-with-thissetstate","title":"Set State with this.setState","text":"<p>There is also a way to change the component's <code>state</code>. React provides a method for updating component <code>state</code> called <code>setState</code>. You call the <code>setState</code> method within your component class like so: <code>this.setState()</code>, passing in an object with key-value pairs. The keys are your state properties and the values are the updated state data. For instance, if we were storing a <code>username</code> in state and wanted to update it, it would look like this:</p> <pre><code>this.setState({\n  username: 'Lewis'\n});\n</code></pre> <pre><code>class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: 'Initial State'\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick() {\n    this.setState({\n      name : \"React Rocks!\"\n    })\n  }\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;button onClick={this.handleClick}&gt;Click Me&lt;/button&gt;\n        &lt;h1&gt;{this.state.name}&lt;/h1&gt;\n      &lt;/div&gt;\n    );\n  }\n};\n</code></pre>"},{"location":"notes-md/Web/react-fcc/#bind-this-to-a-class-method","title":"Bind 'this' to a Class Method","text":"<p>In addition to setting and updating <code>state</code>, you can also define methods for your component class. A class method typically needs to use the <code>this</code> keyword so it can access properties on the class (such as <code>state</code> and <code>props</code>) inside the scope of the method. There are a few ways to allow your class methods to access <code>this</code>.</p> <p>One common way is to explicitly bind <code>this</code> in the constructor so <code>this</code> becomes bound to the class methods when the component is initialised. You may have noticed the last challenge used <code>this.handleClick = this.handleClick.bind(this)</code> for its <code>handleClick</code> method in the constructor. Then, when you call a function like <code>this.setState()</code> within your class method, <code>this</code> refers to the class and will not be <code>undefined</code></p> <pre><code>class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      text: \"Hello\"\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick() {\n    this.setState({\n      text: \"You clicked!\"\n    });\n  }\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;button onClick = {this.handleClick}&gt;Click Me&lt;/button&gt;\n        &lt;h1&gt;{this.state.text}&lt;/h1&gt;\n      &lt;/div&gt;\n    );\n  }\n};\n</code></pre>"},{"location":"notes-md/Web/react-fcc/#use-state-to-toggle-an-element","title":"Use State to Toggle an Element","text":"<p>Sometimes you might need to know the previous state when updating the state. However, state updates may be asynchronous - this means React may batch multiple <code>setState()</code> calls into a single update. This means you can't rely on the previous value of <code>this.state</code> or <code>this.props</code> when calculating the next value. So, you should not use code like this:</p> <pre><code>this.setState({\n  counter: this.state.counter + this.props.increment\n});\n</code></pre> <p>Instead, you should pass <code>setState</code> a function that allows you to access state and props. Using a function with <code>setState</code> guarantees you are working with the most current values of state and props. This means that the above should be rewritten as:</p> <pre><code>this.setState((state, props) =&gt; ({\n  counter: state.counter + props.increment\n}));\n</code></pre> <p>You can also use a form without <code>props</code> if you need only the <code>state</code>:</p> <pre><code>this.setState(state =&gt; ({\n  counter: state.counter + 1\n}));\n</code></pre>"},{"location":"notes-md/Web/react-fcc/#counter","title":"Counter","text":"<pre><code>class Counter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      count: 0\n    };\n  this.increment = this.increment.bind(this);\n  this.decrement = this.decrement.bind(this);\n  this.reset = this.reset.bind(this);\n }\n  reset() {\n    this.setState({\n      count: 0\n    });\n  }\n  increment() {\n    this.setState(state =&gt; ({\n      count: state.count + 1\n    }));\n  }\n  decrement() {\n    this.setState(state =&gt; ({\n      count: state.count - 1\n    }));\n  }\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;button className='inc' onClick={this.increment}&gt;Increment!&lt;/button&gt;\n        &lt;button className='dec' onClick={this.decrement}&gt;Decrement!&lt;/button&gt;\n        &lt;button className='reset' onClick={this.reset}&gt;Reset&lt;/button&gt;\n        &lt;h1&gt;Current Count: {this.state.count}&lt;/h1&gt;\n      &lt;/div&gt;\n    );\n  }\n};\n</code></pre>"},{"location":"notes-md/Web/react-fcc/#react-create-a-controlled-input","title":"React: Create a Controlled Input","text":"<pre><code>class ControlledInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: ''\n    };\n    this.handleChange = this.handleChange.bind(this)\n  }\n\nhandleChange(event) {\n   this.setState({\n      input: event.target.value\n    });\n}\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;input value = {this.state.input} onChange = {this.handleChange.bind(this)}/&gt;\n        &lt;h4&gt;Controlled Input:&lt;/h4&gt;\n        &lt;p&gt;{this.state.input}&lt;/p&gt;\n      &lt;/div&gt;\n    );\n  }\n};\n</code></pre>"},{"location":"notes-md/Web/react-fcc/#react-create-a-controlled-form-part-ii","title":"React: Create a controlled form part - ii","text":"<pre><code>class MyForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: '',\n      submit: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n  handleChange(event) {\n    this.setState({\n      input: event.target.value\n    });\n  }\n  handleSubmit(event) {\n    event.preventDefault()\n    this.setState({\n      submit: this.state.input\n    });\n  }\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;form onSubmit={this.handleSubmit}&gt;\n          &lt;input\n            value={this.state.input}\n            onChange={this.handleChange} /&gt;\n          &lt;button type='submit'&gt;Submit!&lt;/button&gt;\n        &lt;/form&gt;\n        &lt;h1&gt;{this.state.submit}&lt;/h1&gt;\n      &lt;/div&gt;\n    );\n  }\n};\n</code></pre>"},{"location":"notes-md/Web/react-fcc/#pass-state-as-props-to-child-components","title":"Pass State as Props to Child Components","text":"<pre><code>class MyApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: 'CamperBot'\n    }\n  }\n  render() {\n    return (\n       &lt;div&gt;\n         &lt;Navbar name={this.state.name} /&gt;\n       &lt;/div&gt;\n    );\n  }\n};\n\nclass Navbar extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n    &lt;div&gt;\n      &lt;h1&gt;Hello, my name is: {this.props.name} &lt;/h1&gt;\n    &lt;/div&gt;\n    );\n  }\n};\n</code></pre>"},{"location":"notes-md/Web/react-fcc/#pass-a-callback-as-props","title":"Pass a Callback as Props","text":"<pre><code>class MyApp extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputValue: ''\n    }\n  this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(event) {\n    this.setState({\n      inputValue: event.target.value\n    });\n  }\n  render() {\n    return (\n       &lt;div&gt;\n         &lt;GetInput\n           input={this.state.inputValue}\n           handleChange={this.handleChange}/&gt;\n         &lt;RenderInput\n           input={this.state.inputValue}/&gt;\n       &lt;/div&gt;\n    );\n  }\n};\n\nclass GetInput extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;h3&gt;Get Input:&lt;/h3&gt;\n        &lt;input\n          value={this.props.input}\n          onChange={this.props.handleChange}/&gt;\n      &lt;/div&gt;\n    );\n  }\n};\n\nclass RenderInput extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;h3&gt;Input Render:&lt;/h3&gt;\n        &lt;p&gt;{this.props.input}&lt;/p&gt;\n      &lt;/div&gt;\n    );\n  }\n};\n</code></pre>"},{"location":"notes-md/Web/react-fcc/#component-lifecycle","title":"Component LifeCycle","text":"<p>Example :</p> <pre><code>class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      message: \"\"\n    };\n    this.handleEnter = this.handleEnter.bind(this);\n    this.handleKeyPress = this.handleKeyPress.bind(this);\n  }\n  // change code below this line\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.handleKeyPress);\n  }\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.handleKeyPress);\n  }\n  // change code above this line\n  handleEnter() {\n    this.setState({\n      message: this.state.message + \"You pressed the enter key! \"\n    });\n  }\n  handleKeyPress(event) {\n    if (event.keyCode === 13) {\n      this.handleEnter();\n    }\n  }\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;h1&gt;{this.state.message}&lt;/h1&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n</code></pre>"},{"location":"notes-md/Web/react-fcc/#optimize-re-renders-with-shouldcomponentupdate","title":"Optimize Re-Renders with shouldComponentUpdate","text":"<pre><code>class OnlyEvens extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  shouldComponentUpdate(nextProps) {\n      if (nextProps.value % 2 == 0) {\n        return true;\n      }\n      return false;\n  }\n  componentDidUpdate() {\n    console.log('Component re-rendered.');\n  }\n  render() {\n    return &lt;h1&gt;{this.props.value}&lt;/h1&gt;\n  }\n};\n\nclass Controller extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: 0\n    };\n    this.addValue = this.addValue.bind(this);\n  }\n  addValue() {\n    this.setState({\n      value: this.state.value + 1\n    });\n  }\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;button onClick={this.addValue}&gt;Add&lt;/button&gt;\n        &lt;OnlyEvens value={this.state.value}/&gt;\n      &lt;/div&gt;\n    );\n  }\n};\n</code></pre>"},{"location":"notes-md/Web/react-fcc/#inline-styling","title":"Inline Styling","text":"<pre><code>const styles = {\n  color: 'purple',\n  fontSize: 40,\n  border: \"2px solid purple\",\n};\n\nclass Colorful extends React.Component {\n  render() {\n    // change code below this line\n    return (\n      &lt;div style={styles}&gt;Style Me!&lt;/div&gt;\n    );\n    // change code above this line\n  }\n};\n</code></pre>"},{"location":"notes-md/Web/react-fcc/#use-advanced-javascript-in-react-render-method","title":"Use Advanced JavaScript in React Render Method","text":"<pre><code>const inputStyle = {\n  width: 235,\n  margin: 5\n}\n\nclass MagicEightBall extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userInput: '',\n      randomIndex: ''\n    }\n    this.ask = this.ask.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  ask() {\n    if (this.state.userInput) {\n      this.setState({\n        randomIndex: Math.floor(Math.random() * 20),\n        userInput: ''\n      });\n    }\n  }\n  handleChange(event) {\n    this.setState({\n      userInput: event.target.value\n    });\n  }\n  render() {\n    const possibleAnswers = [\n      'It is certain',\n    ];\n const answer = possibleAnswers[this.state.randomIndex];\n    return (\n      &lt;div&gt;\n        &lt;input\n          type=\"text\"\n          value={this.state.userInput}\n          onChange={this.handleChange}\n          style={inputStyle} /&gt;&lt;br /&gt;\n        &lt;button onClick={this.ask}&gt;\n          Ask the Magic Eight Ball!\n        &lt;/button&gt;&lt;br /&gt;\n        &lt;h3&gt;Answer:&lt;/h3&gt;\n        &lt;p&gt;\n              {answer}          \n        &lt;/p&gt;\n      &lt;/div&gt;\n    );\n  }\n};\n</code></pre>"},{"location":"notes-md/Web/react-fcc/#coditional-render","title":"Coditional render","text":"<pre><code>class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      display: true\n    }\n this.toggleDisplay = this.toggleDisplay.bind(this);\n }\n  toggleDisplay() {\n    this.setState({\n      display: !this.state.display\n    });\n  }\n  render() {\n    // change code below this line\n    if (this.state.display) {\n      return (\n         &lt;div&gt;\n           &lt;button onClick={this.toggleDisplay}&gt;Toggle Display&lt;/button&gt;\n           &lt;h1&gt;Displayed!&lt;/h1&gt;\n         &lt;/div&gt;\n      );\n    } else {\n      return (\n        &lt;div&gt;\n           &lt;button onClick={this.toggleDisplay}&gt;Toggle Display&lt;/button&gt;\n         &lt;/div&gt;\n      );\n    }\n  }\n};\n</code></pre>"},{"location":"notes-md/Web/react-fcc/#use-for-a-more-concise-conditional","title":"Use &amp;&amp; for a More Concise Conditional","text":"<pre><code>class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      display: true\n    }\n this.toggleDisplay = this.toggleDisplay.bind(this);\n  }\n  toggleDisplay() {\n    this.setState(state =&gt; ({\n      display: !state.display\n    }));\n  }\n  render() {\n    // change code below this line\n    return (\n       &lt;div&gt;\n         &lt;button onClick={this.toggleDisplay}&gt;Toggle Display&lt;/button&gt;\n         {this.state.display &amp;&amp; &lt;h1&gt;Displayed!&lt;/h1&gt;}\n       &lt;/div&gt;\n    );\n  }\n};\n</code></pre>"},{"location":"notes-md/Web/react-fcc/#use-a-ternary-expression-for-conditional-rendering","title":"Use a Ternary Expression for Conditional Rendering","text":"<pre><code>const inputStyle = {\n  width: 235,\n  margin: 5\n}\n\nclass CheckUserAge extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      userAge: '',\n      input: ''\n    }\n    this.submit = this.submit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(e) {\n    this.setState({\n      input: e.target.value,\n      userAge: ''\n    });\n  }\n  submit() {\n    this.setState(state =&gt; ({\n      userAge: state.input\n    }));\n  }\n  render() {\n    const buttonOne = &lt;button onClick={this.submit}&gt;Submit&lt;/button&gt;;\n    const buttonTwo = &lt;button&gt;You May Enter&lt;/button&gt;;\n    const buttonThree = &lt;button&gt;You Shall Not Pass&lt;/button&gt;;\n    return (\n      &lt;div&gt;\n        &lt;h3&gt;Enter Your Age to Continue&lt;/h3&gt;\n        &lt;input\n          style={inputStyle}\n          type=\"number\"\n          value={this.state.input}\n          onChange={this.handleChange} /&gt;&lt;br /&gt;\n          {\n          this.state.userAge === ''\n            ? buttonOne\n            : this.state.userAge &gt;= 18\n              ? buttonTwo\n              : buttonThree\n          }\n      &lt;/div&gt;\n    );\n  }\n};\n</code></pre>"},{"location":"notes-md/Web/react-fcc/#render-connditionally-from-props","title":"Render connditionally from props","text":"<pre><code>class Results extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return (\n      &lt;h1&gt;\n      {\n        this.props.fiftyFifty ?\n        'You Win!' :\n        'You Lose!'\n      }\n      &lt;/h1&gt;\n    )\n  };\n};\n\nclass GameOfChance extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      counter: 1\n    }\n    this.handleClick = this.handleClick.bind(this);\n  }\n  handleClick() {\n    this.setState({\n      counter: this.state.counter + 1\n    });\n  }\n  render() {\n    const expression = Math.random() &gt;= .5;\n    return (\n      &lt;div&gt;\n        &lt;button onClick={this.handleClick}&gt;Play Again&lt;/button&gt;\n        &lt;Results fiftyFifty={expression} /&gt;\n        &lt;p&gt;{'Turn: ' + this.state.counter}&lt;/p&gt;\n      &lt;/div&gt;\n    );\n  }\n};\n</code></pre>"},{"location":"notes-md/Web/react-fcc/#change-inline-css-conditionally-based-on-component-state","title":"Change Inline CSS Conditionally Based on Component State","text":"<pre><code>class GateKeeper extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: ''\n    };\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleChange(event) {\n    this.setState({ input: event.target.value })\n  }\n  render() {\n    let inputStyle = {\n      border: '1px solid black'\n    };\n    // change code below this line\n    if (this.state.input.length &gt; 15) {\n      inputStyle = {\n        border: '3px solid red'\n      };\n    }\n    // change code above this line\n    return (\n      &lt;div&gt;\n        &lt;h3&gt;Don't Type Too Much:&lt;/h3&gt;\n        &lt;input\n          type=\"text\"\n          style={inputStyle}\n          value={this.state.input}\n          onChange={this.handleChange} /&gt;\n      &lt;/div&gt;\n    );\n  }\n};\n</code></pre>"},{"location":"notes-md/Web/react-fcc/#use-arraymap-to-dynamically-render-elements","title":"Use Array.map() to Dynamically Render Elements","text":"<pre><code>const textAreaStyles = {\n  width: 235,\n  margin: 5\n};\n\nclass MyToDoList extends React.Component {\n  constructor(props) {\n    super(props);\n    // change code below this line\n    this.state = {\n      userInput: '',\n      toDoList: []\n    }\n    // change code above this line\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  handleSubmit() {\n    const itemsArray = this.state.userInput.split(',');\n    this.setState({\n      toDoList: itemsArray\n    });\n  }\n  handleChange(e) {\n    this.setState({\n      userInput: e.target.value\n    });\n  }\n  render() {\n    const items = this.state.toDoList.map(i =&gt; &lt;li&gt;{i}&lt;/li&gt;); // change code here\n    return (\n      &lt;div&gt;\n        &lt;textarea\n          onChange={this.handleChange}\n          value={this.state.userInput}\n          style={textAreaStyles}\n          placeholder=\"Separate Items With Commas\" /&gt;&lt;br /&gt;\n        &lt;button onClick={this.handleSubmit}&gt;Create List&lt;/button&gt;\n        &lt;h1&gt;My \"To Do\" List:&lt;/h1&gt;\n        &lt;ul&gt;\n          {items}\n        &lt;/ul&gt;\n      &lt;/div&gt;\n    );\n  }\n};\n</code></pre>"},{"location":"notes-md/Web/react-fcc/#give-sibling-elements-a-unique-key-attribute","title":"Give Sibling Elements a Unique Key Attribute","text":"<pre><code>const renderFrameworks = frontEndFrameworks.map((item) =&gt;\n  &lt;li key={item+1}&gt;{item}&lt;/li&gt;\n);\n</code></pre>"},{"location":"notes-md/Web/react-fcc/#use-arrayfilter-to-dynamically-filter-an-array","title":"Use Array.filter() to Dynamically Filter an Array","text":"<pre><code>class MyComponent extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      users: [\n        {\n          username: 'Jeff',\n          online: true\n        },\n        {\n          username: 'Alan',\n          online: false\n        },\n        {\n          username: 'Mary',\n          online: true\n        },\n        {\n          username: 'Jim',\n          online: false\n        },\n        {\n          username: 'Sara',\n          online: true\n        },\n        {\n          username: 'Laura',\n          online: true\n        }\n      ]\n    }\n  }\n  render() {\n    const usersOnline = this.state.users.filter(i =&gt; i.online == true); // change code here\n    const renderOnline = usersOnline.map((i) =&gt; &lt;li key={i.username + 1}&gt;{i.username}&lt;/li&gt;); // change code here\n    return (\n       &lt;div&gt;\n         &lt;h1&gt;Current Online Users:&lt;/h1&gt;\n         &lt;ul&gt;\n           {renderOnline}\n         &lt;/ul&gt;\n       &lt;/div&gt;\n    );\n  }\n};\n</code></pre>"},{"location":"notes-md/Web/react-fcc/#render-react-on-the-server-with-rendertostring","title":"Render React on the Server with renderToString","text":"<pre><code>class App extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  render() {\n    return &lt;div/&gt;\n  }\n};\n\n// change code below this line\nReactDOMServer.renderToString(&lt;App /&gt;);\n</code></pre>"},{"location":"notes-md/Web/react-hooks/","title":"React Hooks","text":""},{"location":"notes-md/Web/react-hooks/#what-are-hooks","title":"What are Hooks","text":"<p>React hooks are like Anchor ( same as what ships drop in the ocean to attach the ship and ocean floor) between React state (ocean floor) and life-cycle features ( ship ) of functional components.</p> <ul> <li>Only work with function based components, not with class based components.</li> <li>Both arrow and regular function component works</li> <li>Cannot nest hooks inside loops, conditions or nested functions</li> </ul>"},{"location":"notes-md/Web/react-hooks/#usestate","title":"<code>useState()</code>","text":"<p><code>useState</code> hook provides you with functionality to set state for a variable and automatically update the DOM with the new state</p> <p></p>"},{"location":"notes-md/Web/react-hooks/#how-to-import","title":"how to import :","text":"<pre><code>import React, {useState} from \"react\";\n// or \nReact.useState;\n</code></pre>"},{"location":"notes-md/Web/react-hooks/#example-usestate","title":"example <code>useState</code>","text":"<pre><code>import React, { useState } from 'react'\n\nlet count1 = 0;\n\nfunction App() {\n\n  const [count, setCount] = useState(0);\n\n  let count2 = 0;\n\n  return (\n    &lt;div className='container mt-3'&gt;\n      &lt;h3&gt;Hello World to React Hooks&lt;/h3&gt;\n\n      &lt;h4&gt;Count : {count}&lt;/h4&gt;\n      &lt;h4&gt;Count1 : {count1}&lt;/h4&gt;\n      &lt;h4&gt;Count2 : {count2}&lt;/h4&gt;\n\n      &lt;button className='btn btn-info' onClick={() =&gt; {\n        setCount(count + 1);\n\n        console.log(`count : ${count} | count1 : ${count1}  count2 :${count2}`);\n\n        count1 = count1 + 1;\n        count2 = count2 + 1;\n      }} &gt;Add here&lt;/button&gt;\n    &lt;/div&gt;\n  )\n}\n\nexport default App\n</code></pre> <p>In this code snippet, <code>count</code> and <code>count1</code> will be updated both as variable as well in <code>DOM</code>. But <code>count2</code> will always be 1 (because of +1 operation in  <code>button.onClick</code> ) as whenever any data is changed in a react component, the whole component is re rendered. This is the reason why components exists.</p> <p>Now you may ask, we can declare variables in global state and not use <code>useState</code>. Well declaring global variables in all programming languages are considered as bad practice except for some cases. Refer :</p> <ul> <li>https://www.tutorialspoint.com/why-are-global-variables-bad-in-c-cplusplus</li> <li>https://dev.to/mervinsv/why-global-variables-are-bad-4pj</li> </ul> <p><code>useState</code> provides a consistent state without even if the component re renders.</p>"},{"location":"notes-md/Web/react-hooks/#usestate-for-objects","title":"<code>useState</code> for objects","text":"<pre><code>import React, { useState } from 'react'\n\nfunction App() {\n\n  const [{ counter1, counter2 }, setCounter] = useState({ counter1: 0, counter2: 20 })\n\n  return (\n    &lt;div className='container mt-3'&gt;\n      &lt;div className='container'&gt;\n\n        &lt;h3&gt;Counter1 : {counter1}&lt;/h3&gt;\n        &lt;h3&gt;Counter2 : {counter2}&lt;/h3&gt;\n\n{/* this doesnt not work becuz whenever you update state, you need to update the whole object */}\n{/* Over here, we havent included the counter2 in the setCounter function. */}\n\n        &lt;button className=\"btn btn-primary\" onClick={() =&gt;\n          setCounter(currentState =&gt; ({ counter1: currentState.counter1 + 1 }))}&gt;Add&lt;/button&gt; &amp;nbsp;\n\n{/* this will also not work because spread operator in objects comes first \n    unlike in functions, where spread operator comes last. */}\n\n{/* Correct Code */}\n                &lt;button className=\"btn btn-danger\" onClick={() =&gt; setCounter(currentState =&gt; ({\n          ...currentState,          \n          counter1: currentState.counter1 - 1,\n        }))}&gt;Subtract&lt;/button\n\n      &lt;/div&gt;\n    &lt;/div&gt;\n  )\n}\n\nexport default App;\n</code></pre>"},{"location":"notes-md/Web/react-hooks/#another-example-usestate","title":"Another Example <code>useState()</code>","text":"<pre><code>import React, { useState } from \"react\";\n\nfunction App() {\n\n  const [name, setName] = useState(localStorage.getItem(\"name\") || \"\");\n\n  return (\n    &lt;div className=\"App\"&gt;\n\n      &lt;div className=\"container mt-3\"&gt;\n        &lt;input name=\"name\" value={name} onChange={e =&gt; {\n          setName(e.target.value)\n          localStorage.setItem(\"name\", e.target.value)\n        }} className='form-control' /&gt;\n\n        &lt;h3&gt;Name : {name}&lt;/h3&gt;\n      &lt;/div&gt;\n\n    &lt;/div &gt;\n  );\n}\n\nexport default App;\n</code></pre>"},{"location":"notes-md/Web/react-hooks/#useeffect","title":"<code>useEffect()</code>","text":"<ul> <li>executes every time a component is rendered</li> <li><code>useEffect</code> when passed no dependency works as <code>componentDidMount</code></li> <li>return arrow function from <code>useEffect</code> is a clean up function</li> <li>many <code>useEffect</code> hook can co exists in one component</li> </ul> <pre><code>import React, { useState, useEffect } from \"react\";\nimport HelloWorld from \"./component/HelloWorld\";\n\nfunction App() {\n\n  const [count, setCount] = useState(0);\n  const [showComp, setComp] = useState(false);\n\n  useEffect(() =&gt; {\n    console.log(\"Rendering ...\")\n  })\n\n  return (\n    &lt;div className=\"App\"&gt;\n\n      &lt;br /&gt;\n\n      &lt;div className='container mt-3'&gt;\n        &lt;h3&gt;Count : {count}&lt;/h3&gt;\n        &lt;button className=\"btn btn-primary\" onClick={() =&gt; setCount(count + 1)}&gt;Add&lt;/button&gt; &amp;nbsp;\n      &lt;/div&gt;\n\n      &lt;br /&gt;\n\n      &lt;div className='container'&gt;\n        &lt;button onClick={() =&gt; setComp(!showComp)} className=\"btn btn-info\"&gt; toggle &lt;/button&gt;\n        {showComp &amp;&amp; &lt;HelloWorld /&gt;}\n      &lt;/div&gt;\n\n    &lt;/div &gt;\n  );\n}\n\nexport default App;\n\n// in src/component/HelloWorld.jsx\n\nimport React from 'react'\n\nfunction HelloWorld() {\n    return (\n        &lt;div className='container mt-3'&gt;\n            &lt;h2&gt;HelloWorld component&lt;/h2&gt;\n        &lt;/div&gt;\n    )\n}\n\nexport default HelloWorld\n</code></pre> <p>Run the code and look at the console ... Doesn't matter whether you increment the counter or toggle the component, the whole component get re-render.</p> <p>To Stop this, modify <code>useEffect</code> as following</p> <pre><code>useEffect(() =&gt; {\n    console.log(\"Rendering ...\")\n}, [])\n</code></pre> <p>Now the rendering will print on the console only when you refresh the page. Try modifying code as following</p> <pre><code>useEffect(() =&gt; {\n    console.log(\"Rendering ...\")\n}, [count])\n</code></pre> <p>Now the component will re render only when count is updated</p> <p>This is what <code>useEffect</code> do, to only update / rendering the component when required. There is also a way to clean up the component. Try by modifying <code>HelloWorld.jsx</code></p> <pre><code>import React from 'react'\n\nfunction HelloWorld() {\n\n    React.useEffect(() =&gt; {\n        console.log('HelloWorld')\n        return () =&gt; {\n            console.log('GoodByeWorld')\n        }\n    }, [])\n\n    return (\n        &lt;div className='container mt-3'&gt;\n            &lt;h2&gt;HelloWorld component&lt;/h2&gt;\n        &lt;/div&gt;\n    )\n}\n\nexport default HelloWorld\n\n// and App.jsx\n\nuseEffect(() =&gt; {\n    console.log(\"Rendering ...\")\n},[])\n</code></pre> <p>Now try to toggle switch, you the message with the component is loaded on <code>DOM</code> and when its <code>unmounting</code>. This works similiar to <code>componentWillMount</code> and <code>componentWillUnmount</code></p>"},{"location":"notes-md/Web/react-hooks/#useref","title":"<code>useRef</code>","text":"<p>When you simply wants to put some html element or react component to focus</p> <p>Best try running this code</p> <pre><code>import React, { useRef } from \"react\";\n\nfunction App() {\n\n  const inputRef = useRef();\n\n  return (\n    &lt;div className=\"App\"&gt;\n\n      &lt;div className=\"container mt-3\"&gt;\n\n        &lt;input ref={inputRef} name=\"name\" value={name} onChange={e =&gt; {\n          setName(e.target.value)\n          localStorage.setItem(\"name\", e.target.value)\n        }}\n          className='form-control'\n        /&gt;\n\n        &lt;br /&gt;\n\n        &lt;button onClick={() =&gt; {\n          inputRef.current.focus();\n        }} className=\"btn btn-success\" &gt;Get focus&lt;/button&gt;\n\n      &lt;/div&gt;\n\n    &lt;/div&gt;\n  );\n}\n\nexport default App;\n</code></pre> <p></p>"},{"location":"notes-md/Web/react-hooks/#usereducer","title":"<code>useReducer</code>","text":"<p>Diagram explains this hook the best</p> <p></p> <pre><code>import React, { useReducer } from \"react\";\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case 'increment': return state + 1;\n    case 'decrement': return state - 1;\n    default: return state;\n  }\n}\n\nfunction App() {\n\n  const [count, dispatch] = useReducer(reducer, 0);\n\n  return (\n    &lt;div className=\"App\"&gt;\n\n      &lt;div className='container' &gt;\n        &lt;h2&gt; count : {count} &lt;/h2&gt;\n        &lt;button onClick={() =&gt; dispatch({ type: 'increment' })} className='btn btn-primary' &gt; increment &lt;/button&gt;\n        &lt;button onClick={() =&gt; dispatch({ type: 'decrement' })} className='btn btn-danger' &gt; increment &lt;/button&gt;\n\n      &lt;/div&gt;\n\n    &lt;/div &gt;\n  );\n}\n\nexport default App;\n</code></pre>"},{"location":"notes-md/Web/react-hooks/#usecontext","title":"<code>useContext</code>","text":"<p>Diagram explains this hook the best</p> <p></p> <pre><code>// App.js\nimport React from 'react'\nimport HelloWorld from \"./components/HelloWorld\"\nimport About from './component/About'\nimport { UserContext } from './UserContext'\n\nfunction App() {\n  return (\n    &lt;div&gt;\n      &lt;UserContext.Provider value='super man'&gt;\n        &lt;HelloWorld /&gt;\n      &lt;/UserContext.Provider&gt;\n    &lt;/div&gt;\n  )\n}\n\nexport default App\n\n// Hello World component\n\nimport React, { useContext } from 'react'\nimport { UserContext } from '../UserContext'\n\nfunction HelloWorld() {\n\n    const msg = useContext(UserContext);\n\n    return (\n        &lt;div className='container mt-3'&gt;\n            &lt;h3&gt;HelloWorld component : {msg}&lt;/h3&gt;\n        &lt;/div&gt;\n    )\n}\n\nexport default HelloWorld\n\n// About component\n\nimport React, { useContext } from 'react'\nimport { UserContext } from '../UserContext'\n\nfunction About() {\n\n    const msg = useContext(UserContext);\n\n    return (\n        &lt;div className='container mt-3'&gt;\n            &lt;h3&gt;About component : {msg}&lt;/h3&gt;\n        &lt;/div&gt;\n    )\n}\n\nexport default About\n\n// Usercontext.js \n\nimport { createContext } from \"react\";\n\nexport const UserContext = createContext(null);\n</code></pre>"},{"location":"notes-md/Web/react-hooks/#usememo","title":"<code>useMemo</code>","text":"<p>Memo or Memoization is when you remember the result on something instead of computing it again and again when needed (until not changed)</p> <p><code>useMemo</code> in react is used for functions that are expensive and we dont want them to run again and again. It is similar to <code>useEffect</code> hook but used more for functions, whereas useEffect is used as managing state in component lifecycle, even tho they are very similiar.</p> <pre><code>import React from 'react'\n\nfunction expensivePhoneFunc (product) {\n  console.log(\"expensivePhoneFunc\")\n  return product[0];\n}\n\nfunction App() {\n\n  let product = [{\n    name: 'Phone XL',\n    price: 100\n  },\n  {\n    name: 'Phone Mini',\n    price: 80\n  },\n  {\n    name: 'Phone Standard',\n    price: 60\n  }]\n\n  const [count , setCount] = React.useState(0);\n\n  const expensivePhone = React.useMemo( () =&gt; {\n    return expensivePhoneFunc(product);\n  },[])\n\n  return (\n    &lt;div className='container mt-3'&gt;\n      &lt;h3&gt;Product : {expensivePhone.name}&lt;/h3&gt;\n      &lt;h4&gt;Price : {expensivePhone.price}&lt;/h4&gt;\n      &lt;br /&gt;\n      &lt;h3&gt;Count : {count}&lt;/h3&gt;\n      &lt;button className='btn btn-primary' onClick={() =&gt; setCount(count + 1)}&gt;+&lt;/button&gt;\n    &lt;/div&gt;\n  )\n}\n\nexport default App\n</code></pre>"},{"location":"notes-md/Web/react-hooks/#usecallback","title":"<code>useCallback</code>","text":"<p>It is the <code>useMemo</code> alternative but for functions, rather than the result returned from them. Instead of running the function again and again. Its is mostly used along with useMemo.</p> <pre><code>import React, {useCallback} from 'react'\nimport HelloWorld from './component/HelloWorld'\n\nfunction App() {\n\n  const [count, setCount] = React.useState(0);\n\n  const increment = useCallback(() =&gt; {\n    setCount(c =&gt; c + 1);\n  }, [setCount]);\n\n\n  return (\n    &lt;div&gt;\n      &lt;HelloWorld increment={increment} /&gt;\n      &lt;h3&gt;Count : {count}&lt;/h3&gt;\n    &lt;/div&gt;\n  )\n}\n\nexport default App\n\n// HelloWorld.jsx\n\nimport React from 'react'\n\nconst HelloWorld = React.memo(({ increment }) =&gt; {\n\n    console.log(\"hello\")\n\n    return (\n        &lt;div className='container mt-3'&gt;\n            &lt;h3&gt;HelloWorld component&lt;/h3&gt;\n            &lt;button onClick={increment}&gt;Hello World&lt;/button&gt;\n        &lt;/div&gt;\n    )\n})\n\nexport default HelloWorld\n</code></pre>"},{"location":"notes-md/Web/svelte/","title":"Svelte Notes","text":"<pre><code>&lt;script&gt;\n    let name = \"Uday Yadav\";\n    import Nested from './Nested.svelte';\n    let count = 0;\n    let string = `this string contains some &lt;strong&gt;HTML!!!&lt;/strong&gt;`;\n\n    $: double = count*2;\n\n    function increment() {\n        count = count+1;\n    }\n\n    # reactive statements\n    $: console.log(`the count is ${count}`);\n\n&lt;/script&gt;\n\n&lt;h3&gt;Hello : {name.toUpperCase()}&lt;/h3&gt;\n\n&lt;img src={src} /&gt;\n\n&lt;p&gt;{@html string}&lt;/p&gt;\n\n&lt;button on:click={increment}&gt;\n    Clicked {count}\n    {count === 1 ? 'time' : 'times'}\n&lt;/button&gt;\n\n&lt;p&gt;{count} doubled is {doubled}&lt;/p&gt;\n\n&lt;Nested answer={42} /&gt;\n\n\nexport makes it prop\n&lt;script&gt;\n    export let answer;\n&lt;/script&gt;\n\n&lt;p&gt;The answer is {answer}&lt;/p&gt;\n\n{#if count%2 == 0} \n    &lt;p&gt;Only on even&lt;/p&gt;\n{:else}\n    &lt;p&gt;Only on odd&lt;/p&gt;\n{/if}\n\nconst colors = ['red', 'orange', 'yellow', 'green', 'blue', 'indigo', 'violet'];\n\n{#each colors as color}\n    &lt;button\n        aria-current={selected === color}\n        aria-label={color}\n        style=\"background: {color}\"\n        on:click={() =&gt; selected = color}&gt;\n    &lt;/button&gt;\n{/each}\n\n{#await promise}\n    &lt;p&gt;...waiting&lt;/p&gt;\n{:then number}\n    &lt;p&gt;The number is {number}&lt;/p&gt;\n{:catch error}\n    &lt;p style=\"color: red\"&gt;{error.message}&lt;/p&gt;\n{/await}\n\n&lt;button on:click|once={() =&gt; alert('clicked')}&gt;\n    Click me\n&lt;/button&gt;\n\n&lt;input bind:value={name} /&gt;\n\n&lt;h1&gt;Hello {name}!&lt;/h1&gt;\n\n\nstore : \nimport { writable } from 'svelte/store';\n\nfunction createCount() {\n    const { subscribe, set, update } = writable(0);\n\n    return {\n        subscribe,\n        increment: () =&gt; update((n) =&gt; n + 1),\n        decrement: () =&gt; update((n) =&gt; n - 1),\n        reset: () =&gt; set(0)\n    };\n}\nexport const count = createCount();\n\n\n&lt;script&gt;\n    import { count } from './stores.js';\n&lt;/script&gt;\n\n&lt;h1&gt;The count is {$count}&lt;/h1&gt;\n\n&lt;button on:click={count.increment}&gt;+&lt;/button&gt;\n&lt;button on:click={count.decrement}&gt;-&lt;/button&gt;\n&lt;button on:click={count.reset}&gt;reset&lt;/button&gt;\n</code></pre>"},{"location":"notes-md/blockchain/","title":"Blockchain","text":""},{"location":"notes-md/blockchain/#topics-covered","title":"Topics Covered","text":"<ul> <li>Solidity</li> <li>Block 101</li> <li>Custom ERC20</li> <li>Contract</li> </ul>"},{"location":"notes-md/blockchain/#working-on-a-block","title":"Working on a block","text":""},{"location":"notes-md/blockchain/#block-and-transaction-properties","title":"Block and Transaction Properties","text":"<ul> <li><code>blockhash(uint blockNumber) returns (bytes32)</code>: hash of the given block - only works for 256 most recent, excluding current, blocks</li> <li><code>block.chainid</code> (<code>uint</code>): current chain id</li> <li><code>block.coinbase</code> (<code>address payable</code>): current block miner\u2019s address</li> <li><code>block.difficulty</code> (<code>uint</code>): current block difficulty</li> <li><code>block.gaslimit</code> (<code>uint</code>): current block gaslimit</li> <li><code>block.number</code> (<code>uint</code>): current block number</li> <li><code>block.timestamp</code> (<code>uint</code>): current block timestamp as seconds since unix epoch</li> <li><code>gasleft() returns (uint256)</code>: remaining gas</li> <li><code>msg.data</code> (<code>bytes calldata</code>): complete calldata</li> <li><code>msg.sender</code> (<code>address</code>): sender of the message (current call)</li> <li><code>msg.sig</code> (<code>bytes4</code>): first four bytes of the calldata (i.e. function identifier)</li> <li><code>msg.value</code> (<code>uint</code>): number of wei sent with the message</li> <li><code>tx.gasprice</code> (<code>uint</code>): gas price of the transaction</li> <li><code>tx.origin</code> (<code>address</code>): sender of the transaction (full call chain)</li> </ul>"},{"location":"notes-md/blockchain/contract/","title":"Contract","text":""},{"location":"notes-md/blockchain/contract/#structure-of-smart-contract","title":"Structure of Smart Contract","text":""},{"location":"notes-md/blockchain/contract/#basics","title":"Basics","text":"<p>SPDX license</p> <p>software package data exchange</p> <p>Trust in smart contract can be better established if their source code is available. Since making source code available always touches on legal problems with regards to copyright, the Solidity compiler encourages the use of machine-readable SPDX license identifiers. Every source file should start with a comment indicating its license:</p> <p>Add the line <code>// SPDX-License-Identifier: MIT</code></p> <p>If you do not want to specify a or if the source code is not open-source, please use the special value <code>UNLICENSED</code></p>"},{"location":"notes-md/blockchain/contract/#pragma","title":"Pragma","text":"<p>The <code>pragma</code> keyword is used to enable certain compiler features or checks. A pragma directive is always local to a source file, so you have to add the pragma to all your files if you want enable it in your whole project. If you import another file, the pragma from that file does not automatically apply to the importing file.</p> <p>Version Pragma</p> <p>Source files can (and should) be annotated with a version pragma to reject compilation with future compiler versions that might introduce incompatible changes. We try to keep these to an absolute minimum and introduce them in a way that changes in semantics also require changes in the syntax, but this is not always possible. Because of this, it is always a good idea to read through the changelog at least for releases that contain breaking changes. These releases always have versions of the form <code>0.x.0</code> or <code>x.0.0</code>.</p>"},{"location":"notes-md/blockchain/contract/#abi-coder-pragma","title":"ABI Coder Pragma","text":"<p>The standard ABI coder does not allow arrays of dynamic types, structs or nested variables between the Solidity contract and the dApp.</p> <p>The ABI v2 coder; which allows structs, nested and dynamic variables to be passed into functions, returned from functions and emitted by events.</p> <p>By using <code>pragma abicoder v1</code> or <code>pragma abicoder v2</code> you can select between the two implementations of the ABI encoder and decoder.</p> <p>The new ABI coder (v2) is able to encode and decode arbitrarily nested arrays and structs. It might produce less optimal code and has not received as much testing as the old encoder, but is considered non-experimental as of Solidity 0.6.0. You still have to explicitly activate it using <code>pragma abicoder v2;</code>. Since it will be activated by default starting from Solidity 0.8.0, there is the option to select the old coder using <code>pragma abicoder v1;</code></p>"},{"location":"notes-md/blockchain/contract/#importing-other-source-files","title":"Importing other Source Files","text":"<p>Solidity supports import statements to help modularise your code that are similar to those available in JavaScript (from ES6 on). However, Solidity does not support the concept of a default export.</p> <p>At a global level, you can use import statements of the following form:</p> <pre><code>import \"filename\";\nimport * as symbolName from \"filename\";\nimport \"filename\" as symbolName;\nimport {symbol1 as alias, symbol2} from \"filename\";\n</code></pre>"},{"location":"notes-md/blockchain/contract/#comments","title":"Comments","text":"<p>Single-line comments (<code>//</code>) and multi-line comments (<code>/*...*/</code>) are possible.</p> <pre><code>// This is a single-line comment.\n\n/*\nThis is a\nmulti-line comment.\n*/\n</code></pre>"},{"location":"notes-md/blockchain/contract/#structure-of-a-contract","title":"Structure of a Contract","text":""},{"location":"notes-md/blockchain/contract/#state-variables","title":"State Variables","text":"<p>State variables are variables whose values are permanently stored in contract storage.</p> <pre><code>// SPDX-License-Identifier: GPL-3.0\npragma solidity &gt;=0.4.0 &lt;0.9.0;\n\ncontract SimpleStorage {\n    // State Variable\n    uint storedData; \n}\n</code></pre> <ul> <li>read more about types : here</li> <li>read more about getters and visibility : here</li> </ul>"},{"location":"notes-md/blockchain/contract/#functions","title":"Functions","text":"<p>Functions are the executable units of code. Functions are usually defined inside a contract, but they can also be defined outside of contracts.</p> <pre><code>// SPDX-License-Identifier: GPL-3.0\npragma solidity &gt;0.7.0 &lt;0.9.0;\n\ncontract SimpleAuction {\n    // Function\n    function bid() public payable { \n\n    }\n}\n\n// Helper function defined outside of a contract\nfunction helper(uint x) pure returns (uint) {\n    return x * 2;\n}\n</code></pre>"},{"location":"notes-md/blockchain/contract/#function-modifiers","title":"Function Modifiers","text":"<p>Function modifiers can be used to amend the semantics of functions in a declarative way Overloading, that is, having the same modifier name with different parameters, is not possible. Like functions, modifiers can be overridden.</p> <pre><code>// SPDX-License-Identifier: GPL-3.0\npragma solidity &gt;=0.4.22 &lt;0.9.0;\n\ncontract Purchase {\n    address public seller;\n\n    // Modifier\n    modifier onlySeller() {\n        require(\n            msg.sender == seller,\n            \"Only seller can call this.\"\n        );\n        _;\n    }\n\n    function abort() public view onlySeller { // Modifier usage\n        // ...\n    }\n}\n</code></pre>"},{"location":"notes-md/blockchain/contract/#understanding-a-smart-contract","title":"Understanding a Smart Contract","text":"<pre><code>// SPDX-License-Identifier: GPL-3.0\n\npragma solidity &gt;=0.7.0 &lt;0.8.0;\n\n/**\n * @title Owner\n * @dev Set &amp; change owner\n */\ncontract Owner {\n\n    address private owner;\n\n    // event for EVM logging\n    event OwnerSet(address indexed oldOwner, address indexed newOwner);\n\n    // modifier to check if caller is owner\n    modifier isOwner() {\n        // If the first argument of 'require' evaluates to 'false', execution terminates and all\n        // changes to the state and to Ether balances are reverted.\n        // This used to consume all gas in old EVM versions, but not anymore.\n        // It is often a good idea to use 'require' to check if functions are called correctly.\n        // As a second argument, you can also provide an explanation about what went wrong.\n            require(msg.sender == owner, \"Caller is not owner\");\n        _;\n    }\n\n    /**\n     * @dev Set contract deployer as owner\n     */\n    constructor() {\n        owner = msg.sender; // 'msg.sender' is sender of current call, contract deployer for a constructor\n        emit OwnerSet(address(0), owner);\n    }\n\n    /**\n     * @dev Change owner\n     * @param newOwner address of new owner\n     */\n    function changeOwner(address newOwner) public isOwner {\n        emit OwnerSet(owner, newOwner);\n        owner = newOwner;\n    }\n\n    /**\n     * @dev Return owner address \n     * @return address of owner\n     */\n    function getOwner() external view returns (address) {\n        return owner;\n    }\n}\n</code></pre>"},{"location":"notes-md/blockchain/contract/#understanding-a-smart-contract_1","title":"Understanding a smart contract","text":"<ul> <li>First line specifies the license : in this case GPL-3.0</li> <li><code>pragma</code> is used to convey some message to compiler, like <code>once</code> in C++ to tell it to include this file onces. In this case, it is used to specify the range of versions of solidity compiler on which our code will work</li> <li>name of the contract : <code>Owner</code></li> <li>contract variables</li> <li>name : <code>owner</code></li> <li>type : <code>address</code></li> <li>visibility : <code>private</code></li> <li><code>event</code></li> <li>name of event : <code>OwnerSet</code></li> <li>event for EVM logging</li> <li><code>modifier</code> :</li> <li>name : <code>isOwner</code></li> <li>attached to : <code>changeOwner</code> function</li> <li>will allow the <code>changeOwner</code> function to execute only when <code>msg.sender == owner</code></li> <li>else will print <code>Caller is not owner</code></li> <li>The function body is inserted where the special symbol \"_;\" appears in the definition of a modifier. So if condition of modifier is satisfied while calling this function, the function is executed and otherwise, an exception is thrown.</li> <li><code>constructor()</code> :</li> <li><code>msg.sender</code> is sender of current call, contract deployer for a constructor    </li> <li><code>emit OwnerSet(address(0), owner);</code> : emit the even <code>OwnerSet();</code></li> <li>functions :</li> <li><code>changeOwner</code> :<ul> <li>arguments : <code>address newOwner</code></li> <li>visibility : <code>public</code></li> <li>modifier attached : <code>isOwner</code></li> <li>this event <code>OwnerSet</code> will trigger only after the modifier <code>isOwner</code> condition is satisfied</li> </ul> </li> <li><code>getOwner</code>:<ul> <li>function is <code>external</code>, means anyone from outside the contract can call it</li> <li><code>view</code> is specified to tell the compiler that it will not modify any data</li> <li>it <code>returns(address)</code></li> </ul> </li> </ul>"},{"location":"notes-md/blockchain/custom-erc20/","title":"Custom ERC20 token","text":"<pre><code>pragma solidity ^0.4.19;\n\ncontract ERC20Basic {\n\n    string public constant name = \"ERC20Basic\";\n    string public constant symbol = \"BSC\";\n    uint8 public constant decimals = 18;  \n\n\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n    event Transfer(address indexed from, address indexed to, uint tokens);\n\n\n    mapping(address =&gt; uint256) balances;\n\n    mapping(address =&gt; mapping (address =&gt; uint256)) allowed;\n\n    uint256 totalSupply_;\n\n    using SafeMath for uint256;\n\n\n   constructor(uint256 total) public {  \n        totalSupply_ = total;\n        balances[msg.sender] = totalSupply_;\n    }  \n\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    function balanceOf(address tokenOwner) public view returns (uint) {\n        return balances[tokenOwner];\n    }\n\n    function transfer(address receiver, uint numTokens) public returns (bool) {\n        require(numTokens &lt;= balances[msg.sender]);\n        balances[msg.sender] = balances[msg.sender].sub(numTokens);\n        balances[receiver] = balances[receiver].add(numTokens);\n        emit Transfer(msg.sender, receiver, numTokens);\n        return true;\n    }\n\n    function approve(address delegate, uint numTokens) public returns (bool) {\n        allowed[msg.sender][delegate] = numTokens;\n        Approval(msg.sender, delegate, numTokens);\n        return true;\n    }\n\n    function allowance(address owner, address delegate) public view returns (uint) {\n        return allowed[owner][delegate];\n    }\n\n    function transferFrom(address owner, address buyer, uint numTokens) public returns (bool) {\n        require(numTokens &lt;= balances[owner]);    \n        require(numTokens &lt;= allowed[owner][msg.sender]);\n\n        balances[owner] = balances[owner].sub(numTokens);\n        allowed[owner][msg.sender] = allowed[owner][msg.sender].sub(numTokens);\n        balances[buyer] = balances[buyer].add(numTokens);\n        Transfer(owner, buyer, numTokens);\n        return true;\n    }\n}\n\nlibrary SafeMath { \n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n      assert(b &lt;= a);\n      return a - b;\n    }\n\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n      uint256 c = a + b;\n      assert(c &gt;= a);\n      return c;\n    }\n}\n</code></pre>"},{"location":"notes-md/blockchain/solidity/","title":"Solidity","text":""},{"location":"notes-md/blockchain/solidity/#solidity-datatypes","title":"Solidity DataTypes","text":""},{"location":"notes-md/blockchain/solidity/#data-types-in-solidity","title":"Data types in Solidity","text":"<p>Solidity is a statically typed language, which means that the type of each variable (state and local) needs to be specified. Solidity provides several elementary types which can be combined to form complex types.</p>"},{"location":"notes-md/blockchain/solidity/#booleans","title":"Booleans","text":"<p><code>bool</code>: The possible values are constants true and false.</p> <p>Operators:</p> <ul> <li><code>!</code> (logical negation)</li> <li><code>&amp;&amp;</code> (logical conjunction, \u201cand\u201d)</li> <li><code>||</code> (logical disjunction, \u201cor\u201d)</li> <li><code>==</code> (equality)</li> <li> <p><code>!=</code>(inequality)</p> <p>The operators || and &amp;&amp; apply the common short-circuiting rules. This means that in the expression <code>f(x) || g(y)</code>, if <code>f(x)</code> evaluates to true, <code>g(y)</code> will not be evaluated even if it may have side-effects.</p> </li> </ul>"},{"location":"notes-md/blockchain/solidity/#integers","title":"Integers","text":"<p><code>int</code> / <code>uint</code>: Signed and unsigned integers of various sizes. Keywords uint8 to <code>uint256</code> in steps of 8 (unsigned of <code>8</code> up to <code>256</code> bits) and int8 to int256. uint and int are aliases for <code>uint256</code> and <code>int256</code>, respectively.</p> <p>Operators:</p> <ul> <li>Comparisons: <code>&lt;=,</code>,<code>&lt;</code>, <code>==</code>, <code>!=</code>, <code>&gt;=</code>, <code>&gt;</code> (evaluate to bool)</li> <li>Bit operators: <code>&amp;</code>, <code>|</code>, <code>^</code> (bitwise exclusive or), <code>~</code> (bitwise negation)</li> <li>Shift operators: &lt;&lt; (left shift), <code>&gt;&gt;</code> (right shift)</li> <li>Arithmetic operators: <code>+</code>, <code>-</code>, unary <code>-</code> (only for signed integers), <code>*</code>, <code>/</code>, <code>%</code> (modulo), <code>**</code> (exponentiation)</li> <li>For an integer type X, you can use <code>type(X).min</code> and <code>type(X).max</code> to access the minimum and maximum value representable by the type.</li> </ul>"},{"location":"notes-md/blockchain/solidity/#address","title":"Address","text":"<p>The address type comes in two flavours, which are largely identical:</p> <ul> <li>address: Holds a 20 byte value (size of an Ethereum address).</li> <li>address payable: Same as address, but with the additional members transfer and send.</li> <li>The idea behind this distinction is that address payable is an address you can send Ether to, while a plain address cannot be sent Ether.</li> </ul> <p>Type conversions:</p> <p>Implicit conversions from address payable to address are allowed, whereas conversions from address to address payable must be explicit via <code>payable(&lt;address&gt;)</code>.</p> <p>Explicit conversions to and from address are allowed for uint160, integer literals, bytes20 and contract types.</p> <p>Only expressions of type address and contract-type can be converted to the type address payable via the explicit conversion payable(...). For contract-type, this conversion is only allowed if the contract can receive Ether, i.e., the contract either has a receive or a payable fallback function. Note that payable(0) is valid and is an exception to this rule.</p>"},{"location":"notes-md/blockchain/solidity/#members-of-addresses","title":"Members of Addresses","text":"<p>balance and transfer It is possible to query the balance of an address using the property balance and to send Ether (in units of wei) to a payable address using the transfer function:</p> <pre><code>address payable x = address(0x123);\naddress myAddress = address(this);\nif (x.balance &lt; 10 &amp;&amp; myAddress.balance &gt;= 10) x.transfer(10);\n</code></pre> <p>The transfer function fails if the balance of the current contract is not large enough or if the Ether transfer is rejected by the receiving account. The transfer function reverts on failure.</p>"},{"location":"notes-md/blockchain/solidity/#enums","title":"Enums","text":"<pre><code>enum ActionChoices { GoLeft, GoRight, GoStraight, SitStill }\n</code></pre>"},{"location":"notes-md/blockchain/solidity/#structs","title":"Structs","text":"<pre><code>struct Campaign {\n        address payable beneficiary;\n        uint fundingGoal;\n        uint numFunders;\n        uint amount;\n        mapping (uint =&gt; Funder) funders;\n    }\n</code></pre>"},{"location":"notes-md/blockchain/solidity/#mapping-types","title":"Mapping Types","text":"<p>Mapping types use the syntax <code>mapping(_KeyType =&gt; _ValueType)</code> and variables of mapping type are declared using the syntax <code>mapping(_KeyType =&gt; _ValueType) _VariableName</code>. The <code>_KeyType</code> can be any built-in value type, <code>bytes</code>, <code>string</code>, or any contract or enum type. Other user-defined or complex types, such as mappings, structs or array types are not allowed. <code>_ValueType</code> can be any type, including mappings, arrays and structs.</p> <pre><code>// SPDX-License-Identifier: GPL-3.0\npragma solidity &gt;=0.4.0 &lt;0.9.0;\n\ncontract MappingExample {\n    mapping(address =&gt; uint) public balances;\n\n    function update(uint newBalance) public {\n        balances[msg.sender] = newBalance;\n    }\n}\n\ncontract MappingUser {\n    function f() public returns (uint) {\n        MappingExample m = new MappingExample();\n        m.update(100);\n        return m.balances(address(this));\n    }\n}\n</code></pre>"},{"location":"notes-md/blockchain/solidity/#solidity-visibility","title":"Solidity Visibility","text":""},{"location":"notes-md/blockchain/solidity/#getters-and-visibility","title":"Getters() and Visibility","text":"<p>Solidity knows two kinds of function calls: internal ones that do not create an actual EVM call (also called a \u201cmessage call\u201d) and external ones that do. Because of that, there are four types of visibility for functions and state variables.</p> <p>Functions have to be specified as being <code>external</code>, <code>public</code>, <code>internal</code> or <code>private</code>. For state variables, <code>external</code> is not possible.</p> <p><code>external</code></p> <p>External functions are part of the contract interface, which means they can be called from other contracts and via transactions. An external function <code>f</code> cannot be called internally (i.e. <code>f()</code> does not work, but <code>this.f()</code> works). External functions are sometimes more efficient when they receive large arrays of data, because the data is not copied from calldata to memory. They can be called only from outside the contract</p> <p><code>public</code>Public functions are part of the contract interface and can be either called internally or via messages. For public state variables, an automatic getter function (see below) is generated.</p> <p><code>internal</code>Those functions and state variables can only be accessed internally (i.e. from within the current contract or contracts deriving from it), without using <code>this</code>.</p> <p><code>private</code>Private functions and state variables are only visible for the contract they are defined in and not in derived contracts.</p> <p><code>pure</code>Solidity also contains pure functions, which means you're not even accessing any data in the app.</p> <p><code>view</code>: It's only viewing the data but not modifying it:</p>"},{"location":"notes-md/cloud/google-cloud-platform/architecting-with-gce/","title":"Cloud Networking","text":"<p>VPC : Virtual Private Cloud</p> <p>In Google Cloud each virtual machine can have two IP addresses assigned. </p> <ul> <li>One of them is an internal IP address which is going to be assigned via DHCP internally. Every VM that starts up and any service that depends on virtual machines gets an internal IP address. An example of such services are App Engine and Google Kubernetes Engine which are explored in other courses. When you create a VM in Google Cloud, it's symbolic name is registered with an internal DNS service that translates the name to an internal IP address. The DNS is scoped to the network, so it can translate web URLs and VM names of hosts in the same network. But it can't translate host names of from VMs in a different network. </li> <li>The other IP address is the external IP address. But this one's optional. You can assign an external IP address if your device or machine is externally facing. That external IP address can be assigned from a pool making it ephemeral or it can be assigned from a reserved external IP address making it static. If you reserve a static external IP address and do not assign it to a resource such as a VM instance or a forwarding rule, you are charged at a higher rate than for static and ephemeral external IP addresses that are in use. You can use your own publicly routable IP address prefixes as Google Cloud external IP addresses and advertise them on the Internet. In order to be eligible, you must own and bring a slash 24 block or large</li> </ul> <p>Every network has:</p> <ul> <li>Routes that let instances in a network send traffic directly to each other</li> <li>A default route that directs packets to destinations that are outside the network</li> </ul>"},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/","title":"GCP Core Infrastructure","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#why-core-infrastructure","title":"Why Core Infrastructure","text":"<ul> <li>Identify the purpose and value of Google Cloud</li> <li>Choose best deployment environment</li> <li>Choose storage options</li> <li>Interact and experience google cloud</li> </ul>"},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#gcp-service-categories","title":"GCP service categories","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#cloud-advantages","title":"Cloud advantages","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#evolution-of-cloud","title":"Evolution of cloud","text":"<p>solution offerings</p>"},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#infrastructure-as-service","title":"Infrastructure as service","text":"<ul> <li>IaaS : Pay for what they allocate</li> <li>PaaS : Pay for what they use</li> </ul>"},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#cloud-structure","title":"Cloud structure","text":"<p>Google's nine products have more than one billion users each. Google designs and builds its own data centers, which incorporate multiple layers of physical security protections. Access to these datacenters is limited to only a very small number of Google employees. Security features include encryption using centrally managed keys and hardware encryption in hard drives and SSDs. The GFE additionally applies protections against denial-of-service attacks. Google also has multi-tier, multi-layer DoS protections that further reduce the risk of any DoS impact on a service running behind the GFE.</p>"},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#cloud-cost","title":"Cloud cost","text":"<p>Specifically, when you run an instance for more than 25% of a month, Compute Engine automatically gives you a discount for every incremental minute you use for that instance. Custom virtual machine types allow Compute Engine virtual machines to be fine tuned with optimal amounts of vCPU and memory for the applications so that you can tailor your pricing for your workloads.</p>"},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#project-structure-gcp","title":"Project structure GCP","text":"<p>resource structure</p> <p></p> <ul> <li>folder can contain sub folders</li> <li>policies are applied at project, folder and org node level</li> <li>some can be applied at resource level</li> <li>policies are inherited downwards</li> </ul>"},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#projects-in-gcp","title":"Projects in GCP","text":"<p>Attributes of project</p> <ul> <li>project_id</li> <li>project_name</li> <li>project_number</li> </ul>"},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#info-about-projects","title":"Info about projects","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#resource-manager","title":"Resource manager","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#organization-nodes","title":"Organization nodes","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#top-level-of-org","title":"Top level of org","text":"<p>who can do what and on which part</p> <ul> <li>who can be :</li> <li>a google account</li> <li>a google group</li> <li>service account</li> <li>cloud identity domain</li> <li>can do what</li> <li>defined by a role</li> </ul>"},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#cloud-iam","title":"Cloud IAM","text":"<p>Overview</p> <ul> <li>Who</li> <li>Can do what</li> <li>On which resource</li> </ul> <p>IAM objects</p> <ul> <li>organizations</li> <li>folders</li> <li>projects</li> <li>resources</li> <li>roles</li> <li>members</li> </ul> <p></p> <p></p> <p></p> <p></p> <p></p> <p></p>"},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#types-of-iam","title":"Types of IAM","text":"<p>Basic role</p> <ul> <li>Owner</li> <li>Editor</li> <li>Viewer</li> <li>Billing Admin</li> </ul> <p>Can be too general when working with sensitive data</p>"},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#basic-iam-role","title":"Basic IAM role","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#pre-define-iam-role","title":"Pre-define IAM role","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#custom-iam-role","title":"Custom IAM role","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#custom-iam-role_1","title":"Custom IAM role","text":"<ul> <li>service accounts do need to be managed</li> </ul>"},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#service-account","title":"Service account","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#cloud-identity","title":"Cloud identity","text":"<ul> <li>more on cloud identity</li> </ul>"},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#ways-to-access-gcp","title":"Ways to access gcp","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#quiz","title":"Quiz","text":"<p>Q1 : When would you choose to have an organization node? (Select two)</p> <ul> <li>When you want to create folders</li> <li>When you want to centrally apply organization-wide policies</li> </ul> <p>Q2 : Which statement best describes how Google Cloud resources are associated within the resource hierarchy?</p> <ul> <li>Google Cloud resources are not associated with the resource hierarchy.</li> </ul> <p>Q3 : Consider a single hierarchy of Google Cloud resources. Which of these situations is possible? (Choose 3 responses.)</p> <ul> <li>There is no organization node, and there are no folders.</li> <li>There is an organization node, and there is at least one folder.</li> </ul> <p>Your company has two Google Cloud projects and you want them to share policies. What is the least error-prone way to set this up?</p> <ul> <li>Define the new shared policy in the organization node.</li> </ul> <p>Q5 : What is the difference between Identity and Access Management (IAM) basic roles and IAM predefined roles?</p> <ul> <li>Basic roles can only be granted to single users. Predefined roles can be associated with a group.</li> </ul> <p>Q6 : Select the option that displays IAM roles from general to specific.</p> <ul> <li>Predefined roles, custom roles, basic roles</li> </ul> <p>Q7 : How does the resource hierarchy control how IAM policies are inherited?</p> <ul> <li>IAM policies are only implemented at the project level; they cannot be amended by lower levels of the resource hierarchy.</li> </ul> <p>Q8 : Which way of accessing Google Cloud lets you control services through the code you write?</p> <ul> <li>APIs</li> </ul>"},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#type-of-vpc","title":"Type of VPC","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#virtual-private-cloud-network-vpc","title":"Virtual Private Cloud Network ( VPC )","text":"<p>A virtual private cloud (VPC) is a secure, isolated private cloud hosted within a public cloud. VPC customers can run code, store data, host websites, and do anything else they could do in an ordinary private cloud, but the private cloud is hosted remotely by a public cloud provider. (Not all private clouds are hosted in this fashion.) VPC's combine the scalability and convenience of public cloud computing with the data isolation of private cloud computing.</p> <p>You can</p> <ul> <li>segment your networks</li> <li>use firewall rules to restrict access to instances</li> <li>create static routes to forward traffic to specific destinations.</li> </ul> <p></p>"},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#compute-engine","title":"Compute Engine","text":"<ul> <li>Compute Engine lets you create and run virtual machines on Google infrastructure.</li> </ul> <p>range of compute services</p> <p>virtual machine VM lifecycle</p>"},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#what-are-virtual-machine","title":"What are virtual machine","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#vm-and-disk-relation","title":"VM and disk relation","text":"<p>A preemptible VM is different from an ordinary Compute Engine VM in only one respect. Compute Engine has permission to terminate a job if its resources are needed elsewhere. Although savings are possible with preemptible VMs, you need to ensure that your job can be stopped and restarted. In terms of storage, Compute Engine doesn't require a particular option or machine type to get high-throughput between processing and persistent disks.</p> <p>Let's say, you have a workload that doesn't require a human to sit and wait for it to finish, such as a batch job analyzing a large dataset. You can save money, in some cases up to 90 percent by choosing preemptible VMs to run the job</p>"},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#autoscale-vs-manual-scale","title":"Autoscale vs manual scale","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#vm-upper-limit","title":"VM upper limit","text":"<p>general purpose virtual machone</p> <p>compute optimized virtual machone</p> <p>memory optimized virtual machone</p> <p>preemptible virtual machine</p> <p>spot virtual machine</p>"},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#app-engine","title":"App Engine","text":"<ul> <li>The App Engine platform manages the hardware and networking infrastructure required to run your code. To deploy an application on App Engine, you just hand App Engine your code and the App Engine service takes care of the rest.</li> <li>App Engine provides you with a built-in services that many web applications need. App engine will scale your application automatically in response to the amount of traffic it receives. App Engine is especially suited for applications where the workload is highly variable or unpredictable like web applications and mobile backend.</li> <li>App Engine offers two environments: standard and flexible.</li> </ul> <ul> <li>Standard is the simpler. It offers a simpler deployment experience than the Flexible environment and fine-grained auto-scale. Low utilisation applications might be able to run at no charge. Google provides App Engine SDK's in several languages, so that you can test your application locally before you upload it to the real App Engine service. The SDK's also provide simple commands for deployment.</li> <li>In App Engine SE, you use a runtime provided by Google. App Engine Standard Environment provides runtimes for specific versions of Java, Python, PHP and Go. The runtimes also include libraries that support App Engine APIs. The Standard Environment also enforces restrictions on your code by making it run in a so-called \"Sandbox.\" That's a software construct that's independent of the hardware, operating system, or physical location of the server it runs on.</li> </ul> <ul> <li>App Engine flexible environment lets you specify the container your App Engine runs in. App Engine manages these Compute Engine machines for you. They're health checked, healed as necessary, and you get to choose which geographical region they run in, and critical backward-compatible updates to their operating systems are automatically applied. All this so that you can just focus on your code.</li> </ul>"},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#routing-tables","title":"Routing tables","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#firewall-in-gcp","title":"Firewall in GCP","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#dns","title":"DNS","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#googles-dns","title":"Google's DNS","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#managed-dns","title":"Managed DNS","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#cloud-cdn","title":"Cloud CDN","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#type-of-networking","title":"type of networking","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#ipsec-vpn-protocol","title":"IPsec VPN protocol","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#direct-peering","title":"Direct peering","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#carrier-peering","title":"Carrier peering","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#dedicated-interconnect","title":"Dedicated interconnect","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#partner-interconnect","title":"Partner interconnect","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#blob-in-storage-bucket","title":"Blob in storage bucket","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#gcp-cloud-storage-bucket","title":"GCP cloud storage bucket","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#why-use-cloud-storage","title":"Why use cloud storage","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#blob","title":"Blob","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#object-version-in-storage-bucket","title":"Object version in storage bucket","text":"<ul> <li>Object versioning</li> </ul>"},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#scope-and-permisson-object-storage","title":"Scope and permisson object storage","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#type-of-storage-options","title":"Type of storage options","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#type-of-storage-options_1","title":"Type of storage options","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#storage-options","title":"Storage options","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#database-storage","title":"Database &amp; Storage :","text":"<ul> <li>Cloud Bigtable uses the interface of the open source database Apache HBase.</li> <li>Cloud Dataproc offers the open source big data environment Hadoop, as a managed service.</li> <li>Cloud storage allows you to save data and files.</li> <li>Cloud SQL is a fully managed service that makes it easy to set up, manage, and administer relational databases: PostgreSQL, MySQL, and SQL Server.</li> <li>Cloud Spanner is a NewSQL database developed by Google.</li> <li>Cloud Datastore is a highly scalable, fully managed NoSQL database service.</li> </ul>"},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#compute","title":"Compute :","text":"<ul> <li>Google Stackdriver lets customers monitor workload across multiple cloud providers.</li> <li>Compute Engine lets you create and run virtual machines on Google infrastructure.</li> <li>Kubernetes Engine secure and managed Kubernetes service.</li> <li>App Engine fully managed application runtime. Standard &amp; Flexible.</li> <li>Cloud Endpoint Develop, deploy, protect, and monitor your APIs with Cloud Endpoints.</li> <li>Cloud Functions Scalable pay-as-you-go (FaaS) to run your code with zero server management.</li> </ul>"},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#code-monitoring","title":"Code &amp; Monitoring","text":"<ul> <li>Cloud Source Repository Fully featured Git Repo hosted on GCP</li> </ul>"},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#google-cloud-big-data-platform","title":"Google Cloud Big Data Platform","text":"<ul> <li>Cloud Dataflow fully managed streaming analytics service that minimizes latency, processing time, and cost through autoscaling and batch processing.</li> <li>Big Query serverless, highly scalable, and cost-effective data warehouse designed to help you turn big data into informed business decisions.</li> <li>Cloud Pub/Sub Messaging and ingestion for event-driven systems and streaming analytics.</li> <li>Cloud DataLab easily explore, visualize, analyze, and transform data using familiar languages, such as Python and SQL</li> </ul>"},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#google-cloud-machine-learning-platform","title":"Google Cloud Machine Learning Platform","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#cloud-sql","title":"Cloud SQL","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#more-info-on-cloud-sql","title":"More info on cloud SQL","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#intro-to-cloud-spanner","title":"Intro to cloud spanner","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#intro-to-firestore","title":"Intro to firestore","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#intro-to-bigtable","title":"Intro to bigtable","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#type-database-to-choose","title":"Type database to choose","text":"<p>database offerings</p> <p>how to choose the right database</p>"},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#google-cloud-storage","title":"Google Cloud Storage","text":"<p>What's object storage? It's not the same as file storage, in which you manage your data as a hierarchy of folders. It's not the same as block storage, in which your operating system manages your data as chunks of disk. Instead, object storage stores arbitrary bunch of bytes with a unique key. often in the form of URLs which means object storage interacts nicely with Web technologies. It's a fully managed scalable service.</p> <p>Use case</p> <ul> <li>serving website content</li> <li>storing data for archival and disaster recovery</li> <li>distributing large data objects to your end users via Direct Download.</li> </ul> <p>It is comprised of buckets you create and configure and use to hold your storage objects. The storage objects are immutable, you create new versions every time you update. Data in-transit is encrypted using HTTPS.</p>"},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#cloud-storage-classes","title":"Cloud Storage classes","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#cloud-bigtable","title":"Cloud Bigtable","text":"<p>Cloud Bigtable is Google's NoSQL, big data database service.</p> <p>Your databases in Bigtable are sparsely populated tables that can scale to billions of rows and thousands of columns allowing you to store petabytes of data. GCP fully manages the surface. It's ideal for data that has a single lookup key.</p> <p>Some applications developers think of Bigtable as a persistent hash table. Cloud Bigtable is ideal for storing large amounts of data with very low latency. It supports high throughput, both read and write,</p> <p>Use cases :</p> <ul> <li>Internet of Things</li> <li>user analytics</li> <li>financial data analysis.</li> </ul> <p></p>"},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#cloud-sql-cloud-spanner","title":"Cloud SQL &amp; Cloud Spanner","text":"<ul> <li>Cloud SQL offers both MySQL and PostgreSQL database engines as a fully managed service, that are capable of handling terabytes of storage.</li> <li>Cloud SQL provides several replica services like read, failover, and external replicas. It can replicate data between multiple zones with automatic failover. It also helps you backup your data with either on-demand or scheduled backups. It can also scale both vertically by changing the machine type, and horizontally via read replicas.</li> <li>Cloud SQL instances include network firewalls, and customer data is encrypted when on Google's internal networks, and when stored in database tables, temporary files, and backups.</li> <li>They are accessible by other GCP services and even external services. You can authorise Compute Engine instances for access Cloud SQL instances and configure the Cloud SQL instance to be in the same zone as your virtual machine.</li> <li>Cloud SQL also supports other applications and tools that you might be used to, like SQL WorkBench, Toad, and other external applications using standard MySQL drivers.</li> </ul> <p>If Cloud SQL does not fit your requirements because you need horizontal scalability, consider using *Cloud Spanner*. It offers transactional consistency at a global scale, schema, SQL, and automatic synchronous replication for high availability. And, it can provide petabytes of capacity. Consider using Cloud Spanner if you have outgrown any relational database, or sharding your databases for throughput high performance, need transactional consistency, global data and strong consistency, or just want to consolidate your database.</p> <ul> <li>Use cases include :</li> <li>financial applications</li> <li>inventory applications.</li> </ul>"},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#cloud-datastore","title":"Cloud DataStore","text":"<p>Cloud Datastore highly scalable NoSQL database. One of its main use cases is to store structured data from App Engine apps. It is a from a fully-managed service, Cloud Datastore automatically handles sharding and replication, providing you with a highly available and durable database that scales automatically to handle load. Unlike Cloud Bigtable, it also offers transactions that affect multiple database rows, and it lets you do SQL-like queries.</p>"},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#what-is-a-container","title":"What is a container","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#what-is-kuberentes","title":"What is kuberentes","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#kubernetes-cluster","title":"Kubernetes cluster","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#google-managed-kubernetes-engine","title":"Google managed Kubernetes Engine","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#hybrid-and-multi-cloud","title":"Hybrid and multi-cloud","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#anthos","title":"Anthos","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#gke","title":"GKE","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#gke-autopilot","title":"GKE autopilot","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#microservice-in-gcp","title":"microservice in gCP","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#why-container","title":"Why container","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#standard-env-vs-flexible-env","title":"Standard env vs flexible env","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#cloud-endpoints","title":"cloud endpoints","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#apigee-engine","title":"APIgee Engine","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#cloud-run","title":"Cloud RUN","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#simple-deployment-model","title":"Simple deployment model","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#cloud-functions","title":"Cloud functions","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#intro-to-terraform","title":"Intro to terraform","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#what-is-sre","title":"What is SRE","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#monitoring","title":"Monitoring","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#sre-pyramid","title":"SRE pyramid","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#sre-job","title":"SRE job","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#latency","title":"Latency","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#latency_1","title":"Latency","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#traffic","title":"Traffic","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#traffic-part2","title":"Traffic part2","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#saturation","title":"Saturation","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#saturation-2","title":"Saturation 2","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#handling-error-in-cloud","title":"Handling error in cloud","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#handling-error-in-cloud-2","title":"Handling error in cloud 2","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#sli-vs-slo-vs-sla","title":"SLI vs SLO vs SLA","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#sli","title":"SLI","text":"<p>Number of good events / count of all valid events</p>"},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#slo","title":"SLO","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#slo_1","title":"SLO","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#sla","title":"SLA","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#improve-service-reliability","title":"Improve service reliability","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#slo_2","title":"SLO","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#ops-team-functions","title":"OPS team functions","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#who-to-maintain-ops","title":"Who to maintain OPS","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#how-to-maintain-ops","title":"How to maintain OPS","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#cloud-monitoring","title":"Cloud monitoring","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#cloud-logging","title":"Cloud logging","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#cloud-logging_1","title":"Cloud logging","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#cloud-logging_2","title":"Cloud logging","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#type-of-cloud-logging","title":"Type of Cloud logging","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#error-reporting","title":"Error reporting","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#debugger","title":"Debugger","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#cloud-trace","title":"Cloud trace","text":""},{"location":"notes-md/cloud/google-cloud-platform/gcp-core-infra/#cloud-profiler","title":"Cloud profiler","text":""},{"location":"notes-md/golang/","title":"Golang","text":"<p>If you want to know more about Golang, pelase to go the Golang section on my notes page here</p> <p>The hot new server-side high-performance language.</p> <p>For those of you who don\u2019t know what Golang is, here is a quick and short intro :</p> <ul> <li>Go is a statically typed, compiled programming language designed at Google by Robert Griesemer, Rob Pike, and Ken Thompson.</li> <li>Go is syntactically similar to C.</li> <li>It has memory safety ( uses a garbage collector ), structural typing, and CSP [communicating sequential processes]-style concurrency.</li> </ul> <p>In simple words, Golang is like Java in terms of processing but written like C</p>"},{"location":"notes-md/golang/#why-golang","title":"Why Golang?","text":"<p>We live in a world where Java handles the majority of critical processes, but the thing is, java is old getting old, in the sense that writing concurrent programs is difficult, as more and more servers are UNIX based, shell scripts to manage servers is limit (that\u2019s where python came in ), poorly implemented generics and no support for unsigned data-types, has hidden relationship between code and hardware. This is where Golang comes in.</p>"},{"location":"notes-md/golang/#why-i-love-golang","title":"Why I love Golang","text":"<ul> <li>Performance: Golang is compiled to machine code by its compiler, it\u2019s fast, hence faster than java.</li> <li>Modern: Just like any other modern programming language, Golang\u2019s syntax is relatively easy to understand and write code. It keeps one\u2019s understanding of how memory is used will abstracting out a lot of complex features.</li> <li>It\u2019s static and dynamic: the concept is simple, if the type isn\u2019t defined it will dynamically adjust, else follow the rules.</li> <li>Safe: Golang comes with garbage collector which is open-source (Golang itself is open-source), turns out to be more reliable, hence no need to worry but memory leaks as the garbage collector is smart enough to free unused memory, though you can do it explicitly but come on.</li> <li>Concurrency: Golang is known for its great concurrency, but why believe me, here is the explanation simple explanation :</li> </ul> <p>Golang uses something called Go-routines, simply they are Go function. Golang implements its own scheduler that allows many Go-routines to run on the same OS thread. JVM on the other hand uses operating system threads, it relies on the operating system kernel to schedule them, which is a much slower and memory consuming process.</p> <p>You can read more about this topic in detail here :</p> <ul> <li>Why you can have millions of Goroutines but only thousands of Java Threads</li> <li>Achieving concurrency in Go</li> </ul>"},{"location":"notes-md/golang/#major-other-advantages","title":"Major Other Advantages :","text":"<ul> <li>Cross-compiling: The Go compiler allows you to generate executable binaries for different operating systems with simple commands, and because it is a simple executable file, this makes deploying Go applications to production servers or local machines a breeze \u2014 all it requires is moving the final executable file. No hassle that comes with JVM.</li> </ul>"},{"location":"notes-md/golang/#some-concerns-regarding-go","title":"Some concerns regarding Go","text":"<p>Well it\u2019s not all perfect in Go\u2019s world</p> <p>Now, to be completely honest, I looked into a ton of resources to find drawbacks in go but could find any reasonable ones (except for package manager). Consider reading these comments:</p> <p><code>While having interfaces is great, structs implement interfaces implicitly, not explicitly. This is stated as a strength of Go, but we found that it\u2019s difficult to tell from looking at a struct whether or not it implements an interface. You can only really know by attempting to compile the program. This is fine if the program is small, but not if it\u2019s a medium to large size.</code></p> <p>One of Go\u2019s main advantages is also one of its weaknesses. Go may be an easy language to pick up, but that brings with it a lack of versatility. Some of the hottest languages on the market pride themselves on their complexity.</p> <p>Languages like Swift and Haskell may be more difficult to learn, but they manage to find their fans by packing in a wealth of smart abstractions that allow coders to achieve complex and clever results with less.</p> <p>Well, the stated disadvantages of Golang are more opinion-based rather than actual setbacks that cause problems.</p> <p>The Disadvantages are more like design drawbacks which people complain about but Golang says its the part of the new programming language design paradigm.</p>"},{"location":"notes-md/golang/#lack-of-package-manager","title":"Lack of Package Manager","text":"<ul> <li>Golang doesn\u2019t have a package manager (as of June 2020). Every single modern programming language has a package manager, not even modern languages, older than Golang like Python and JavaScript have a package manager, even Rust, a systems programming language has one. </li> </ul> <p>It\u2019s not that you completely cannot use external packages, yes you can, but you have to configure them the old fashion, adding them to the path and explicitly defining, like C++ which is not cool.</p> <p>Nonetheless, Golang is an amazing programming language. Golang developers are among the highest-paid developer in the industry, it\u2019s also becoming an industry favorite language when it comes to doing real-time data analytics and data science work, deploying production-ready ML models, Yes, you heard (or read it) write. It\u2019s best-suited use it to write scalable, high-performance back-end that can you heavy data lifting.</p> <p>I hope you like this article !</p>"},{"location":"notes-md/golang/competitive-programming-in-go/","title":"Competitive Programming in Go","text":""},{"location":"notes-md/golang/competitive-programming-in-go/#things-to-refer","title":"Things to refer","text":""},{"location":"notes-md/golang/competitive-programming-in-go/#minmax-int-and-uint","title":"Min/Max Int and Uint","text":"<pre><code>const MaxUint = ^uint(0)\nconst MinUint = 0\n\nconst MaxInt = int(^uint(0) &gt;&gt; 1)\nconst MinInt = -MaxInt - 1\n</code></pre>"},{"location":"notes-md/golang/competitive-programming-in-go/#2d-vector-inputgo","title":"2d-vector-input.go","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n)\n\nfunc main() {\n\n    var cols, rows = 0, 0\n    fmt.Print(\"Enter the number of cols : \")\n    _, _ = fmt.Scan(&amp;cols)\n    fmt.Print(\"Enter the number of rows : \")\n    _, _ = fmt.Scan(&amp;rows)\n\n    var twodslices = make([][]int, rows)\n    var i int\n    for i = range twodslices {\n        twodslices[i] = make([]int, cols)\n    }\n\n    for i := 0; i &lt; rows; i++ {\n        for j:=0; j&lt;cols; j++ {\n            fmt.Scan(&amp;twodslices[i][j])\n        }\n    }\n    fmt.Println(twodslices)\n}\n</code></pre>"},{"location":"notes-md/golang/competitive-programming-in-go/#custom-vector-inputgo","title":"custom-vector-input.go","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n)\n\nfunc main() {\n    numberOfStrings := 0\n    var vector []string\n    _, _ = fmt.Scanln(&amp;numberOfStrings)\n\n    {\n        var number string\n        for i := 0; i &lt; numberOfStrings; i++ {\n            _, _ = fmt.Scanln(&amp;number)\n            vector = append(vector, number)\n        }\n    }\n\n}\n</code></pre>"},{"location":"notes-md/golang/competitive-programming-in-go/#integer-inputgo","title":"integer-input.go","text":"<pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    var number int32\n    _, _ = fmt.Scanf(\"%d\", &amp;number)\n    fmt.Println(number)\n}\n</code></pre>"},{"location":"notes-md/golang/competitive-programming-in-go/#map-slicego","title":"map-slice.go","text":"<pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n\n    var elements = make([]map[string]string,1)\n    elements[0] = map[string]string {\n        \"uday\" : \"uday\",\n    }\n\n    fmt.Println(elements[0][\"uday\"])\n\n\n}\n</code></pre>"},{"location":"notes-md/golang/competitive-programming-in-go/#string-inputgo","title":"string-input.go","text":"<pre><code>package main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"os\"\n)\n\nfunc main() {\n\n    fmt.Print(\"Enter your full name : \")\n    myString, _ := bufio.NewReader(os.Stdin).ReadString('\\n')\n    fmt.Print(\"myString : \", myString)\n\n}\n</code></pre>"},{"location":"notes-md/golang/competitive-programming-in-go/#vector-input-integergo","title":"vector-input-integer.go","text":"<pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n\n    var number int\n    _, _ = fmt.Scanln(&amp;number)\n    var vector = make([]int, number)\n    for i := 0; i &lt; number; i++ {\n        _, _ = fmt.Scan(&amp;vector[i])\n    }\n    fmt.Println(vector)\n}\n</code></pre>"},{"location":"notes-md/golang/go-syntax/","title":"Go Things","text":""},{"location":"notes-md/golang/go-syntax/#compilation","title":"Compilation","text":"<ul> <li>to generate object file go :</li> </ul> <pre><code>$ go tool compile main.go\n</code></pre> <ul> <li>to generate assmebly :</li> </ul> <pre><code>$ go tool compile -S main.go\n</code></pre>"},{"location":"notes-md/golang/go-syntax/#named-return","title":"Named return","text":"<pre><code>package main\n\nimport \"fmt\"\n\nfunc add(x, y int) (p int) {\n    p = x + y\n    // Notice you dont have to use := to initialise p\n    // because it's already declared in the return\n    return\n}\n\nfunc main() {\n    fmt.Println(add(3, 4))\n}\n</code></pre>"},{"location":"notes-md/golang/go-syntax/#data-types","title":"Data Types","text":"<p>byte : alias for uint8 rune : alias for int32</p> <pre><code>uint     unsigned, either 32 or 64 bits\nint      signed, either 32 or 64 bits\nuintptr  unsigned integer large enough to store the uninterpreted bits of a pointer value\n</code></pre>"},{"location":"notes-md/golang/go-syntax/#if-short-hand","title":"If Short Hand","text":"<pre><code>func funcPow( x,n,limit float64 ) float64 {\n    if v:= math.Pow(x,n);\n    v &lt; limit {\n        return v\n    }\n    return limit\n}\n</code></pre>"},{"location":"notes-md/golang/go-syntax/#defer","title":"Defer","text":"<pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    defer fmt.Println(\"world\")\n    fmt.Println(\"hello\")\n}\n</code></pre> <p>Defer : A defer statement defers the execution of a function until the surrounding function returns. The deferred call's arguments are evaluated immediately, but the function call is not executed until the surrounding function returns.</p>"},{"location":"notes-md/golang/go-syntax/#sprint","title":"Sprint","text":"<pre><code>func funcSqrt(x float64) string {\n    if x &lt; 0 {\n        return funcSqrt(-x) + \"i\"\n    }\n    return fmt.Sprint(math.Sqrt(x))\n}\n</code></pre>"},{"location":"notes-md/golang/go-syntax/#switch","title":"Switch","text":"<pre><code>func main() {\n  fmt.Print(\"Go runs on \")\n  switch os := runtime.GOOS; os {\n  case \"darwin\":\n      fmt.Println(\"OS X.\")\n  case \"linux\":\n      fmt.Println(\"Linux.\")\n  default:\n      // freebsd, openbsd,\n      // plan9, windows...\n      fmt.Printf(\"%s.\\n\", os)\n  }\n}\n</code></pre>"},{"location":"notes-md/golang/go-syntax/#switch-operations","title":"Switch Operations","text":"<pre><code>func main() {\n  fmt.Println(\"When's Saturday?\")\n  today := time.Now().Weekday()\n  fmt.Print(time.Saturday,\"\\n\",today,\"\\n\")\n  switch time.Saturday {\n  case today + 0:\n      fmt.Println(\"Today.\")\n  case today + 1:\n      fmt.Println(\"Tomorrow.\")\n  case today + 2:\n      fmt.Println(\"In two days.\")\n  default:\n      fmt.Println(\"Too far away.\")\n  }\n}\n</code></pre>"},{"location":"notes-md/golang/go-syntax/#tagless-switch","title":"Tagless switch","text":"<pre><code>switch {\ncase t.Hour() &lt; 12:\n  fmt.Println(\"Good morning!\")\ncase t.Hour() &lt; 17:\n  fmt.Println(\"Good afternoon.\")\ndefault:\n  fmt.Println(\"Good evening.\")\n}\n</code></pre>"},{"location":"notes-md/golang/go-syntax/#function-closure","title":"Function Closure","text":"<p>Go functions may be closures. A closure is a function value that references variables from outside its body. The function may access and assign to the referenced variables; in this sense the function is \"bound\" to the variables. hence the function becomes static in some sense and its lifetime is that of the variable it gets binded to. also the internal variable of the func also lives as long as the binded variable</p> <pre><code>package main\n\nimport \"fmt\"\n\nfunc adder() func(int) int {\n    sum := 0\n    return func(x int) int {\n        sum += x\n        return sum\n    }\n}\n\nfunc main() {\n    pos, neg := adder(), adder()\n    for i := 0; i &lt; 10; i++ {\n        fmt.Println(\n            pos(i),\n            neg(-2*i),\n        )\n    }\n}\n</code></pre>"},{"location":"notes-md/golang/go-syntax/#panic-and-recover","title":"panic and recover","text":"<p>Earlier, we created a function that called the panic function to cause a runtime error. We can handle a runtime panic with the built-in recover function. recover stops the panic and returns the value that was passed to the call to panic . We might be tempted to recover from a panic like this:</p> <pre><code>package main\nimport \"fmt\"\nfunc main() {\n    panic(\"PANIC\")\n    str := recover() // this will never happen\n    fmt.Println(str)\n}\n</code></pre> <p>But the call to recover will never happen in this case, because the call to panic imme\u2010 diately stops execution of the function. Instead, we have to pair it with defer :</p> <pre><code>package main\nimport \"fmt\"\nfunc main() {\n    defer func() {\n        str := recover()\n        fmt.Println(str)\n    }()\n    panic(\"PANIC\")\n}\n</code></pre>"},{"location":"notes-md/golang/go-syntax/#iota-basic-example","title":"Iota basic example","text":"<ul> <li>The iota keyword represents successive integer constants 0, 1, 2,\u2026</li> <li>It resets to 0 whenever the word const appears in the source code,</li> <li>and increments after each const specification.</li> </ul> <pre><code>const (\n    C0 = iota\n    C1 = iota\n    C2 = iota\n)\nfmt.Println(C0, C1, C2) // \"0 1 2\"\n</code></pre> <p>This can be simplified to</p> <pre><code>const (\n    C0 = iota\n    C1\n    C2\n)\n</code></pre> <p>Here we rely on the fact that expressions are implicitly repeated in a paren\u00adthesized const declaration \u2013 this indicates a repetition of the preceding expression and its type.</p> <p>Start from one To start a list of constants at 1 instead of 0, you can use iota in an arithmetic expression.</p> <pre><code>const (\n    C1 = iota + 1\n    C2\n    C3\n)\nfmt.Println(C1, C2, C3) // \"1 2 3\"\n</code></pre> <p>Skip value You can use the blank identifier to skip a value in a list of constants.</p> <pre><code>const (\n    C1 = iota + 1\n    _\n    C3\n    C4\n)\nfmt.Println(C1, C3, C4) // \"1 3 4\"\n</code></pre> <p>Complete enum type with strings [best practice] Here\u2019s an idiomatic way to implement an enumerated type:</p> <ul> <li>create a new integer type,</li> <li>list its values using iota,</li> <li>give the type a String function.</li> <li>type Direction int</li> </ul> <pre><code>const (\n    North Direction = iota\n    East\n    South\n    West\n)\n\nfunc (d Direction) String() string {\n    return [...]string{\"North\", \"East\", \"South\", \"West\"}[d]\n}\n</code></pre> <p>In use:</p> <pre><code>var d Direction = North\nfmt.Print(d)\nswitch d {\ncase North:\n    fmt.Println(\" goes up.\")\ncase South:\n    fmt.Println(\" goes down.\")\ndefault:\n    fmt.Println(\" stays put.\")\n}\n// Output: North goes up.\n</code></pre>"},{"location":"notes-md/golang/golang-garbage-collector-101/","title":"Golang Garbage Collector 101","text":""},{"location":"notes-md/golang/golang-garbage-collector-101/#quick-look-at-garbage-collector","title":"Quick Look at Garbage Collector","text":"<p>A simple program that creates a byte array of 100000000 elements and lets print the memory allocations.</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"runtime\"\n    \"time\"\n)\n\nfunc printStats(mem runtime.MemStats) {\n    runtime.ReadMemStats(&amp;mem)\n    fmt.Println(\"mem.Alloc:\", mem.Alloc)\n    fmt.Println(\"mem.TotalAlloc:\", mem.TotalAlloc)\n    fmt.Println(\"mem.HeapAlloc:\", mem.HeapAlloc)\n    fmt.Println(\"mem.NumGC:\", mem.NumGC)\n    fmt.Println(\"-----\")\n}\n\nfunc main() {\n    var mem runtime.MemStats\n    for i := 0; i &lt; 2; i++ {\n        s := make([]byte, 100000000)\n        if s == nil {\n            fmt.Println(\"Operation failed!\")\n        }\n        printStats(mem)\n    }\n    time.Sleep(time.Second)\n    // adding time.Sleep so that GC finishes it works and print out the output to terminal\n}\n</code></pre>"},{"location":"notes-md/golang/golang-garbage-collector-101/#understanding-the-code","title":"Understanding the code","text":"<p>There is a package in Golang standard library called <code>runtime</code>which contains alot of useful function like :</p> <ul> <li><code>runtime.ReadMemStats(&amp;mem)</code></li> <li><code>runtime.GC()</code></li> </ul> <p>Take a loot at : https://golang.org/pkg/runtime/</p>"},{"location":"notes-md/golang/golang-garbage-collector-101/#func-readmemstats","title":"func ReadMemStats","text":"<pre><code>func ReadMemStats(m *MemStats)\n</code></pre> <p>ReadMemStats populates m with memory allocator statistics.</p> <p>The returned memory allocator statistics are up to date as of the call to ReadMemStats. This is in contrast with a heap profile, which is a snapshot as of the most recently completed garbage collection cycle.</p>"},{"location":"notes-md/golang/golang-garbage-collector-101/#func-gc","title":"func GC \u00b6","text":"<pre><code>func GC()\n</code></pre> <p>GC runs a garbage collection and blocks the caller until the garbage collection is complete. It may also block the entire program.</p> <p>Run this program using the following flag :</p> <pre><code>$ GODEBUG=gctrace=1 go run gc.go\n</code></pre> <p>Output i receive [ don't get scared, will clean up ] :</p> <pre><code>// some other output //\n\ngc 3 @0.029s 5%: 0.020+2.8+0.009 ms clock, 0.081+0.12/2.7/0.19+0.036 ms cpu, 13-&gt;15-&gt;10 MB, 15 MB goal, 4 P\nmem.Alloc: 100092312\nmem.TotalAlloc: 100092312\nmem.HeapAlloc: 100092312\nmem.NumGC: 0\n-----\ngc 1 @0.001s 3%: 0.035+0.20+0.002 ms clock, 0.14+0.041/0.037/0.10+0.010 ms cpu, 95-&gt;95-&gt;0 MB, 96 MB goal, 4 P\nmem.Alloc: 100081456\nmem.TotalAlloc: 100101064\nmem.HeapAlloc: 100081456\nmem.NumGC: 1\n-----\ngc 2 @0.021s 0%: 0.014+0.11+0.003 ms clock, 0.058+0.068/0.050/0.049+0.012 ms cpu, 95-&gt;95-&gt;0 MB, 96 MB goal, 4 P\n</code></pre> <p>Let look at the second run :</p> <pre><code>-----\ngc 1 @0.001s 3%: 0.035+0.20+0.002 ms clock, 0.14+0.041/0.037/0.10+0.010 ms cpu, 95-&gt;95-&gt;0 MB, 96 MB goal, 4 P\nmem.Alloc: 100081456\nmem.TotalAlloc: 100101064\nmem.HeapAlloc: 100081456\nmem.NumGC: 1\n-----\ngc 2 @0.021s 0%: 0.014+0.11+0.003 ms clock, 0.058+0.068/0.050/0.049+0.012 ms cpu, 95-&gt;95-&gt;0 MB, 96 MB goal, 4 P\n</code></pre> <ul> <li>In first line : ignoring the value from CPU profiler, take a look at \"95-&gt;95&gt;0 MB\". The first number is the heap size when the garbage collector is about to run. The second value is the heap size when the garbage collector ends its operation. The last value is the size of the live heap that is 0</li> <li>It allocated 100081456 bytes of memory, more than the 100000000 becuase that is the length of slices we specified, and 100081456 bytes is the capacity of the slices or simply everytime you make a slices, some extra memory is allocated with it in case the size needs to expand in future.</li> <li>Thus before running through the second iteration of the loop, it clears out the memory allocated during the first</li> </ul>"},{"location":"notes-md/golang/learning-go/","title":"Learning Go - 1","text":""},{"location":"notes-md/golang/learning-go/#formatting","title":"Formatting","text":"<ul> <li>use <code>gofmt</code> to format packages</li> </ul>"},{"location":"notes-md/golang/learning-go/#commentary","title":"Commentary","text":"<ul> <li>Go uses c like comments <code>//</code> or <code>/* */</code></li> <li>Every <code>Function/Struct/Variable</code> that you have to export, name it so that first letter is capital</li> </ul>"},{"location":"notes-md/golang/learning-go/#package-name","title":"Package name","text":"<ul> <li>short, concise, evocative</li> <li>the package in <code>src/encoding/base64</code> is imported as <code>\"encoding/base64\"</code> but has name <code>base64</code>, not <code>encoding_base64</code> and not <code>encodingBase64</code>.</li> </ul>"},{"location":"notes-md/golang/learning-go/#getters-setters","title":"Getters &amp; Setters","text":"<ul> <li>Go doesn't provide automatic support for getters and setters. There's nothing wrong with providing getters and setters yourself, and it's often appropriate to do so.</li> <li><code>go   owner := obj.Owner()   if owner != user {       obj.SetOwner(user)   }</code></li> </ul>"},{"location":"notes-md/golang/learning-go/#naming","title":"Naming","text":""},{"location":"notes-md/golang/learning-go/#interface-naming","title":"Interface Naming","text":"<ul> <li>By convention, one-method interfaces are named by the method name plus an -er suffix or similar modification to construct an agent noun: <code>Reader</code>, <code>Writer</code>, <code>Formatter</code>, <code>CloseNotifier</code> etc.</li> </ul>"},{"location":"notes-md/golang/learning-go/#variable-naming","title":"Variable Naming","text":"<ul> <li>Finally, the convention in Go is to use <code>MixedCaps</code> or <code>mixedCaps</code> rather than underscores to write multi word names</li> </ul>"},{"location":"notes-md/golang/learning-go/#indentation","title":"Indentation","text":"<ul> <li>```go   if i &lt; f() {       g()   }</li> </ul> <p>if i &lt; f()  // wrong!   {           // wrong!       g()   }   ```</p>"},{"location":"notes-md/golang/learning-go/#control-structure","title":"Control Structure","text":"<ul> <li>There is no <code>do</code> or <code>while</code> loop, only a slightly generalised <code>for</code>; <code>switch</code> is much better</li> <li>If</li> <li>In Go a simple <code>if</code> looks like this:</li> </ul> <pre><code>if x &gt; 0 {\n    return y\n}\n</code></pre> <ul> <li>Mandatory braces encourage writing simple <code>if</code> statements on multiple lines. It's good style to do so anyway, especially when the body contains a control statement such as a <code>return</code> or <code>break</code>. Since <code>if</code> and <code>switch</code> accept an initialisation statement, it's common to see one used to set up a local variable.</li> </ul> <pre><code>if err := file.Chmod(0664); err != nil {\n    log.Print(err)\n    return err\n}\n</code></pre>"},{"location":"notes-md/golang/learning-go/#re-declaration-and-re-assignment","title":"Re-declaration and Re-assignment","text":"<ul> <li>The last example in the previous section demonstrates a detail of how the <code>:=</code> short declaration form works. The declaration that calls <code>os.Open</code> reads,</li> </ul> <pre><code>f, err := os.Open(name)\n</code></pre> <ul> <li>This statement declares two variables, <code>f</code> and <code>err</code>. A few lines later, the call to <code>f.Stat</code> reads,</li> </ul> <pre><code>d, err := f.Stat()\n</code></pre> <p>\u200b which looks as if it declares <code>d</code> and <code>err</code>. Notice, though, that <code>err</code> appears in both statements. This duplication is legal: <code>err</code> is declared by the first statement, but only re-assigned in the second. This means that the call to <code>f.Stat</code> uses the existing <code>err</code> variable declared above, and just gives it a new value.</p> <ul> <li>In a <code>:=</code> declaration a variable <code>v</code> may appear even if it has already been declared, provided:</li> <li>this declaration is in the same scope as the existing declaration of <code>v</code> (if <code>v</code> is already declared in an outer scope, the declaration will create a new variable \u00a7),</li> <li>the corresponding value in the initialisation is assignable to <code>v</code>, and</li> <li>there is at least one other variable that is created by the declaration</li> </ul>"},{"location":"notes-md/golang/learning-go/#range","title":"Range","text":"<ul> <li>If you're looping over an array, slice, string, or map, or reading from a channel, a <code>range</code> clause can manage the loop.</li> </ul> <pre><code>for key, value := range oldMap {\n    newMap[key] = value\n}\n</code></pre> <ul> <li>If you only need the first item in the range (the key or index), drop the second:</li> </ul> <pre><code>for key := range m {\n    if key.expired() {\n        delete(m, key)\n    }\n}\n</code></pre> <ul> <li>If you only need the second item in the range (the value), use the blank identifier, an underscore, to discard the first:</li> </ul> <pre><code>sum := 0\nfor _, value := range array {\n    sum += value\n}\n</code></pre>"},{"location":"notes-md/golang/learning-go/#switch-in-golang","title":"Switch in Golang","text":"<ul> <li>Go's <code>switch</code> is more general than C's.</li> <li>It's therefore possible\u2014and idiomatic\u2014to write an <code>if</code>-<code>else</code>-<code>if</code>-<code>else</code> chain as a <code>switch</code>.</li> </ul> <pre><code>func unhex(c byte) byte {\n    switch {\n    case '0' &lt;= c &amp;&amp; c &lt;= '9':\n        return c - '0'\n    case 'a' &lt;= c &amp;&amp; c &lt;= 'f':\n        return c - 'a' + 10\n    case 'A' &lt;= c &amp;&amp; c &lt;= 'F':\n        return c - 'A' + 10\n    }\n    return 0\n}\n</code></pre> <ul> <li>There is no automatic fall through, but cases can be presented in comma-separated lists.</li> </ul> <pre><code>func shouldEscape(c byte) bool {\n    switch c {\n    case ' ', '?', '&amp;', '=', '#', '+', '%':\n        return true\n    }\n    return false\n}\n</code></pre>"},{"location":"notes-md/golang/learning-go/#type-switch","title":"Type Switch","text":"<ul> <li>A switch can also be used to discover the dynamic type of an interface variable</li> </ul> <pre><code>var t interface{}\nt = functionOfSomeType()\nswitch t := t.(type) {\ndefault:\n    fmt.Printf(\"unexpected type %T\\n\", t)     // %T prints whatever type t has\ncase bool:\n    fmt.Printf(\"boolean %t\\n\", t)             // t has type bool\ncase int:\n    fmt.Printf(\"integer %d\\n\", t)             // t has type int\ncase *bool:\n    fmt.Printf(\"pointer to boolean %t\\n\", *t) // t has type *bool\ncase *int:\n    fmt.Printf(\"pointer to integer %d\\n\", *t) // t has type *int\n}\n</code></pre>"},{"location":"notes-md/golang/learning-go/#functions","title":"Functions","text":""},{"location":"notes-md/golang/learning-go/#multiple-return-values","title":"Multiple return values","text":"<pre><code>func squareRoot (num int) (n float, err error)\n// or\nfunc squareRoot (num int) (float, error)\n// to return error if num &lt; 0\n</code></pre> <p>// named return</p>"},{"location":"notes-md/golang/learning-go/#defer","title":"Defer","text":"<ul> <li>Go's <code>defer</code> statement schedules a function call (the deferred function) to be run immediately before the function exits.</li> </ul> <pre><code>func fileContent (filename string) (string, error) {\n    f, err := os.Open(filename)\n    if err != nil {\n        return \"\", err\n    }\n    // defer will run the function just before exiting the function fileContents\n    defer f.Close()\n    // something with return   \n}\n</code></pre> <ul> <li>Deferring a call to a function such as <code>Close</code> has two advantages. </li> <li>First, it guarantees that you will never forget to close the file, a mistake that's easy to make if you later edit the function to add a new return path. </li> <li>Second, it means that the close sits near the open, which is much clearer than placing it at the end of the function.</li> <li>For Example : </li> </ul> <pre><code>for i := 0; i &lt; 5; i++ {\n    defer fmt.Printf(\"%d \", i)\n}\n</code></pre> <ul> <li>Deferred functions are executed in LIFO order, so this code will cause <code>4 3 2 1 0</code> to be printed when the function returns</li> <li>A more plausible example is a simple way to trace function execution through the program. We could write a couple of simple tracing routines like this:</li> </ul> <pre><code>func trace(s string)   { fmt.Println(\"entering:\", s) }\nfunc untrace(s string) { fmt.Println(\"leaving:\", s) }\n\n// Use them like this:\nfunc a() {\n    trace(\"a\")\n    defer untrace(\"a\")\n    // do something....\n}\n</code></pre>"},{"location":"notes-md/golang/testing-simple-web-server/","title":"Testing simple web server","text":""},{"location":"notes-md/golang/testing-simple-web-server/#testing-web-server-in-golang","title":"Testing web server in Golang","text":"<ul> <li>create a file with name <code>&lt;anything&gt;_test.go</code>, these files are ignore by compiler</li> <li>write a func matching <code>func TestXxx(*testing.T)</code>  where Xxx does not start with a lowercase letter. The function name serves to identify the test routine.</li> <li>To run the test : <code>go test</code></li> </ul>"},{"location":"notes-md/golang/testing-simple-web-server/#testing","title":"Testing","text":"<ul> <li>inorder to test the handler, we call it by passing http.ResponseWriter and *http.Request</li> <li>to create a new Request</li> </ul> <pre><code>req, err := http.NewRequest(\n    http.MethodGet,                 // defining method of HTTP request\n    \"http://localhost:8080/\",       // Url to hit\n    nil,                            // Body (taking nil right now)\n)\n\n// checking for any errors            \nif err != nil {\n    t.Fatalf(\"Could not create a request %v\", err)\n}\n</code></pre>"},{"location":"notes-md/golang/testing-simple-web-server/#to-record-the-response-from-the-writer","title":"To record the response from the writer","text":"<pre><code>rec := httptest.NewRecorder()\n</code></pre>"},{"location":"notes-md/golang/testing-simple-web-server/#to-verify","title":"To verify","text":"<pre><code>// calling the function\nhelloWorldEndPoint(rec, req)\n\n// checking status code\nif rec.Code != http.StatusOK {\n    t.Errorf(\"accepted status 200, got %v\", rec.Code)\n}\n\n// checking the msg returned\nif !strings.Contains(rec.Body.String(), \"hello world\") {\n    t.Errorf(\"unexpected body in response %q\", rec.Body.String())\n}\n</code></pre>"},{"location":"notes-md/golang/testing-simple-web-server/#full-code-servergo","title":"Full code server.go","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n)\n\nfunc main() {\n\n    http.HandleFunc(\"/\", helloWorldEndPoint)\n    fmt.Println(\"Server :  http://localhost:8080\")\n    log.Fatal(http.ListenAndServe(\":8080\", nil))\n\n}\n\nfunc helloWorldEndPoint(writer http.ResponseWriter, request *http.Request) {\n\n    fmt.Fprintf(writer, \"hello world\")\n\n}\n</code></pre>"},{"location":"notes-md/golang/testing-simple-web-server/#full-code-main_testgo","title":"Full code main_test.go","text":"<pre><code>package main\n\nimport (\n    \"net/http\"\n    \"net/http/httptest\"\n    \"strings\"\n    \"testing\"\n)\n\nfunc TestHandler(t *testing.T) {\n\n    req, err := http.NewRequest(\n        http.MethodGet,\n        \"http://localhost:8080/\",\n        nil,\n    )\n\n    if err != nil {\n        t.Fatalf(\"Could not create a request %v\", err)\n    }\n\n    rec := httptest.NewRecorder()\n    helloWorldEndPoint(rec, req)\n\n    if rec.Code != http.StatusOK {\n        t.Errorf(\"accepted status 200, got %v\", rec.Code)\n    }\n\n    if !strings.Contains(rec.Body.String(), \"hello world\") {\n        t.Errorf(\"unexpected body in response %q\", rec.Body.String())\n    }\n\n}\n</code></pre>"},{"location":"notes-md/golang/things-golang-do-differently/","title":"Things Golang do differently","text":""},{"location":"notes-md/golang/things-golang-do-differently/#formatting","title":"Formatting","text":"<ul> <li>use <code>gofmt</code> to format packages</li> </ul>"},{"location":"notes-md/golang/things-golang-do-differently/#commentary","title":"Commentary","text":"<ul> <li>Go uses c like comments <code>//</code> or <code>/* */</code></li> <li>Every Function/Struct/Variable that you have to export, name it so that first letter is capital</li> <li>Package name</li> <li>short, concise, evocative</li> <li>the package in src/encoding/base64 is imported as \"encoding/base64\" but has name base64, not encoding_base64 and not encodingBase64.</li> </ul>"},{"location":"notes-md/golang/things-golang-do-differently/#getters-setters","title":"Getters &amp; Setters","text":"<ul> <li>Go doesn't provide automatic support for getters and setters. There's nothing wrong with providing getters and setters yourself, and it's often appropriate to do so.</li> </ul> <pre><code>owner := obj.Owner()\nif owner != user {\n    obj.SetOwner(user)\n}\n</code></pre>"},{"location":"notes-md/golang/things-golang-do-differently/#naming","title":"Naming","text":"<p>Interface Naming By convention, one-method interfaces are named by the method name plus an -er suffix or similar modification to construct an agent noun: Reader, Writer, Formatter, CloseNotifier etc.</p>"},{"location":"notes-md/golang/things-golang-do-differently/#variable-naming","title":"Variable Naming","text":"<ul> <li>Finally, the convention in Go is to use MixedCaps or mixedCaps rather than underscores to write multi word names</li> <li>In <code>a :=</code> declaration a variable v may appear even if it has already been declared, provided: this declaration is in the same scope as the existing declaration of v (if v is already declared in an outer scope, the declaration will create a new variable \u00a7),</li> <li>The corresponding value in the initialisation is assignable to v, and there is at least one other variable that is created by the declaration</li> </ul>"},{"location":"notes-md/golang/things-golang-do-differently/#indentation","title":"Indentation","text":"<pre><code>if i &lt; f() {\n    g()\n}\n\nif i &lt; f()  // wrong!\n{           // wrong!\n    g()\n}\n</code></pre>"},{"location":"notes-md/golang/things-golang-do-differently/#control-structure","title":"Control Structure","text":"<ul> <li>There is no do or while loop, only a slightly generalised for; switch is much better If. In Go a simple if looks like this:</li> </ul> <pre><code>if x &gt; 0 {\n    return y\n}\n</code></pre> <ul> <li>Mandatory braces encourage writing simple if statements on multiple lines. It's good style to do so anyway, especially when the body contains a control statement such as a return or break. Since if and switch accept an initialisation statement, it's common to see one used to set up a local variable.</li> </ul> <pre><code>if err := file.Chmod(0664); err != nil {\n    log.Print(err)\n    return err\n}\n</code></pre>"},{"location":"notes-md/golang/things-golang-do-differently/#re-declaration-and-re-assignment","title":"Re-declaration and Re-assignment","text":"<p>The last example in the previous section demonstrates a detail of how the := short declaration form works. The declaration that calls os.Open reads,</p> <pre><code>f, err := os.Open(name)\n</code></pre> <ul> <li>This statement declares two variables, f and err. A few lines later, the call to f.Stat reads,</li> </ul> <pre><code>d, err := f.Stat()\n</code></pre> <p>-\u200b which looks as if it declares d and err. Notice, though, that err appears in both statements. This duplication is legal: err is declared by the first statement, but only re-assigned in the second. This means that the call to f.Stat uses the existing err variable declared above, and just gives it a new value.</p>"},{"location":"notes-md/golang/things-golang-do-differently/#range","title":"Range","text":"<ul> <li>If you're looping over an array, slice, string, or map, or reading from a channel, a range clause can manage the loop.</li> </ul> <pre><code>for key, value := range oldMap {\n    newMap[key] = value\n}\n</code></pre> <ul> <li>If you only need the first item in the range (the key or index), drop the second:</li> </ul> <pre><code>for key := range m {\n    if key.expired() {\n        delete(m, key)\n    }\n}\n</code></pre> <ul> <li>If you only need the second item in the range (the value), use the blank identifier, an underscore, to discard the first:</li> </ul> <pre><code>sum := 0\nfor _, value := range array {\n    sum += value\n}\n</code></pre>"},{"location":"notes-md/golang/things-golang-do-differently/#switch-in-golang","title":"Switch in Golang","text":"<ul> <li>Go's switch is more general than C's.</li> <li>It's therefore possible\u2014and idiomatic\u2014to write an if-else-if-else chain as a switch.</li> </ul> <pre><code>func unhex(c byte) byte {\n    switch {\n    case '0' &lt;= c &amp;&amp; c &lt;= '9':\n        return c - '0'\n    case 'a' &lt;= c &amp;&amp; c &lt;= 'f':\n        return c - 'a' + 10\n    case 'A' &lt;= c &amp;&amp; c &lt;= 'F':\n        return c - 'A' + 10\n    }\n    return 0\n}\n</code></pre> <ul> <li>There is no automatic fall through, but cases can be presented in comma-separated lists.</li> </ul> <pre><code>func shouldEscape(c byte) bool {\n    switch c {\n    case ' ', '?', '&amp;', '=', '#', '+', '%':\n        return true\n    }\n    return false\n}\n</code></pre>"},{"location":"notes-md/golang/things-golang-do-differently/#type-switch","title":"Type Switch","text":"<ul> <li>A switch can also be used to discover the dynamic type of an interface variable</li> </ul> <pre><code>var t interface{}\nt = functionOfSomeType()\nswitch t := t.(type) {\ndefault:\n    fmt.Printf(\"unexpected type %T\\n\", t)     // %T prints whatever type t has\ncase bool:\n    fmt.Printf(\"boolean %t\\n\", t)             // t has type bool\ncase int:\n    fmt.Printf(\"integer %d\\n\", t)             // t has type int\ncase *bool:\n    fmt.Printf(\"pointer to boolean %t\\n\", *t) // t has type *bool\ncase *int:\n    fmt.Printf(\"pointer to integer %d\\n\", *t) // t has type *int\n}\n</code></pre>"},{"location":"notes-md/golang/things-golang-do-differently/#functions","title":"Functions","text":"<ul> <li>Multiple return values</li> </ul> <pre><code>func squareRoot (num int) (n float, err error)\n// or\nfunc squareRoot (num int) (float, error)\n// to return error if num &lt; 0\n// named return\n</code></pre>"},{"location":"notes-md/golang/things-golang-do-differently/#defer","title":"Defer","text":"<ul> <li>Go's defer statement schedules a function call (the deferred function) to be run immediately before the function exits.</li> </ul> <pre><code>func fileContent (filename string) (string, error) {\n    f, err := os.Open(filename)\n    if err != nil {\n        return \"\", err\n    }\n    // defer will run the function just before exiting the function fileContents\n    defer f.Close()\n    // something with return   \n}\n</code></pre> <ul> <li>Deferring a call to a function such as Close has two advantages.</li> <li>First, it guarantees that you will never forget to close the file, a mistake that's easy to make if you later edit the function to add a new return path.</li> <li>Second, it means that the close sits near the open, which is much clearer than placing it at the end of the function.</li> </ul> <p>For Example :</p> <pre><code>for i := 0; i &lt; 5; i++ {\n    defer fmt.Printf(\"%d \", i)\n}\n</code></pre> <p>Deferred functions are executed in LIFO order, so this code will cause <code>4 3 2 1 0</code> to be printed when the function returns A more plausible example is a simple way to trace function execution through the program. We could write a couple of simple tracing routines like this:</p> <pre><code>func trace(s string)   { fmt.Println(\"entering:\", s) }\nfunc untrace(s string) { fmt.Println(\"leaving:\", s) }\n\n// Use them like this:\nfunc a() {\n    trace(\"a\")\n    defer untrace(\"a\")\n    // do something....\n}\n</code></pre>"},{"location":"notes-md/golang/which-is-faster-maps-slices/","title":"Which is faster : Maps, slices","text":""},{"location":"notes-md/golang/which-is-faster-maps-slices/#using-slice","title":"Using slice","text":"<pre><code>package main\n\nimport (\n    \"runtime\"\n)\n\ntype data struct {\n    i, j int\n}\n\nfunc main() {\n    var N = 40000000\n    var structure []data\n    for i := 0; i &lt; N; i++ {\n        value := int(i)\n        structure = append(structure, data{value, value})\n    }\n    runtime.GC()\n    _ = structure[0]\n}\n</code></pre>"},{"location":"notes-md/golang/which-is-faster-maps-slices/#using-a-map-with-pointers","title":"Using a map with pointers","text":"<pre><code>package main\n\nimport (\n    \"runtime\"\n)\n\nfunc main() {\n    var N = 40000000\n    myMap := make(map[int]*int)\n    for i := 0; i &lt; N; i++ {\n        value := int(i)\n        myMap[value] = &amp;value\n    }\n    runtime.GC()\n    _ = myMap[0]\n}\n</code></pre>"},{"location":"notes-md/golang/which-is-faster-maps-slices/#using-a-map-without-pointers","title":"Using a map without pointers","text":"<pre><code>package main\n\nimport (\n    \"runtime\"\n)\n\nfunc main() {\n    var N = 40000000\n    myMap := make(map[int]int)\n    for i := 0; i &lt; N; i++ {\n        value := int(i)\n        myMap[value] = value\n    }\n    runtime.GC()\n    _ = myMap[0]\n}\n</code></pre>"},{"location":"notes-md/golang/which-is-faster-maps-slices/#splitting-the-map","title":"Splitting the map","text":"<p>The implementation of this subsection will split the map into a map of maps, which is also called sharding. The program of this subsection is saved as <code>mapSplit.go</code> and will be presented in two parts</p> <pre><code>package main\n\nimport (\n    \"runtime\"\n)\n\nfunc main() {\n    var N = 40000000\n    split := make([]map[int]int, 200)\n    for i := range split {\n        split[i] = make(map[int]int)\n    }\n    for i := 0; i &lt; N; i++ {\n        value := int(i)\n        split[i%200][value] = value\n    }\n    runtime.GC()\n    _ = split[0][0]\n}\n</code></pre>"},{"location":"notes-md/golang/which-is-faster-maps-slices/#results","title":"Results","text":"<p>What will be important in the presented output is not the exact numbers but the time difference between the four different approaches.</p> <pre><code>$ time go run main.go \n\nUsing plain slices    \n\nreal    0m1.058s\nuser    0m1.319s\nsys     0m0.301s\n\nUsing map with pointers\n\nreal    0m15.667s\nuser    0m27.961s\nsys     0m1.722s\n\nUsing map without pointer\n\nreal    0m15.667s\nuser    0m27.961s\nsys     0m1.722s\n\nSpliting map\n\nreal    0m9.349s\nuser    0m8.636s\nsys     0m0.826s\n</code></pre>"},{"location":"notes-md/java/articles-to-refer-to/","title":"Articles to refer to","text":""},{"location":"notes-md/java/articles-to-refer-to/#what-is-defensive-copying-shallow-copy-and-deep-copy-read-more-here","title":"What is Defensive Copying , Shallow Copy and Deep Copy ? read more here","text":""},{"location":"notes-md/java/data-and-data-types/","title":"Data &amp; Data Types","text":""},{"location":"notes-md/java/data-and-data-types/#constants","title":"Constants","text":"<pre><code>final int someConstant = 10;\n</code></pre>"},{"location":"notes-md/java/data-and-data-types/#data-types","title":"Data Types","text":"<ul> <li>These are Java's primitive datatypes</li> <li>you can use <code>+</code> operator on datatypes smaller than int otherwise anything that gets promoted to <code>Integer</code>.</li> <li>To get max and min value of data type :  </li> </ul> <pre><code>int high = Integer.MAX_VALUE;\nint low = Integer.MIN_VALUE;\n</code></pre>"},{"location":"notes-md/java/data-and-data-types/#strings","title":"Strings","text":""},{"location":"notes-md/java/data-and-data-types/#important-functions","title":"Important functions","text":"<ul> <li><code>equalsIgnoreCase</code></li> <li><code>toLowerCase</code></li> <li>To check Strings in Java don't use \"==\" instead use : </li> <li><code>str1.equals(str2)</code></li> <li><code>charAt(0)</code></li> <li><code>String.contains()</code></li> <li><code>s.indexOf('i')</code></li> <li><code>split(\";\")</code></li> <li><code>join()</code></li> <li><code>toString()</code>  Dont use with strings</li> <li>String is a final and immutable class</li> <li>To create a mutable string in java, Java has two classes </li> <li>StringBuffer and </li> <li>StringBuilder</li> </ul> <pre><code>String s = \"this is an example\";\nString a = s.substring(11); \n// a will hold the string starting at character 11 \n// until the end (\"example\")\n</code></pre> <pre><code>String s = \"popcorn\";\nSystem.out.println(s.replace('p','W'));\n</code></pre>"},{"location":"notes-md/java/data-and-data-types/#string-builder","title":"String Builder","text":"<pre><code>StringBuilder sb = new StringBuilder();\n\nsb.append(\"One=\").append(one).append(\", Color=red\")\n\nSystem.out.print(sb);\n\n// Prints \"One=1, Colour=red\" \n// followed by an ASCII newline.\nString result = sb.toString();\n</code></pre>"},{"location":"notes-md/java/data-and-data-types/#formatter","title":"Formatter","text":"<pre><code>int one = 1;\nString color = \"red\";\nFormatter f = new Formatter();\nSystem.out.print(f.format(\"One=%d, colour=%s%n\",\n        one, color));\n// Prints \"One=1, Colour=red\" \n// followed by the platform's line separator\n</code></pre>"},{"location":"notes-md/java/data-and-data-types/#string-joiner","title":"String Joiner","text":"<pre><code>StringJoiner sj = new StringJoiner(\", \", \"[\", \"]\");\nfor (String s : new String[]{\"A\", \"B\", \"C\"}) {\n    sj.add(s);\n}\nSystem.out.println(sj);\n// Prints \"[A, B, C]\"\n</code></pre>"},{"location":"notes-md/java/data-and-data-types/#string-tokenizer","title":"String Tokenizer","text":"<pre><code>import java.util.StringTokenizer;\n    public class Simple{\n    public static void main(String args[]){\n        StringTokenizer st = \n            new StringTokenizer(\"apple ball cat dog\",\" \");\n        while (st.hasMoreTokens()) {\n            System.out.println(st.nextToken());\n        }\n    }\n}\n</code></pre>"},{"location":"notes-md/java/data-and-data-types/#strings-on-heap-pool","title":"Strings on Heap &amp; Pool","text":"<ul> <li>created on heap, even literals</li> </ul> <p>Difference between string on heap and Pool</p>"},{"location":"notes-md/java/data-and-data-types/#string-intern","title":"String intern()","text":"<pre><code>public class InternExample{  \n    public static void main(String args[]){  \n        String s1=new String(\"hello\");  \n        String s2=\"hello\";  \n        String s3=s1.intern();\n        // returns string from pool, \n        // now it will be same as s2  \n        System.out.println(s1==s2);\n        // false because reference variables are \n        // pointing to different instance  \n        System.out.println(s2==s3);\n        // true because reference variables are \n        // pointing to same instance  \n    }\n}\n</code></pre>"},{"location":"notes-md/java/data-and-data-types/#big-decimal","title":"Big Decimal","text":"<p>imports :</p> <pre><code>import java.math.BigDecimal;\nimport java.math.BigInteger;\n</code></pre>"},{"location":"notes-md/java/data-and-data-types/#big-decimal-objects-are-immutable","title":"Big Decimal objects are immutable","text":"<pre><code>BigDecimal a = new BigDecimal(\"42.23\");\nBigDecimal b = new BigDecimal(\"10.001\");\na.add(b); // a will still be 42.23\nBigDecimal c = a.add(b); // c will be 52.231\n</code></pre>"},{"location":"notes-md/java/data-and-data-types/#creating-big-decimals","title":"Creating Big Decimals","text":"<pre><code>BigDecimal a = new BigDecimal(5);\n</code></pre>"},{"location":"notes-md/java/data-and-data-types/#comparing","title":"Comparing","text":"<pre><code>a.compareTo(new BigDecimal(0));\n// a is greater, returns 1\na.compareTo(new BigDecimal(5));\n// a is equal, returns 0\na.compareTo(new BigDecimal(10));\n// a is less, returns -1\n</code></pre>"},{"location":"notes-md/java/data-and-data-types/#operations","title":"Operations","text":"<pre><code>Addition: add() method\nSubtraction: subtract() method\nMultiplication: multiply() method\nDivision: divide() method\n</code></pre> <pre><code>BigDecimal a = new BigDecimal(\"5\");\nBigDecimal b = new BigDecimal(\"7\");\n\n//Equivalent to result = a + b\nBigDecimal result = a.add(b);\n\n//Equivalent to result = a - b\nBigDecimal result = a.subtract(b);\n\n//Equivalent to result = a * b\nBigDecimal result = a.multiply(b);\n\n//Equivalent to result = a / b\nBigDecimal result = a.divide(b);\n\n//Equivalent to result = a % b\nBigDecimal result = a.remainder(b);\n\n//Equivalent to result = a^10\nBigDecimal result = a.pow(10);\n\n//Equivalent to result = MAX(a,b)\nBigDecimal result = a.max(b);\n\n//Equivalent to result = MIN(a,b)\nBigDecimal result = a.min(b);\n\nBigDecimal a = new BigDecimal(\"5234.49843776\");\n// Moves the decimal point to 2 places left of \n// current position\nBigDecimal result = a.movePointLeft(2);\n// Result : 52.3449843776\n\nBigDecimal a = new BigDecimal(\"5234.49843776\");\n// Moves the decimal point to 3 places right of \n// current position\nBigDecimal result = a.movePointRight(3);\nSystem.out.println(result);\n// Result : 5234498.43776\n</code></pre>"},{"location":"notes-md/java/data-and-data-types/#stringformat","title":"String.Format","text":"<pre><code>BigDecimal accountBalance = new BigDecimal(\"10000.00\");\nSystem.out.println(String.format(\"Account balance : %f\",\naccountBalance));\n</code></pre>"},{"location":"notes-md/java/data-and-data-types/#best-practises","title":"Best Practises","text":"<pre><code>//Bad example:\nBigDecimal bad0 = new BigDecimal(0);\nBigDecimal bad1 = new BigDecimal(1);\nBigDecimal bad10 = new BigDecimal(10);\n\n//Good Example:\nBigDecimal good0 = BigDecimal.ZERO;\nBigDecimal good1 = BigDecimal.ONE;\nBigDecimal good10 = BigDecimal.TEN;\n</code></pre>"},{"location":"notes-md/java/data-and-data-types/#big-integer","title":"Big Integer","text":""},{"location":"notes-md/java/data-and-data-types/#initialisation","title":"Initialisation","text":"<pre><code>BigInteger value1 = new BigInteger(\"10\");\nBigInteger value2 = new BigInteger(\"10\");\n</code></pre> <ul> <li>To convert long or int values to Big Integer use:</li> </ul> <pre><code>long longValue = Long.MAX_VALUE;\nBigInteger valueFromLong = BigInteger.valueOf(longValue);\n</code></pre> <ul> <li>To convert a numeric String to Big Integer use:</li> </ul> <pre><code>String decimalString = \"-1\";\nBigInteger valueFromDecimalString = \n    new BigInteger(decimalString);\n</code></pre> <ul> <li>There are predefined constants for common values:</li> <li><code>BigInteger.ZERO</code> \u2014 value of \"0\". </li> <li><code>BigInteger.ONE</code> \u2014 value of \"1\".</li> <li><code>BigInteger.TEN</code> \u2014 value of \"10\".</li> </ul>"},{"location":"notes-md/java/data-and-data-types/#operations_1","title":"Operations","text":"<pre><code>BigInteger value1 = new BigInteger(\"10\");\nBigInteger value2 = new BigInteger(\"10\");\n\nBigInteger sum = value1.add(value2);\nBigInteger sub = value1.subtract(value2);\nBigInteger div = value1.divide(value2);\nBigInteger mul = value1.multiply(value2);\n\nBigInteger value1 = new BigInteger(\"10\");\nBigInteger power = value1.pow(3);\n\nBigInteger power = value1.remainder(value2);\n\nSystem.out.println(value1.gcd(value2));\nSystem.out.println(value1.max(value2));\n\nSystem.out.println(value1.min(value2));\n</code></pre>"},{"location":"notes-md/java/data-and-data-types/#comparing_1","title":"Comparing","text":"<pre><code>BigInteger one = BigInteger.valueOf(1);\nBigInteger two = BigInteger.valueOf(2);\n\nif(one.equals(two)){\n    System.out.println(\"Equal\");\n}\nelse{\n    System.out.println(\"Not Equal\");\n}\n</code></pre> <p>In general, do not use use the == operator to compare Big Integers</p> <ul> <li><code>==</code> operator: compares references; i.e. whether two values refer to the same object </li> <li><code>equals()</code> method: compares the content of two Big Integers.</li> </ul> <pre><code>BigInteger reallyBig = BigInteger.valueOf(10);\nBigInteger reallyBig1 = BigInteger.valueOf(100);\n\nif(reallyBig.compareTo(reallyBig1) == 0){\n    //code when both are equal.\n}\n</code></pre>"},{"location":"notes-md/java/io-in-java/","title":"IO in Java","text":""},{"location":"notes-md/java/io-in-java/#output","title":"Output","text":"<p>Use <code>System.out.println</code> to print to the console</p> <pre><code>System.out.println(\"Hello World\");\nSystem.out.print(\"Hello World\");\n</code></pre>"},{"location":"notes-md/java/io-in-java/#using-systemconsole-to-read-password","title":"Using System.console to read password","text":"<pre><code>char[] password = System.console().readPassword();\n</code></pre>"},{"location":"notes-md/java/io-in-java/#input","title":"Input","text":"<p>import <code>Scanner</code> from :</p> <pre><code>import java.util.Scanner;\n</code></pre>"},{"location":"notes-md/java/io-in-java/#simple-array-input","title":"Simple Array input","text":"<pre><code>import java.util.Scanner;\n\npublic class Main {\n    public static void main(String[] args) {\n        System.out.println(\"hello World\");\n        Scanner scanner = new Scanner(System.in);\n        int[] arr = new int[10];\n        for (int i=0; i&lt;10;i++) {\n            arr[i] = scanner.nextInt();\n        }\n        for (int i=0; i&lt;10;i++) {\n            System.out.print(arr[i]+\", \");\n        }\n    }\n}\n</code></pre>"},{"location":"notes-md/java/miscellaneous/","title":"Miscellaneous","text":""},{"location":"notes-md/java/miscellaneous/#sending-a-request","title":"Sending a Request","text":"<pre><code>@Bean\npublic void SendRequest() throws IOException {\n        OkHttpClient client = new OkHttpClient().newBuilder()\n                .build();\n\n        String idToken = \"eyJhbGciOiJSUzI1NiIsImtpZCI6ImQ0ZTA2Y2ViMjJiMDFiZTU2YzIxM2M5ODU0MGFiNTYzYmZmNWE1OGMiLCJ0eXAiOiJKV1QifQ.eyJpc3MiOiJhY2NvdW50cy5nb29nbGUuY29tIiwiYXpwIjoiNzM4MTYzMTE5NDU3LTZlb2k0bjVoaWEya2dkbHRzNWdyOWViNXQ5aWxidHRjLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tIiwiYXVkIjoiNzM4MTYzMTE5NDU3LTZlb2k0bjVoaWEya2dkbHRzNWdyOWViNXQ5aWxidHRjLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tIiwic3ViIjoiMTA1MjMwOTI2NTAzNjg2Njg5NzgxIiwiZW1haWwiOiJ5YWRhdjExN3VkYXlAZ21haWwuY29tIiwiZW1haWxfdmVyaWZpZWQiOnRydWUsImF0X2hhc2giOiIwamdyNUY5WmZ0azJZb2hPX0JyWE9RIiwiaWF0IjoxNjM4MDIxOTA1LCJleHAiOjE2MzgwMjU1MDV9.NMBQ3UpmkUzNeE3mhU29IcszLxZ04lyscpYQzgyuczbYdA3-OJ8qHxUCWkNMPcjitDu9E8KonK8DkwVhJmI0n5TkNAxZkvgxxlhiErQvpGv63s3QldRjTsnvXQw-J_V_OhmOyGLo5JStFu8m90tjrIE-m2f8parrqhz3tb31fhDeLhdHJWcVm2B9l5B9hjz3BpVCf08va0ucC6E9MdE1gWuxc9CyyFi7fzk4TI0B-5-up1inbKVPEXuO2i50SGS1IMM8kLCNREaQth5VLJgHGnkyS_X-5x-gofb7k7raOJs_UibjpdEeQzhFHNUNjAWkdwxNiJcVstpE7M1kCTgztQ\";\n        String url = \"https://www.googleapis.com/oauth2/v3/tokeninfo?id_token=\" + idToken;\n\n        System.out.println(url);\n\n        Request request = new Request.Builder()\n                .url(url)\n                .method(\"GET\", null)\n                .build();\n        Response response = client.newCall(request).execute();\n        System.out.println(response.body().string());\n\n}\n\n// POM.XML\n\n&lt;dependency&gt;\n            &lt;groupId&gt;com.squareup.okhttp3&lt;/groupId&gt;\n            &lt;artifactId&gt;okhttp&lt;/artifactId&gt;\n            &lt;version&gt;4.1.0&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"notes-md/java/roadmap/","title":"Java Roadmap","text":""},{"location":"notes-md/java/roadmap/#core-java","title":"Core Java","text":"<ul> <li>OOPs</li> <li>Interfaces</li> <li>Inheritance</li> <li>Collections</li> <li>Classes, Variables, Loops</li> </ul>"},{"location":"notes-md/java/roadmap/#advance-java","title":"Advance Java","text":"<ul> <li>Design Patterns</li> <li>JVM</li> <li>Threads</li> <li>Concurrency</li> <li>Garbage Collection</li> <li>Build Tools : Maven, Gradle</li> <li>Apache Tomcat</li> <li>Testing</li> <li>Logging</li> </ul>"},{"location":"notes-md/java/roadmap/#spring-boot-roadmap","title":"Spring Boot Roadmap","text":""},{"location":"notes-md/java/roadmap/#core","title":"Core","text":"<ul> <li>Bean Life cycle</li> <li>Dependency Injection</li> <li>Inversion of Control</li> <li>Bean Factory &amp; Application Context</li> </ul>"},{"location":"notes-md/java/roadmap/#web","title":"Web","text":"<ul> <li>Annotations</li> <li>Configurations</li> <li>Profiles</li> </ul>"},{"location":"notes-md/java/roadmap/#aop-aspect-oriented-programming","title":"AOP (Aspect Oriented Programming )","text":"<ul> <li>how AOP works</li> <li>Creating Point Cut Joint Point Aspect etc.</li> </ul>"},{"location":"notes-md/java/roadmap/#security","title":"Security","text":"<ul> <li>Authen, Author, Ouuth2, JWT</li> </ul>"},{"location":"notes-md/java/roadmap/#boot","title":"Boot","text":"<ul> <li>Auto Configuration</li> <li>Adding Configuration</li> <li>properties/yaml</li> <li>Rest API</li> <li>Get, Post, Put, Delete, Options, Trace</li> <li>Status Codes</li> </ul>"},{"location":"notes-md/java/roadmap/#database","title":"Database","text":"<ul> <li>SQL: PostgreSQL</li> <li>NoSQL : MongoDB, Cassandra</li> <li>Spring Data JPA</li> <li>Caching : Redis</li> </ul>"},{"location":"notes-md/java/roadmap/#micro-services","title":"Micro-services","text":"<ul> <li>Spring Cloud</li> <li>Cloud Gateway</li> <li>Cloud Config</li> <li>Circuit Breaker</li> <li>Open Feign</li> <li>Sleuth</li> <li>DevOps</li> <li>Patterns</li> <li>Aggregator</li> <li>CQRS</li> <li>SAGA</li> <li>Event Sourcing</li> </ul>"},{"location":"notes-md/java/roadmap/#java-in-detail","title":"Java in detail","text":""},{"location":"notes-md/java/roadmap/#set-1","title":"SET 1:","text":"<ol> <li>JVM Architecture</li> <li>Classes + Objects</li> <li>Inheritance/ Enum/ Polymorphism / Overloading / Overriding</li> <li>Transient / Assert / Volatile</li> <li>Interface / Abstract class / Inner class / Anonymous class / Enum</li> <li>Wrapper classes / Boxing / un-boxing</li> <li>Marker interfaces / tagged interfaces</li> <li>Static / final / implements / Extends</li> <li>Object class inherited methods.</li> <li>label</li> <li>Super and this key word</li> </ol>"},{"location":"notes-md/java/roadmap/#set-2","title":"SET 2:","text":"<ol> <li>Java.lang pkg / Java.util pkg</li> <li>String / StringBuffer / BufferReader / BufferWritter</li> <li>instance of / clone / toString() / HashCode() / Hasing</li> <li>Exceptions / packages / throws / throw / Hierarchy / Customer Exceptions / Exceptions with method overriding / finally block related questions. /checked and un-checked exceptions / Extending throwable interface and exception class /</li> </ol>"},{"location":"notes-md/java/roadmap/#set-3","title":"SET 3:","text":"<ol> <li>Life Cycle of thread</li> <li>Threading -&gt; Priority thread Deamon thread Runnable callable Executer service Future task</li> <li>Yield() / Stop() / concurrency / weight notify</li> <li>Inter thread communication</li> <li>Thread group / Thread pool / thread safety / thread moditer / shut down hook.</li> <li>Joining of thread / fork()</li> <li>performing multiple task.</li> <li>Runtime class.</li> <li>Locks Synchronization:</li> <li>Synchronization in java</li> <li>synchronized block / Deadlock in java / interrupting thread /</li> <li>Concurrent MAP / priority blocking queue.</li> </ol>"},{"location":"notes-md/java/roadmap/#set-4","title":"SET 4:","text":"<ol> <li>Java input/Output.</li> <li>Input / Output stream</li> <li>Console</li> <li>File reader / writer</li> <li>filterinput / Output stream</li> <li>Buffered reader / writer</li> <li>print stream</li> <li>print writer.</li> <li>push back input stream</li> <li>string writer/reader.</li> <li>Serializable / Externalizable</li> <li>Object reader/ writer - Hierarchy</li> <li>Regular expressions.</li> <li>Singletons</li> </ol>"},{"location":"notes-md/java/roadmap/#set-5","title":"SET 5:","text":"<p>Collections: Java - Collections - Set, List, Map, Hashset &amp; HashMap</p> <ol> <li>Hierarchy</li> <li>Collection of MAP interface</li> <li>Complexiy for all Collections best/worst cases.</li> <li>iterable / comparable / comparator</li> <li>Custom implementation</li> <li>list/ linkedlist/ hashmap / hashset</li> <li>jagged array.</li> </ol>"},{"location":"notes-md/java/roadmap/#set-6","title":"SET 6:","text":"<ol> <li>Socket programming / RMI / EJB</li> <li>JDBC and related classes and SQL interview questions</li> <li>JSP, Servlets, Filters, Servlet Config, Servlet Context - instance related, implicit variables, GET and POST</li> <li>Transactions</li> <li>Webservices</li> </ol>"},{"location":"notes-md/java/threads-in-java/","title":"Threads in Java","text":""},{"location":"notes-md/java/threads-in-java/#introduction","title":"Introduction","text":"<p>A Thread is a small set of instructions designed to be scheduled and executed by the CPU independently of the parent process. To run the process in another thread, you the support of both the operating system and the process. When you create another thread, JVM communicates OS to create a new thread which can then run on the \"multi-threaded CPU\". Well this article isn't about explain threads, it's about how you can play with them in Java</p>"},{"location":"notes-md/java/threads-in-java/#threads-are-everywhere-by-default","title":"Threads are everywhere by default","text":"<ul> <li>When write and run a simple java program, JVM is creating the main thread for you to print hello world</li> </ul> <pre><code>public class Solution {\n\n    public static void main(String[] args) throws Exception {\n        System.out.println(\"hello world\");\n        throw new Exception();\n    }\n}\n\n// output : \nhello world\nException in thread \"main\" java.lang.Exception\n        at Solution.main(Solution.java:5)\n</code></pre> <p>If you read the error message carefully, it says <code>Exception in thread \"main\"</code> , hence proved ...</p>"},{"location":"notes-md/java/threads-in-java/#how-to-create-a-thread","title":"How to create a thread ?","text":"<p>Well, cuz Java is an Object-Oriented Language, everything is wrapped in OOP concepts. To run a method of some class in-parallel</p> <ul> <li>Extend the class from the Thread class</li> <li>Create a method overriding the run() method</li> </ul> <p>This run method is what is executed separately in a thread.</p> <p>Here is an example :</p> <pre><code>class Hi extends Thread {\n    @Override\n    public void run() {\n        for (int i = 1; i &lt; 5; i++) {\n            System.out.println(\"hi\");\n\n            // just sleeping for some time\n            try {Thread.sleep(400);} catch (Exception e) {}\n        }\n    }\n}\n\npublic class App {\n    public static void main(String[] args) {\n        Hi obj1 = new Hi();\n        obj1.start();\n    }\n}\n</code></pre> <p>To run two thread of seperate class</p> <pre><code>class Hi extends Thread {\n    @Override\n    public void run() {\n        for (int i = 1; i &lt; 5; i++) {\n            System.out.println(\"hi\");\n\n            try { Thread.sleep(400); } catch (Exception e) {}\n        }\n\n    }\n}\n\nclass Hello extends Thread {\n    public void run() {\n        for (int i = 1; i &lt; 5; i++) {\n            System.out.println(\"hello\");\n\n            try { Thread.sleep(400); } catch (Exception e) {}\n        }\n    }\n}\n\npublic class App {\n    public static void main(String[] args) {\n        Hi obj1 = new Hi();\n        Thread obj2 = new Hello();\n\n        obj1.start();\n        obj2.start();\n    }\n}\n</code></pre> <p>When you call the <code>.start()</code> method, it will execute the <code>run()</code> method in a seperate thread.</p> <p>Well becuase java doesnt support mulitple inheritanc, if you ever have to inherit from another class, you wont be able to do it. To overcome this limitation/feature we can implement the <code>Runnable</code> interface</p> <pre><code>class Hi implements Runnable {\n    public void run() {\n        for (int i = 1; i &lt; 5; i++) {\n            System.out.println(\"hi\");\n\n            try { Thread.sleep(400); } catch (Exception e) {}\n        }\n    }\n}\n\nclass Hello implements Runnable {\n    public void run() {\n        for (int i = 1; i &lt; 5; i++) {\n            System.out.println(\"hello\");\n\n            try { Thread.sleep(400); } catch (Exception e) {}\n        }\n    }\n}\n\npublic class App {\n    public static void main(String[] args) {\n        Runnable obj1 = new Hi();\n        Runnable obj2 = new Hello();\n\n        Thread t1 = new Thread(obj1);\n        Thread t2 = new Thread(obj2);\n\n        t1.start();\n        t2.start();\n    }\n}\n</code></pre> <p>The only difference here is you implement the Runnable interface, create objects of the Thread class passing the objects implementing Runnable, and call the start method on the thread object, which in--return executes the <code>.run()</code> methods.</p>"},{"location":"notes-md/java/threads-in-java/#properties-of-a-thread-class","title":"Properties of a Thread Class","text":"<ul> <li><code>getName() : String</code> gets you the name of the thread</li> <li><code>setName(String name)</code> : set name of a thread</li> <li><code>isAlive() : Boolean</code> whether the thread is active or not</li> <li><code>getId() : Long</code> get the execution id of the thread</li> <li><code>getPriority()</code> : get the priority of thread</li> <li><code>setPriority(int num)</code> : on a scale of 1-10</li> <li>Predefined ENUMS<ul> <li><code>Thread.MAX_PRIORITY</code> = 10</li> <li><code>Thread.MIN_PRIORITY</code> = 1</li> <li><code>Thread.NORM_PRIORITY</code> = 5</li> </ul> </li> </ul> <p>For more, refer to documentation : https://download.java.net/java/early_access/loom/docs/api/java.base/java/lang/Thread.html</p> <pre><code>class Hi extends Thread {\n    public void run() {\n        for (int i = 1; i &lt; 5; i++) {\n            try { Thread.sleep(400); } catch (Exception e) { }\n        }\n    }\n}\n\npublic class App {\n    public static void main(String[] args) throws InterruptedException {\n        Hi obj1 = new Hi();\n        obj1.start();\n\n        System.out.println(\"Name : \" + obj1.getName());\n        var threadName = obj1.getName();\n        System.out.println(threadName + \" isAlive  : \" + obj1.isAlive());\n        System.out.println(threadName + \" threadId : \" + obj1.getId());\n        System.out.println(threadName + \" priority : \" + obj1.getPriority());\n\n\n        System.out.println(Thread.MAX_PRIORITY);\n        System.out.println(Thread.MIN_PRIORITY);\n        System.out.println(Thread.NORM_PRIORITY);\n\n        obj1.join();\n    }\n}\n</code></pre>"},{"location":"notes-md/java/threads-in-java/#joining-threads","title":"Joining Threads","text":"<p>When you spin off a thread, you also have to wait for it to finish its task before moving on to avoid errors/exception</p> <pre><code>class App {\n    public static void main(String[] args) {\n\n        Thread obj1 = new Thread(() -&gt; {\n            for (int i = 1; i &lt; 5; i++) {\n                System.out.println(Thread.currentThread().getName());\n                try { Thread.sleep(400); } catch (Exception e) {}\n            }\n        }, \"Thread 1\");\n\n        Thread obj2 = new Thread(() -&gt; {\n            for (int i = 1; i &lt; 5; i++) {\n                System.out.println(Thread.currentThread().getName());\n                try { Thread.sleep(400); } catch (Exception e) {}\n            }\n        }, \"Thread 2\");\n\n        obj1.start();\n        obj2.start();\n\n        try {\n            obj1.join();\n            obj2.join();\n        } catch (Exception e) {\n            System.out.println(\"execption\");\n        }\n\n        System.out.println(\"bye\");\n    }\n}\n</code></pre>"},{"location":"notes-md/java/threads-in-java/#synchronizing-threads","title":"Synchronizing Threads","text":"<ul> <li>thread sync happens at object level, not at method level (even tho marked at method), applicable for methods marked with sync</li> <li>use synchronized on blocks to avoid wait times</li> <li>by synchronized(this) to lock the current object</li> <li>by synchronized(x) to pass an object and lock it</li> <li>by synchronized(X.class) to get class level lock</li> </ul> <pre><code>class DataClass {\n    int num;\n    boolean valueSet = false;\n\n    public synchronized void getNum() {\n        while (!valueSet) {\n            try {\n                wait();\n            } catch (Exception e) {\n            }\n        }\n        System.out.println(\"get : \" + num);\n        valueSet = false;\n        notify();\n    }\n\n    public synchronized void setNum(int num) {\n        while (valueSet) {\n            try {\n                wait();\n            } catch (Exception e) {\n            }\n        }\n\n        this.num = num;\n        System.out.println(\"set : \" + num);\n        valueSet = true;\n        notify();\n    }\n}\n\nclass Producer implements Runnable {\n\n    DataClass dataClass;\n\n    public Producer(DataClass data) {\n        this.dataClass = data;\n    }\n\n    @Override\n    public void run() {\n        int i = 0;\n        while (true) {\n            dataClass.setNum(i++);\n            try {\n                Thread.sleep(800);\n            } catch (Exception e) {\n                System.out.println(\"exception\");\n            }\n        }\n    }\n}\n\nclass Consumer implements Runnable {\n\n    DataClass dataClass;\n\n    public Consumer(DataClass data) {\n        this.dataClass = data;\n    }\n\n    @Override\n    public void run() {\n        while (true) {\n            dataClass.getNum();\n            try {\n                Thread.sleep(1000);\n            } catch (Exception e) {\n                System.out.println(\"exception\");\n            }\n        }\n    }\n}\n\npublic class App {\n    public static void main(String[] args) {\n        DataClass dataClass = new DataClass();\n        var producer = new Producer(dataClass);\n        var consumer = new Consumer(dataClass);\n\n        Thread t1 = new Thread(producer);\n        Thread t2 = new Thread(consumer);\n\n        t1.start();\n        t2.start();\n    }\n}\n</code></pre>"},{"location":"notes-md/java/threads-in-java/#thread-interrupt","title":"Thread interrupt","text":"<pre><code>public class App {\n    public static void main(String[] args) {\n\n        MyThread thClass = new MyThread();\n        thClass.start();\n        thClass.interrupt();\n    }\n}\n\n/**\n * MyThread\n */\npublic class MyThread extends Thread {\n\n    @Override\n    public void run() {\n        try {\n            for (int i = 0; i &lt; 20; i++) {\n                System.out.println(\"child thread\");\n                Thread.sleep(1000);\n            }\n        } catch (InterruptedException e) {\n            System.out.println(\"got interrupted\");\n        }       \n    }\n}\n</code></pre>"},{"location":"notes-md/java/threads-in-java/#thread-yield","title":"Thread Yield","text":"<p>Java Thread <code>yield()</code> method : The <code>yield()</code> method of thread class causes the currently executing thread object to temporarily pause and allow other threads to execute.</p> <pre><code>public class MyThread extends Thread {\n\n    @Override\n    public void run() {\n        for (int i = 0; i &lt; 20; i++) {\n            System.out.println(\"child thread\");\n            Thread.yield();\n        }      \n    }\n}\n</code></pre> <p>Inter thread communication methods</p> <ul> <li>wait</li> <li>notify</li> <li>notifyAll()</li> </ul> <p>Important Points</p> <ul> <li>using <code>runnable</code> is better because when you extend from <code>thread</code> you cannot inherit from other class</li> </ul> <p>Limitations of using <code>thread</code> and <code>runnable</code></p> <ul> <li>time consuming : creation and management of thread</li> <li>poor resource management</li> <li>not robust : cannot handle scale</li> </ul>"},{"location":"notes-md/java/threads-in-java/#executorservice","title":"ExecutorService","text":"<p>example : </p> <pre><code>```java\nimport java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\n\npublic class App {\n    public static void main(String[] args) throws InterruptedException{\n\n        MyThread[] myThreadsArr = { new MyThread(\"ATM\"), \n                                    new MyThread(\"Bank\"),\n                                    new MyThread(\"Mobile\"),\n                                    new MyThread(\"ATM2\"), \n                                    new MyThread(\"Bank2\"),\n                                    new MyThread(\"Mobile2\"),\n                                    new MyThread(\"ATM3\"), \n                                    new MyThread(\"Bank3\"),\n                                    new MyThread(\"Mobile3\")};\n\n        ExecutorService es = Executors.newFixedThreadPool(2);\n        for (MyThread mThreadObj : myThreadsArr) {\n            es.submit(mThreadObj);\n        }\n\n        es.shutdown();\n    }\n}\n```\n</code></pre>"},{"location":"notes-md/java/threads-in-java/#future-callable","title":"Future &amp; Callable","text":"<p>example</p> <pre><code>import java.util.concurrent.ExecutorService;\nimport java.util.concurrent.Executors;\nimport java.util.concurrent.Future;\n\npublic class App {\n    public static void main(String[] args) throws InterruptedException{\n\n        MyCallable[] myCallables = { new MyCallable(20), \n                                    new MyCallable(30),\n                                    new MyCallable(40),\n                                    new MyCallable(50), \n                                    new MyCallable(60)};\n\n        ExecutorService es = Executors.newFixedThreadPool(2);\n        for (MyCallable mThreadObj : myCallables) {\n            Future&lt;Integer&gt; future = es.submit(mThreadObj);\n            try {\n                System.out.println(future.get());\n            } catch (Exception e) {\n                System.out.println(\"exception\");\n            }\n        }\n        es.shutdown();\n    }\n}\n\n# MyCallable class\nimport java.util.concurrent.Callable;\n\npublic class MyCallable implements Callable&lt;Integer&gt; {\n    int number;\n    MyCallable(int number) { this.number = number;  }\n\n    @Override\n    public Integer call() throws Exception {\n        System.out.println(Thread.currentThread().getName()+\" upto \"+ number);\n        int sum=0;\n        for(int i=0; i&lt;=number; i++) { sum+=i; }\n        return sum;\n    }\n\n}\n</code></pre>"},{"location":"notes-md/java/data-structures/","title":"Data Structures","text":""},{"location":"notes-md/java/data-structures/#contains","title":"Contains :","text":"<ul> <li>Enums</li> <li>Some important information about Collections</li> <li>Array</li> <li>LinkedList</li> <li>List</li> <li>Set</li> <li>Stacks and Queues</li> <li>Map</li> <li>TreeSet and TreeMap</li> </ul>"},{"location":"notes-md/java/data-structures/array-in-java/","title":"Array in Java","text":""},{"location":"notes-md/java/data-structures/array-in-java/#array-101","title":"Array 101","text":"<pre><code>float array[]; /* and */ int foo()[] { ... } /* are discouraged */\nfloat[] array; /* and */ int[] foo() { ... } /* are encouraged */\n</code></pre> <p>To find the length of array, just use : <code>arr.length;</code></p> <p>ArrayType : Type of the array. This can be primitive ( <code>int</code> , <code>long</code> , <code>byte</code> ) or Objects ( <code>String</code> , <code>MyObject</code> , etc).</p> <pre><code>int numbers = new int[3];\nint numbers = { 1, 2, 3 };\nint numbers = new int[] { 1, 2, 3 };\nint[][] number = { { 1, 2 }, { 3, 4, 5 } };\nint[][] number = new int[5][];\nint[][] number = new int[5][5];\n\nfloat[] boats = new float[5];\nString[] theory = new String[] { \"a\", \"b\", \"c\" };\nObject[] dArt = new Object[] { new Object(), \n    \"We love Stack\", new Integer(3) };\n</code></pre>"},{"location":"notes-md/java/data-structures/array-in-java/#copying-array","title":"Copying Array","text":"<pre><code>int[] a = { 4, 1, 3, 2 };\nint[] b = a.clone(); \n// [4, 1, 3, 2]\n\nint[] a = {4, 1, 3, 2};\nint[] b = Arrays.copyOf(a, a.length); \n// [4, 1, 3, 2]\n\nint[] a = { 4, 1, 3, 2 };\nint[] b = new int[a.length];\nSystem.arraycopy(a, 0, b, 0, a.length); \n// [4, 1, 3, 2]\n</code></pre>"},{"location":"notes-md/java/data-structures/array-in-java/#what-is-list","title":"What is List","text":"<p>List is an interface, and the instances of List can be created by implementing various classes</p> <pre><code>Integer[] initial = { 127, Integer.valueOf( 42 ) };\nList toList = Arrays.asList( initial ); \n// Fixed size!\n\n// Note: Works with all collections\nInteger[] fromCollection = toList.toArray( \n    new Integer[toList.size()] );\n</code></pre> <pre><code>int[] array = new int[5];\nArrays.setAll(array, i -&gt; i); \n// The array becomes { 0, 1, 2, 3, 4 }.\n</code></pre>"},{"location":"notes-md/java/data-structures/array-in-java/#creating-a-list-from-an-array","title":"Creating a List from an Array","text":"<pre><code>String[] stringArray = {\"foo\", \"bar\", \"baz\"};\nList&lt;String&gt; stringList = Arrays.asList(stringArray);\n</code></pre>"},{"location":"notes-md/java/data-structures/array-in-java/#arrayindex-out-of-bounds-exception","title":"ArrayIndex Out Of Bounds Exception","text":"<pre><code>String[] people = new String[] { \"Carol\", \"Andy\" };\n\n// An array will be created:\n// people[0]: \"Carol\"\n// people[1]: \"Andy\"\n// Notice: no item on index 2. \n// Trying to access it triggers the exception:\n\nSystem.out.println(people[2]); \n// throws an ArrayIndexOutOfBoundsException.\n</code></pre>"},{"location":"notes-md/java/data-structures/array-in-java/#arrays-to-stream","title":"Arrays to Stream","text":"<pre><code>String[] arr = new String[] {\"str1\", \"str2\", \"str3\"};\nStream&lt;String&gt; stream = Arrays.stream(arr);\n\nint[] intArr = {1, 2, 3};\nIntStream intStream = Arrays.stream(intArr);\n\nStream&lt;Integer&gt; intStream = Stream.of(1, 2, 3);\nStream&lt;String&gt; stringStream = Stream.of(\"1\", \"2\", \"3\");\nStream&lt;Double&gt; doubleStream = Stream.of(\n        new Double[]{1.0, 2.0});\n</code></pre>"},{"location":"notes-md/java/data-structures/array-in-java/#array-to-string","title":"Array to String","text":"<pre><code>int[] arr = {1, 2, 3, 4, 5};\nSystem.out.println(Arrays.toString(arr));\n\n// [1, 2, 3, 4, 5]\n</code></pre> <pre><code>int[][] arr = {\n{1, 2, 3},\n{4, 5, 6},\n{7, 8, 9}\n};\nSystem.out.println(Arrays.deepToString(arr));\n\n// [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n</code></pre>"},{"location":"notes-md/java/data-structures/array-in-java/#sorting-arrays","title":"Sorting Arrays","text":"<pre><code>String[] names = {\"John\", \"Steve\", \"Shane\", \"Adam\", \"Ben\"};\n\n// increasing order\nArrays.sort(names);\n\n// decreasing order\nArrays.sort(names, 0, names.length, \n        Collections.reverseOrder());\n</code></pre>"},{"location":"notes-md/java/data-structures/array-in-java/#common-array-functions-java","title":"Common Array functions Java","text":"<pre><code>String[] strings = new String[] { \"A\", \"B\", \"C\" };\nint[] ints = new int[] { 1, 2, 3, 4 };\n\n// Using Arrays.binarySearch (for sorted arrays only)\nint index = Arrays.binarySearch(strings, \"A\");\nint index2 = Arrays.binarySearch(ints, 1);\n\n// Using a Arrays.asList (for non-primitive arrays only)\nint index = Arrays.asList(strings).indexOf(\"A\");\nint index2 = Arrays.asList(ints).indexOf(1);\n\n// Using Stream\nint index = IntStream.range(0, strings.length)\n.filter(i -&gt; \"A\".equals(strings[i]))\n.findFirst()\n.orElse(-1);\n</code></pre>"},{"location":"notes-md/java/data-structures/array-in-java/#how-do-you-change-the-size-of-an-array","title":"How do you change the size of an array?","text":"<pre><code>String[] listOfCities = new String[3];\nlistOfCities[0] = \"New York\";\nlistOfCities[1] = \"London\";\nlistOfCities[2] = \"Berlin\";\n\n\nString[] newArray = Arrays.copyOf(listOfCities, \n        listOfCities.length + 1);\nnewArray[listOfCities.length] = \"Sydney\";\n</code></pre>"},{"location":"notes-md/java/data-structures/array-in-java/#remove-an-element-from-an-array","title":"Remove an element from an array","text":""},{"location":"notes-md/java/data-structures/array-in-java/#using-arraylist","title":"Using ArrayList","text":"<pre><code>String[] array = new String[]{\"foo\", \"bar\", \"baz\"};\nList&lt;String&gt; list = new ArrayList&lt;&gt;(Arrays.asList(array));\nlist.remove(\"foo\");\n\n// Creates a new array with the same size \n// as the list and copies the list\n// elements to it.\n\narray = list.toArray(new String[list.size()]);\nSystem.out.println(Arrays.toString(array)); \n//[bar, baz]\n</code></pre>"},{"location":"notes-md/java/data-structures/array-in-java/#using-arraycopy","title":"Using arraycopy","text":"<pre><code>int[] array = new int[] { 1, 2, 3, 4 }; \n// Original array.\nint[] result = new int[array.length - 1]; \n// Array which will contain the result.\nint index = 1; \n// Remove the value \"2\".\n\n// Copy the elements at the left of the index.\nSystem.arraycopy(array, 0, result, 0, index);\n// Copy the elements at the right of the index.\nSystem.arraycopy(array, index + 1, result, \n        index, array.length - index - 1);\nSystem.out.println(Arrays.toString(result)); //[1, 3, 4]\n</code></pre>"},{"location":"notes-md/java/data-structures/array-in-java/#comparing-arrays-for-equality","title":"Comparing arrays for equality","text":"<pre><code>int[] a = new int[]{1, 2, 3};\nint[] b = new int[]{1, 2, 3};\nSystem.out.println(a.equals(b)); \n// prints \"false\" because a and b refer \n// to different objects\nSystem.out.println(Arrays.equals(a, b)); \n// prints \"true\" because the elements of a and b \n// have the same values\n</code></pre> <pre><code>int a[] = { 1, 2, 3 };\nint b[] = { 1, 2, 3 };\n\nObject[] aObject = { a }; \n// aObject contains one element\nObject[] bObject = { b }; \n// bObject contains one element\n\nSystem.out.println(Arrays.equals(aObject, bObject)); \n// false\nSystem.out.println(Arrays.deepEquals(aObject, bObject));\n// true\n</code></pre>"},{"location":"notes-md/java/data-structures/collections-in-java/","title":"Collections in Java","text":""},{"location":"notes-md/java/data-structures/collections-in-java/#collections","title":"Collections","text":"<p>The collections framework in <code>java.util</code> provides a number of generic classes for sets of data with functionality that can't be provided by regular arrays.</p> <p>OR</p> <p>The Collection in Java is a framework that provides an architecture to store and manipulate the group of objects.</p> <p>Java Collections can achieve all the operations that you perform on a data such as searching, sorting, insertion, manipulation, and deletion.</p> <p>A simple way to construct a List from individual data values is to use <code>java.utils.Arrays</code> method <code>Arrays.asList</code> :</p> <pre><code>List&lt;String&gt; data = \n    Arrays.asList(\"ab\", \"bc\", \"cd\", \"ab\", \"bc\", \"cd\");\n\nList&lt;String&gt; list = new ArrayList&lt;&gt;(data); \n// will add data as is\nSet&lt;String&gt; set1 = new HashSet&lt;&gt;(data); \n// will add data keeping only unique values\n\nSortedSet&lt;String&gt; set2 = new TreeSet&lt;&gt;(data); \n// will add data keeping unique values and sorting\nSet&lt;String&gt; set3 = new LinkedHashSet&lt;&gt;(data); \n// will add data keeping only unique values and\n// preserving the original order\n</code></pre>"},{"location":"notes-md/java/data-structures/collections-in-java/#mapping-collections","title":"Mapping Collections","text":"<pre><code>Map&lt;String, Object&gt; map1 = new HashMap&lt;&gt;(map);\nSortedMap&lt;String, Object&gt; map2 = new TreeMap&lt;&gt;(map);\n</code></pre>"},{"location":"notes-md/java/data-structures/collections-in-java/#iterating-over-collections","title":"Iterating over Collections","text":""},{"location":"notes-md/java/data-structures/collections-in-java/#iterating-over-list","title":"Iterating over List","text":"<pre><code>List&lt;String&gt; names\n= new ArrayList&lt;&gt;(Arrays.asList(\"Clementine\", \"Duran\", \"Mike\"));\n\nnames.forEach(System.out::println);\n\n// If we need parallelism use\nnames.parallelStream().forEach(System.out::println);\n\nfor (String name : names) {\n    System.out.println(name);\n}\n\nfor (int i = 0; i &lt; names.size(); i++) {\n    System.out.println(names.get(i));\n}\n</code></pre>"},{"location":"notes-md/java/data-structures/collections-in-java/#using-iterator","title":"Using Iterator","text":"<pre><code>//Creates ListIterator which supports both\n//forward as well as backward traversel\nListIterator&lt;String&gt; listIterator = names.listIterator();\n\n//Iterates list in forward direction\nwhile(listIterator.hasNext()){\n    System.out.println(listIterator.next());\n}\n\n//Iterates list in backward direction once reaches \n// the last element from above iterator in forward direction\nwhile(listIterator.hasPrevious()){\n    System.out.println(listIterator.previous());\n}\n</code></pre>"},{"location":"notes-md/java/data-structures/collections-in-java/#iterating-over-set","title":"Iterating over Set","text":"<pre><code>Set&lt;String&gt; names = \n    new HashSet&lt;&gt;(Arrays.asList(\"Clementine\", \"Duran\", \"Mike\"));\n\nfor (Iterator&lt;String&gt; iterator = names.iterator(); iterator.hasNext(); ) {\n    System.out.println(iterator.next());\n}\n\nfor (String name : names) {\n    System.out.println(name);\n}\n\nIterator iterator = names.iterator();\nwhile (iterator.hasNext()) {\n    System.out.println(iterator.next());\n}\n</code></pre>"},{"location":"notes-md/java/data-structures/collections-in-java/#iterating-over-maps","title":"Iterating over Maps","text":"<pre><code>Map&lt;Integer,String&gt; names = new HashMap&lt;&gt;();\nnames.put(1,\"Clementine\");\nnames.put(2,\"Duran\");\nnames.put(3,\"Mike\");\n\n\nnames.forEach((key, value) -&gt;\n        System.out.println(\"Key: \" + key + \" Value: \" + value));\n\nfor (Map.Entry&lt;Integer, String&gt; entry : names.entrySet()) {\n        System.out.println(entry.getKey());\n        System.out.println(entry.getValue());\n}\n\n// Iterating over only keys\nfor (Integer key : names.keySet()) {\n        System.out.println(key);\n}\n\n// Iterating over only values\nfor (String value : names.values()) {\n        System.out.println(value);\n}\n\nIterator entries = names.entrySet().iterator();\nwhile (entries.hasNext()) {\n        Map.Entry entry = (Map.Entry) entries.next();\n        System.out.println(entry.getKey());\n        System.out.println(entry.getValue());\n}\n</code></pre>"},{"location":"notes-md/java/data-structures/collections-in-java/#immutable-empty-collections","title":"Immutable Empty Collections","text":"<pre><code>List&lt;String&gt; anEmptyList = Collections.emptyList();\nMap&lt;Integer, Date&gt; anEmptyMap = Collections.emptyMap();\nSet&lt;Number&gt; anEmptySet = Collections.emptySet();\n</code></pre>"},{"location":"notes-md/java/data-structures/enums-in-java/","title":"Enums in Java","text":""},{"location":"notes-md/java/data-structures/enums-in-java/#basics","title":"Basics","text":""},{"location":"notes-md/java/data-structures/enums-in-java/#declaring-enums","title":"Declaring Enums","text":"<pre><code>public enum Season {\n    WINTER,\n    SPRING,\n    SUMMER,\n    FALL\n}\n</code></pre> <p>You can also declare them inside another class. You cannot declare an Enum inside a method body or constructor. It cannot have duplicate values</p>"},{"location":"notes-md/java/data-structures/enums-in-java/#usage","title":"Usage","text":"<pre><code>class Main {\n    public enum Season {\n        WINTER, SPRING, SUMMER, FALL\n    }\n\n    public static void main(String[] args) {\n        System.out.println(\"-------\");\n        display(Season.WINTER);\n        System.out.println(\"-------\");\n        enumIterate();\n        System.out.println(\"-------\");\n        enumSwitchExample(Season.SUMMER);\n        System.out.println(Season.FALL == Season.WINTER);\n        System.out.println(Season.SPRING == Season.SPRING);\n        System.out.println(\"-------\");\n    }\n\n    public static void display(Season s) {\n        System.out.println(s.name());\n    }\n\n    public static void enumIterate() {\n        for (Season s : Season.values()) {\n            System.out.println(s.name());\n        }\n    }\n\n    public static void enumSwitchExample(Season s) {\n        switch (s) {\n            case WINTER:\n                System.out.println(\"It's pretty cold\");\n                break;\n            case SPRING:\n                System.out.println(\"It's warming up\");\n                break;\n            case SUMMER:\n                System.out.println(\"It's pretty hot\");\n                break;\n            case FALL:\n                System.out.println(\"It's cooling down\");\n                break;\n        }\n    }\n}\n</code></pre>"},{"location":"notes-md/java/data-structures/enums-in-java/#enums-with-methods","title":"Enums with methods","text":"<pre><code>public enum MutableExample {\n    A, B;\n\n    private int count = 0;\n\n    public void increment() {\n        count++;\n    }\n\n    public void print() {\n        System.out.println(\"The count of \" + name() + \n            \" is \" + count);\n    }\n}\n</code></pre> <pre><code>class Main {\n    public static void main(String[] args) {\n        MutableExample a = MutableExample.A;\n        a.increment();\n        a.print();\n        MutableExample b = MutableExample.B;\n        b.print();\n    }\n}\n</code></pre> <p>Enum constants are technically mutable, so a setter could be added to change the internal structure of an enum constant. However, this is considered very bad practice and should be avoided. Best practice is to make</p> <p>Enum fields immutable, with final :</p> <pre><code>public enum Coin {\n    PENNY(1), NICKEL(5), DIME(10), QUARTER(25);\n    private final int value;\n    Coin(int value){\n        this.value = value;\n    }\n    ...\n}\n</code></pre>"},{"location":"notes-md/java/data-structures/enums-in-java/#enummap","title":"EnumMap","text":"<pre><code>import java.util.*;\n\nclass Book {\n    int id;\n    String name, author, publisher;\n    int quantity;\n\n    public Book(int id, String name, String author, String publisher, int quantity) {\n        this.id = id;\n        this.name = name;\n        this.author = author;\n        this.publisher = publisher;\n        this.quantity = quantity;\n    }\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        EnumMap&lt;Key, Book&gt; map = new EnumMap&lt;Key, Book&gt;(Key.class);\n\n        Book b1 = new Book(101, \"Book 1\", \"Author 1\", \"P 1\", 8);\n        Book b2 = new Book(102, \"Book 2\", \"Author 2\", \"p 2\", 4);\n        Book b3 = new Book(103, \"Book 3\", \"Author\", \"p4\", 6);\n\n        map.put(Key.One, b1);\n        map.put(Key.Two, b2);\n        map.put(Key.Three, b3);\n\n        for (Map.Entry&lt;Key, Book&gt; entry : map.entrySet()) {\n            Book b = entry.getValue();\n            System.out.println(b.id + \" \" + b.name + \" \" + b.author + \" \" + b.publisher + \" \" + b.quantity);\n        }\n    }\n\n    public enum Key {\n        One, Two, Three\n    }\n}\n</code></pre>"},{"location":"notes-md/java/data-structures/enums-in-java/#enumset","title":"EnumSet","text":"<pre><code>import java.util.*;\n\nenum days {\n    SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY\n}\n\npublic class Main {\n    public static void main(String[] args) {\n        Set&lt;days&gt; set = EnumSet.of(days.TUESDAY, days.WEDNESDAY);\n// Traversing elements\n        Iterator&lt;days&gt; iter = set.iterator();\n        while (iter.hasNext())\n            System.out.println(iter.next());\n    }\n}\n</code></pre>"},{"location":"notes-md/java/data-structures/enums-in-java/#enum-starting-with-number","title":"Enum starting with number","text":"<p>Java does not allow the name of enum to start with number like 100A, 25K. In that case, we can append the code with _ (underscore) or any allowed pattern and make check of it.</p> <p>Enum get very complicated</p>"},{"location":"notes-md/java/data-structures/linked-list-in-java/","title":"Linked List in Java","text":"<p>It is a doubly <code>linked-list</code>, deal with it.</p>"},{"location":"notes-md/java/data-structures/linked-list-in-java/#initialisation","title":"Initialisation","text":"<pre><code>import java.util.LinkedList;\n\npublic class Main {\n  public static void main(String[] args) {\n    LinkedList&lt;String&gt; cars = new LinkedList&lt;String&gt;();\n    cars.add(\"Volvo\");\n    cars.add(\"BMW\");\n    cars.add(\"Ford\");\n    cars.add(\"Mazda\");\n    System.out.println(cars);\n  }\n}\n</code></pre> <p>Just refer to the documentation for the methods</p> <p>read more</p>"},{"location":"notes-md/java/data-structures/list-in-java/","title":"List in Java","text":"<p>read more here</p> <p>imports</p> <pre><code>import java.util.List;\nimport java.util.ArrayList;\n</code></pre>"},{"location":"notes-md/java/data-structures/list-in-java/#array-list","title":"Array List","text":"<p>Array List is one of the inbuilt data structures in Java. It is a dynamic array (where the size of the data structure not needed to be declared first) for storing elements (Objects).</p>"},{"location":"notes-md/java/data-structures/list-in-java/#creating-a-list","title":"Creating a List","text":"<pre><code>List&lt;String&gt; strings;\nList&lt;Double&gt; doubles;\n</code></pre> <p>If you try to add something to the lists above you will get a <code>NullPointerException</code>, because strings and doubles, both equal null!</p> <pre><code>List&lt;T&gt; myArrayList = new ArrayList&lt;&gt;();\nList&lt;T&gt; myLinkedList = new LinkedList&lt;&gt;();\n</code></pre>"},{"location":"notes-md/java/data-structures/list-in-java/#positional-access-operations","title":"Positional Access Operations","text":"<pre><code>add(T type)\nadd(int index, T type)\nremove(Object o)\nremove(int index)\nget(int index)\nset(int index, E element)\nint indexOf(Object o)\nint lastIndexOf(Object o)\n</code></pre>"},{"location":"notes-md/java/data-structures/list-in-java/#iterating-over-the-list","title":"Iterating over the List","text":"<pre><code>public void printEachElement(List&lt;String&gt; list){\n    for(String s : list){\n        System.out.println(s);\n    }\n}\n</code></pre>"},{"location":"notes-md/java/data-structures/list-in-java/#to-add-an-element","title":"To add an element","text":"<pre><code>myArrayList.add(element);\nmyArrayList.add(index, element); \n//index of the element should be an int (starting from 0)\n</code></pre>"},{"location":"notes-md/java/data-structures/list-in-java/#to-remove","title":"To remove","text":"<pre><code>myArrayList.remove(element);\nmyArrayList.remove(index); \n//index of the element should be an int (starting from 0)\n</code></pre> <ul> <li>Removing elements from list B that are present in the list A</li> </ul> <pre><code>numbersB.removeAll(numbersA);\n    System.out.println(\"B cleared: \" + numbersB);\n</code></pre>"},{"location":"notes-md/java/data-structures/map-in-java/","title":"Map in Java","text":""},{"location":"notes-md/java/data-structures/map-in-java/#hash-map","title":"Hash Map","text":""},{"location":"notes-md/java/data-structures/map-in-java/#available-methods","title":"Available Methods","text":"<pre><code>.put()\n.get()\n.containsKey()\n.containsValue()\n.getOrDefault()\n.forEach() // to iterate over\n.keySet()  // for all keys\n.values()  // for all values\n.replace()\n.replaceAll((key,value) -&gt; value+10)\n.putIfAbsent()\n.remove()\n</code></pre>"},{"location":"notes-md/java/data-structures/map-in-java/#declaring-hash-map","title":"Declaring Hash Map","text":"<pre><code>Map&lt;KeyType, ValueType&gt; myMap = new HashMap&lt;KeyType, ValueType&gt;();\n</code></pre>"},{"location":"notes-md/java/data-structures/map-in-java/#adding-values","title":"Adding values","text":"<pre><code>myMap.put(\"key1\", 1);\nmyMap.put(\"key2\", 2);\n</code></pre>"},{"location":"notes-md/java/data-structures/map-in-java/#getting-values-from-hash-map","title":"Getting values from Hash Map","text":"<pre><code>myMap.get(\"key1\");\n//return 1 (class Integer)\n\n// Check whether the Key is in the Map or not\nmyMap.containsKey(varKey);\n\n// Check whether the Value is in the Map or not\nmyMap.containsValue(varValue);\n</code></pre>"},{"location":"notes-md/java/data-structures/map-in-java/#check-if-keys-exists","title":"Check if keys exists","text":"<pre><code>Map&lt;String, String&gt; num = new HashMap&lt;&gt;();\nnum.put(\"one\", \"first\");\nif (num.containsKey(\"one\")) {\n    System.out.println(num.get(\"one\")); // =&gt; first\n}\n</code></pre>"},{"location":"notes-md/java/data-structures/map-in-java/#get-or-default","title":"get Or Default","text":"<pre><code>Map&lt;Integer, String&gt; map = new HashMap&lt;&gt;();\nmap.put(1, \"First element\");\nmap.get(1);  // =&gt; First element\nmap.get(2);  // =&gt; null\nmap.getOrDefault(2, \"Default element\");  // =&gt; Default element\n</code></pre>"},{"location":"notes-md/java/data-structures/map-in-java/#iterating-over-hashmap","title":"Iterating over hashMap","text":"<pre><code>map.forEach((key, value) -&gt; \n   System.out.println(\"Key: \"+key+ \" :: Value: \"+value));\n</code></pre> <p>ONLY KEYS</p> <pre><code>for (String key : repMap.keySet()) {\n    System.out.println(key);\n}\n</code></pre> <p>ONLY VALUES</p> <pre><code>for (Integer value : repMap.values()) {\n    System.out.println(value);\n}\n</code></pre>"},{"location":"notes-md/java/data-structures/map-in-java/#replace","title":"replace","text":"<p>If the key is present then the value is replaced by new-value. If the key is not present, does nothing</p> <pre><code>Map&lt;String, Integer&gt; map = new HashMap&lt;String, Integer&gt;();\nmap.put(\"john\", 20);\nmap.put(\"paul\", 30);\nmap.put(\"peter\", 40);\nmap.replace(\"peter\",50); //{john=20, paul=30, peter=50}\nmap.replace(\"jack\",60); //{john=20, paul=30, peter=50}\n</code></pre>"},{"location":"notes-md/java/data-structures/map-in-java/#replace-all","title":"replace All","text":"<pre><code>Map&lt;String, Integer&gt; map = new HashMap&lt;String, Integer&gt;();\nmap.put(\"john\", 20);\nmap.put(\"paul\", 30);\nmap.put(\"peter\", 40);\nmap.replaceAll((key,value)-&gt;value+10);\n//{john=30, paul=40, peter=50}\n</code></pre>"},{"location":"notes-md/java/data-structures/map-in-java/#put-if-absent","title":"put If Absent","text":"<pre><code>Map&lt;String, Integer&gt; map = new HashMap&lt;String, Integer&gt;();\nmap.put(\"john\", 20);\nmap.put(\"paul\", 30);\nmap.put(\"peter\", 40);\nmap.putIfAbsent(\"kelly\", 50);\n//{john=20, paul=30, peter=40, kelly=50}\n</code></pre>"},{"location":"notes-md/java/data-structures/map-in-java/#remove","title":"remove","text":"<pre><code>map.remove(\"peter\",40); \n// {john=30, paul=40}\n</code></pre>"},{"location":"notes-md/java/data-structures/map-in-java/#linked-hash-map","title":"Linked Hash Map","text":"<p><code>LinkedHashMap</code> class is Hash table and Linked list implementation of the Map interface, with predictable iteration order. It inherits <code>HashMap</code> class and implements the Map interface.</p> <p>The important points about Java <code>LinkedHashMap</code> class are: A <code>LinkedHashMap</code> contains values based on the key. It contains only unique elements. It may have one null key and multiple null values. It is same as <code>HashMap</code> instead maintains insertion order.</p> <pre><code>public static void main(String arg[])\n{\n    LinkedHashMap&lt;String, String&gt; lhm = new LinkedHashMap&lt;String, String&gt;();\n\n    lhm.put(\"Ramesh\", \"Intermediate\");\n    lhm.put(\"Shiva\", \"B-Tech\");\n    lhm.put(\"Santosh\", \"B-Com\");\n    lhm.put(\"Asha\", \"Msc\");\n    lhm.put(\"Raghu\", \"M-Tech\");\n\n    Set set = lhm.entrySet();\n    Iterator i = set.iterator();\n\n    while (i.hasNext()) {\n        Map.Entry me = (Map.Entry) i.next();\n        System.out.println(me.getKey() + \" : \" + me.getValue());\n    }\n\n    System.out.println(\"The Key Contains : \" + lhm.containsKey(\"Shiva\"));\n    System.out.println(\"The value to the corresponding to key : \" + lhm.get(\"Asha\"));\n}\n</code></pre>"},{"location":"notes-md/java/data-structures/map-in-java/#weakhashmap","title":"Weakhashmap","text":"<p>Weak References : The objects that are referenced only by weak references are garbage collected eagerly; the GC won\u2019t wait until it needs memory in that case.</p> <pre><code>public class WeakHashMapTest {\n    public static void main(String[] args) {\n\n        Map hashMap= new HashMap();\n        Map weakHashMap = new WeakHashMap();\n\n        String keyHashMap = new String(\"keyHashMap\");\n        String keyWeakHashMap = new String(\"keyWeakHashMap\");\n\n        hashMap.put(keyHashMap, \"Ankita\");\n        weakHashMap.put(keyWeakHashMap, \"Atul\");\n        System.gc();\n\n        System.out.println(\"Before: hash map value:\"+hashMap.get(\"keyHashMap\")+\" and weak hash map\n        value:\"+weakHashMap.get(\"keyWeakHashMap\"));\n        keyHashMap = null;\n        keyWeakHashMap = null;\n\n        System.gc();\n        System.out.println(\"After: hash map value:\"+hashMap.get(\"keyHashMap\")+\" and weak hash map\n        value:\"+weakHashMap.get(\"keyWeakHashMap\"));\n    }\n}\n</code></pre>"},{"location":"notes-md/java/data-structures/map-in-java/#sorted-map","title":"Sorted Map","text":"<p>// not that useful</p> <p>Key points :</p> <ul> <li>Sorted Map interface extends Map. </li> <li>Entries are maintained in an ascending key order. </li> </ul> <p>Methods of sorted Map :</p> <pre><code>Comparator comparator( )\nObject firstKey( )\nSortedMap headMap(Object end)\nObject lastKey( )\nSortedMap subMap(Object start, Object end)\nSortedMap tailMap(Object start)\n</code></pre> <pre><code>public static void main(String args[]) {\n    // Create a hash map\n    TreeMap tm = new TreeMap();\n    // Put elements to the map\n\n    tm.put(\"Zara\", new Double(3434.34));\n    tm.put(\"Mahnaz\", new Double(123.22));\n    tm.put(\"Ayan\", new Double(1378.00));\n    tm.put(\"Daisy\", new Double(99.22));\n    tm.put(\"Qadir\", new Double(-19.08));\n\n    // Get a set of the entries\n    Set set = tm.entrySet();\n    // Get an iterator\n    Iterator i = set.iterator();\n    // Display elements\n\n    while(i.hasNext()) {\n        Map.Entry me = (Map.Entry)i.next();\n        System.out.print(me.getKey() + \": \");\n        System.out.println(me.getValue());\n    }\n\n    System.out.println();\n    // Deposit 1000 into Zara's account\n    double balance = ((Double)tm.get(\"Zara\")).doubleValue();\n    tm.put(\"Zara\", new Double(balance + 1000));\n    System.out.println(\"Zara's new balance: \" + tm.get(\"Zara\"));\n}\n</code></pre>"},{"location":"notes-md/java/data-structures/map-in-java/#hashtable","title":"Hashtable","text":"<p>// not that useful</p> <pre><code>import java.util.*;\n\npublic class Main {\n    public static void main(String args[]) {\n// create and populate hash table\n        Hashtable&lt;Integer, String&gt; map = new Hashtable&lt;Integer, String&gt;();\n        map.put(101, \"C Language\");\n        map.put(102, \"Domain\");\n        map.put(104, \"Databases\");\n        System.out.println(\"Values before remove: \" + map);\n// Remove value for key 102\n        map.remove(102);\n        System.out.println(\"Values after remove: \" + map);\n    }\n}\n</code></pre>"},{"location":"notes-md/java/data-structures/queues-and-stacks/","title":"Queues &amp; Stacks","text":""},{"location":"notes-md/java/data-structures/queues-and-stacks/#priority-queue","title":"Priority Queue","text":"<pre><code>//The type of the PriorityQueue is Integer.\nPriorityQueue&lt;Integer&gt; queue = new PriorityQueue&lt;Integer&gt;();\n\n//The elements are added to the PriorityQueue\nqueue.addAll( Arrays.asList( 9, 2, 3, 1, 3, 8 ) );\n\n//The PriorityQueue sorts the elements by using \n// compareTo method of the Integer Class\n//The head of this queue is the least element with \n// respect to the specified ordering\nSystem.out.println( queue ); \n//The Output: [1, 2, 3, 9, 3, 8]\nqueue.remove();\nSystem.out.println( queue ); \n//The Output: [2, 3, 3, 9, 8]\nqueue.remove();\nSystem.out.println( queue ); \n//The Output: [3, 8, 3, 9]\nqueue.remove();\nSystem.out.println( queue ); \n//The Output: [3, 8, 9]\nqueue.remove();\nSystem.out.println( queue ); \n//The Output: [8, 9]\nqueue.remove();\nSystem.out.println( queue ); \n//The Output: [9]\nqueue.remove();\nSystem.out.println( queue ); \n//The Output: []\n</code></pre>"},{"location":"notes-md/java/data-structures/queues-and-stacks/#deque","title":"Deque","text":"<p>A Deque is a \"double ended queue\" which means that a elements can be added at the front or the tail of the queue. The queue only can add elements to the tail of a queue.</p>"},{"location":"notes-md/java/data-structures/queues-and-stacks/#creating-a-deque","title":"Creating a Deque","text":"<p>Before you can use a Java <code>Deque</code> you must create an instance of one of the classes that implements the <code>Deque</code> interface. Here is an example of creating a Java <code>Deque</code> instance by creating a <code>LinkedList</code> instance:</p> <pre><code>Deque deque = new LinkedList();\n</code></pre> <p>Here is another example of creating a Java <code>Deque</code> by creating an <code>ArrayDeque</code> instance:</p> <pre><code>Deque deque = new ArrayDeque();\n</code></pre> Method Brief description <code>getFirst()</code> Gets the first item of the head of the queue without removing it. <code>getLast()</code> Gets the first item of the tail of the queue without removing it. <code>addFirst(E e)</code> Adds an item to the head of the queue <code>addLast(E e)</code> Adds an item to the tail of the queue <code>removeFirst()</code> Removes the first item at the head of the queue <code>removeLast()</code> Removes the first item at the tail of the queue"},{"location":"notes-md/java/data-structures/queues-and-stacks/#adding-elements-to-deque","title":"Adding Elements to Deque","text":"<pre><code>Deque deque = new LinkedList();\n//Adding element at tail\ndeque.add(\"Item1\");\n//Adding element at head\ndeque.addFirst(\"Item2\");\n//Adding element at tail\ndeque.addLast(\"Item3\");\n</code></pre>"},{"location":"notes-md/java/data-structures/queues-and-stacks/#removing-elements-from-deque","title":"Removing Elements from Deque","text":"<pre><code>//Retrieves and removes the head of the queue represented by this deque\nObject headItem = deque.remove();\n//Retrieves and removes the first element of this deque.\nObject firstItem = deque.removeFirst();\n//Retrieves and removes the last element of this deque.\nObject lastItem = deque.removeLast();\n</code></pre>"},{"location":"notes-md/java/data-structures/queues-and-stacks/#retrieving-element-without-removing","title":"Retrieving Element without Removing","text":"<pre><code>//Retrieves, but does not remove, the head of the queue represented by this deque\nObject headItem = deque.element();\n//Retrieves, but does not remove, the first element of this deque.\nObject firstItem = deque.getFirst();\n//Retrieves, but does not remove, the last element of this deque.\nObject lastItem = deque.getLast();\n</code></pre>"},{"location":"notes-md/java/data-structures/queues-and-stacks/#iterating-through-deque","title":"Iterating through Deque","text":"<pre><code>//Using Iterator\nIterator iterator = deque.iterator();\nwhile(iterator.hasNext(){\n    String Item = (String) iterator.next();\n}\n\n//Using For Loop\nfor(Object object : deque) {\n    String Item = (String) object;\n}\n</code></pre>"},{"location":"notes-md/java/data-structures/queues-and-stacks/#stack","title":"Stack","text":"<p>Stacks are a LIFO (Last In, First Out) Data structure for objects.</p> <p>Java contains a Stack API with the following methods</p> Method Description Return Type <code>Stack()</code> Creates an empty Stack void <code>isEmpty()</code> Is the Stack Empty? Return Type: Boolean <code>push(Item item)</code> push an item onto the stack void <code>pop()</code> removes item from top of stack Return Type: Item <code>size()</code> returns # of items in stack Return Type: Int <pre><code>import java.util.*;\npublic class StackExample {\n    public static void main(String args[]) {\n        Stack st = new Stack();\n\n        System.out.println(\"stack: \" + st);\n        st.push(10);\n        System.out.println(\"10 was pushed to the stack\");\n        System.out.println(\"stack: \" + st);\n        st.push(15);\n\n        System.out.println(\"15 was pushed to the stack\");\n        System.out.println(\"stack: \" + st);\n        st.push(80);\n        System.out.println(\"80 was pushed to the stack\");\n        System.out.println(\"stack: \" + st);\n\n        st.pop();\n        System.out.println(\"80 was popped from the stack\");\n        System.out.println(\"stack: \" + st);\n        st.pop();\n        System.out.println(\"15 was popped from the stack\");\n        System.out.println(\"stack: \" + st);\n        st.pop();\n        System.out.println(\"10 was popped from the stack\");\n        System.out.println(\"stack: \" + st);\n        if(st.isEmpty())\n        {\n            System.out.println(\"empty stack\");\n        }\n    }\n}\n</code></pre>"},{"location":"notes-md/java/data-structures/queues-and-stacks/#blocking-queue","title":"Blocking Queue","text":"<p>A Blocking Queue is an interface, which is a queue that blocks when you try to dequeue from it and the queue is empty, or if you try to enqueue items to it and the queue is already full. A thread trying to dequeue from an empty queue is blocked until some other thread inserts an item into the queue. A thread trying to enqueue an item in a full queue is blocked until some other thread makes space in the queue, either by dequeuing one or more items or clearing the queue completely</p> <pre><code>BlockingQueue&lt;String&gt; bQueue = new ArrayBlockingQueue&lt;String&gt;(2);\n</code></pre>"},{"location":"notes-md/java/data-structures/queues-and-stacks/#linkedlist-fifo-queue","title":"LinkedList : FIFO Queue","text":"<p>The <code>java.util.LinkedList</code> class, while implementing <code>java.util.List</code> is a general-purpose implementation of <code>java.util.Queue</code> interface too operating on a FIFO (First In, First Out) principle.</p> <pre><code>Queue&lt;String&gt; queue = new LinkedList&lt;String&gt;();\nqueue.offer(\"first element\" );\nqueue.offer(\"second element\" );\nqueue.offer(\"third element\" );\nqueue.offer(\"fourth. element\" );\nqueue.offer(\"fifth. element\" );\n\nwhile ( !queue.isEmpty() ) {\n    System.out.println( queue.poll() );\n}\n</code></pre>"},{"location":"notes-md/java/data-structures/set-in-java/","title":"Set in Java","text":"<p>import</p> <pre><code>import java.util.Set;\nimport java.util.HashSet;\n</code></pre>"},{"location":"notes-md/java/data-structures/set-in-java/#set","title":"Set","text":"<p>Set have its implementation in various classes like <code>HashSet</code> , <code>TreeSet</code> , <code>LinkedHashSet</code> .</p> <pre><code>// Hashset Random Sorting\nSet&lt;T&gt; set = new HashSet&lt;T&gt;();\n\n// TreeSet - By compareTo() or Comparator\nTreeSet&lt;T&gt; sortedSet = new TreeSet&lt;T&gt;();\n\n// LinkedHashSet - Insertion Order\nLinkedHashSet&lt;T&gt; linkedhashset = new LinkedHashSet&lt;T&gt;();\n</code></pre>"},{"location":"notes-md/java/data-structures/set-in-java/#creating-a-set","title":"Creating a set","text":"<pre><code>Set&lt;Integer&gt; set = new HashSet&lt;Integer&gt;();\n// Creates an empty Set of Integers\n\nSet&lt;Integer&gt; linkedHashSet = new LinkedHashSet&lt;Integer&gt;(); \n//Creates a empty Set of Integers, with predictable iteration order\n</code></pre>"},{"location":"notes-md/java/data-structures/set-in-java/#adding-elements-to-a-set","title":"Adding elements to a Set","text":"<pre><code>set.add(12); \nset.add(13);\n</code></pre>"},{"location":"notes-md/java/data-structures/set-in-java/#delete-all-the-elements-of-a-set","title":"Delete all the elements of a Set","text":"<pre><code>set.clear();\n//Removes all objects from the collection.\n\nset.remove(0); \n// Removes first occurrence of a specified object from the collection\n</code></pre>"},{"location":"notes-md/java/data-structures/set-in-java/#check-size","title":"Check size","text":"<pre><code>set.size(); \n//Returns the number of elements in the collection\n\nset.isEmpty();\n//Returns true if the set has no elements\n</code></pre>"},{"location":"notes-md/java/data-structures/treeset-and-treemap/","title":"TreeSet and TreeMap","text":""},{"location":"notes-md/java/data-structures/treeset-and-treemap/#treemap","title":"TreeMap","text":""},{"location":"notes-md/java/data-structures/treeset-and-treemap/#initialize","title":"Initialize","text":"<pre><code>TreeMap&lt;Integer, String&gt; treeMap = new TreeMap&lt;&gt;();\n\ntreeMap.put(10, \"ten\");\ntreeMap.put(4, \"four\");\ntreeMap.put(1, \"one\");\ntreeSet.put(12, \"twelve\");\n</code></pre> <pre><code>System.out.println(treeMap.firstEntry()); \n// Prints 1=one\nSystem.out.println(treeMap.lastEntry()); \n// Prints 12=twelve\nSystem.out.println(treeMap.size()); \n// Prints 4, since there are 4 elemens in the map\nSystem.out.println(treeMap.get(12)); \n// Prints twelve\nSystem.out.println(treeMap.get(15)); \n// Prints null, since the key is not found in the map\n</code></pre>"},{"location":"notes-md/java/data-structures/treeset-and-treemap/#iteration","title":"Iteration","text":"<pre><code>for (Entry&lt;Integer, String&gt; entry : treeMap.entrySet()) {\n    System.out.print(entry + \" \"); //prints 1=one 4=four 10=ten 12=twelve\n}\n\nIterator&lt;Entry&lt;Integer, String&gt;&gt; iter = treeMap.entrySet().iterator();\nwhile (iter.hasNext()) {\n    System.out.print(iter.next() + \" \"); //prints 1=one 4=four 10=ten 12=twelve\n}\n</code></pre>"},{"location":"notes-md/java/data-structures/treeset-and-treemap/#treeset","title":"TreeSet","text":""},{"location":"notes-md/java/data-structures/treeset-and-treemap/#initialization","title":"Initialization","text":"<pre><code>TreeSet treeSet = new TreeSet&lt;&gt;();\n\ntreeSet.add(10);\ntreeSet.add(4);\ntreeSet.add(1);\n</code></pre> <pre><code>System.out.println(treeSet.first()); \n// Prints 1\nSystem.out.println(treeSet.last()); \n// Prints 12\nSystem.out.println(treeSet.size()); \n// Prints 4, since there are 4 elemens in the set\nSystem.out.println(treeSet.contains(12)); \n// Prints true\nSystem.out.println(treeSet.contains(15)); \n// Prints false\n</code></pre>"},{"location":"notes-md/java/data-structures/treeset-and-treemap/#iteration_1","title":"Iteration","text":"<pre><code>for (Integer i : treeSet) {\n    System.out.print(i + \" \"); //prints 1 4 10 12\n}\n\nIterator&lt;Integer&gt; iter = treeSet.iterator();\nwhile (iter.hasNext()) {\n    System.out.print(iter.next() + \" \"); //prints 1 4 10 12\n}\n</code></pre>"},{"location":"notes-md/java/data-structures/treeset-and-treemap/#treemaptreeset-of-a-custom-java-type","title":"TreeMap/TreeSet of a custom Java type","text":"<p>Since <code>TreeMap</code> and <code>TreeSet</code> s maintain keys/elements according to their natural ordering. Therefor <code>TreeMap</code> keys and <code>TreeSet</code> elements have to comparable to one another. you will run into the following error</p> <pre><code>Exception in thread \"main\" java.lang.ClassCastException: Person cannot be cast to\njava.lang.Comparable\n</code></pre> <ul> <li>One solution is to modify Object so it would implement the Comparable interface.</li> <li>Another solution is to provide the <code>TreeSet</code> with a <code>Comparator</code></li> </ul>"},{"location":"notes-md/java/keywords-in-java/","title":"Keywords in Java","text":""},{"location":"notes-md/java/keywords-in-java/#instanceof","title":"instanceof","text":"<pre><code>public class Main {\n    public static void main(String args[]) {\n        String name = \"Uday Yadav\";\n\n        boolean result = name instanceof String;\n        System.out.println(result);\n    }\n}\n</code></pre>"},{"location":"notes-md/java/keywords-in-java/annotations/","title":"Annotations","text":"<p>An annotation is a marker which associates information with a program construct, but has no effect at run time.</p> <p>Annotations may appear before types or declarations. It is possible for them to appear in a place where they could apply to both a type or a declaration. What exactly an annotation applies to is governed by the \"meta-annotation\" <code>@Target</code> . See \"Defining annotation types\" for more information.</p>"},{"location":"notes-md/java/keywords-in-java/annotations/#defining-annotation-types","title":"Defining annotation types","text":"<pre><code>@interface MyAnnotation {\n    String param1();\n    boolean param2();\n    int[] param3(); // array parameter\n}\n</code></pre> <p>Default Values</p> <pre><code>@interface MyAnnotation {\n    String param1() default \"someValue\";\n    boolean param2() default true;\n    int[] param3() default {};\n}\n</code></pre>"},{"location":"notes-md/java/keywords-in-java/annotations/#override","title":"@Override","text":"<pre><code>public class Vehicle {\n    public void drive() {\n        System.out.println(\"I am driving\");\n    }\n}\n\nclass Car extends Vehicle {\n    // Fine\n    @Override\n    public void drive() {\n        System.out.prinln(\"Brrrm, brrm\");\n    }\n}\n\n// Abstract Classes\nabstract class Animal {\n    public abstract void makeNoise();\n}\n\nclass Dog extends Animal {\n    // Fine\n    @Override\n    public void makeNoise() {\n        System.out.prinln(\"Woof\");\n    }\n}\n\n// this will throw an error\nclass Logger1 {\n    public void log(String logString) {\n        System.out.prinln(logString);\n    }\n}\n\nclass Logger2 {\n    // This will throw compile-time error. Logger2 is not a subclass of Logger1.\n    // log method is not overriding anything\n    @Override\n    public void log(String logString) {\n        System.out.println(\"Log 2\" + logString);\n    }\n}\n</code></pre>"},{"location":"notes-md/java/keywords-in-java/comparators/","title":"Comparators","text":"<p>Sorting an Object array : In order to sort an object array, all elements must implement either <code>Comparable</code> or <code>Comparator</code> interface to define the order of the sorting.</p> <p>Consider we have a task of sorting objects that are instances of the following class:</p> <pre><code>public class User {\n    public final Long id;\n    public final String username;\n\n    public User(Long id, String username) {\n        this.id = id;\n        this.username = username;\n    }\n\n    @Override\n    public String toString() {\n        return String.format(\"%s:%d\", username, id);\n    }\n}\n</code></pre> <p>In order to use <code>Collections.sort(List list)</code> we need to modify the User class to implement the Comparable interface. For example</p> <pre><code>public class User implements Comparable&lt;User&gt; {\n    public final Long id;\n    public final String username;\n\n    public User(Long id, String username) {\n        this.id = id;\n        this.username = username;\n    }\n\n    @Override\n    public String toString() {\n        return String.format(\"%s:%d\", username, id);\n    }\n\n    @Override\n    /** The natural ordering for 'User' objects is by the 'id' field. */\n    public int compareTo(User o) {\n        return id.compareTo(o.id);\n    }\n}\n</code></pre> <p>Consider the following to use this implementation</p> <pre><code>List&lt;User&gt; users = Lists.newArrayList(\n    new User(33L, \"A\"),\n    new User(25L, \"B\"),\n    new User(28L, \"\")\n);\n\nCollections.sort(users);\nSystem.out.print(users);\n// [B:25, C:28, A:33]\n</code></pre> <p>You can also compare the <code>username</code></p> <pre><code>Collections.sort(users, (l, r) -&gt; l.username.compareTo(r.username));\n</code></pre>"},{"location":"notes-md/java/keywords-in-java/packages-in-java/","title":"Packages in Java","text":"<pre><code>import package.name.Class;   // Import a single class\nimport package.name.*;   // Import the whole package\n</code></pre>"},{"location":"notes-md/java/keywords-in-java/packages-in-java/#import-a-class","title":"Import a Class","text":"<pre><code>import java.util.Scanner;\nimport java.util.*;\n</code></pre>"},{"location":"notes-md/java/keywords-in-java/packages-in-java/#user-defined-packages","title":"User-defined Packages","text":"<pre><code>//save by A.java  \npackage pack;\n\npublic class A {\n    public void msg() {\n        System.out.println(\"Hello\");\n    }\n}\n</code></pre> <pre><code>//save by B.java  \npackage mypack;\n\nimport pack.*;\n\nclass B {\n    public static void main(String args[]) {\n        A obj = new A();\n        obj.msg();\n    }\n}\n</code></pre>"},{"location":"notes-md/java/name-it-something/","title":"Useful Stuff Java","text":""},{"location":"notes-md/java/name-it-something/#this-section-contains","title":"This section contains","text":"<ul> <li>Comparators</li> <li>Annotations</li> </ul>"},{"location":"notes-md/java/name-it-something/lambda-and-stream/","title":"Lambda &amp; Stream","text":"<pre><code>@FunctionalInterface\ninterface CheckPerson {\n    boolean test(Person p);\n}\n\n@FunctionalInterface\ninterface Printer {\n    void test(Object o);\n}\n\nclass CheckPersonWithCondition implements CheckPerson {\n\n    @Override\n    public boolean test(Person p) {\n        return p.gender == Person.Gender.MALE;\n    }\n\n}\n\nclass ObjectPrinter implements Printer {\n\n    @Override\n    public void test(Object o) {\n        System.out.println(o.toString());\n    }\n}\n\npublic class App {\n\n    public static void main(String[] args) throws Exception {\n\n        List&lt;Person&gt; peoples = Person.generatePersonList();\n\n        System.out.println(peoples);\n\n        // Condition for Male\n        printPeopleWithCheck(peoples, new CheckPersonWithCondition());\n\n        // Condition for Female\n        printPeopleWithCheck(peoples, new CheckPerson() {\n            @Override\n            public boolean test(Person p) {\n                return p.gender == Person.Gender.FEMALE;\n            }\n        });\n\n        // With Lambda Expression for Male\n        printPeopleWithCheck(peoples, p -&gt; p.gender == Person.Gender.MALE);\n\n        // With Predicatefor Female\n        printPeopleWithCheckWithPredicate(peoples, p -&gt; p.gender == Person.Gender.FEMALE);\n\n        List&lt;Person&gt; personList = Person.generatePersonList();\n\n        personList.forEach(System.out::println);\n\n        List&lt;Person&gt; newList = personList.stream().map(\n                x -&gt; new Person(\n                        x.getName(),\n                        x.getAge() + 1,\n                        x.getEmailAddress(),\n                        x.getGender()))\n                .collect(Collectors.toList());\n\n        List&lt;Person&gt; anotherList = personList.stream()\n                .filter(x -&gt; x.getGender() == Person.Gender.FEMALE)\n                .collect(Collectors.toList());\n\n        List&lt;Person&gt; randomList = personList.stream()\n                .sorted(Comparator.comparing(Person::getAge))\n                .collect(Collectors.toList());\n\n        System.out.println(newList);\n        System.out.println(anotherList);\n        System.out.println(randomList);\n\n        ObjectPrinter objPrinter = new ObjectPrinter();\n        objPrinter.test(10);\n\n        App.appPrinter(10, System.out::println);\n\n        Runnable runnable = () -&gt; {\n            System.out.println(\"hello world\");\n        };\n\n        new Thread(runnable).start();\n        System.out.println(\"another hello\");\n\n        Printer printer = (i) -&gt; {\n            System.out.println(\"Number is : \" + i);\n        };\n\n        printer.test(21);\n\n        List&lt;Integer&gt; arrlist = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);\n        List&lt;Integer&gt; evenList = arrlist.stream().filter(i -&gt; i % 2 == 0).collect(Collectors.toList());\n        List&lt;Integer&gt; revSortedList = arrlist.stream().sorted(Comparator.reverseOrder()).collect(Collectors.toList());\n        List&lt;Integer&gt; naturalSortedList = revSortedList.stream().sorted(Comparator.naturalOrder())\n                .collect(Collectors.toList());\n\n        System.out.println(evenList);\n        System.out.println(revSortedList);\n        System.out.println(naturalSortedList);\n\n    }\n\n    public static void printPeopleWithCheck(List&lt;Person&gt; people, CheckPerson checkPerson) {\n        for (Person p : people) {\n            if (checkPerson.test(p)) {\n                p.printPerson();\n            }\n        }\n    }\n\n    public static void printPeopleWithCheckWithPredicate(List&lt;Person&gt; people, Predicate&lt;Person&gt; checkPerson) {\n        for (Person p : people) {\n            if (checkPerson.test(p)) {\n                p.printPerson();\n            }\n        }\n    }\n\n    public static void appPrinter(Object o, Printer genericPrinter) {\n        genericPrinter.test(o);\n    }\n}\n\n// Person.java\nimport java.util.ArrayList;\nimport java.util.List;\n\nclass Person {\n\n    public enum Gender {\n        MALE, FEMALE\n    }\n\n    Gender gender;\n\n    String name;\n    int age;\n    String emailAddress;\n\n    public Person() {\n    }\n\n    public Person(String name, int age, String emailAddress, Gender gender) {\n        this.name = name;\n        this.age = age;\n        this.emailAddress = emailAddress;\n        this.gender = gender;\n    }\n\n    public Gender getGender() {\n        return gender;\n    }\n\n    public void setGender(Gender gender) {\n        this.gender = gender;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public void setName(String name) {\n        this.name = name;\n    }\n\n    public int getAge() {\n        return age;\n    }\n\n    public void setAge(int age) {\n        this.age = age;\n    }\n\n    public String getEmailAddress() {\n        return emailAddress;\n    }\n\n    public void setEmailAddress(String emailAddress) {\n        this.emailAddress = emailAddress;\n    }\n\n    @Override\n    public String toString() {\n        return \"Person{\" +\n                \"gender=\" + gender +\n                \", name='\" + name + '\\'' +\n                \", age=\" + age +\n                \", emailAddress='\" + emailAddress + '\\'' +\n                '}';\n    }\n\n    public void printPerson() {\n        System.out.println(this.toString());\n    }\n\n    public static List&lt;Person&gt; generatePersonList() {\n        List&lt;Person&gt; people = new ArrayList&lt;&gt;();\n\n        people.add(new Person(\"Uday Yadav\", 21, \"udayyadav@earth.com\", Gender.MALE));\n        people.add(new Person(\"Another Uday\", 22, \"yadavuday@earth.com\", Gender.MALE));\n        people.add(new Person(\"Multiverse Uday\", 19, \"multiuday@muultiverse.com\", Gender.FEMALE));\n\n        return people;\n    }\n\n}\n</code></pre>"},{"location":"notes-md/java/object-oriented-programming/","title":"Object Oriented Programming","text":""},{"location":"notes-md/java/object-oriented-programming/#this-section-contains","title":"This section contains :","text":"<ul> <li>Constructors</li> <li>Object Class Methods and Constructor</li> <li>Immutable Class &amp; Objects</li> <li>Visibility</li> </ul>"},{"location":"notes-md/java/object-oriented-programming/constructors/","title":"Constructors","text":""},{"location":"notes-md/java/object-oriented-programming/constructors/#default-constructor","title":"Default Constructor","text":"<pre><code>public class TestClass {\n    private String test;\n\n    public TestClass() {\n    }\n}\n</code></pre> <p>The \"default\" for constructors is that they do not have any arguments.The visibility of the default constructor is the same as the visibility of the class. Thus a class defined package- privately has a package-private default constructor</p>"},{"location":"notes-md/java/object-oriented-programming/constructors/#normal-constructor","title":"Normal Constructor","text":"<pre><code>public class TestClass {\n    private String test;\n    public TestClass() {\n    }\n    public TestClass(String arg) {\n    }\n}\n</code></pre> <p>You can have more than one constructor</p> <pre><code>class Parent {\n    private String name;\n    private int age;\n\n    public Parent() {\n    } // necessary because we call super() without arguments\n\n    public Parent(String tName, int tAge) {\n        name = tName;\n        age = tAge;\n    }\n\n    public void printer() {\n        System.out.println(\"Name : \" + this.name + \" Age : \" + this.age);\n    }\n}\n\n// This does not even compile, because name and age are private,\n// making them invisible even to the child class.\nclass Child extends Parent {\n    public Child() {\n        super(\"uday2\", 10);\n    }\n}\n\nclass Main {\n    public static void main(String[] args) {\n        Parent p = new Parent(\"uday\", 42);\n        Child c = new Child();\n        p.printer();\n        c.printer();\n    }\n}\n</code></pre>"},{"location":"notes-md/java/object-oriented-programming/generics/","title":"Generics","text":"<p>Generics are a facility of generic programming that extend Java's type system to allow a type or method to operate on objects of various types while providing compile-time type safety. In particular, the Java collections framework supports generics to specify the type of objects stored in a collection instance</p> <pre><code>class Param&lt;T&gt; {\n    private T value;\n\n    public T getValue() {\n        return value;\n    }\n\n    public void setValue(T value) {\n        this.value = value;\n    }\n}\n\npublic class Program {\n\n    public static void main(String[] args) {\n        Param&lt;Integer&gt; parInt = new Param&lt;Integer&gt;();\n        Param&lt;String&gt; parStr = new Param&lt;String&gt;();\n\n        parInt.setValue(10);\n        parStr.setValue(\"uday yadav\");\n\n        System.out.println(\"Int : \" + parInt.getValue());\n        System.out.println(\"Str : \" + parStr.getValue());\n\n    }\n}\n</code></pre>"},{"location":"notes-md/java/object-oriented-programming/immutable-class-and-objects/","title":"Immutable Class &amp; Objects","text":""},{"location":"notes-md/java/object-oriented-programming/immutable-class-and-objects/#immutable-class","title":"Immutable Class","text":"<pre><code>public final class Color {\n    final private int red;\n    final private int green;\n    final private int blue;\n\n    private void check(int red, int green, int blue) {\n        if (red &lt; 0 || red &gt; 255 || green &lt; 0 || green &gt; 255 || blue &lt; 0 || blue &gt; 255) {\n            throw new IllegalArgumentException();\n        }\n    }\n\n    public Color(int red, int green, int blue) {\n        check(red, green, blue);\n        this.red = red;\n        this.green = green;\n        this.blue = blue;\n    }\n\n    public Color invert() {\n        return new Color(255 - red, 255 - green, 255 - blue);\n    }\n}\n</code></pre>"},{"location":"notes-md/java/object-oriented-programming/immutable-class-and-objects/#what-is-the-advantage-of-immutability","title":"What is the advantage of immutability?","text":"<p>The advantage of immutability comes with concurrency. It is difficult to maintain correctness in mutable objects, as multiple threads could be trying to change the state of the same object, leading to some threads seeing a different state of the same object, depending on the timing of the reads and writes to the said object.</p> <p>By having an immutable object, one can ensure that all threads that are looking at the object will be seeing the same state, as the state of an immutable object will not change.</p>"},{"location":"notes-md/java/object-oriented-programming/immutable-class-and-objects/#rules-to-define-immutable-classes","title":"Rules to define immutable classes","text":"<p>The following rules define a simple strategy for creating immutable objects.</p> <ul> <li>Don't provide \"setter\" methods - methods that modify fields or objects referred to by fields. </li> <li>Make all fields final and private.</li> <li>Don't allow subclasses to override methods. The simplest way to do this is to declare the class as final. A more sophisticated approach is to make the constructor private and construct instances in factory methods.</li> <li>If the instance fields include references to mutable objects, don't allow those objects to be changed.</li> <li>Don't provide methods that modify the mutable objects.</li> <li>Don't share references to the mutable objects. Never store references to external, mutable objects passed to the constructor; if necessary, create copies, and store references to the copies. Similarly, create copies of your internal mutable objects when necessary to avoid returning the originals in your methods.</li> </ul>"},{"location":"notes-md/java/object-oriented-programming/immutable-class-and-objects/#immutable-object","title":"Immutable Object","text":"<p>An immutable object is an object whose state cannot be changed. An immutable class is a class whose instances are immutable by design, and implementation.</p> <p>The standard recipe for an immutable class is as follows:</p> <ul> <li>All properties must be set in the constructor(s) or factory method(s). </li> <li>There should be no setters. If it is necessary to include setters for interface compatibility reasons, they should either do nothing or throw an exception. </li> <li>All properties should be declared as private and final.</li> <li>For all properties that are references to mutable types: the property should be initialized with a deep copy of the value passed via the constructor, and the property's getter should return a deep copy of the property value. </li> <li>The class should be declared as final to prevent someone creating a mutable subclass of an immutable class. </li> </ul> <p>A couple of other things to note:</p> <ul> <li>Immutability does not prevent object from being nullable; e.g. null can be assigned to a String variable. </li> <li>If an immutable classes properties are declared as final , instances are inherently thread-safe. This makes immutable classes a good building block for implementing multi-threaded applications.</li> </ul>"},{"location":"notes-md/java/object-oriented-programming/object-class-methods-andconstructor/","title":"Object Class Methods and Constructor","text":""},{"location":"notes-md/java/object-oriented-programming/object-class-methods-andconstructor/#hashcode-method","title":"hashCode() method","text":"<p>The general contract of <code>hashCode</code> is:</p> <ul> <li>Whenever it is invoked on the same object more than once during an execution of a Java application, the <code>hashCode</code> method must consistently return the same integer, provided no information used in <code>equals</code> comparisons on the object is modified. This integer need not remain consistent from one execution of an application to another execution of the same application.</li> <li>If two objects are equal according to the <code>equals(Object)</code> method, then calling the <code>hashCode</code> method on each of the two objects must produce the same integer result.</li> <li>It is not required that if two objects are unequal according to the <code>equals(java.lang.Object)</code> method, then calling the <code>hashCode</code> method on each of the two objects must produce distinct integer results. However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of hash tables.</li> </ul>"},{"location":"notes-md/java/object-oriented-programming/object-class-methods-andconstructor/#equals-method","title":"equals() method","text":"<pre><code>public class Foo {\n    int field1, field2;\n    String field3;\n\n    public Foo(int i, int j, String k) {\n        field1 = i;\n        field2 = j;\n        field3 = k;\n    }\n\n    public static void main(String[] args) {\n        Foo foo1 = new Foo(0, 0, \"bar\");\n        Foo foo2 = new Foo(0, 0, \"bar\");\n        System.out.println(foo1.equals(foo2)); // prints false\n    }\n}\n</code></pre> <p>Even though foo1 and foo2 are created with the same fields, they are pointing to two different objects in memory. The default <code>equals()</code> implementation therefore evaluates to <code>false</code>.</p> <pre><code>public class Foo {\n    int field1, field2;\n    String field3;\n\n    public Foo(int i, int j, String k) {\n        field1 = i;\n        field2 = j;\n        field3 = k;\n    }\n\n    @Override\n    public boolean equals(Object obj) {\n        if (this == obj) {\n            return true;\n        }\n        if (obj == null || getClass() != obj.getClass()) {\n            return false;\n        }\n        Foo f = (Foo) obj;\n        return field1 == f.field1 &amp;&amp; field2 == f.field2\n                &amp;&amp; (field3 == null ? f.field3 == null : field3.equals(f.field3));\n    }\n\n    public static void main(String[] args) {\n        Foo foo1 = new Foo(0, 0, \"bar\");\n        Foo foo2 = new Foo(0, 0, \"bar\");\n        System.out.println(foo1.equals(foo2)); // prints true\n    }\n}\n</code></pre>"},{"location":"notes-md/java/object-oriented-programming/object-class-methods-andconstructor/#getclass-method","title":"getClass() method","text":"<pre><code>class hello {\n    int number;\n}\nclass Program {\n    public static void main(String[] args) {\n        hello obj = new hello();\n        System.out.println(obj.getClass());\n    }\n}\n// prints \"class hello\"\n</code></pre>"},{"location":"notes-md/java/object-oriented-programming/object-class-methods-andconstructor/#clone-method","title":"clone() method","text":"<p>The <code>clone()</code> method is used to create and return a copy of an object. This method arguable should be avoided as it is problematic and a copy constructor or some other approach for copying should be used in favour of <code>clone()</code></p> <p>For the method to be used all classes calling the method must implement the <code>Cloneable</code> interface.</p> <p>The Cloneable interface itself is just a tag interface used to change the behaviour of the native <code>clone()</code> method which checks if the calling objects class implements Cloneable . If the caller does not implement this interface a <code>CloneNotSupportedException</code> will be thrown. The Object class itself does not implement this interface so a <code>CloneNotSupportedException</code> will be thrown if the calling object is of class Object .</p> <pre><code>// A Java program to demonstrate shallow copy \n// using clone() \nimport java.util.ArrayList; \n\n// An object reference of this class is \n// contained by Test2 \nclass Test \n{ \n    int x, y; \n} \n\n// Contains a reference of Test and implements \n// clone with shallow copy. \nclass Test2 implements Cloneable \n{ \n    int a; \n    int b; \n    Test c = new Test(); \n    public Object clone() throws\n                CloneNotSupportedException \n    { \n        return super.clone(); \n    } \n} \n\n// Driver class \npublic class Main \n{ \n    public static void main(String args[]) throws\n                        CloneNotSupportedException \n    { \n    Test2 t1 = new Test2(); \n    t1.a = 10; \n    t1.b = 20; \n    t1.c.x = 30; \n    t1.c.y = 40; \n\n    Test2 t2 = (Test2)t1.clone(); \n\n    // Creating a copy of object t1 and passing \n    // it to t2 \n    t2.a = 100; \n\n    // Change in primitive type of t2 will not \n    // be reflected in t1 field \n    t2.c.x = 300; \n\n    // Change in object type field will be \n    // reflected in both t2 and t1(shallow copy) \n    System.out.println(t1.a + \" \" + t1.b + \" \" + \n                        t1.c.x + \" \" + t1.c.y); \n    System.out.println(t2.a + \" \" + t2.b + \" \" + \n                        t2.c.x + \" \" + t2.c.y); \n    } \n}\n</code></pre> <p>\u0000</p>"},{"location":"notes-md/java/object-oriented-programming/visibility/","title":"Visibility","text":""},{"location":"notes-md/java/object-oriented-programming/visibility/#private-visibility","title":"Private Visibility","text":"<p>private visibility allows a variable to only be accessed by its class. They are often used in conjunction with public getters and setters.</p> <pre><code>class SomeClass {\n    private int variable;\n\n    public int getVariable() {\n        return variable;\n    }\n\n    public void setVariable(int variable) {\n        this.variable = variable;\n    }\n}\n\npublic class SomeOtherClass {\n    public static void main(String[] args) {\n        SomeClass sc = new SomeClass();\n        // These statement won't compile because SomeClass#variable is private:\n        sc.variable = 7;\n        System.out.println(sc.variable);\n        // Instead, you should use the public getter and setter:\n        sc.setVariable(7);\n        System.out.println(sc.getVariable());\n    }\n}\n</code></pre>"},{"location":"notes-md/java/object-oriented-programming/visibility/#protected-visibility","title":"Protected Visibility","text":"<p>Protected visibility causes means that this member is visible to its package, along with any of its subclasses.</p> <pre><code>package com.stackexchange.docs;\n\npublic class MyClass {\n    protected int variable; // This is the variable that we are trying to access\n\n    public MyClass() {\n        variable = 2;\n    };\n}\n</code></pre>"},{"location":"notes-md/java/object-oriented-programming/visibility/#public-visibility","title":"Public Visibility","text":"<p>Visible to the class, package, and subclass</p> <pre><code>public class Test{\n    public int number = 2;\n        public Test(){\n    }\n}\n\npublic class Other{\n    public static void main(String[] args){\n        Test t = new Test();\n        System.out.println(t.number);\n    }\n}\n</code></pre>"},{"location":"notes-md/linux/","title":"Linux","text":""},{"location":"notes-md/linux/#_1","title":"Linux","text":""},{"location":"notes-md/linux/linux-commands-part-1-4/","title":"Linux Commands Part 1 - 4","text":"<p>Tags: linux-com-book</p>"},{"location":"notes-md/linux/linux-commands-part-1-4/#introductory-commands","title":"Introductory Commands","text":"<ul> <li><code>#</code> before terminal means super-user</li> <li><code>date</code> to print date and time</li> <li><code>Sat Jun 18 12:01:17 AM IST 2022</code></li> <li><code>cal</code> to print calendar</li> <li><code>df</code> to print disk drive and usage</li> <li><code>free</code> to print memory</li> <li><code>pwd</code> print working directory</li> <li><code>Absolute PathName</code> : begins with root directory and follows the tree branch by branch till the desired folder</li> <li><code>Relative PathName</code> : starts from the working directory</li> <li><code>cd</code> to change directory</li> <li><code>cd -</code> to revert to previous directory</li> <li><code>cd ~username</code> : to change directory to another user</li> <li> <p>ls : to list directories</p> <ul> <li><code>ls directory_1 directory_2</code> : to print list or multiple directories</li> </ul> <pre><code>\u279c  ~ ls programm software\nprogramm:\nazure-dev-hackathon  inbox-app            \nconfigs              learning-springboot  \ndemo                 playground           \n\nsoftware:\njetbrains-toolbox  tor-browser_en-US\n</code></pre> <ul> <li><code>ls -l</code> : for more details</li> <li><code>ls -lt</code> : to list sorted acc. date modifed</li> <li><code>\u2014reverse</code> : to reverse the sort</li> </ul> <p></p> </li> </ul> <p>Long Listing Details</p> <p></p> <ul> <li><code>file filename</code> : to print a brief description of the file\u2019s contents</li> <li><code>less</code> : to view content of file</li> </ul>"},{"location":"notes-md/linux/linux-commands-part-1-4/#file-structure","title":"File Structure","text":""},{"location":"notes-md/linux/linux-commands-part-1-4/#symbolic-links-soft-link-symlink","title":"Symbolic Links | Soft Link | Symlink","text":"<ul> <li>symbolic links are like aliases or another name for the file</li> </ul> <pre><code>lrwxrwxrwx 1 root root\n11 2018-08-11 07:34 libc.so.6 ***-&gt;*** libc-2.6.so\n</code></pre> <p>Why they are useful ?</p> <ul> <li>Imagine we have a file with name <code>foo</code> . Whenever we update it we, change its name to foo-date-time, but the programs/user referencing it wouldst know that the name has change. To tackle this problem, we create a symlink of file foo \u2192 foo-date-time and the programs/user user only reference the symlink.</li> <li>So even if we change the name of file foo, it wont affect the programs as they would be referencing the symlink.</li> </ul>"},{"location":"notes-md/linux/linux-commands-part-1-4/#manipulating-files-and-directories","title":"Manipulating Files and Directories","text":"<ul> <li>to create new directories</li> <li><code>mkdir dir_name</code></li> <li>to create multiple directories</li> <li><code>mkdir dir1 dir2 dir3</code></li> <li>to copy file to another directory</li> <li><code>cp item directory</code></li> <li>if <code>cp item1 item2</code> then content of item2 is replace with item1</li> <li>use <code>-a</code> file while copying to copy the attributes as well</li> </ul> <ul> <li>The <code>mv</code> command performs both file moving and file renaming, depending on how it is used</li> <li>to move item to another directory <code>mv item... directory</code></li> <li>to delete item <code>rm item</code></li> </ul>"},{"location":"notes-md/linux/linux-commands-part-1-4/#hard-links-vs-soft-links","title":"Hard Links vs Soft Links","text":""},{"location":"notes-md/linux/linux-commands-part-1-4/#hard-link","title":"Hard Link","text":"<ul> <li>Hard links are the original Unix way of creating links</li> <li>Every file has a single hard link that gives the file its name</li> <li>Limitations</li> <li>A hard link cannot reference a file outside its own file system</li> <li>A hard link may not reference a directory</li> <li>A hard link is indistinguishable from the file itself</li> </ul> <pre><code>// for hard link\n-&gt; ln file.txt link\n\n-&gt; ls\n-rw-r--r--. 1 udayyadav udayyadav  12 Jun 20 23:06 file.txt\n-rw-r--r--. 2 udayyadav udayyadav  12 Jun 20 23:06 link1\n</code></pre>"},{"location":"notes-md/linux/linux-commands-part-1-4/#soft-link","title":"Soft Link","text":"<ul> <li>They work by creating a special type of file that contains a text pointer to the referenced file or directory</li> <li>They are like windows shortcuts</li> <li>If file is deleted, then link points to nothing, it is broken</li> </ul> <pre><code>// for soft link\n-&gt; ln -s file.txt link\n\n-&gt; ls\nlrwxrwxrwx. 1 udayyadav udayyadav   9 Jun 21 07:59 link2 -&gt; file2.txt\n</code></pre>"},{"location":"notes-md/linux/linux-commands-part-1-4/#wildcards","title":"WildCards","text":""},{"location":"notes-md/linux/linux-commands-part-5-8/","title":"Linux Commands Part 5 - 8","text":"<p>Tags: linux-com-book</p>"},{"location":"notes-md/linux/linux-commands-part-5-8/#what-are-commands","title":"What are commands","text":"<ul> <li>An executable program</li> <li>A program built into the shell itself</li> <li>A shell function</li> <li>A alias</li> </ul>"},{"location":"notes-md/linux/linux-commands-part-5-8/#commands","title":"Commands","text":"<ul> <li>to know command is of which type : <code>type command</code></li> <li>to the exact location of executable : <code>which ls</code></li> <li>in bash, to get info regarding shell built-ins : <code>help cd</code></li> <li>to display program\u2019s manual page : <code>man program</code></li> <li>to search the list of man pages for possible matches based on a search term</li> </ul> <pre><code>-&gt; apropos partition\n\n#output : \naddpart (8)          - tell the kernel about the existence of a partition\ncfdisk (8)           - display or manipulate a disk partition table\ncgdisk (8)           - Curses-based GUID partition table (GPT) manipulator\ndelpart (8)          - tell the kernel to forget about a partition\nfdisk (8)            - manipulate disk partition table\n...\n</code></pre> <ul> <li>to display one-line manual page description : <code>whatis ls</code></li> <li>alternative to man page : <code>info coreutils</code></li> <li>to create alias command : <code>alias foo=\u201dcd programm &amp;&amp; code .\u201d</code></li> </ul>"},{"location":"notes-md/linux/linux-commands-part-5-8/#input-output-commands","title":"Input Output Commands","text":"<ul> <li>to redirect standard output to a file :</li> <li><code>[me@linuxbox ~]$ ls -l /usr/bin &gt; ls-output.txt</code></li> <li>\u201c&gt;\u201d also clears the whole file and adds the new content</li> <li>\u201c&gt;&gt;\u201d will append the content to the file at the end</li> <li>Error message aren\u2019t send to file unless specified in the command, they are sent to standard error</li> </ul> <p>There are 3 types of file streams</p> <ul> <li>Input</li> <li>Output</li> <li>Error</li> </ul> <pre><code># redirect standard error to file\nls -l /bin/usr 2&gt; ls-error.txt\n\n# redirecting standard output to standard error\nls -l /bin/usr &gt; ls-output.txt 2&gt;&amp;1\n\n# modern way to redirect output\nls -l /bin/usr &amp;&gt; ls-output.txt\n\n# disposing unwanted output\nls -l /bin/usr 2&gt; /dev/null\n</code></pre>"},{"location":"notes-md/linux/linux-commands-part-5-8/#pipelines","title":"Pipelines","text":"<ul> <li>The capability of commands to read data from standard input and send to standard output.</li> <li>to view a long output : <code>ls -l /usr/bin | less</code></li> <li>Pipelines are used along with filter</li> <li>Ex : <code>ls -l /usr/bin | sort | less</code></li> </ul>"},{"location":"notes-md/linux/linux-commands-part-5-8/#the-difference-between-and","title":"The Difference Between &gt; and |","text":"<p>Simply put, the redirection operator connects a command with a file, while the pipeline operator connects the output of one command with the input of a second command.</p> <ul> <li><code>uniq</code> is used to remove duplicate lines, mostly placed after sort</li> <li><code>wc</code> : to print Print Line, Word, and Byte Counts : <code>wc names.txt</code></li> <li>grep to filter out using keyword : <code>ls /bin /usr/bin | sort | uniq | grep zip</code></li> <li><code>head</code> to print the first part of file</li> <li><code>-n x</code> to print first/last x lines</li> <li><code>tail</code> to print the last part of file</li> <li><code>-f</code> to keep watching file for changes</li> <li><code>tee</code> : program reads standard input and copies it to both standard output (allowing the data to continue down the pipeline) and to one or more files</li> </ul>"},{"location":"notes-md/linux/linux-commands-part-5-8/#the-world-of-echo","title":"The world of Echo","text":"<ul> <li>print something to terminal</li> </ul> <pre><code>\u279c  ~ echo \"hello world\"\nhello world\n\n# print file starting with D\n\u279c  ~ echo D*\nDesktop Documents Downloads\n\n# print upper case\n[me@linuxbox ~]$ echo [[:upper:]]*\nDesktop Documents Music Pictures Public Templates Videos\n\n# print matching directories\n[me@linuxbox ~]$ echo /usr/*/share\n/usr/kerberos/share /usr/local/share\n</code></pre>"},{"location":"notes-md/linux/linux-commands-part-5-8/#arithmetic-expression","title":"Arithmetic Expression","text":"<pre><code>\u279c  ~ echo $((2 + 2))\n4\n\n\u279c  ~ echo $(($((5**2)) * 3))\n75\n</code></pre>"},{"location":"notes-md/linux/linux-commands-part-5-8/#brace-expression","title":"Brace Expression","text":"<pre><code>\u279c ~ echo Front-{A,B,C}-Back\nFront-A-Back Front-B-Back Front-C-Back\n\n\u279c ~ echo Number_{1..5}\nNumber_1 Number_2 Number_3 Number_4 Number_5\n\n# In bash version 4.0 and newer, \n# integers may also be zero-padded like so:\n[me@linuxbox ~]$ echo {01..15}\n01 02 03 04 05 06 07 08 09 10 11 12 13 14 15\n\n# with numbers\n[me@linuxbox ~]$ echo {001..15}\n001 002 003 004 005 006 007 008 009 010 011 012 013 014 015\n\n# Here is a range of letters in reverse order\n[me@linuxbox ~]$ echo {Z..A}\nZ Y X W V U T S R Q P O N M L K J I H G F E D C B A\n\n# Brace expansions may be nested.\n[me@linuxbox ~]$ echo a{A{1,2},B{3,4}}b\naA1b aA2b aB3b aB4b\n\n# making dir with braces\n- ~ mkdir {2007..2009}-{01..12}\n[me@linuxbox Photos]$ ls\n2007-01 2007-07 2008-01 2008-07 2009-01 2009-07\n2007-02 2007-08 2008-02 2008-08 2009-02 2009-08\n2007-03 2007-09 2008-03 2008-09 2009-03 2009-09\n2007-04 2007-10 2008-04 2008-10 2009-04 2009-10\n2007-05 2007-11 2008-05 2008-11 2009-05 2009-11\n2007-06 2007-12 2008-06 2008-12 2009-06 2009-12\n</code></pre> <ul> <li>use \u201c\u201d to print the string as it is</li> <li>use ** to as escape character</li> <li><code>!200</code> will give the command in history at line 200</li> </ul>"},{"location":"notes-md/linux/linux-commands-part-9-10/","title":"Linux Commands Part 9 - 10","text":"<p>Tags: linux-com-book</p> <ul> <li>User accounts are defined in the <code>/etc/passwd</code> file</li> <li>groups are defined in the <code>/etc/group</code> file</li> </ul> <p></p> <p></p> <p></p> <p></p> <p></p>"},{"location":"notes-md/linux/linux-commands-part-9-10/#chown-and-chgrp","title":"chown and chgrp","text":"<ul> <li><code>chown</code> : to change the file ownership </li> <li><code>chgrp</code> : to change the group</li> </ul> <p><code>d|rwx|rwx|rwx</code></p> <ul> <li>d : directory</li> <li>1st block for user</li> <li>2nd block for group (of user)</li> <li>3rd block for other</li> </ul> <pre><code>chmod u=rwx test.sh\nchmod g=rwx test.sh\nchmod o=rwx test.sh\nchmod go-wx test.sh\nchmod 744 test.sh\n</code></pre> <p>numbering system : read = 4 write = 2 exec = 1</p>"},{"location":"notes-md/linux/linux-commands-part-9-10/#processes","title":"Processes","text":"<ul> <li>When a system starts up, the kernel initiates a few of its own activities as processes and launches a program called init</li> <li>init, in turn, runs a series of shell scripts (located in /etc) called init scripts</li> <li>The fact that a program can launch other programs is expressed in the process scheme as a parent process producing a child process</li> </ul> <pre><code># to look at process \nps \n\n# to show all process regardless of terminal\nps x\n\n# output \nPID TTY      STAT   TIME COMMAND\n   1876 ?        Ss     0:02 /usr/lib/systemd/systemd --user\n   1881 ?        S      0:00 (sd-pam)\n   1895 ?        Ss     0:12 /usr/bin/appimagelauncherd\n   1902 ?        Sl     0:00 /usr/bin/gnome-keyring-daemon --daemon\n   1915 tty2     Ssl+   0:00 /usr/libexec/gdm-wayland-session /usr/\n   1917 ?        Ss     0:00 /usr/bin/dbus-broker-launch --scope us\n   1920 ?        S      0:02 dbus-broker --log 4 --controller 9 --m\n   1923 tty2     Sl+    0:00 /usr/libexec/gnome-session-binary\n   1982 ?        Ssl    0:00 /usr/libexec/gnome-session-ctl --monit\n   1983 ?        Ssl    0:00 /usr/libexec/uresourced --user\n   1986 ?        Ssl    0:00 /usr/libexec/gnome-session-binary --sy\n   1990 ?        Ssl    0:00 /usr/libexec/gvfsd\n\n# for a detailed look\nps aux\n\n# output\nUSER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\nroot           1  0.0  0.2 173328 17748 ?        Ss   16:29   0:01 /usr/lib/systemd/systemd\nroot           2  0.0  0.0      0     0 ?        S    16:29   0:00 [kthreadd]\nroot           3  0.0  0.0      0     0 ?        I&lt;   16:29   0:00 [rcu_gp]\nroot           4  0.0  0.0      0     0 ?        I&lt;   16:29   0:00 [rcu_par_gp]\nroot           5  0.0  0.0      0     0 ?        I&lt;   16:29   0:00 [netns]\nroot           7  0.0  0.0      0     0 ?        I&lt;   16:29   0:00 [kworker/0:0H-events_highpri]\nroot           9  0.0  0.0      0     0 ?        I&lt;   16:29   0:00 [kworker/0:1H-events_highpri]\nroot          10  0.0  0.0      0     0 ?        I&lt;   16:29   0:00 [mm_percpu_wq]\nroot          11  0.0  0.0      0     0 ?        I    16:29   0:06 [kworker/u32:1-blkcg_punt_bio]\nroot          12  0.0  0.0      0     0 ?        I    16:29   0:00 [rcu_tasks_kthread]\nroot          13  0.0  0.0      0     0 ?        I    16:29   0:00 [rcu_tasks_rude_kthread]\nroot          14  0.0  0.0      0     0 ?        I    16:29   0:00 [rcu_tasks_trace_kthread]\nroot          15  0.0  0.0      0     0 ?        S    16:29   0:00 [ksoftirqd/0]\n</code></pre> <p>Information shown by top</p> <p></p> <p></p> <ul> <li>to kill a process : <code>kill -signal [PID]</code></li> </ul> <p></p> <p></p> <p></p>"},{"location":"notes-md/linux/shell/","title":"Shell programming","text":""},{"location":"notes-md/linux/shell/#getting-started-with-shell-programming","title":"Getting Started with Shell Programming","text":""},{"location":"notes-md/linux/shell/#11-hello-world","title":"1.1 Hello  World","text":"<p>Printing Hello World</p> <pre><code>echo \"Hello World\"\necho hello world\n</code></pre> <p><code>echo</code> is a Bash builtin command that writes the arguments it receives to the standard output. It appends a newline to the output, by default.</p> <p>Non-interactive shell</p> <ul> <li> <p>Create a file with <code>.sh</code> extension using</p> <p><pre><code>touch try.sh\n</code></pre> *   Make the script executable</p> <pre><code>chmod +x try.sh\n</code></pre> <p><code>+x</code> makes the file executable *   open the file in nano by</p> <pre><code>nano try.sh\n</code></pre> <p>Or you can use vim, sublime, VScode or any other text editor you like. *   Inside the file, add</p> <pre><code>#!/bin/bash\necho \"Hello World\"\n</code></pre> <p>Line 1: The first line of the script must start with the character sequence #!, referred to as shebang</p> <ul> <li>The shebang instructs the operating system to run /bin/bash, the Bash shell, passing it the script's path as an argument</li> <li>Run the file using</li> </ul> <pre><code>./try.sh\n</code></pre> <p>OR you can use any of the following</p> <pre><code>./hello-world.sh \n/bin/bash hello-world.sh\nbash hello-world.sh \nsh hello-world.sh\n</code></pre> </li> </ul> <p>Note : Forgetting to apply execute permission on the file, i.e., <code>chmod +x hello-world.sh</code>, resulting in the output of <code>./hello-world.sh</code>: <code>Permission denied</code></p>"},{"location":"notes-md/linux/shell/#12-hello-world-using-variables","title":"1.2 Hello World using Variables","text":"<ul> <li>Create a new file called <code>hello.sh</code></li> <li> <p>Add</p> <pre><code>#!/bin/bash\nwhom_variable=\"World\"\nprintf \"Hello, %s\\n\" \"$whom_variable\"\n</code></pre> <p>Note : spaces cannot be used around the <code>=</code> assignment operator</p> </li> </ul>"},{"location":"notes-md/linux/shell/#13-hello-world-with-user-input","title":"1.3 Hello World with User Input","text":"<p>1.3.1 Reading from console</p> <pre><code>echo \"Who are you?\"\nread name\necho \"Hello, $name.\n</code></pre> <p><code>read</code> will read input given in a new line until the <code>enter</code> key is not pressed and will store the value in variable mentioned after the keyword.</p> <p>1.3.2 Formatting String</p> <pre><code>echo \"What are you doing?\"\nread action\necho \"You are ${action}ing.\"\n</code></pre>"},{"location":"notes-md/linux/shell/#14-importance-of-quoting-in-string","title":"1.4 Importance of Quoting in String","text":"<p>There are two types of quoting: \\</p> <ul> <li>Weak: uses double quotes: <code>\"</code> \\</li> <li>Strong: uses single quotes: <code>'</code></li> <li> <p>If you want to bash to expand your argument, you can use Weak Quoting:</p> <p><pre><code>#!/bin/bash\nworld=\"World\"\necho \"Hello $world\"\n#&gt; Hello World\n</code></pre> *   If you don't want to bash to expand your argument, you can use Strong Quoting:</p> <pre><code>world=\"World\"\necho 'Hello $world'\n#&gt; Hello $world\n</code></pre> </li> </ul>"},{"location":"notes-md/linux/shell/#15-hello-world-in-debug-mode","title":"1.5  Hello World in \"Debug\" mode","text":"<p>To see which line is running, you can use Debug mode</p> <ul> <li>Create a new file with simple echo hello world</li> <li> <p>Run the Script using</p> <pre><code>$ bash -x hello.sh\n</code></pre> <p>you will get the following output :</p> </li> </ul> <pre><code>$ echo Hello World\n$ Hello World\n</code></pre> <p>Note : The -x argument enables you to walk through each line in the script</p>"},{"location":"notes-md/linux/shell/#cat-alias","title":"Cat &amp; Alias","text":""},{"location":"notes-md/linux/shell/#using-cat","title":"Using Cat","text":"<p>Concatenate files</p> <p>This is the primary purpose of <code>cat</code> is to concatenate files.</p> <pre><code>cat text1.txt text2.txt &gt; text3.txt\n</code></pre> <p>This will add the contents of <code>text1.txt</code> and <code>text2.txt</code> to a new files called <code>text3.txt</code></p> <p>Printing the Contents of a File</p> <pre><code>cat file.txt\n</code></pre> <p>will print the contents of a file.</p> <p>If the file contains non-ASCII characters, you can display those characters symbolically with <code>cat -v</code> . This can be quite useful for situations where control characters would otherwise be invisible.</p> <p>Very often, for interactive use, you are better off using an interactive pager like <code>less</code> or <code>more</code> , though. ( <code>less</code> is far more powerful than <code>more</code> and it is advised to use <code>less</code> more often than <code>more</code>)</p> <pre><code>less file.txt\n</code></pre> <p>In case the content needs to be listed backwards from its end the command tac can be used:</p> <pre><code>tac file.txt\n</code></pre> <p>If you want to print the contents with line numbers, then use <code>-n</code> with cat:</p> <pre><code>cat -n file.txt\n</code></pre> <p>Write to a file</p> <pre><code>cat &gt;file\n</code></pre> <p>It will let you write the text on terminal which will be saved in a file named file.</p> <pre><code>cat &gt;&gt;file\n</code></pre> <p>will do the same, except it will append the text to the end of the file.</p> <p>N.B: <code>Ctrl+D</code> to end writing text on terminal (Linux)</p> <p>Read from standard input</p> <pre><code>cat &lt; file.txt\n</code></pre> <p>Output is same as cat file.txt , but it reads the contents of the file from standard input instead of directly from the file.</p> <pre><code>printf \"first line\\nSecond line\\n\" | cat -n\n</code></pre> <p>The echo command before | outputs two lines. The cat command acts on the output to add line numbers.</p> <p>Display line numbers with output</p> <p>Use the --number flag to print line numbers before each line. Alternatively, <code>-n</code> does the same thing.</p> <pre><code>cat --number file\n</code></pre> <p>To skip empty lines when counting lines, use the <code>--number -nonblank</code> , or simply <code>-b</code> .</p> <pre><code>cat -b file\n</code></pre>"},{"location":"notes-md/linux/shell/#aliasing","title":"Aliasing","text":"<p>Shell aliases are a simple way to create new commands or to wrap existing commands with code of your own. They somewhat overlap with shell functions, which are however more versatile and should therefore often be preferred.</p>"},{"location":"notes-md/linux/shell/#create-an-alias","title":"Create an Alias","text":"<pre><code>alias word='command'\n</code></pre> <p>Invoking word will run <code>command</code>. Any arguments supplied to the alias are simply appended to the target of the alias:</p> <p>To include multiple commands in the same alias, you can string them together with &amp;&amp; . For example:</p> <pre><code>alias print_things='echo \"foo\" &amp;&amp; echo \"bar\" &amp;&amp; echo \"baz\"'\n</code></pre>"},{"location":"notes-md/linux/shell/#remove-an-alias","title":"Remove an alias","text":"<p>To remove an existing alias, use:</p> <pre><code>unalias {alias_name}\n</code></pre>"},{"location":"notes-md/linux/shell/#bypass-an-alias","title":"Bypass an alias","text":"<p>Sometimes you may want to bypass an alias temporarily, without disabling it. To work with a concrete example, consider this alias:</p> <pre><code>alias ls='ls --color=auto'\n</code></pre>"},{"location":"notes-md/linux/shell/#the-bash_aliases-is-an-internal-bash-assoc-array","title":"The BASH_ALIASES is an internal bash assoc array","text":"<p>Aliases are named shortcuts of commands, one can define and use in interactive bash instances. They are held in an associative array named BASH_ALIASES. To use this var in a script, it must be run within an interactive shell</p> <pre><code>#!/bin/bash -li\n# note the -li above! -l makes this behave like a login shell\n# -i makes it behave like an interactive shell\n#\n# shopt -s expand_aliases will not work in most cases\n\necho There are ${#BASH_ALIASES[*]} aliases defined.\n\nfor ali in \"${!BASH_ALIASES[@]}\"; do\nprintf \"alias: %-10s triggers: %s\\n\" \"$ali\" \"${BASH_ALIASES[$ali]}\"\ndone\n</code></pre>"},{"location":"notes-md/linux/shell/#list-all-aliases","title":"List all Aliases","text":"<pre><code>alias -p\n</code></pre> <p>will list all the current aliases.</p>"},{"location":"notes-md/linux/shell/#jobs","title":"Jobs","text":""},{"location":"notes-md/linux/shell/#jobs_1","title":"Jobs","text":"<ul> <li>To create an job, just append a single &amp; after the command: <code>$ sleep 10 &amp;</code></li> <li>Or run immediately : <code>sleep 10</code></li> <li>To bring the Process to the foreground, the command fg is used together with % : <code>fg %</code></li> <li> <p>Killing running jobs</p> <pre><code>$ sleep 10 &amp;\n[1] 20024\n$ kill %1\n[1]+ Terminated                    sleep 10\n</code></pre> </li> </ul>"},{"location":"notes-md/linux/shell/#navigating-listing","title":"Navigating &amp; Listing","text":""},{"location":"notes-md/linux/shell/#navigating-directory","title":"Navigating Directory","text":""},{"location":"notes-md/linux/shell/#absolute-vs-relative-directories","title":"Absolute vs relative directories","text":"<p>To change to an absolutely specified directory, use the entire name, starting with a slash /, thus:</p> <pre><code>cd /home/username/project/abc\n</code></pre> <p>If you want to change to a directory near your current on, you can specify a relative location. For example, if you are already in /home/username/project, you can enter the subdirectory abc thus:</p> <pre><code>cd abc\n</code></pre> <p>If you want to go to the directory above the current directory, you can use the alias ...</p> <p>For example, if you were in <code>/home/username/project/abc</code> and wanted to go to <code>/home/username/project</code>, then you would do the following:</p> <pre><code>cd ..\n</code></pre>"},{"location":"notes-md/linux/shell/#change-to-the-last-directory","title":"Change to the last directory","text":"<p>For the current shell, this takes you to the previous directory that you were in, no matter where it was.</p> <pre><code>cd -\n</code></pre>"},{"location":"notes-md/linux/shell/#change-to-the-home-directory","title":"Change to the home directory","text":"<p>The default directory is the home directory <code>$HOME</code>, typically <code>/home/username</code>,</p> <p>So <code>cd</code> without any directory takes you there</p> <p>Or you could be more explicit: <code>cd $HOME</code></p> <p>A shortcut for the home directory is <code>cd ~</code>, so that could be used as well.</p>"},{"location":"notes-md/linux/shell/#listing-files","title":"Listing Files","text":"option description <p>ls -a | list all files including hidden file starting with '.' ls --color | colored list [=always/never/auto] ls -d | list directories - with ' /' ls -F `add one char of /=&gt;@` | to enteries ls -i | list file's inode index number ls -l | list with long format - show permissions ls -la | list long format including hidden files ls -lh | list long format with readable file size ls -ls | list with long format with file size ls -r | list in reverse order ls -R | list recursively directory tree ls -s | list file size ls -S | sort by file size ls -t | sort by time &amp; date ls -X | sort by extension name |</p>"},{"location":"notes-md/linux/shell/#list-files-in-a-long-listing-format","title":"List Files in a Long Listing Format","text":"<p>The ls command's <code>-l</code> option prints a specified directory's contents in a long listing format. If no directory is specified then, by default, the contents of the current directory are listed.</p> <pre><code>ls -l /etc\n</code></pre> <p>Example Output:</p> <pre><code>total 1204 \ndrwxr-xr-x 3 root root 4096 Apr 21 03:44 acpi\n-rw-r--r-- 1 root root 3028 Apr 21 03:38 adduser.conf\ndrwxr-xr-x 2 root root 4096 Jun 11 20:42 alternatives\n...\n</code></pre> <p>The output first displays total, which indicates the total size in blocks of all the files in the listed directory. It then displays eight columns of information for each file in the listed directory.</p>"},{"location":"notes-md/linux/shell/#list-the-ten-most-recently-modified-files","title":"List the Ten Most Recently Modified Files","text":"<p>The following will list up to ten of the most recently modified files in the current directory, using a long listing format <code>-l</code> and sorted by time <code>-t</code>.</p> <pre><code>ls -lt | head\n</code></pre>"},{"location":"notes-md/linux/shell/#list-all-files-including-dotfiles","title":"List All Files Including Dotfiles","text":"<p>The <code>-a</code> or <code>--all</code> option will list all files, including dotfiles</p> <pre><code>ls -a\n</code></pre>"},{"location":"notes-md/linux/shell/#list-files-without-using-ls","title":"List Files Without Using <code>ls</code>","text":"<p>Use the Bash shell's filename expansion and brace expansion capabilities to obtain the filenames:</p> <pre><code># display the files and directories that are in the current directory\nprintf \"%\nsn\" *\n\n# display only the directories in the current directory\nprintf \"%\nsn\" */\n\n# display only (some) image files\nprintf \"%\nsn\" *.{gif,jpg,png}\n</code></pre> <p>To capture a list of files into a variable for processing, it is typically good practice to use a bash array:</p> <pre><code>files=( * )\n# iterate over them\nfor file in \"${files[@]}\"; do\n    echo \"$file\"\ndone\n</code></pre>"},{"location":"notes-md/linux/shell/#list-files-in-a-tree-like-format","title":"List Files in a Tree-Like Format","text":"<p>Use</p> <pre><code>tree github/dev117uday\n</code></pre> <p>Output :</p> <pre><code>\u251c\u2500\u2500 docs\n\u2502   \u251c\u2500\u2500 index.md\n\u2502   \u2514\u2500\u2500 notes\n\u2502       \u251c\u2500\u2500 Database\n\u2502       \u2502   \u251c\u2500\u2500 mongodb.md\n\u2502       \u2502   \u251c\u2500\u2500 postgresql.md\n\u2502       \u2502   \u2514\u2500\u2500 sqlite.md\n\u2502       \u251c\u2500\u2500 images\n\u2502       \u2502   \u251c\u2500\u2500 git-cheat-sheet.png\n\u2502       \u2502   \u251c\u2500\u2500 mockaroo.png\n\u2502       \u2502   \u251c\u2500\u2500 vscode-sql-mockaroo-changes.png\n\u2502       \u2502   \u2514\u2500\u2500 where_clause.png\n\u2502       \u251c\u2500\u2500 Rust\n\u2502       \u2502   \u251c\u2500\u2500 concepts_of_rust.md\n\u2502       \u2502   \u251c\u2500\u2500 formating.md\n\u2502       \u2502   \u251c\u2500\u2500 lifetimes.md\n\u2502       \u2502   \u2514\u2500\u2500 structs.md\n\u2502       \u251c\u2500\u2500 shell\n\u2502       \u2502   \u251c\u2500\u2500 getting_started.md\n\u2502       \u2502   \u251c\u2500\u2500 listing_files.md\n\u2502       \u2502   \u2514\u2500\u2500 navigating_directory.md\n\u2502       \u251c\u2500\u2500 Tools\n\u2502       \u2502   \u2514\u2500\u2500 git-github.md\n\u2502       \u2514\u2500\u2500 Web\n\u2502           \u251c\u2500\u2500 node-express-fcc.md\n\u2502           \u2514\u2500\u2500 react-fcc.md\n\u251c\u2500\u2500 LICENSE\n\u251c\u2500\u2500 mkdocs.yml\n\u2514\u2500\u2500 README.md\n\n8 directories, 21 files\n</code></pre>"},{"location":"notes-md/linux/shell/#list-files-sorted-by-size","title":"List Files Sorted by Size","text":"<p>The ls command's -S option sorts the files in descending order of file size</p> <pre><code>$ ls -l -S ./Fruits\ntotal 444\n-rw-rw-rw- 1 root root 295303 Jul 28 19:19 apples.jpg\n-rw-rw-rw- 1 root root 102283 Jul 28 19:19 kiwis.jpg\n-rw-rw-rw- 1 root root 50197 Jul 28 19:19 bananas.jpg\n</code></pre> <p>When used with the -r option the sort order is reversed</p> <pre><code>$ ls -l -S -r /Fruits\ntotal 444\n-rw-rw-rw- 1 root root 50197 Jul 28 19:19 bananas.jpg\n-rw-rw-rw- 1 root root 102283 Jul 28 19:19 kiwis.jpg\n-rw-rw-rw- 1 root root 295303 Jul 28 19:19 apples.jpg\n</code></pre>"},{"location":"notes-md/linux/shell/#redirection","title":"Redirection","text":"<p>Redirecting standard output</p> <ul> <li><code>&gt;</code> redirect the standard output (aka <code>STDOUT</code> ) of the current command into a file or another descriptor. These examples write the output of the ls command into the file <code>file.txt</code></li> </ul> <pre><code>ls &gt; file.txt\n&gt; file.txt ls\n</code></pre> <p>The target file is created if it doesn't exists, otherwise this file is truncated.</p> <ul> <li> <p>The default redirection descriptor is the standard output or 1 when none is specified. This command is equivalent to the previous examples with the standard output explicitly indicated:</p> <pre><code>ls 1&gt;file.txt\n</code></pre> <p>Note: the redirection is initialized by the executed shell and not by the executed command, therefore it is done before the command execution.</p> </li> </ul>"},{"location":"notes-md/linux/shell/#append-vs-truncate","title":"Append vs Truncate","text":"<p>Truncate &gt;</p> <ol> <li>Create specified file if it does not exist.</li> <li>Truncate (remove file's content)</li> <li> <p>Write to file</p> <pre><code>$ echo \"first line\" &gt; file.txt\n$ echo \"second line\" &gt; file.txt\n$ cat file.txt\nsecond line\n</code></pre> <p>Append &gt;&gt; 4. Create specified file if it does not exist. 5. Append file (writing at end of file).</p> </li> </ol> <p>Overwrite existing file</p> <pre><code>$ echo \"first line\" &gt; file.txt\n</code></pre> <p>Append a second line</p> <pre><code>$ echo \"second line\" &gt;&gt; file.txt\n$ cat file.txt\nfirst line\nsecond line\n</code></pre>"},{"location":"notes-md/linux/troubleshooting-and-debugging/","title":"Troubleshooting and Debugging","text":"<ul> <li>Troubleshooting : the process of identifying, analyzing and solving problems.</li> <li> <p>Debugging : the process of identifying, analyzing and removing bugs in a system.</p> </li> <li> <p>Troubleshooting is for infrastructure</p> </li> <li>tcpdump, wireshark</li> <li>strace, ltrace</li> <li>ps, top etc</li> <li>Debugging : is for Software application</li> <li>Debugger : follows the code line by line , inspect changes in variable assignments, interrupt the program when a specific condition is met and more</li> </ul> <p>Steps to solve any issue</p> <ul> <li>Getting Information to understand the problem</li> <li>Isolate and finding the root cause</li> <li>Performing the necessary remediation</li> <li>Document what we do</li> <li>The different things we tested to try</li> <li>Figure out the root cause.</li> <li>The steps we took to fix the issue.</li> </ul>"},{"location":"notes-md/linux/troubleshooting-and-debugging/#strace-ltrace","title":"<code>strace</code> &amp; <code>ltrace</code>","text":"<p>// TODO complete this section x</p> <p>strace : to trace system calls made by the program</p> <ul> <li>o file.strace : to save output of trace to a file</li> </ul>"},{"location":"notes-md/linux/troubleshooting-and-debugging/#main-steps-to-solving-any-issue","title":"Main steps to solving any issue ?","text":"<p>Questions to Ask before debugging</p> <p></p> <ul> <li>Isolating the root cause is super important</li> </ul>"},{"location":"notes-md/linux/troubleshooting-and-debugging/#reproduction-case","title":"Reproduction Case","text":""},{"location":"notes-md/linux/troubleshooting-and-debugging/#refer-logging","title":"Refer logging","text":"<ul> <li>Linux // TODO get types of logs to investigate in linux</li> <li>/var/log/syslog</li> <li>.xsession-errors</li> <li>MacOS : Library/Logs/</li> <li>Windows : EventViewer</li> </ul> <p>Our solution dont come up by wandering about things, we have to look at information to plug things into our knowledge graph, looking at error messages or documentation.</p> <ul> <li>Get a reproduction, try to isolate the problem</li> <li>Understanding the root cause is super important</li> </ul>"},{"location":"notes-md/linux/troubleshooting-and-debugging/#usefull-commands","title":"Usefull Commands","text":""},{"location":"notes-md/linux/troubleshooting-and-debugging/#top-uptime-load-average","title":"<code>top</code> &amp; <code>uptime</code> Load Average","text":"<ul> <li>Load average : amount of time the process is busy in a minute</li> <li>Load average 1 means it was busy for whole min.</li> <li>shouldn\u2019t be above the amount of process in computer</li> <li>The 3 values indicate <code>1 min</code> , <code>5 min</code>, <code>15 min</code> </li> <li>must be less than CPU cores.</li> </ul> <pre><code># uptime\n13:36:43 up 6 min,  1 user,  load average: 0.26, 0.12, 0.04 \n</code></pre> <pre><code>#top\ntop - 15:24:23 up  1:53,  1 user,  load average: 0.08, 0.06, 0.06\nTasks:  44 total,   1 running,  43 sleeping,   0 stopped,   0 zombie\n%Cpu(s):  2.2 us,  2.2 sy,  0.0 ni, 93.3 id,  1.1 wa,  0.0 hi,  1.1 si,  0.0 st\nMiB Mem :   1971.8 total,    845.8 free,    961.2 used,    351.5 buff/cache\nMiB Swap:   1024.0 total,   1019.7 free,      4.3 used.   1010.6 avail Mem\n</code></pre>"},{"location":"notes-md/linux/troubleshooting-and-debugging/#iostat","title":"<code>iostat</code> :","text":"<p>system monitoring tool that reports CPU and I/O statistics for devices and partitions.</p> <pre><code>Linux 5.15.167.4-microsoft-standard-WSL2 (skynet-e14-r3)        02/16/25        _x86_64_        (8 CPU)\n\navg-cpu:  %user   %nice %system %iowait  %steal   %idle\n           0.24    0.00    0.24    0.06    0.00   99.45\n\nDevice             tps    kB_read/s    kB_wrtn/s    kB_dscd/s    kB_read    kB_wrtn    kB_dscd\n/dev/sda               0.17        11.45         0.00         0.00      74445          0          0\n/dev/sdb               0.03         0.35         0.64         0.00       2292       4184          0\n/dev/sdc              12.81       294.03       297.25       197.97    1911161    1932064    1286760\n</code></pre>"},{"location":"notes-md/linux/troubleshooting-and-debugging/#iotop","title":"<code>iotop</code> :","text":"<p>Utility that displays real-time I/O usage by processes or threads on a Linux system.</p> <pre><code>Total DISK READ:         0.00 B/s | Total DISK WRITE:         0.00 B/s\nCurrent DISK READ:       0.00 B/s | Current DISK WRITE:       0.00 B/s\n    TID  PRIO  USER     DISK READ DISK WRITE&gt;    COMMAND                                                                                                                                         1 be/4 root        0.00 B/s    0.00 B/s init\n      2 be/4 root        0.00 B/s    0.00 B/s init\n      9 be/4 root        0.00 B/s    0.00 B/s init [Interop]\n      7 be/4 root        0.00 B/s    0.00 B/s plan9 --control-socket 7 --log-level 4 --server-fd 8 --pipe-fd 10 --log-truncate\n      8 be/4 root        0.00 B/s    0.00 B/s plan9 --control-socket 7 --log-level 4 --server-fd 8 --pipe-fd 10 --log-truncate\n</code></pre>"},{"location":"notes-md/linux/troubleshooting-and-debugging/#vmstat","title":"<code>vmstat</code> :","text":"<p>Vmstat is a performance monitoring tool that provides information about processes, memory, paging, block I/O, traps, and CPU activity. - imp parameter : <code>wa</code> -&gt; means wait time <pre><code>procs -----------memory---------- ---swap-- -----io---- -system-- -------cpu-------\n r  b   swpd   free   buff  cache   si   so    bi    bo   in   cs us sy id wa st gu\n 0  0   4388 236800   3740 532620    0    0   187   174  228    0  0  0 99  0  0  0\n</code></pre></p>"},{"location":"notes-md/linux/troubleshooting-and-debugging/#iftop","title":"<code>iftop</code> :","text":"<p>iftop is a network monitoring tool that displays bandwidth usage on an interface by host.</p> <ul> <li> <p><code>time</code> : to calculate time taken by program to complete <pre><code>uday@skynet-e14-r3:~/notebook$ time\n\nreal    0m0.000s\nuser    0m0.000s\nsys     0m0.000s\n</code></pre></p> </li> <li> <p><code>kill</code> command // TODO get types of kill commands</p> </li> </ul> <p>Like isolating causes, understanding error messages, adding logging information, and generating new ideas for possible failures.</p>"},{"location":"notes-md/software-design/","title":"Software Design","text":""},{"location":"notes-md/software-design/oops/","title":"OOPS","text":"<p>access levels for object</p> <ul> <li>Abstraction : https://www.geeksforgeeks.org/abstraction-in-java-2/</li> <li>Encapsulation : https://www.geeksforgeeks.org/encapsulation-in-java/</li> <li>Inheritance : https://www.geeksforgeeks.org/inheritance-in-java/</li> <li>Polymorphism : https://www.geeksforgeeks.org/polymorphism-in-java/</li> </ul>"},{"location":"notes-md/software-design/solid-design/","title":"Solid Design","text":"<ul> <li><code>s</code>: Single Responsibility Principle</li> <li>Each class should have only one sole purpose, and not be filled with excessive functionality</li> <li>ex : loan class, there can be multiple loans, car, personal, home.</li> <li>ex : send otp class, there can be multiple ways to send otp, email, sms, whatsapp.</li> <li><code>o</code>: Open &amp; Close Principle</li> <li>Classes should be open for extension, closed for modification.</li> <li>In other words, you should not have to rewrite an existing class for implementing new features.</li> <li>ex: using interfaces, can can implement create new class to implement new features.</li> <li><code>l</code>: Leskov's Subsititution Principle</li> <li>This means that every subclass or derived class should be substitutable for their base or parent class.</li> <li>ex: we have 3 social media: facebook, instagram &amp; whatsapp<ul> <li>whatsapp doesnt support features like publish posts</li> <li>there is no calling on instagram</li> </ul> </li> <li>we create interface that contain common functionality, have our classes extend from them</li> <li>for specific features, we create new interfaces for them</li> <li><code>i</code>: Interfae Segragation Principle</li> <li>Interfaces should not force classes to implement what they can\u2019t do.</li> <li>Large interfaces should be divided into small ones.</li> <li><code>d</code>: Dependency Inversion Principle</li> <li>The principle states that we must use abstraction (abstract classes and interfaces) instead of concrete implementation.</li> <li>High level modules should not depend on the low level module but both should depend on the abstraction.</li> <li>ex: when perform payment, it doesnt matter whether you visa or mastercard, debit or credit card, payment provider will take it.</li> <li>instead of taking input a specific class, take a interface which can be implemented by classes</li> </ul> <p>For examples with code : https://medium.com/@javatechie/solid-design-principle-java-ae96a48db97</p>"},{"location":"notes-md/software-design/design-patterns/","title":"Design Patterns","text":""},{"location":"notes-md/software-design/design-patterns/adapter-dp/","title":"Adapter DP","text":""},{"location":"notes-md/software-design/design-patterns/bridge-dp/","title":"Bridge DP","text":""},{"location":"notes-md/software-design/design-patterns/iterator-dp/","title":"Iterator DP","text":""},{"location":"notes-md/software-design/design-patterns/state-dp/","title":"State DP","text":""},{"location":"notes-md/software-design/design-patterns/strategy-dp/","title":"Strategy DP","text":""},{"location":"notes-md/software-design/design-patterns/behavioral-design-pattern/","title":"Behavioral Design Pattern","text":""},{"location":"notes-md/software-design/design-patterns/behavioral-design-pattern/observer-dp/","title":"Observer DP","text":"<ul> <li>Just like subscriber subscribed to a channel on YouTube</li> <li>Channel \u2192 Subject || Subscriber \u2192 Observer</li> <li>Observer observes a Subject</li> </ul>"},{"location":"notes-md/software-design/design-patterns/behavioral-design-pattern/observer-dp/#subscriber","title":"Subscriber","text":"<pre><code>package org.example;\n\npublic class Subscriber {\n\n    private String name;\n    private Channel channel = new Channel();\n\n    public Subscriber(String name) {\n        this.name = name;\n    }\n\n    public void update() {\n        System.out.println(\"video uploaded\");\n    }\n\n    public void subscriberChannel(Channel ch) {\n        this.channel = ch;\n    }\n\n}\n</code></pre>"},{"location":"notes-md/software-design/design-patterns/behavioral-design-pattern/observer-dp/#subject","title":"Subject","text":"<pre><code>package org.example;\n\nimport java.util.ArrayList;\nimport java.util.List;\n\npublic class Channel {\n\n    List&lt;Subscriber&gt; subsLst = new ArrayList&lt;&gt;();\n    private String title;\n\n    // add\n    public void subscibe(Subscriber sub) {\n        subsLst.add(sub);\n    }\n\n    public void unsubscriber(Subscriber sub) {\n        subsLst.remove(sub);\n    }\n\n    public void notifySubscribers() {\n        for (Subscriber sub : subsLst) {\n            sub.update();\n        }\n    }\n\n    public void upload(String title) {\n        this.title = title;\n        notifySubscribers();\n    }\n\n}\n</code></pre>"},{"location":"notes-md/software-design/design-patterns/behavioral-design-pattern/observer-dp/#main-code","title":"Main Code :","text":"<pre><code>Channelch1 = new Channel();\n\nSubscribers1 = new Subscriber(\"sub 1\");\nSubscribers2 = new Subscriber(\"sub 2\");\nSubscribers3 = new Subscriber(\"sub 3\");\n\nch1.subscibe(s1);\nch1.subscibe(s2);\nch1.subscibe(s3);\n\nch1.notifySubscribers();\n</code></pre>"},{"location":"notes-md/software-design/design-patterns/creational-design-pattern/","title":"Creational Design Pattern","text":"<ul> <li>Builder</li> </ul>"},{"location":"notes-md/software-design/design-patterns/creational-design-pattern/builder-dp/","title":"Builder DP","text":"<ul> <li>Creational Design Pattern</li> <li>Used when we have too many arguments or many optional arguments</li> </ul> <pre><code>package builder;\n\npublic class Vehicle {\n    // required parameter\n    private String engine;\n    private int wheel;\n\n    // optional parameter\n    private int airbags;\n\n    public String getEngine() {\n        return this.engine;\n    }\n\n    public int getWheel() {\n        return this.wheel;\n    }\n\n    public int getAirbags() {\n        return this.airbags;\n    }\n\n    private Vehicle(VehicleBuilder builder) {\n        this.engine = builder.engine;\n        this.wheel = builder.wheel;\n        this.airbags = builder.airbags;\n    }\n\n    public static class VehicleBuilder {\n        private String engine;\n        private int wheel;\n\n        private int airbags;\n\n        public VehicleBuilder(String engine, int wheel) {\n            this.engine = engine;\n            this.wheel = wheel;\n        }\n\n        public VehicleBuilder setAirbags(int airbags) {\n            this.airbags = airbags;\n            return this;\n        }\n\n        public Vehicle build() {\n            return new Vehicle(this);\n        }\n    }\n\n    @Override\n    public String toString() {\n        return \"Vehicle [airbags=\" + airbags + \", engine=\" + engine + \", wheel=\" + wheel + \"]\";\n    }\n}\n</code></pre>"},{"location":"notes-md/software-design/design-patterns/creational-design-pattern/factory-dp/","title":"Factory DP","text":"<ul> <li>Creational Design Pattern</li> <li>According to the requirement, the factory class with give you the Object</li> </ul> <pre><code>interface Vehicle {\n    public void numberOfTyres();\n}\n\nclass Car implements Vehicle {\n    @Override\n    public void numberOfTyres() {\n        System.out.println(\"Number of tyres : 4\");\n    }\n}\n\nclass Bike implements Vehicle {\n    @Override\n    public void numberOfTyres() {\n        System.out.println(\"Number of tyres : 2\");\n    }\n}\n\npublic class Factory {\n    public static Vehicle getVehicle(String vehicle) {\n        if (vehicle.equalsIgnoreCase(\"car\")) {\n            return new Car();\n        } else if (vehicle.equalsIgnoreCase(\"bike\")) {\n            return new Bike();\n        }\n        return null;\n    }\n}\n</code></pre>"},{"location":"notes-md/software-design/design-patterns/creational-design-pattern/singleton-dp/","title":"Singleton DP","text":"<ul> <li>Creational Design Pattern</li> <li>Only one instance of the class should exist</li> </ul> <p>Example : Eager Initialization</p> <pre><code>public class Singleton {\n\n    private static Singleton instance = new Singleton();\n\n    private Singleton() {\n    }\n\n    public static Singleton getObject() {\n        return instance;\n    }\n\n}\n</code></pre> <p>Example : Lazy initialization</p> <pre><code>public class Singleton {\n\n    private static Singleton instance = null;\n\n    private Singleton() {}\n\n    public static Singleton getObject(){ \n        if(instance == null) { \n            instance = new Singleton();  \n        }  \n        return instance;  \n    } \n\n}\n</code></pre>"},{"location":"notes-md/software-design/design-patterns/structural-design-pattern/","title":"Structural Design Pattern","text":"<ul> <li>Facade Design Pattern</li> </ul>"},{"location":"notes-md/software-design/design-patterns/structural-design-pattern/facade-dp/","title":"Facade DP","text":""},{"location":"notes-md/spring-boot/","title":"Spring Boot","text":""},{"location":"notes-md/spring-boot/apache-camel/","title":"Apache Camel","text":"<ul> <li> <p>set in application.properties file : </p> <pre><code>camel.springboot.main-run-controller = true\n</code></pre> </li> </ul>"},{"location":"notes-md/spring-boot/apache-camel/#file-operation-in-apache-camel","title":"File Operation in Apache Camel","text":"<pre><code>@Override\n    public void configure() throws Exception {\n        log.info(\"---- starting ----\");\n        moveAllFile();\n        //moveSpecificFile(\"file\");\n        //moveSpecificFileWithContent(\"hello\");\n        //processFile();\n        //multiFileProcessor();\n        log.info(\"---- end ----\");\n    }\n\n    public void moveAllFile() {\n        from(\"file:/home/uday/a\").log(\"--- moved ---\")\n                .to(\"file:/home/uday/b\");\n    }\n\n    public void moveSpecificFile(String fileName) {\n        from(\"file:/home/uday/a\")\n                .filter(header(Exchange.FILE_NAME).startsWith(fileName))\n                .to(\"file:/home/uday/b\");\n    }\n\n    public void moveSpecificFileWithContent(String content) {\n        from(\"file:/home/uday/a\")\n                .filter(body().startsWith(content))\n                .to(\"file:/home/uday/b\");\n    }\n\n    public void processFile() {\n        from(\"file:/home/uday/a\")\n                .process(p -&gt; {\n                    String body = p.getIn().getBody(String.class);\n                    StringBuilder sb = new StringBuilder();\n                    Arrays.stream(body.split(\" \"))\n                        .forEach(s -&gt; sb.append(s).append(\",\"));\n                    p.getIn().setBody(sb);\n                }).to(\"file:/home/uday/b\");\n    }\n\n    public void multiFileProcessor() {\n        from(\"file:/home/uday/a/\").unmarshal().csv().split(body()\n        .tokenize(\",\")).choice()\n                .when(body().contains(\"closed\"))\n                    .to(\"file:/home/uday/b?fileName=closed.csv\")\n                .when(body().contains(\"pending\"))\n                    .to(\"file:/home/uday/b?fileName=pending.csv\")\n                .when(body().contains(\"waiting\"))\n                    .to(\"file:/home/uday/b?fileName=waiting.csv\");\n    }\n</code></pre>"},{"location":"notes-md/spring-boot/apache-camel/#more-file-operation","title":"More file operation","text":"<pre><code>from(\"direct://log-file-values\")\n        .log(\"${messageHistory} ${headers.CamelFileAbsolute}\")\n        .log(\"${file:name} ${file:name.ext} ${file:size}\");\n\nfrom(\"file:files/input\")\n        .routeId(\"Files-Input-Route\")\n        .transform().body(String.class)\n\n        .choice()\n\n        //.when(simple(\"${file:ext} ends with 'xml'\"))\n        .when(method(deciderBean))\n        .log(\"XML FILE\")\n\n        .when(simple(\"${body} contains 'USD'\"))\n        .log(\"Contains USD\")\n        .otherwise()\n        .log(\"No Condition met\")\n        .end()\n\n        // ignore this intellj warning\n\n        .to(\"direct://log-file-values\")\n        .to(\"file:files/output\");\n</code></pre>"},{"location":"notes-md/spring-boot/apache-camel/#multicast","title":"Multicast","text":"<pre><code>// ## multicast\n\nfrom(\"timer:multicast?period=10000\")\n        .multicast()\n        .to(\"log:something-1\", \"log:something-2\");\n</code></pre>"},{"location":"notes-md/spring-boot/apache-camel/#spilt","title":"Spilt","text":"<pre><code>from(\"file:files/csv\")\n        .unmarshal().csv()\n        .split(body())\n        .to(\"log:split-files\");\n\nfrom(\"file:files/csv\")\n        .convertBodyTo(String.class)\n        .split(body(), \",\")\n        .to(\"log:split-files\");\n\nfrom(\"file:files/csv\")\n        .convertBodyTo(String.class)\n        .split(method(spliterComponent))\n        .to(\"log:split-files\");\n\n---\n\n@Autowired\n    private SpliterComponent spliterComponent;\n\n@Component\npublic class SpliterComponent {\n    public List&lt;String&gt; spilt(String body) {\n        return Arrays.stream(body.split(\" \")).toList();\n    }\n}\n</code></pre>"},{"location":"notes-md/spring-boot/apache-camel/#aggregation","title":"Aggregation","text":"<pre><code>from(\"file:files/agg-json\")\n    .unmarshal().json(JsonLibrary.Jackson, CurrencyExchange.class)\n    .aggregate(simple(\"${body.to}\"), (oldExchange, newExchange) -&gt; {\n\n        Object newBody = newExchange.getIn().getBody();\n        ArrayList lst = null;\n\n        if (oldExchange == null) {\n            lst = new ArrayList&lt;Object&gt;();\n            lst.add(newBody);\n            newExchange.getIn().setBody(lst);\n            return newExchange;\n        } else {\n            // ignore\n            lst = oldExchange.getIn().getBody(ArrayList.class);\n            lst.add(newBody);\n            return oldExchange;\n        }\n\n    }).completionSize(3)\n    .to(\"log:agg-json\");\n</code></pre>"},{"location":"notes-md/spring-boot/apache-camel/#routing-slip","title":"Routing Slip","text":"<pre><code>String routingSlip = \"direct:endpoint1,direct:endpoint2\";\n\nfrom(\"timer:routingSlip?period={{time-period}}\")\n        .transform().constant(\"my message\")\n        .routingSlip(simple(routingSlip));\n\nfrom(\"direct:endpoint1\").to(\"{{endpoint-for-logging}}\");\n\nfrom(\"direct:endpoint2\").to(\"log:endpoint2\");\n\nfrom(\"direct:endpoint3\").to(\"log:endpoint3\");\n\nfrom(\"timer:routingSlip?period=10000\")\n        .transform().constant(\"my message\")\n        .dynamicRouter(method(dynamicRouterBean));\n\n----\n\n@Component\n@Slf4j\npublic class DynamicRouterBean  {\n\n    public String decideTheNextEndpoint(\n            @ExchangeProperties Map&lt;String, String&gt; properties,\n            @Headers Map&lt;String, String&gt; headers,\n            @Body String body\n    ) {\n        log.info(\"{} {} {}\", properties, headers, body);\n        return \"direct:endpoint1\";\n    }\n\n}\n</code></pre>"},{"location":"notes-md/spring-boot/apache-camel/#error-handling","title":"Error Handling","text":"<pre><code>// to enable tracing\ngetContext().setTracing(true);\n\n// not make sure no message is lost\nerrorHandler(deadLetterChannel(\"activemq:dead-letter-queue\"));\n\n// to tap message while in camel context\nfrom(\"\").wireTap(\"\");\n</code></pre>"},{"location":"notes-md/spring-boot/apache-camel/#active-mq","title":"Active MQ","text":"<pre><code>from(\"timer:active-mq-timer?period=2000\")\n        .transform().constant(\"my message for active-mq\")\n        .log(\"--- message sent to queue ---\")\n        .to(\"activemq:my-activemq-queue\");\n\nfrom(\"file:files/json\")\n        .to(\"activemq:my-activemq-queue\");\n\nfrom(\"file:files/xml\")\n        .to(\"activemq:my-activemq-xml-queue\");\n\nfrom(\"activemq:my-activemq-queue\")\n        .unmarshal().json(JsonLibrary.Jackson, CurrencyExchange.class)\n        .bean(myCurrencyExchangeProcessor)\n        .bean(myCurrencyExchangeTransformer)\n        .to(\"log:received-from-active-mq\");\n\nfrom(\"activemq:my-activemq-xml-queue\")\n        .unmarshal()\n        .jacksonXml(CurrencyExchange.class)\n        .to(\"log:received-from-activemq-xml\");\n</code></pre>"},{"location":"notes-md/spring-boot/apache-camel/#kafka","title":"Kafka","text":"<pre><code>from(\"file:files/json\")\n        .log(\"${body}\")\n        .to(\"kafka:mykafkatopic\");\n</code></pre>"},{"location":"notes-md/spring-boot/apache-camel/#using-time","title":"Using Time","text":"<pre><code>// queue :- timer\n// transformation\n// database :- log\n\n// from : starting route\n// to   : the final destination\n\n// processing : doesnt change the message\n// transform : does change the message\n\nfrom(\"timer:first-timer\")\n\n        // example 1\n        //.transform()\n        //.constant(\"My message at : \"+ LocalDateTime.now())\n\n        // example 2\n        //.bean(getCurrentTimeBean)\n\n        // example 3\n        .log(\"${body}\")\n        .transform().constant(\"My message\")\n        .log(\"${body}\")\n        .bean(getCurrentTimeBean)\n        .log(\"${body}\")\n        .bean(simpleLoggingProcessingComponent)\n        .log(\"${body}\")\n\n        .to(\"log:first-timer\");\n\n----\n\npublic class SimpleLoggingProcessingComponent implements Processor {\n    @Override\n    public void process(Exchange exchange) throws Exception {\n        log.info(\"SimpleLoggingProcessingComponent : {}\", exchange.getMessage().getBody());\n    }\n}\n\n-----\n</code></pre>"},{"location":"notes-md/spring-boot/apache-camel/#rest-api","title":"Rest API","text":"<pre><code>restConfiguration().host(\"localhost:8081\");\n\nfrom(\"timer:rest-api-consumer?period=3000\")\n        .setHeader(\"from\", () -&gt; \"usd\")\n        .setHeader(\"to\", () -&gt; \"inr\")\n        .to(\"rest:get:/currency-exchange/from/{from}/to/{to}\")\n        .log(\"${body}\");\n</code></pre>"},{"location":"notes-md/spring-boot/controller-in-spring-boot/","title":"Controller in Spring Boot","text":""},{"location":"notes-md/spring-boot/controller-in-spring-boot/#controller","title":"<code>@Controller</code>","text":"<p>A simple version to annotate a class as controller</p> <ul> <li>You need to annotate <code>@ResponseBody</code> in front of the return type of member function.</li> </ul> <pre><code>@Controller\n@RequestMapping(\"books\")\npublic class SimpleBookController {\n    @GetMapping(\"/{id}\", produces = \"application/json\")\n    public @ResponseBody Book getBook(@PathVariable int id) {\n\n    }\n}\n</code></pre>"},{"location":"notes-md/spring-boot/controller-in-spring-boot/#restcontroller","title":"<code>@RestController</code>","text":"<p>Is a specialised version of the controller. It includes the <code>@Controller</code> and <code>@ResponseBody</code> annotation.</p> <ul> <li>No need to annotate return type with <code>@ResponseBody</code></li> </ul> <pre><code>@RestController\n@RequestMapping(\"books-rest\")\npublic class SimpleBookRestController {\n\n    @GetMapping(\"/{id}\", produces = \"application/json\")\n    public Book getBook(@PathVariable int id) {\n\n    }\n}\n</code></pre>"},{"location":"notes-md/spring-boot/controller-in-spring-boot/#requestmapping","title":"<code>@RequestMapping</code>","text":"<p>Helps the server to route requests to the controller classes specified in string parameter</p> <pre><code>@RequestMapping(\n  value = \"/ex/foos\", \n  method = RequestMethod.GET, \n  produces = \"application/json\"\n)\n</code></pre> <ul> <li>Fallback for all requests that didn't match</li> </ul> <pre><code>@RequestMapping(value = \"*\", method = RequestMethod.GET)\n</code></pre>"},{"location":"notes-md/spring-boot/controller-in-spring-boot/#requestbody","title":"<code>@RequestBody</code>","text":"<p>@RequestBody annotation maps the <code>HttpRequest</code> body to a transfer or domain object, enabling automatic de-serialisation. Spring automatically de-serialises the JSON into a Java type</p> <pre><code>@GetMapping(\"/{id}\", produces = \"application/json\")\npublic @ResponseBody Book getBook(@PathVariable int id) \n{\n\n}\n</code></pre>"},{"location":"notes-md/spring-boot/controller-in-spring-boot/#pathvariable","title":"<code>@PathVariable</code>","text":"<p>Used endpoint that identifies an entity with a primary key:</p> <pre><code>@GetMapping(\"/api/{id}\")\npublic String getEmployeesById(@PathVariable String id) \n{\n\n}\n</code></pre>"},{"location":"notes-md/spring-boot/controller-in-spring-boot/#pathvariable_1","title":"<code>@PathVariable</code>","text":"<p>Can be used to handle template variables in the request URI mapping</p> <pre><code>@GetMapping(\"/api/employees/{id}\")\n@ResponseBody\npublic String getEmployeesById(@PathVariable(\"id\") String id) {\n    return \"ID: \" + id;\n}\n\n-- Multiple PathVariable\n\n@GetMapping(\"/api/employees/{id}/{name}\")\n@ResponseBody\npublic String getEmployeesByIdAndName(\n    @PathVariable String id, @PathVariable String name) \n{\n\n}\n\n-- Capture PathVariable in MapString\n\n@GetMapping(\"/api/employeeswithmapvariable/{id}/{name}\")\n@ResponseBody\npublic String getEmployeesById(\n    @PathVariable Map&lt;String, String&gt; pathVarsMap) \n{\n\n}\n\n\n-- when PathVariable isnt required \n\n@GetMapping(value = { \"employees/\", \"employees/{id}\" })\n@ResponseBody\npublic String getEmployeesById(@PathVariable(required = false) String id) \n{\n\n}\n</code></pre>"},{"location":"notes-md/spring-boot/controller-in-spring-boot/#requestparam","title":"<code>@RequestParam</code>","text":"<pre><code>@PostMapping(\"/api/foos\")\n@ResponseBody\npublic String addFoo(@RequestParam(name = \"id\") String fooId, @RequestParam String name) \n{ \n\n}\n\nhttp://localhost:8080/api/foos?id=1&amp;name=uday\n\n-- Multiple RequestParam \n@GetMapping(\"/api/foos\")\n@ResponseBody\npublic String getFoos(@RequestParam List&lt;String&gt; id) {\n\n}\n\nhttp://localhost:8080/api/foos?id=1,2,3\n</code></pre>"},{"location":"notes-md/spring-boot/controller-in-spring-boot/#http-mapping","title":"HTTP Mapping","text":"<pre><code>-- @GetMapping(\"/get\")\n\npublic @ResponseBody ResponseEntity&lt;String&gt; get() {\n    return new ResponseEntity&lt;String&gt;(\"GET Response\", HttpStatus.OK);\n}\n\n-- @PostMapping\n@PostMapping(\"/post\")\npublic @ResponseBody ResponseEntity&lt;String&gt; post() {\n    return new ResponseEntity&lt;String&gt;(\"POST Response\", HttpStatus.OK);\n}\n\n-- @PutMapping\n@PutMapping(\"/put\")\npublic @ResponseBody ResponseEntity&lt;String&gt; put() {\n    return new ResponseEntity&lt;String&gt;(\"PUT Response\", HttpStatus.OK);\n}\n-- @DeleteMapping\n@DeleteMapping(\"/delete\")\npublic @ResponseBody ResponseEntity&lt;String&gt; delete() {\n    return new ResponseEntity&lt;String&gt;(\"DELETE Response\", HttpStatus.OK);\n}\n\n-- @PatchMapping\n@PatchMapping(\"/patch\")\npublic @ResponseBody ResponseEntity&lt;String&gt; patch() {\n    return new ResponseEntity&lt;String&gt;(\"PATCH Response\", HttpStatus.OK);\n}\n</code></pre>"},{"location":"notes-md/spring-boot/controller-in-spring-boot/#responseentity","title":"<code>@ResponseEntity</code>","text":"<p><code>ResponseEntity</code> represents the whole HTTP response: status code, headers, and body. As a result, we can use it to fully configure the HTTP response.</p> <ul> <li>mention the return type of a function as <code>ResponseEntity&lt;T&gt;</code>, cannot be null</li> <li>takes</li> <li><code>HTTPStatusCode</code></li> <li>Object to be returned</li> </ul> <pre><code>@GetMapping(\"/hello\")\nResponseEntity&lt;String&gt; hello() {\n    return new ResponseEntity&lt;&gt;(\"Hello World!\", HttpStatus.OK);\n}\n</code></pre>"},{"location":"notes-md/spring-boot/spring-mvc/","title":"Spring MVC","text":""},{"location":"notes-md/spring-boot/spring-mvc/#spring-mvc_1","title":"spring mvc","text":"<ul> <li>Fragment on the page : <code>&lt;div th:replace=\"header :: myheader\"&gt;&lt;/div&gt;</code></li> <li>Fragment page : <code>&lt;div th:fragment=\"myheader\"&gt;</code></li> <li>Link css and js files : <code>&lt;link th:href=\"@{/bootstrap.css}\" rel=\"stylesheet\"&gt;</code></li> <li>loop over list</li> </ul> <pre><code>&lt;tr th:each=\"employee : ${employeeList}\"&gt; \n    &lt;td th:text=\"${employee.firstName}\"&gt;&lt;/td&gt; \n    &lt;td th:text=\"${employee.email}\"&gt;&lt;/td&gt; \n&lt;/tr&gt;\n</code></pre>"},{"location":"notes-md/spring-boot/spring-mvc/#dynamic-button-route","title":"Dynamic button route","text":"<pre><code>&lt;a th:href=\"@{/showFormForUpdate/{id}(id=${employee.empId})}\"&gt; &lt;/a&gt; \n\n&lt;a th:href=\"@{/deleteEmpl/{id}(id=${employee.empId})}\" method=\"DELETE\"&gt; &lt;/a&gt; \n</code></pre>"},{"location":"notes-md/spring-boot/spring-mvc/#route","title":"Route","text":"<pre><code>&lt;a th:href=\"@{/saveEmpForm}\"&gt; &lt;/a&gt; \n</code></pre>"},{"location":"notes-md/spring-boot/spring-mvc/#conditional-rendering","title":"Conditional Rendering","text":"<pre><code>&lt;div th:if=\"${true}\"&gt;This Element will be visible&lt;/div&gt;` \n</code></pre>"},{"location":"notes-md/spring-boot/spring-mvc/#form-example","title":"Form example","text":"<pre><code>&lt;form action=\"#\" th:action=\"@{/updateEmployee/{id}(id=${employee.empId})}\" th:object=\"${employee}\" method=\"POST\"&gt; \n\n&lt;div class=\"mb-3\"&gt; \n\n&lt;input th:field=\"*{empId}\" type=\"text\" disabled&gt; \n\n&lt;div class=\"mb-3\"&gt; \n\n&lt;input th:field=\"*{firstName}\" type=\"text\" placeholder=\"Enter First Name\"&gt; \n\n&lt;div class=\"mb-3\"&gt; \n\n&lt;input th:field=\"*{lastName}\" type=\"text\" placeholder=\"Enter Last Name\"&gt; \n\n&lt;div class=\"mb-3\"&gt; \n\n&lt;input th:field=\"*{email}\" type=\"text\" placeholder=\"Enter Email\"&gt; \n\n&lt;button type=\"submit\" &gt;Update Employee&lt;/button&gt; \n</code></pre>"},{"location":"notes-md/spring-boot/spring-things/","title":"Spring Things","text":""},{"location":"notes-md/spring-boot/spring-things/#spring-scheduling","title":"Spring Scheduling","text":"<pre><code>// enable using \n@EnableScheduling\n// on Main class\n\n@Slf4j\n@EnableAsync\npublic class SampleScheduler {\n\n    @Async\n    @Scheduled( cron = \"* * * * * *\" )\n    // initialDelay = 1000\n    // fixedDelay = 1000\n    // fixedRateString = \"PT02S\"\n    // cron stars : seconds, minutes, hours, day of month, month, day of week\n    public void scheduler() throws InterruptedException {\n        LocalDateTime current = LocalDateTime.now();\n        DateTimeFormatter format = DateTimeFormatter.ofPattern(\"dd-MM-yyyy HH:mm:ss\");\n        String formattedDateTime = current.format(format);\n        log.info(\"Scheduler time : \" + formattedDateTime);\n\n        // this will cause log print to delay 1 more second, new time 2 seconds\n        Thread.sleep(1000);\n    }\n</code></pre>"},{"location":"notes-md/spring-boot/spring-things/#spring-validation","title":"Spring Validation","text":"<pre><code>@Data\n@NoArgsConstructor\n@AllArgsConstructor\npublic class Person {\n\n    private final UUID id;\n\n    @NotBlank\n    @NotNull(message = \"username should not be null\")\n    private final String name;\n\n    @Email\n    private String email;\n\n    @Min(0)\n    @Max(100)\n    private int age;\n\n    public Person(@JsonProperty(\"id\") UUID id,\n                  @JsonProperty(\"name\") String name) {\n        this.id = id;\n        this.name = name;\n    }\n\n    public UUID getId() {\n        return id;\n    }\n\n    public String getName() {\n        return this.name;\n    }\n}\n</code></pre>"},{"location":"notes-md/spring-boot/spring-things/#to-handle-error","title":"To handle error","text":"<pre><code>@ResponseStatus(HttpStatus.BAD_REQUEST)\n@ExceptionHandler(MethodArgumentNotValidException.class)\npublic Map&lt;String, String&gt; handleInvalidArgument(MethodArgumentNotValidException exception) {\n    Map&lt;String, String&gt; errorMap = new HashMap&lt;&gt;();\n    for (FieldError fieldErrors : exception.getBindingResult().getFieldErrors()) {\n        errorMap.put(fieldErrors.getField(), fieldErrors.getDefaultMessage());\n    }\n\n    return errorMap;\n}\n</code></pre>"},{"location":"notes-md/spring-boot/spring-things/#defining-on-controller","title":"Defining on controller","text":"<pre><code>@PostMapping\npublic int addPerson( @Valid @NonNull @RequestBody Person person) {\n    return personService.addPerson(person);\n}\n</code></pre>"},{"location":"notes-md/spring-boot/spring-things/#faker","title":"Faker","text":"<p>To generate fake data</p> <pre><code>&lt;dependency&gt;\n        &lt;groupId&gt;com.github.javafaker&lt;/groupId&gt;\n        &lt;artifactId&gt;javafaker&lt;/artifactId&gt;\n        &lt;version&gt;1.0.2&lt;/version&gt;\n&lt;/dependency&gt;\n\n\n\n@Bean\npublic Faker faker() {\n    return new Faker();\n}\n\nprivate final Faker faker;\n\n@Override\npublic void run(String... args) throws Exception {\n\n// create 100 rows of people in the database\nList&lt;Person&gt; people = IntStream.rangeClosed(1, 100)\n        .mapToObj(i -&gt; new Person(\n                faker.name().firstName(),\n                faker.name().lastName(),\n                faker.phoneNumber().cellPhone(),\n                faker.internet().emailAddress(),\n                new Address(\n                        faker.address().streetAddress(),\n                        faker.address().city()\n                )\n        )).toList();\n\nrepository.saveAll(people);\n}\n</code></pre>"},{"location":"notes-md/spring-boot/spring-basics/","title":"Spring Basics","text":"<p>Resources : </p> <ul> <li>Spring Constructor Injection: Why is it the recommended approach to Dependency Injection?</li> </ul>"},{"location":"notes-md/spring-boot/spring-basics/#why-framework","title":"Why framework ?","text":"<p>The aim of frameworks is to provide a common structure so that developers don't have to redo it from scratch and can reuse the code provided. In this way, frameworks allow us to cut out much of the work and save a lot of time. To summarise: there's no need to reinvent the wheel</p>"},{"location":"notes-md/spring-boot/spring-basics/#spring-allows","title":"Spring allows","text":"<ul> <li>Inversion of control : from programmer to framework</li> <li>automatically configures things in order</li> <li>create object of required classes</li> <li>Aspect Oriented Programming</li> <li>breaking code into different modules</li> <li>reduces cross cutting concerns : Dont Repeat Yourself<ul> <li>example : security is crosscutting because it is applied in many methods in an application</li> <li>example : logging, exception handling</li> <li>It does so by advising the current code on how to handle situation.</li> </ul> </li> <li>https://www.geeksforgeeks.org/aspect-oriented-programming-and-aop-in-spring-framework/</li> <li>Dependency Injection</li> <li>Spring data projects</li> </ul>"},{"location":"notes-md/spring-boot/spring-basics/#what-is-dependency-injection","title":"What is dependency injection ?","text":"<p>Dependency injection is basically providing the objects that an object needs (its dependencies) instead of having it construct them itself.</p>"},{"location":"notes-md/spring-boot/spring-basics/#what-is-inversion-of-controller","title":"What is inversion of controller ?","text":"<p>Inversion of Control is a principle in software engineering which transfers the control of objects or portions of a program to a container or framework.</p> <p>The advantages of this architecture are:</p> <ul> <li>decoupling the execution of a task from its implementation</li> <li>making it easier to switch between different implementations</li> <li>greater modularity of a program </li> <li>greater ease in testing a program by isolating a component or mocking its dependencies, and allowing components to communicate through contracts</li> </ul>"},{"location":"notes-md/spring-boot/spring-basics/#what-is-spring-bean","title":"What is Spring Bean ?","text":"<ul> <li>Bean is a fancy word for object</li> <li>A spring bean is just an object that manages for you</li> </ul> <p>Beans are generate at bean-factory, and then there is application context, which extends bean-factory and provides additional features</p>"},{"location":"notes-md/spring-boot/spring-basics/#types-of-beans","title":"Types of Beans","text":"<ul> <li>Singleton</li> <li>1 object in he entire application</li> <li>Bean is singleton by default</li> <li>Prototype : new/different object whenever you ask for it</li> <li>Request : for getting new object each and every time new request enters the app</li> <li>Session : for one session</li> <li>Global Session : for life-cycle for global session</li> </ul>"},{"location":"notes-md/spring-boot/spring-basics/#bean-life-cycle","title":"Bean Life-cycle","text":"<ul> <li>Definition of beans</li> <li>instantiation</li> <li>populate property, constructor</li> <li>init method runs</li> <li>dependency injection</li> <li>pre destroy step</li> <li>destruction</li> </ul>"},{"location":"notes-md/spring-boot/spring-basics/#what-is-application-context","title":"What is Application Context ?","text":"<ul> <li>When we create spring bean, we need something to manage it.</li> <li>Application Context is there to </li> <li>instantiate</li> <li>configure </li> <li>assemble</li> <li>Container for all beans</li> </ul>"},{"location":"notes-md/spring-boot/spring-basics/#why-dependency-injection-is-done-through-constructors","title":"Why dependency injection is done through constructors ?","text":"<ul> <li>It gets difficult to keep track of objects that are passed at time of initialisation. There can be multiple dependency for an class, and those dependency might also dependent upon others.</li> <li>It gets difficult to manage the object life-cycles.</li> </ul>"},{"location":"notes-md/spring-boot/spring-basics/#inspecting-beans-managed-for-us-by-spring-boot","title":"Inspecting Beans managed for us by Spring boot","text":"<p>In main method</p> <pre><code>ConfigurableApplicationContext app = \n                SpringApplication.run(SpringTokApplication.class, args);\n\nArrays.stream(app.getBeanDefinitionNames()).forEach(System.out::println);\n</code></pre> <ul> <li>this will list all beans managed for us by spring boot. When we add the annotation of <code>@RestController</code> or <code>@Repository</code> , they implement the @Component annotation which indicates the framework that you have to manage this bean according to rules</li> </ul>"},{"location":"notes-md/spring-boot/spring-basics/#bean-annotation-on-methods","title":"@Bean annotation on methods ?","text":"<p>Yes, bean still stands for object, but spring boot has a annotation for methods which for spring to manage it just like is manage other beans</p>"},{"location":"notes-md/spring-boot/spring-basics/#types-of-dependency-injection","title":"Types of dependency Injection","text":"<p>3 ways to get dependency into a class </p> <ul> <li>Constructor Injection : Best injection method</li> <li>Setter Injection : makes code too verbose</li> <li>Field Injection : against java convention, as outside entity is accessing private field, except for test-cases</li> </ul> <p>Constructor Injection</p> <pre><code>    private final VideoRepository videoRepository;\n\n    @Autowired\n    public VideoController(VideoRepository videoRepository) {\n        this.videoRepository = videoRepository;\n    }\n</code></pre> <p>Field Injection</p> <pre><code>    @Autowired\n    private VideoRepository videoRepository;\n</code></pre> <p>Setter Injection</p> <pre><code>    private VideoRepository videoRepository;\n\n    @Autowired\n    public void setVideoRepository(VideoRepository videoRepository) {\n        this.videoRepository = videoRepository;\n    }\n</code></pre>"},{"location":"notes-md/spring-boot/spring-basics/important-annotations/","title":"Important Annotations","text":""},{"location":"notes-md/spring-boot/spring-basics/important-annotations/#springboottest-test","title":"<code>@SpringBootTest &amp; @Test</code>","text":"<pre><code>@SpringBootTest\npublic class CourseRepositoryTest {\n\n    @Autowired\n    private CourseRepository courseRepository;\n\n    @Test\n    public void saveCourse() {\n        List&lt;Course&gt; courses = courseRepository.findAll();\n        System.out.println(\"courses = \" + courses);\n    }\n</code></pre>"},{"location":"notes-md/spring-boot/spring-basics/important-annotations/#component","title":"<code>@Component</code>","text":"<ul> <li>It is an annotation that allows Spring to automatically detect our custom beans</li> <li>Can only be annotate on a class</li> <li><code>@Service</code> and <code>@Repository</code> are special cases of <code>@Component</code>.</li> </ul>"},{"location":"notes-md/spring-boot/spring-basics/important-annotations/#service","title":"<code>@Service</code>","text":"<p>Service Components are the class file which contains @Service annotation. These class files are used to write business logic in a different layer, between <code>@RestController</code> class and <code>@Repository</code></p>"},{"location":"notes-md/spring-boot/spring-basics/important-annotations/#repository","title":"<code>@Repository</code>","text":"<p>@Repository annotates classes at the persistence layer, which will act as a database repository.</p>"},{"location":"notes-md/spring-boot/spring-basics/important-annotations/#autowired","title":"<code>@Autowired</code>","text":"<ul> <li>Enables automatic dependency injection. In other words, by declaring all the bean dependencies in a Spring configuration file, Spring container can auto wire relationships between collaborating beans. This is called Spring bean auto-wiring.</li> </ul> <pre><code>@Component\npublic class FooService {  \n    @Autowired\n    private IDependency dependency;\n}\n</code></pre>"},{"location":"notes-md/spring-boot/spring-basics/important-annotations/#primary","title":"<code>@Primary</code>","text":"<ul> <li>There's another annotation called @Primary that we can use to decide which bean to inject when ambiguity is present regarding dependency injection.</li> <li>This annotation defines a preference when multiple beans of the same type are present.</li> </ul>"},{"location":"notes-md/spring-boot/spring-basics/important-annotations/#enableconfigurationproperties","title":"<code>@EnableConfigurationProperties</code>","text":"<pre><code>@EnableConfigurationProperties(SecretConfigProp.class)\n</code></pre> <p>To load config from Class, refer below annotation</p>"},{"location":"notes-md/spring-boot/spring-basics/important-annotations/#configurationpropertiessecret","title":"@ConfigurationProperties(\"secret\")","text":"<pre><code>@ConfigurationProperties(\"secret\")\npublic record SecretConfigProp(String username, String password, String authToken) {\n}\n\n```spring-boot-properties\nsecret.authToken:my_auth_token\nsecret.username:myusername\n\nspring.config.import:optional:secrets.properties\n```\n\n```java-properties\nsecret.password=password\n```\n</code></pre>"},{"location":"notes-md/spring-boot/spring-basics/important-spring-things/","title":"Important Spring Things","text":""},{"location":"notes-md/spring-boot/spring-basics/important-spring-things/#applicationrunner","title":"ApplicationRunner","text":"<ul> <li>Automatically run method when Spring Boot starts</li> </ul> <pre><code>import org.springframework.boot.ApplicationArguments;\nimport org.springframework.boot.ApplicationRunner;\nimport org.springframework.stereotype.Component;\n\nimport lombok.extern.slf4j.Slf4j;\n\n@Component\n@Slf4j\npublic class ConfigRunner implements ApplicationRunner {\n\n    @Override\n    public void run(ApplicationArguments args) throws Exception {\n        log.info(\"XXXXXXXXXXX ============ XXXXXXXXXXXXXX\");\n    }\n\n}\n</code></pre>"},{"location":"notes-md/spring-boot/spring-basics/maven-things/","title":"Maven Things","text":""},{"location":"notes-md/spring-boot/spring-basics/maven-things/#missing-pomxml-version","title":"Missing pom.xml version","text":""},{"location":"notes-md/spring-boot/spring-basics/maven-things/#if-version-in-pomxml-isnt-mentioned-then-how-does-spring-boot-know-which-version-to-use","title":"If version in pom.xml isnt mentioned, then how does spring boot know which version to use ?","text":"<p>The version belonging the parent module will be referenced. Spring Boot starter comes with a lot of libraries in-built, with is referenced as a parent in the pom.xml file of your project </p> <pre><code>    &lt;parent&gt;\n        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;\n        &lt;version&gt;2.7.0&lt;/version&gt;\n        &lt;relativePath/&gt; &lt;!-- lookup parent from repository --&gt;\n    &lt;/parent&gt;\n</code></pre> <ul> <li>Click on <code>spring-boot-starter-parent</code> and to open its' pom.xml and then open  <code>spring-boot-dependencies</code> and you will find the list of version of each dependencies mentioned in it, used the specific spring-boot version you are using.</li> </ul> <p>Now, if we have a child module in our spring application, and if we dont specify the version number, we either need to mention the parent pom or specify the version there.</p> <pre><code>&lt;!-- referencing parent pom.xml --&gt;\n        &lt;parent&gt;\n        &lt;groupId&gt;com.example&lt;/groupId&gt;\n        &lt;artifactId&gt;spring-demo&lt;/artifactId&gt;\n        &lt;version&gt;0.0.1&lt;/version&gt;\n        &lt;relativePath&gt;../pom.xml&lt;/relativePath&gt;\n    &lt;/parent&gt;\n</code></pre> <p>or you can the specify the version inside the dependency tag or in the properties tag</p> <pre><code>    &lt;properties&gt;\n        &lt;java.version&gt;17&lt;/java.version&gt;\n        &lt;lombok.version&gt;1.18.18&lt;/lombok.version&gt; &lt;!-- example --&gt;\n    &lt;/properties&gt;\n</code></pre> <p>You can also exclude the child module ( if you want to use another implementation ) from the parent pom.</p> <p>Example : Excluding the artifactedId hamcrest-core from junit.</p> <pre><code>&lt;dependencyManagement&gt;\n        &lt;dependencies&gt;\n            &lt;dependency&gt;\n                &lt;groupId&gt;junit&lt;/groupId&gt;\n                &lt;artifactId&gt;junit&lt;/artifactId&gt;\n                &lt;version&gt;4.12&lt;/version&gt;\n                &lt;scope&gt;test&lt;/scope&gt;\n                &lt;exclusions&gt;\n                    &lt;exclusion&gt;\n                        &lt;groupId&gt;org.hamcrest&lt;/groupId&gt;\n                        &lt;artifactId&gt;hamcrest-core&lt;/artifactId&gt;\n                    &lt;/exclusion&gt;\n                &lt;/exclusions&gt;\n            &lt;/dependency&gt;\n        &lt;/dependencies&gt;\n    &lt;/dependencyManagement&gt;\n</code></pre> <ul> <li>Check the maven tab, you will find that <code>hamcrest-core</code> is no longer a sub-dependency of junit and will also find the exact version.</li> </ul>"},{"location":"notes-md/spring-boot/spring-basics/maven-things/#maven-build-phases","title":"Maven Build Phases","text":"<ul> <li><code>validate</code> - validate the project is correct and all necessary information is available</li> <li><code>compile</code> - compile the source code of the project</li> <li><code>test</code> - test the compiled source code using a suitable unit testing framework. These tests should not require the code be packaged or deployed</li> <li><code>package</code> - take the compiled code and package it in its distributed format, such as a JAR.</li> <li><code>verify</code> - run any checks on results of integration tests to ensure quality criteria are met</li> <li><code>install</code> - install the package into the local repository, for use as a dependency in other projects locally</li> <li><code>deploy</code> - done in the build environment, copies the final package to the remote repository for sharing with other developers and projects.</li> </ul>"},{"location":"notes-md/spring-boot/spring-basics/spring-a.o.p/","title":"Spring A.O.P","text":"<p>AOP is a programming paradigm that aims to increase modularity by allowing the separation of cross-cutting concerns. It does this by adding additional behaviour to existing code without modifying the code itself.</p> <p>What are cross cutting concerns</p> <ul> <li>let's say you want to log a message or perform execution on certain functionality like authentication before the execution of methods of same class, instead of declaring the functionality again and again for each methods.</li> </ul>"},{"location":"notes-md/spring-boot/spring-basics/spring-a.o.p/#example","title":"Example","text":"<pre><code>// dependencies\n\n&lt;dependency&gt;\n    &lt;groupId&gt;org.aspectj&lt;/groupId&gt;\n    &lt;artifactId&gt;aspectjrt&lt;/artifactId&gt;\n    &lt;version&gt;1.9.19&lt;/version&gt;\n&lt;/dependency&gt;\n\n&lt;dependency&gt;\n    &lt;groupId&gt;org.aspectj&lt;/groupId&gt;\n    &lt;artifactId&gt;aspectjweaver&lt;/artifactId&gt;\n    &lt;version&gt;1.9.19&lt;/version&gt;\n&lt;/dependency&gt;\n\n// definition\n\npublic void checkout(String status) {\n    System.out.println(\"checkout method of shopping cart called\");\n}\n\npublic int quantity() {\n    return 2;\n}\n\n// call\n\nShoppingCart cart = context.getBean(ShoppingCart.class);\ncart.checkout(\"cancelled\");\n\n// aspectj config\n\n@Configuration\n@ComponentScan(basePackages = \"demo\")\n@EnableAspectJAutoProxy\npublic class BeanConfig {\n}\n\n// another class\n\n@Aspect\n@Component\npublic class LoggingAspect {\n\n    // logging will not match if parameters not match\n    // to match add .. in brackets\n\n    // before execution\n    @Before(\"execution(* demo.ShoppingCart.checkout(..))\")\n    public void beforeLogger(JoinPoint jp) {\n        System.out.println(jp.getSignature());\n        String arg = jp.getArgs()[0].toString();\n        System.out.println(\"Before Loggers \" + arg);\n    }\n\n    // after execution\n    @After(\"execution(* *.*.checkout(..))\")\n    public void afterLogger() {\n        System.out.println(\"After Loggers\");\n    }\n\n    @Pointcut(\"execution(* demo.ShoppingCart.quantity(..))\")\n    public void afterReturningPointCut() {\n    }\n\n    @AfterReturning(pointcut = \"afterReturningPointCut()\", returning = \"retVal\")\n    public void afterReturning(String retVal) {\n        System.out.println(\"after returning \" + retVal);\n    }\n\n}\n\n@Aspect\n@Component\npublic class AuthenticationAspect {\n\n    @Pointcut(\"within(demo..*)\")\n    public void authenticatingPointCut() {\n    }\n\n    @Pointcut(\"within(demo..*)\")\n    public void authorizingPointCut() {\n    }\n\n    @Before(\"authenticatingPointCut() || authorizingPointCut()\")\n    public void authenticate() {\n        System.out.println(\"authenticating the request\");\n    }\n}\n</code></pre>"},{"location":"notes-md/spring-boot/spring-basics/spring-beans/","title":"Spring Beans","text":""},{"location":"notes-md/spring-boot/spring-basics/spring-beans/#using-xml-as-configuration","title":"Using XML as configuration","text":"<ol> <li>Add the dependency to <code>pom.xml</code></li> </ol> <pre><code>&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-context&lt;/artifactId&gt;\n    &lt;version&gt;5.3.16&lt;/version&gt;\n&lt;/dependency&gt;\n</code></pre> <p>2. Create a <code>spring.xml</code> in resources folder</p> <pre><code>&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\n       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n       xmlns:context=\"http://www.springframework.org/schema/context\"\n       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n    http://www.springframework.org/schema/beans/spring-beans-3.0.xsd\n    http://www.springframework.org/schema/context\n    http://www.springframework.org/schema/context/spring-context-3.0.xsd\"&gt;\n\n    &lt;bean id=\"doctor\" class=\"com.backend.springtok.entity.Doctor\"&gt;\n        &lt;property name=\"qualification\" value=\"MBBS\"/&gt;\n        &lt;property name=\"nurse\" ref=\"nurse\"/&gt;\n        &lt;constructor-arg value=\"MBBS\"/&gt;\n    &lt;/bean&gt;\n\n&lt;/beans&gt;\n</code></pre> <p>3.1 Doctor as example</p> <pre><code>package com.backend.springtok.entity;\n\npublic class Doctor implements Staff {\n\n    private String qualification;\n    private Nurse nurse;\n\n    public Doctor(String qualification) {\n        this.qualification = qualification;\n    }\n\n    public void assist() {\n        System.out.println(\"doctor is assisting\");\n    }\n\n    public String getQualification() {\n        return qualification;\n    }\n\n    public void setQualification(String qualification) {\n        this.qualification = qualification;\n    }\n\n    public Nurse getNurse() {\n        return nurse;\n    }\n\n    public void setNurse(Nurse nurse) {\n        this.nurse = nurse;\n    }\n\n    @Override\n    public String toString() {\n        return \"Doctor{\" +\n                \"qualification='\" + qualification + '\\'' +\n                \", nurse=\" + nurse +\n                '}';\n    }\n}\n</code></pre> <p>3. Create a application context</p> <pre><code>ApplicationContext context = new ClassPathXmlApplicationContext(\"spring.xml\");\n\n// to create a bean\nDoctor doctor = context.getBean(Doctor.class);\n</code></pre>"},{"location":"notes-md/spring-boot/spring-basics/spring-beans/#using-class-based-configuration","title":"Using Class based configuration","text":"<ol> <li>create a config bean class</li> </ol> <pre><code>@Configuration\n@ComponentScan( basePackages = \"com.backend.springtok.entity\")\npublic class BeanConfig {\n\n    @Bean\n    public NewDoctor getNewDoctor() {\n        return new NewDoctor();\n    }\n\n}\n</code></pre> <p>2. Create class to construct bean of</p> <pre><code>@Scope(scopeName = \"singleton\")\n// you can define the any other scope like prototype as well\npublic class NewDoctor implements Staff, BeanNameAware {\n\n    private String qualification;\n\n    public void assist() {\n        System.out.println(\"new doctor is assisting\");\n    }\n\n    public String getQualification() {\n        return qualification;\n    }\n\n    public void setQualification(String qualification) {\n        this.qualification = qualification;\n    }\n\n    @Override\n    public String toString() {\n        return \"NewDoctor{\" +\n                \"qualification='\" + qualification + '\\'' +\n                '}';\n    }\n\n    @Override\n    public void setBeanName(String s) {\n        System.out.println(\"call for setBeanName\");\n    }\n\n    @PostConstruct\n    public void postConstruct(){\n        System.out.println(\"post construct called\");\n    }\n}\n</code></pre> <p>3. Add this to your <code>spring.xml</code> under the beans tag</p> <pre><code>&lt;context:component-scan base-package=\"com.backend.springtok\"/&gt;\n</code></pre> <p>4. Create application context to initialise and manage beans</p> <pre><code>ApplicationContext anotherContext = \n    new AnnotationConfigApplicationContext(BeanConfig.class);\n\nvar newDoctor = anotherContext.getBean(NewDoctor.class);\nnewDoctor.assist();\nnewDoctor.setQualification(\"MBBS++\");\nSystem.out.println(newDoctor);\n</code></pre> <p>Using the <code>javax.annotation.api</code> , we can annotate different methods at different bean life-cycle to execute some code. Example, in <code>NewDoctor</code> class in above example, we have <code>@PostContruct</code> method which is called after the bean is created by spring.</p> <pre><code>    @PostConstruct\n    public void postConstruct(){\n        System.out.println(\"post construct called\");\n    }\n</code></pre>"},{"location":"notes-md/spring-boot/spring-basics/spring-beans/#creating-a-protoptye-bean-inside-singleton-class","title":"Creating a protoptye bean inside singleton class","text":"<p>If you declare a prototype bean inside a singleton class, and create 2 different instance of singleton, there prototype bean will also be the same</p> <pre><code>// example : prototype\n\n@Service\n@Scope(\"prototype\")\npublic class WeatherService {\n\n    String time = LocalDateTime.now().toString();\n    int temp = new Random().nextInt(60);\n\n    public String getTodayTemp() {\n        return time + \" -&gt; \" + temp;\n    }\n}\n\n// service : singleton\n\n@Service\npublic class UserService {\n\n    @Autowired\n    WeatherService weatherService;\n\n    @Autowired\n    ApplicationContext context;\n\n    @Autowired\n    private ObjectFactory&lt;WeatherService&gt; wFactory;\n    // use this to create seperate beans for each singleton instance\n\n    public String getCurrentTemp() {\n        return weatherService.getTodayTemp();\n    }\n\n    public String getCurrentTempDiff() {\n        // not recommended\n        // return context.getBean(WeatherService.class).getTodayTemp();\n        return wFactory.getObject().getTodayTemp();\n    }\n\n}\n</code></pre>"},{"location":"notes-md/spring-boot/spring-boot-controller/","title":"Spring Boot Controller","text":""},{"location":"notes-md/spring-boot/spring-boot-controller/#controller","title":"<code>@Controller</code>","text":"<p>A simple version to annotate a class as controller</p> <ul> <li>You need to annotate <code>@ResponseBody</code> in front of the return type of member function.</li> </ul> <pre><code>@Controller\n@RequestMapping(\"books\")\npublic class SimpleBookController {\n    @GetMapping(\"/{id}\", produces = \"application/json\")\n    public @ResponseBody Book getBook(@PathVariable int id) {\n\n    }\n}\n</code></pre>"},{"location":"notes-md/spring-boot/spring-boot-controller/#restcontroller","title":"<code>@RestController</code>","text":"<p>Is a specialised version of the controller. It includes the <code>@Controller</code> and <code>@ResponseBody</code> annotation.</p> <ul> <li>No need to annotate return type with <code>@ResponseBody</code></li> </ul> <pre><code>@RestController\n@RequestMapping(\"books-rest\")\npublic class SimpleBookRestController {\n\n    @GetMapping(\"/{id}\", produces = \"application/json\")\n    public Book getBook(@PathVariable int id) {\n\n    }\n}\n</code></pre>"},{"location":"notes-md/spring-boot/spring-boot-controller/#requestmapping","title":"<code>@RequestMapping</code>","text":"<p>Helps the server to route requests to the controller classes specified in string parameter</p> <pre><code>@RequestMapping(\n  value = \"/ex/foos\", \n  method = RequestMethod.GET, \n  produces = \"application/json\"\n)\n</code></pre> <ul> <li>Fallback for all requests that didn't match</li> </ul> <pre><code>@RequestMapping(value = \"*\", method = RequestMethod.GET)\n</code></pre>"},{"location":"notes-md/spring-boot/spring-boot-controller/#requestbody","title":"<code>@RequestBody</code>","text":"<p>@RequestBody annotation maps the <code>HttpRequest</code> body to a transfer or domain object, enabling automatic de-serialisation. Spring automatically de-serialises the JSON into a Java type</p> <pre><code>@GetMapping(\"/{id}\", produces = \"application/json\")\npublic @ResponseBody Book getBook(@PathVariable int id) \n{\n\n}\n</code></pre>"},{"location":"notes-md/spring-boot/spring-boot-controller/#pathvariable","title":"<code>@PathVariable</code>","text":"<p>Used endpoint that identifies an entity with a primary key:</p> <pre><code>@GetMapping(\"/api/{id}\")\npublic String getEmployeesById(@PathVariable String id) \n{\n\n}\n</code></pre>"},{"location":"notes-md/spring-boot/spring-boot-controller/#pathvariable_1","title":"<code>@PathVariable</code>","text":"<p>Can be used to handle template variables in the request URI mapping</p> <pre><code>@GetMapping(\"/api/employees/{id}\")\n@ResponseBody\npublic String getEmployeesById(@PathVariable(\"id\") String id) {\n    return \"ID: \" + id;\n}\n\n-- Multiple PathVariable\n\n@GetMapping(\"/api/employees/{id}/{name}\")\n@ResponseBody\npublic String getEmployeesByIdAndName(\n    @PathVariable String id, @PathVariable String name) \n{\n\n}\n\n-- Capture PathVariable in MapString\n\n@GetMapping(\"/api/employeeswithmapvariable/{id}/{name}\")\n@ResponseBody\npublic String getEmployeesById(\n    @PathVariable Map&lt;String, String&gt; pathVarsMap) \n{\n\n}\n\n\n-- when PathVariable isnt required \n\n@GetMapping(value = { \"employees/\", \"employees/{id}\" })\n@ResponseBody\npublic String getEmployeesById(@PathVariable(required = false) String id) \n{\n\n}\n</code></pre>"},{"location":"notes-md/spring-boot/spring-boot-controller/#requestparam","title":"<code>@RequestParam</code>","text":"<pre><code>@PostMapping(\"/api/foos\")\n@ResponseBody\npublic String addFoo(@RequestParam(name = \"id\") String fooId, @RequestParam String name) \n{ \n\n}\n\nhttp://localhost:8080/api/foos?id=1&amp;name=uday\n\n-- Multiple RequestParam \n@GetMapping(\"/api/foos\")\n@ResponseBody\npublic String getFoos(@RequestParam List&lt;String&gt; id) {\n\n}\n\nhttp://localhost:8080/api/foos?id=1,2,3\n</code></pre>"},{"location":"notes-md/spring-boot/spring-boot-controller/#http-mapping","title":"HTTP Mapping","text":"<pre><code>-- @GetMapping(\"/get\")\n\npublic @ResponseBody ResponseEntity&lt;String&gt; get() {\n    return new ResponseEntity&lt;String&gt;(\"GET Response\", HttpStatus.OK);\n}\n\n-- @PostMapping\n@PostMapping(\"/post\")\npublic @ResponseBody ResponseEntity&lt;String&gt; post() {\n    return new ResponseEntity&lt;String&gt;(\"POST Response\", HttpStatus.OK);\n}\n\n-- @PutMapping\n@PutMapping(\"/put\")\npublic @ResponseBody ResponseEntity&lt;String&gt; put() {\n    return new ResponseEntity&lt;String&gt;(\"PUT Response\", HttpStatus.OK);\n}\n-- @DeleteMapping\n@DeleteMapping(\"/delete\")\npublic @ResponseBody ResponseEntity&lt;String&gt; delete() {\n    return new ResponseEntity&lt;String&gt;(\"DELETE Response\", HttpStatus.OK);\n}\n\n-- @PatchMapping\n@PatchMapping(\"/patch\")\npublic @ResponseBody ResponseEntity&lt;String&gt; patch() {\n    return new ResponseEntity&lt;String&gt;(\"PATCH Response\", HttpStatus.OK);\n}\n</code></pre>"},{"location":"notes-md/spring-boot/spring-boot-controller/#responseentity","title":"<code>@ResponseEntity</code>","text":"<p><code>ResponseEntity</code> represents the whole HTTP response: status code, headers, and body. As a result, we can use it to fully configure the HTTP response.</p> <ul> <li>mention the return type of a function as <code>ResponseEntity&lt;T&gt;</code>, cannot be null</li> <li>takes</li> <li><code>HTTPStatusCode</code></li> <li>Object to be returned</li> </ul> <pre><code>@GetMapping(\"/hello\")\nResponseEntity&lt;String&gt; hello() {\n    return new ResponseEntity&lt;&gt;(\"Hello World!\", HttpStatus.OK);\n}\n</code></pre>"},{"location":"notes-md/spring-boot/spring-boot-controller/response-entity-exception-handling/","title":"Response Entity Exception Handling","text":"<ul> <li>mark the class with <code>ControllerAdvice</code> and <code>ResponseStatus</code></li> <li>The class should extend <code>ResponseEntityExceptionHandler</code></li> <li>Annotate the member function with <code>@ExceptionHandler(T.class)</code> where T is the custom exception class</li> <li>Make sure to include <code>String message</code> and <code>Integer statusCode</code> in the custom exception.</li> <li>Example</li> </ul> <pre><code>@ControllerAdvice\n@ResponseStatus\npublic class RestResponseEntityExceptionHandler extends ResponseEntityExceptionHandler \n{\n\n    @ExceptionHandler(DepartmentExceptions.class)\n    public ResponseEntity&lt;ErrorMessage&gt; \n        departmentException(DepartmentExceptions exception) \n    {\n\n        Integer exceptionStatus = exception.getStatusCode();\n\n        if (exceptionStatus == 404) {\n            ErrorMessage message =\n                new ErrorMessage(HttpStatus.NOT_FOUND, exception.getMessage());\n\n            return ResponseEntity.status(HttpStatus.CREATED).body(message);\n        }\n    }\n\n}\n</code></pre>"},{"location":"notes-md/spring-boot/spring-data/","title":"Spring Data","text":""},{"location":"notes-md/spring-boot/spring-data/jdbc/","title":"JDBC","text":""},{"location":"notes-md/spring-boot/spring-data/jdbc/#pomxml","title":"pom.xml","text":"<pre><code>&lt;!-- for jdbc --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;\n    &lt;artifactId&gt;spring-boot-starter-data-jdbc&lt;/artifactId&gt;\n&lt;/dependency&gt;\n\n&lt;!-- for migrations of table to db --&gt;\n&lt;dependency&gt;\n    &lt;groupId&gt;org.flywaydb&lt;/groupId&gt;\n    &lt;artifactId&gt;flyway-core&lt;/artifactId&gt;\n&lt;/dependency&gt;\n</code></pre>"},{"location":"notes-md/spring-boot/spring-data/jdbc/#configuration-for-postgresql","title":"Configuration for PostgreSQL","text":"<pre><code>// FOR JDBC\napp:\n  datasource:\n    main:\n      driver-class-name: org.postgresql.Driver\n      jdbc-url: jdbc:postgresql://[host]:[port]/[db name]\n      username: [username]\n      password: [password]\n      pool-size: [pool size]\n\nserver:\n  error:\n    include-binding-errors: always\n    include-message: always\n</code></pre>"},{"location":"notes-md/spring-boot/spring-data/jdbc/#for-flyway-migration","title":"For flyway migration","text":"<ul> <li>If you are using Flyway for db migration, create a folder <code>db/migrations</code> inside resource folder</li> <li>Name the migration <code>V[number]__[name of migration].sql</code></li> <li>Example : <code>V1__InitTables.sql</code></li> </ul>"},{"location":"notes-md/spring-boot/spring-data/jdbc/#configuring-hikaridatasource","title":"Configuring <code>HikariDataSource</code>","text":"<pre><code>@Configuration\npublic class DataSouceConfig {\n\n    @Bean\n    @Primary\n    // to get the required environment variable from configuration\n    @ConfigurationProperties(prefix = \"app.datasource.main\")\n    public HikariDataSource hikariDataSource() {\n        return DataSourceBuilder.create()\n        .type(HikariDataSource.class).build();\n    }\n\n    @Bean\n    public JdbcTemplate jdbcTemplate(HikariDataSource hikariDataSource) {\n        return new JdbcTemplate(hikariDataSource);\n    }\n\n}\n</code></pre>"},{"location":"notes-md/spring-boot/spring-data/jdbc/#queries","title":"Queries","text":"<pre><code>// select statement\nString sql = \"SELECT * FROM table;\";\nreturn jdbcTemplate.query(sql, new TRowMapper());\n\n// insert statement\nString sql = \"\"\"insert into table (col1, col2) values (?, ?);\"\"\";\nreturn jdbcTemplate.update(sql, value1, value2);\n\n// delete statement\nreturn jdbcTemplate.update(\"delete from table where id = ?\", id);\n\n// with condition\nString sql = \"SELECT * FROM table where id = ?;\";\nList&lt;T&gt; movies = jdbcTemplate.query(sql, new TRowMapper(), id);\nreturn movies.stream().findFirst();\n</code></pre>"},{"location":"notes-md/spring-boot/spring-data/jdbc/#rowmappert","title":"<code>RowMapper&lt;T&gt;</code>","text":"<pre><code>public class TRowMapper implements RowMapper&lt;T&gt; {\n\n    @Override\n    public T mapRow(ResultSet rs, int rowNum) throws SQLException {\n        return new Movie(\n            rs.getInt(\"id\"), rs.getString(\"column_name\"), List.of(),\n            LocalDate.parse(rs.getString(\"column_name\"))\n        );\n    }\n}\n</code></pre>"},{"location":"notes-md/spring-boot/spring-data/redis/","title":"Redis","text":""},{"location":"notes-md/spring-boot/spring-data/redis/#redis-with-spring-boot","title":"Redis with Spring Boot","text":"<pre><code>@Configuration\n@EnableRedisRepositories\npublic class RedisConfig {\n\n    // configuration for connection\n    @Bean\n    public JedisConnectionFactory connectionFactory() {\n        RedisStandaloneConfiguration configuration = new RedisStandaloneConfiguration();\n        // load from properties\n        configuration.setHostName(\"localhost\");\n        configuration.setPort(6379);\n        return new JedisConnectionFactory(configuration);\n    }\n\n    // configuration for using redis with java\n    @Bean\n    public RedisTemplate&lt;String, Object&gt; redisTemplate() {\n        RedisTemplate&lt;String, Object&gt; template = new RedisTemplate&lt;&gt;();\n        template.setConnectionFactory(connectionFactory());\n        template.setKeySerializer(new StringRedisSerializer());\n        template.setHashKeySerializer(new StringRedisSerializer());\n        template.setHashKeySerializer(new JdkSerializationRedisSerializer());\n        template.setValueSerializer(new JdkSerializationRedisSerializer());\n        template.setEnableTransactionSupport(true);\n        template.afterPropertiesSet();\n        return template;\n    }\n\n}\n</code></pre>"},{"location":"notes-md/spring-boot/spring-data/redis/#making-class-compatible-with-redis","title":"Making class compatible with redis","text":"<ul> <li>Annotate class with : <code>@RedisHash(\"Product\")</code></li> <li>Implement with <code>Serializable</code> interface</li> </ul>"},{"location":"notes-md/spring-boot/spring-data/redis/#using-redis-as-docstore","title":"Using Redis as DocStore","text":"<ul> <li>As <code>docstore</code> because it gives the ability with to search and operate on values</li> <li>To add obj to Redis with id as identifier</li> </ul> <pre><code>redisTemplate.opsForHash().put(HASH_KEY, product.getId(), product);\n</code></pre> <ul> <li>To get all values of obj</li> </ul> <pre><code>redisTemplate.opsForHash().values(HASH_KEY);\n</code></pre> <ul> <li>To get document by id</li> </ul> <pre><code>redisTemplate.opsForHash().get(HASH_KEY, id);\n</code></pre> <ul> <li>To delete obj with id</li> </ul> <pre><code>redisTemplate.opsForHash().delete(HASH_KEY, id);\n</code></pre>"},{"location":"notes-md/spring-boot/spring-data/redis/#enable-caching-at-controller-level","title":"Enable caching at controller level","text":"<ul> <li>Annotate with <code>@EnableCaching</code></li> <li>To enable caching at method level</li> </ul> <pre><code>@Cacheable( key = \"#{id}\", value = \"HASH_KEY\", unless = \"#result.{field}&gt;{value}\" )\n</code></pre> <ul> <li>To remove obj from cache when delete from db</li> </ul> <pre><code>@CacheEvict(key = \"#{id}\", value = \"HASH_KEY\")\n</code></pre> <ul> <li>To update obj from cache when delete from db</li> </ul> <pre><code>@CachePut(key = \"#{id}\", value = \"HASH_KEY\")\n</code></pre>"},{"location":"notes-md/spring-boot/spring-data/redis/#redistemplate-for-pubsub","title":"RedisTemplate for Pub/Sub","text":"<pre><code>@Bean\npublic RedisTemplate&lt;String,Object&gt; template() {\n    RedisTemplate&lt;String, Object&gt; template = new RedisTemplate&lt;&gt;();\n    template.setConnectionFactory(connectionFactory());\n    template.setValueSerializer(new GenericToStringSerializer&lt;Object&gt;(Object.class));\n    return template;\n}\n\n@Bean\npublic ChannelTopic topic() {\n    return new ChannelTopic(\"pubsub:dev117uday\");\n}\n\n@Bean\npublic MessageListenerAdapter messageListenerAdapter() {\n    return new MessageListenerAdapter(new Receiver());\n}\n\n@Bean\npublic RedisMessageListenerContainer redisMessageListenerContainer( ) {\n    RedisMessageListenerContainer container = new RedisMessageListenerContainer();\n    container.setConnectionFactory(connectionFactory());\n    container.addMessageListener(messageListenerAdapter(), topic());\n    return container;\n}\n</code></pre>"},{"location":"notes-md/spring-boot/spring-data/redis/#redis-stream-publisher-template","title":"Redis Stream Publisher template","text":"<pre><code>Gson gson = new Gson();\nvar json = gson.toJson(new Users(\"1\", \"1\", \"1\"));       \nredisTemplate.convertAndSend(topic.getTopic(), json );\n</code></pre>"},{"location":"notes-md/spring-boot/spring-data/redis/#redis-stream-subscriber-template","title":"Redis Stream Subscriber template","text":"<pre><code>public class RedisReceiver implements MessageListener {\n\n    Logger logger = LoggerFactory.getLogger(RedisReceiver.class);\n\n    @Override\n    public void onMessage(Message message, byte[] pattern) {\n        try {\n            var messageString = getObject(message.getBody());\n            Gson gson = new Gson();\n            var user = gson.fromJson((String) messageString, Users.class);\n            logger.info(\"Consumed event {}\", user.toString());\n        } catch (ClassNotFoundException | IOException e) {\n            e.printStackTrace();\n        }\n\n    }\n\n    private static Object getObject(byte[] byteArr) throws IOException, ClassNotFoundException {\n        ByteArrayInputStream bis = new ByteArrayInputStream(byteArr);\n        ObjectInput in = new ObjectInputStream(bis);\n        return in.readObject();\n    }\n\n}\n</code></pre>"},{"location":"notes-md/spring-boot/spring-data/spring-data-jpa/","title":"Spring Data JPA","text":""},{"location":"notes-md/spring-boot/spring-data/spring-data-jpa/#configuration","title":"Configuration","text":"<pre><code>// FOR JPA\nspring:\n  datasource:\n    url: jdbc:postgresql://[host]:[port]/[db name]\n    username: username\n    password: [password]\n\n  jpa:\n   hibernate.ddl-auto: update\n   show-sql: true\n   properties:\n     hibernate:\n       dialect: org.hibernate.dialect.PostgreSQLDialect\n</code></pre>"},{"location":"notes-md/spring-boot/spring-data/spring-data-jpa/#embedded","title":"Embedded","text":"<pre><code>@Embedded\nprivate AnotherClass anotherClass;\n\n// another class\n\n@AttributeOverrides({\n        @AttributeOverride(name = \"something [in db]\", \n        column = @Column(name = \"something_field\")),\n})\npublic class AnotherClass {\n    private String somethingField;\n}\n</code></pre>"},{"location":"notes-md/spring-boot/spring-data/spring-data-jpa/#onetoone","title":"OneToOne","text":"<pre><code>// example : class course one to one with courseMaterial\n// course model\n@OneToOne(mappedBy = \"course\")\nprivate CourseMaterial courseMaterial;\n\n// courseMaterial model\n@OneToOne(\n    cascade = CascadeType.ALL,\n    fetch = FetchType.LAZY\n)\n@JoinColumn(\n    name = \"course_id\",\n    referencedColumnName = \"courseId\"\n)\nprivate Course course;\n</code></pre>"},{"location":"notes-md/spring-boot/spring-data/spring-data-jpa/#onetomany-manytoone","title":"<code>OneToMany</code> &amp; <code>ManyToOne</code>","text":"<pre><code>// one teacher can teach many course\n// one course can be taught by many teachers\n\n// teacher class\n@OneToMany(cascade = CascadeType.ALL)\n@JoinColumn(name = \"teacher_id\", referencedColumnName = \"teacherId\")\nprivate List&lt;Course&gt; courses;\n\n// course class\n@ManyToOne(cascade = CascadeType.ALL)\n@JoinColumn(name = \"teacher_id\", referencedColumnName = \"teacherId\")\nprivate Teacher teacher;\n</code></pre>"},{"location":"notes-md/spring-boot/spring-data/spring-data-jpa/#manytomany","title":"<code>ManyToMany</code>","text":"<pre><code>// many students can take many courses\n\n@ManyToMany(\n    cascade = CascadeType.ALL\n)\n@JoinTable(\n    name = \"student_course_map\", \n    joinColumns = @JoinColumn(\n        name = \"course_id\", \n        referencedColumnName = \"courseId\"\n    ), \n    inverseJoinColumns = @JoinColumn(\n        name = \"student_id\", \n        referencedColumnName = \"studentId\"\n    )\n)\nprivate List&lt;Student&gt; students;\n</code></pre>"},{"location":"notes-md/spring-boot/spring-data/spring-data-jpa/#qualifier","title":"<code>@Qualifier(\"\")</code>","text":"<ul> <li>You can mark a component with name, ex : <code>@Component(\"fakedao\")</code> and when performing dependency injection, you can specifies which component to exactly inject, ex : <code>@Qualifier(\"fakedao\")</code></li> </ul> <pre><code>@Autowired\npublic PersonService(@Qualifier(\"fakeDao\") PersonDao personDao) {\n    this.personDao = personDao;\n}\n</code></pre>"},{"location":"notes-md/spring-boot/spring-data/spring-data-jpa/#repository-interface","title":"Repository Interface","text":"<pre><code>@Repository\npublic interface TRepository extends JpaRepository&lt;T, Long&gt; {\n\n}\n</code></pre>"},{"location":"notes-md/spring-boot/spring-data/spring-data-jpa/#example-repository","title":"Example Repository","text":"<pre><code>@Repository\npublic interface StudentRepository extends JpaRepository&lt;Student, Long&gt; {\n\n    List&lt;Student&gt; findByFirstName(String firstName);\n\n    // JPQL-native\n    @Query(value = \"select * from tbl_student s where s.email_address = ?1\", nativeQuery = true)\n    Student getStudentByEmailAddressNative(String emailId);\n\n    // JPQL\n    @Query(\"select s from Student s where s.emailId = ?1\")\n    Student findStudentByEmail(String emailId);\n\n    // Native Named Param\n    @Query (\n        value = \"select * from tbl_student s where s.email_address = :emailId\",\n        nativeQuery = true\n    )\n    Student getStudentByEmailAddressNativeNamed(@Param(\"emailId\") String emailId);\n\n    @Modifying\n    @Transactional\n    @Query (\n        value = \"update tbl_student set first_name = ?1 where email_address = ?2\",\n        nativeQuery = true\n    )\n    Integer updatStudentEmailIdByFirstName(String firstName, String emailId);\n}\n</code></pre>"},{"location":"notes-md/spring-boot/spring-data/spring-data-jpa/#pagination-and-sorting-repo","title":"Pagination and Sorting Repo","text":"<pre><code>@Repository\npublic interface PersonPageRepository extends PagingAndSortingRepository&lt;Person, Integer&gt; {\n}\n\n\npublic Page&lt;Person&gt; findAll(@RequestParam int page, @RequestParam int size) {\n    PageRequest pr = PageRequest.of(page,size);\n    return repository.findAll(pr);\n}\n</code></pre>"},{"location":"notes-md/tools/","title":"Tools and Tech","text":""},{"location":"notes-md/tools/docker/","title":"Docker","text":"<p>Image naming structure : <code>remote_location/username/image_name</code> | ex : <code>docker.io/nginx/nginx</code></p>"},{"location":"notes-md/tools/docker/#docker-basic-commands","title":"Docker basic commands","text":"<ul> <li>remove container</li> <li><code>docker rm -vf $(docker ps -a -q)</code></li> <li>remove all images</li> <li><code>docker rmi -f $(docker images -a -q)</code></li> <li>runs the container from image, gets it from the docker hub</li> <li>if not found locally</li> <li><code>docker run [image]</code></li> <li>to list info of containers, -a for more</li> <li><code>docker ps [-a]</code></li> <li>stop running container</li> <li><code>docker stop [container]</code></li> <li>remove container</li> <li><code>docker rm [container]</code></li> <li>list all images</li> <li><code>docker images</code></li> <li>remove the image, note all container running of this image</li> <li>should be removed first</li> <li><code>docker rmi [image name]</code></li> <li>to download image from remote, not run it immediately</li> <li><code>docker pull</code></li> <li>docker stop is no process is running, sleep will delay the stop process`</li> <li><code>docker run [container] sleep 5</code></li> <li>to execute a process inside a docker container</li> <li><code>docker exec [container] [command to run]</code></li> <li>to run the docker in de-attach mode, that means it will be in put in background</li> <li><code>docker run -d [container]</code></li> <li>to attach to the output of the container</li> <li><code>docker attach [container]</code></li> <li><code>docker run [container]:[version]</code></li> <li>to interact with the terminal of the container, only input</li> <li><code>docker run -i [container]</code></li> <li>to interact with the terminal of the container, both input and output</li> <li><code>docker run -it [container]</code></li> <li>to attach you system's port to the port open inside the container</li> <li><code>docker run -p 80:5000 [container]</code></li> <li>create new volume</li> <li><code>docker volume create data_volume</code></li> <li>to save persistent data on disk for it to not get deleted in case the container is deleted</li> <li>path to directory on your system : ex : <code>/opt/datadir</code></li> <li>path to directory on the container : ex : <code>/var/lib/mysql</code> </li> </ul> <pre><code>docker run -v \\\n  [path to directory on your system]:[path to directory on the container] \\\n [container]\n\ndocker run -v [volume name]:[path to directory on the container] [container]\n\n# or\n\ndocker run \\\n    --mount type=bind,source=[volume],target=[volume insider container] \\\n    [container name]\n</code></pre> <ul> <li>to get info about a container in JSON format</li> <li><code>docker inspect [container]</code></li> <li>to get logging info</li> <li><code>docker logs [container]</code></li> <li>to specify environment variable when running a container</li> <li><code>docker run -e [ENV_KEY]=[ENV_VALUE] [container]</code></li> </ul>"},{"location":"notes-md/tools/docker/#steps-to-create-your-own-images","title":"Steps to create your own images","text":"<p>Create a file name <code>Dockerfile</code></p> <ul> <li>specify OS</li> <li>update the packages of OS</li> <li>install dependency using apt</li> <li>install python dependencies using pip</li> <li>copy source code into the image</li> <li>start the process</li> </ul> <p>This instructions take place in layered architecture, changes made to one layer will only effect the same layer in the next build</p> <p>To get all info about build : <code>docker history [image]</code></p> <pre><code>#  to build the image\ndocker build Dockerfile -t [tag name]\n\n# to save img to remote\ndocker push [tag name]\n</code></pre> <p>Sample <code>Dockerfile</code></p> <pre><code>FROM [os]\n\nRUN [some command]\n\nCOPY [code]\n\nENTYRPOINT [instruction to start the process]\n</code></pre>"},{"location":"notes-md/tools/docker/#networking-in-docker","title":"Networking in Docker","text":"<p>There are 3 network in docker</p> <ul> <li>Bridge : network within the docker host, for inter-container communication</li> <li>Host : network to expose the containers to the OS</li> <li>None : specify <code>--network=none</code></li> </ul> <p>You can find bridge network info for a given container using inspect command</p> <p>To create custom bridge ( user defined network )</p> <pre><code>docker network create \\\\\n    --driver bridge \\\\\n    --subnet[subnet]/16 \n    [bridge network name]\n\n# to list all network\ndocker network ls\n</code></pre>"},{"location":"notes-md/tools/docker/#embedded-dns","title":"Embedded DNS","text":"<p>Docker host contains a internal DNS resolver for different containers to communicate to each other. In place of URL, just add the name of the container you want to communicate to.</p>"},{"location":"notes-md/tools/git-github/","title":"Git version Control","text":""},{"location":"notes-md/tools/git-github/#basic-and-git-configuration","title":"Basic and Git Configuration","text":"<ul> <li>version : <code>git --version</code></li> <li>git directory [ Linux ] : <code>which git</code></li> </ul>"},{"location":"notes-md/tools/git-github/#setting-your-user-name-and-email","title":"Setting your user name and email :","text":"<ul> <li>You need to set who you are before creating any commit. That will allow commits to have the right author name and email associated to them.</li> </ul> <pre><code>$ git config --global user.name \"Your Name\"\n$ git config --global user.email mail@example.com\n</code></pre> <ul> <li>Remove a global identity :</li> </ul> <pre><code>$ git config --global --remove-section user.name\n$ git config --global --remove-section user.email\n</code></pre>"},{"location":"notes-md/tools/git-github/#basic-commands","title":"Basic Commands","text":"<ul> <li>Create an empty Git repository:</li> <li><code>git init</code> . This creates a hidden folder, .git , which contains the plumbing needed for Git to work.</li> <li>Check status : <code>git status</code></li> <li>Adding files to staging area :</li> <li><code>git add &lt;directory/filename&gt;</code> [ for single file ]</li> <li><code>git add .</code> or <code>git add --all</code> [ for all changed files ]</li> <li>Commit all files :</li> <li><code>git commit</code> [this opens your Git's default code editor]</li> <li>To commit files with short message :</li> <li><code>git commit -m \"commit msg\"</code></li> <li>To add the remote location of git :</li> <li><code>git remote add origin https://&lt;your-git-service-address&gt;/owner/repository.git</code></li> <li>Cloning a Repo :</li> <li><code>git clone https://github.com/username/projectname.git</code></li> <li>To specify a different name of the directory, example <code>MyFolder</code> :</li> <li><code>git clone https://github.com/username/projectname.git MyFolder</code></li> <li>To clone in current directory :</li> <li><code>git clone https://github.com/username/projectname.git .</code></li> <li>To push your code to upstream :</li> <li><code>git push --set-upstream origin main</code> or <code>git push origin</code></li> <li>Check the remote names:</li> <li><code>git remote -v</code></li> <li>To get help about any command :</li> <li><code>git &lt;command&gt; --help</code></li> <li>Create alias commands :</li> <li><code>git config --global alias.mylog \"log --decorate --oneline --graph\"</code></li> <li>To run : <code>git mylog</code></li> </ul> <p>To see the last two commit, becoz revert doesnt delete the faulty commit, it roles back head while keeping the fault.</p>"},{"location":"notes-md/tools/git-github/#logging","title":"Logging","text":"<ul> <li>To view log :</li> <li><code>git log</code></li> <li><code>git log --stat</code> [ for detailed view ]</li> <li>To view log more beautifully :</li> <li><code>git log --decorate --oneline --graph</code></li> <li>To see commit using commit id</li> <li><code>git show &lt;commit id&gt;</code></li> </ul>"},{"location":"notes-md/tools/git-github/#working-with-remote-repositories","title":"Working with Remote Repositories","text":"<ul> <li>List remote location :</li> <li><code>git remote -v</code></li> <li>If a remote branch has been deleted, your local repository has to be told to prune the reference to it</li> <li><code>git fetch [remote-name] --prune</code></li> <li>Updating from Upstream Repository</li> </ul> <pre><code>git fetch remote-name\ngit merge remote-name/branch-name\n</code></pre> <ul> <li>The pull command combines a fetch and a merge : <code>git pull</code></li> <li><code>git pull --rebase remote-name branch-name</code></li> <li>Syntax for pushing to a remote branch :</li> <li><code>git push &lt;remote_name&gt; &lt;branch_name&gt;</code></li> <li>Rename remote :</li> <li><code>git remote rename origin destination</code></li> </ul>"},{"location":"notes-md/tools/git-github/#diff-patch","title":"Diff &amp; Patch","text":""},{"location":"notes-md/tools/git-github/#patch","title":"Patch","text":"<ul> <li>In order to patch the changes</li> <li><code>patch code1.js &lt; change.diff</code></li> </ul>"},{"location":"notes-md/tools/git-github/#logging-details-about-commits","title":"Logging details about commits","text":"<ul> <li>To commit all files without going through git add</li> <li><code>git commit -a -m \"commit message\"</code></li> <li>To get more details about the project</li> <li><code>git log -p</code></li> <li>to see patch file to another commit, we use commit id</li> <li><code>git show b09ddf8a0000055f50386f1aa938f4b8a7b43b0c</code></li> <li>to get stats about your commits</li> <li><code>git log --stat</code></li> <li>to see details while adding</li> <li><code>git add -p</code></li> <li>to see details on last n commit (example of 2)</li> <li><code>git log -p -2</code></li> </ul>"},{"location":"notes-md/tools/git-github/#file-management","title":"File Management","text":"<ul> <li>to rename file that is being tracked by git</li> <li><code>git mv old_file_name new_file_name</code></li> <li>to delete a file use :</li> <li><code>git rm file_to_be_delete</code></li> <li>to revert change of a file, use :</li> <li><code>git checkout file_name</code></li> <li>to remove a file from being tracked by git, use :</li> <li><code>git reset HEAD file_name</code></li> <li>to change the commit msg/ or to overwrite last commit:</li> <li><code>git commit --amend</code></li> <li>to revert HEAD :</li> <li><code>git revert HEAD</code></li> <li>to see details on last n commit (example of 2)</li> <li><code>git log -p -2</code></li> </ul>"},{"location":"notes-md/tools/git-github/#rebase","title":"Rebase","text":"<p>Rebase is a way in which you put all commits of a branch and add in on top of another branch ( assuming no conflicts ).</p> <ul> <li>Command, execute this from branch to which is added on top, specify the brach on which in the command</li> <li><code>git rebase [branch name to rebase onto]</code></li> </ul> <p>git rebase diagram</p>"},{"location":"notes-md/tools/git-github/#stash","title":"Stash","text":"<ul> <li>to save to stash</li> <li><code>git stash save \"stash message\"</code></li> <li>to list stashes</li> <li><code>git stash list</code></li> <li>to bring back to stash</li> <li><code>git stash apply stash@{0}</code></li> <li>to remove the top stash</li> <li><code>git stash pop</code></li> </ul>"},{"location":"notes-md/tools/git-github/#cherry-pick","title":"Cherry Pick","text":"<p>git cherry pick</p> <p>To pick one commit from another branch and then place it on top of another branch</p> <pre><code># to cherry pick\n$ git cherry-pick @commit-id\n\n# to cherry pick but without commiting the changes\n$ git cherry-pick @commit-id -n\n</code></pre>"},{"location":"notes-md/tools/nvim/","title":"Neovim shortcuts","text":"<ul> <li>to change theme : <code>space+t+h</code></li> </ul>"},{"location":"notes-md/tools/nvim/#shortcuts-for-nvim","title":"Shortcuts for nvim","text":"<ul> <li>to open filetree : <code>ctrl+n</code></li> <li>to mark/unmark file : <code>m</code></li> <li>create a new file : <code>a</code></li> <li>copy file : <code>c</code></li> <li>paste file : <code>p</code></li> <li>rename file : <code>r</code></li> <li>delete file : <code>d</code></li> </ul>"},{"location":"notes-md/tools/nvim/#shortcut-for-file-search","title":"Shortcut for file search","text":"<ul> <li>find file : <code>space + f + f</code></li> <li>To open cheatsheet for commands : <code>space+c+h</code></li> </ul>"},{"location":"notes-md/tools/nvim/#config-nvim","title":"Config nvim","text":"<ul> <li><code>~/.config/nvim/lua/custom</code></li> <li>chadrc.lua</li> <li>init.lua</li> </ul>"},{"location":"timeline/2021/","title":"Year 2021","text":""},{"location":"timeline/2021/#january","title":"January","text":"<ul> <li>Applied for Ethereum India fellowship 2.0 </li> <li>Practical from <code>6th Jan</code> to <code>16th Jan</code> </li> <li>Got confirmation mail and interview mail for fellowship </li> <li>Interview on <code>18th</code> for Ethereum India fellowship India </li> <li>Someone added my notes to their documentation :smiley:  </li> <li>Left DSC web team lead on <code>22nd Jan</code> </li> <li>Got confirmation for the Ethereum India program on <code>23rd Jan</code></li> </ul>"},{"location":"timeline/2021/#february","title":"February","text":"<ul> <li><code>1 Feb</code> : Ethereum India Fellowship kick-off </li> <li><code>2nd Feb</code> :Birthday </li> <li><code>1st week of Feb</code> : Exams and eth-fellowship task 1 </li> <li><code>13th</code> :Exams ended </li> <li>Worked with ethereum fellowship till the end of feb </li> <li>Participated in ether-punk 2021, submitted the project of eth_address as NFT </li> </ul>"},{"location":"timeline/2021/#march","title":"March","text":"<ul> <li>Attend a lot of useful sessions organized by fellowship </li> <li>Received my first stipend :fire: !! </li> <li>Organized DSC ADGITM orientation for first year </li> <li>Started working on SolvePao :} </li> <li>Started working on GSoc project with bench-routes </li> <li>Organized Web team interaction with first year </li> <li>Started working on project deepchain </li> <li>stopped working on gsoc's bench-routes </li> <li>stopped working on solvepao for now ..- worked on project deepchain </li> <li>started learning c# and blazor</li> </ul>"},{"location":"timeline/2021/#april","title":"April","text":"<ul> <li>finalizing ethereum fellowship project </li> <li>documenting and blogging </li> <li>digital clean-up </li> <li>start learning c# and blazor </li> <li>Health Break </li> </ul>"},{"location":"timeline/2021/#may","title":"May","text":"<ul> <li>Health Break </li> <li>Started Java and spring boot </li> <li>College work </li> <li>Revising Data Structures </li> <li>Working more with Golang</li> </ul>"},{"location":"timeline/2021/#june","title":"June","text":"<ul> <li>More working with Golang </li> <li>College .....</li> </ul>"},{"location":"timeline/2021/#july","title":"July","text":"<ul> <li>ASP.net CORE </li> <li>PostgreSQL course </li> <li>Bajaj Fintech Hackathon </li> <li>C# </li> <li>PostgreSQL course</li> </ul>"},{"location":"timeline/2021/#august","title":"August","text":"<ul> <li>MongoDB course from mongodb university </li> <li>PostgreSQL course </li> <li>.net WebAPI </li> <li>Articles </li> </ul>"},{"location":"timeline/2021/#september","title":"September","text":"<ul> <li>MongoDB course  </li> <li>PostgreSQL course </li> <li>Gate Prep </li> <li>started training for 30 days of GCP</li> </ul>"},{"location":"timeline/2021/#october","title":"October","text":"<ul> <li>Cloud Facililator for 30 days of GCP \ud83d\ude42 </li> <li>Nominated as Github Campus Expert \ud83e\udd20 </li> <li>Gate Prep  </li> </ul>"},{"location":"timeline/2021/#novemeber","title":"Novemeber","text":"<ul> <li>Complete training for Github Campus Expert \ud83e\udd20 </li> <li>Gate Prep  </li> <li>Polishing Java </li> <li>Learning Spring Boot and JPA</li> </ul>"},{"location":"timeline/2021/#december","title":"December","text":"<ul> <li>Worked on React Hooks </li> <li>Gate Prep  </li> <li>Practising DSA </li> <li>Learning Spring Boot and JPA </li> </ul>"},{"location":"timeline/learned/","title":"Timeline : Things i tried learning","text":""},{"location":"timeline/learned/#2019","title":"2019","text":"<ul> <li>May : C++ (continuing school) </li> <li>July-August : Python3 and Git (got my laptop) </li> <li>August : HTML, CSS, JS (For making portfolio site)  </li> <li>September ; Electronics, Robotics and C (for eyantra robotics competition) </li> <li>October : Matlab and Octave programming (robotics competition) </li> <li>October - November : Django and mySQL (gettting started with web development) </li> <li>November : Robotics, Octave, Mathemodelling (robotics competition)</li> </ul>"},{"location":"timeline/learned/#2020","title":"2020","text":"<ul> <li>January : Django, SQL  (web development) </li> <li>February : Electronics and C++ (robotics competition) </li> <li>March : JS and firebase (changing web development stack) </li> <li>April : Nodejs, MongoDB (liked M-E-N stack with vanillajs) </li> <li>May : Angular, Reactjs, Vuejs (tried react and angular, but vuejs was much better and easier to use) </li> <li>May : MEVN and firebase (used firebase for blob storage and auth) </li> <li>May - June : tried learning Rust, Go and Julia (thought experiment, got bored from js) </li> <li>June : Rust, MongoDB (Thought rust is the future) </li> <li>July : Go and SQL (Rust was too difficult) </li> <li>August : MEVN and Go (MEVN for project, started loving Go) </li> <li>October : Docker and GCP (30 days of GCP) </li> <li>November : C# and Go, docker (needed for static language) </li> <li>December : Python3 and C# (python for hackathon, liked C#)</li> </ul>"},{"location":"timeline/learned/#2021","title":"2021","text":"<ul> <li>January : Java and Go (C# was windows centric mostly, love linux)</li> <li>February : spring boot, Go and Solidity (Ethereum india fellowship) </li> <li>March : NGINX, Docker, Go | Project deepchain (polishing devops) </li> <li>April : started learning java and spring boot (side-line go) </li> <li>May : java and revising Data Structures </li> <li>June : Polishing Golang </li> <li>July : Dotnet and Data Structures and PostgreSQL </li> <li>August : PostgreSQL, Mongodb course, net WebAPI </li> <li>September : Databases, Gate Prep, Data Structures and Algorithms </li> <li>October : 30 days of GCP, Github Campus Expert, Java, Spring Boot </li> <li>November : ate Prep, Github Campus Expert, Java, Spring Boot </li> <li>December : React, Java, Spring Boot</li> </ul>"},{"location":"timeline/learned/#2022","title":"2022","text":"<ul> <li>January : Java Spring Boot and JPA </li> <li>February : Spring Boot, JPA and Microservices</li> <li>March : Spring Boot, Azure</li> <li>April : Spring Boot, MongoDB, Redis</li> <li>May : Spring Boot, Interview Prep</li> <li>June : Cloud, Linux, Google Cloud Sprint Bootcamp</li> </ul>"}]}